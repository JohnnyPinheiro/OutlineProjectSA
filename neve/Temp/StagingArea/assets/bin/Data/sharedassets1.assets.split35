/Instruction 46172
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 46173
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 46174
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 46175
    //NE
    tb30 = t28!=0.0;
    //Instruction 46176
    //LOG
    t4.x = log2(t28);
    //Instruction 46177
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 46178
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 46179
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 46180
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46181
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46182
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 46183
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 46184
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46185
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 46186
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46187
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 46188
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 46189
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 46190
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46191
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 46192
    //MUL
    t28 = t28 * t30;
    //Instruction 46193
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 46194
    //MOV
    t4.y = t3.y;
    //Instruction 46195
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 46196
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46197
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 46198
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 46199
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 46200
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 46201
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 46202
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 46203
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 46204
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 46205
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 46206
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 46207
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 46208
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 46209
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 46210
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 46211
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 46212
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 46213
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 46214
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 46215
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 46216
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 46217
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 46218
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 46219
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 46220
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 46221
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 46222
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 46223
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 46224
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 46225
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 46226
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 46227
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 46228
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 46229
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 46230
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 46231
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 46232
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 46233
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 46234
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 46235
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 46236
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 46237
    //MOV
    t0.w = 1.0;
    //Instruction 46238
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 46239
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 46240
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 46241
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 46242
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 46243
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 46244
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 46245
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 46246
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 46247
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 46248
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 46249
    //MOV
    gl_Position = t2;
    //Instruction 46250
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46251
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 46252
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 46253
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 46254
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 46255
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46256
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 46257
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 46007
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 46008
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 46009
    //MOV
    t1.x = t16_0.x;
    //Instruction 46010
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 46011
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46012
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46013
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46014
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46015
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 46016
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 46017
    //LT
    tb1 = t10_2<0.0;
    //Instruction 46018
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46019
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 46020
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 46021
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 46022
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 46023
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 46024
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 46025
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 46026
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 46027
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 46028
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46029
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 46030
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46031
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46032
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 46033
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 46034
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 46035
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 46036
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46037
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_67;
  tmpvar_67.x = tmpvar_66.x;
  tmpvar_67.y = (tmpvar_66.y * _ProjectionParams.x);
  o_65.xy = (tmpvar_67 + tmpvar_66.w);
  o_65.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_68;
  v_68.x = _World2Object[0].x;
  v_68.y = _World2Object[1].x;
  v_68.z = _World2Object[2].x;
  v_68.w = _World2Object[3].x;
  highp vec4 v_69;
  v_69.x = _World2Object[0].y;
  v_69.y = _World2Object[1].y;
  v_69.z = _World2Object[2].y;
  v_69.w = _World2Object[3].y;
  highp vec4 v_70;
  v_70.x = _World2Object[0].z;
  v_70.y = _World2Object[1].z;
  v_70.z = _World2Object[2].z;
  v_70.w = _World2Object[3].z;
  highp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = normalize(((
    (v_68.xyz * tmpvar_14.x)
   + 
    (v_69.xyz * tmpvar_14.y)
  ) + (v_70.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_72;
  mediump vec4 normal_73;
  normal_73 = tmpvar_71;
  mediump vec3 x2_74;
  mediump vec3 x1_75;
  x1_75.x = dot (unity_SHAr, normal_73);
  x1_75.y = dot (unity_SHAg, normal_73);
  x1_75.z = dot (unity_SHAb, normal_73);
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_76);
  x2_74.y = dot (unity_SHBg, tmpvar_76);
  x2_74.z = dot (unity_SHBb, tmpvar_76);
  tmpvar_72 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + x1_75);
  tmpvar_7 = tmpvar_72;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_60;
  xlv_TEXCOORD4 = o_65;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_16.w;
  light_3.xyz = (tmpvar_16.xyz + xlv_TEXCOORD6);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 46052
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46053
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 46054
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 46055
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 46056
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 46057
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 46058
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 46059
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 46060
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 46061
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 46062
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 46063
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46064
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 46065
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 46066
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 46067
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46068
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 46069
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 46070
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 46071
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 46072
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 46073
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 46074
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 46075
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 46076
    //FRC
    t3.x = fract(t3.x);
    //Instruction 46077
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 46078
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 46079
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 46080
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 46081
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 46082
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 46083
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 46084
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 46085
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 46086
    //IF
    if(tb30){
        //Instruction 46087
        //IF
        if(tb28){
            //Instruction 46088
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46089
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 46090
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 46091
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 46092
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 46093
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 46094
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46095
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46096
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46097
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 46098
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 46099
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 46100
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46101
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 46102
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 46103
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 46104
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46105
            //FRC
            t2 = fract(t2);
            //Instruction 46106
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46107
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 46108
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46109
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46110
            //ADD
            t2 = t2 + t2;
            //Instruction 46111
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 46112
            //LT
            tb30 = t6.w<0.0;
            //Instruction 46113
            //MOV
            t6.y = (-t6.w);
            //Instruction 46114
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 46115
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 46116
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 46117
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 46118
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 46119
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 46120
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 46121
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46122
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46123
            //MUL
            t32 = t2.x * t32;
            //Instruction 46124
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 46125
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46126
            //MUL
            t30 = t30 * t31;
            //Instruction 46127
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 46128
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 46129
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46130
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46131
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46132
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 46133
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 46134
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46135
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 46136
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46137
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 46138
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 46139
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 46140
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 46141
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46142
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 46143
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 46144
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 46145
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46146
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 46147
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 46148
        //ELSE
        } else {
            //Instruction 46149
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46150
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46151
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46152
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 46153
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 46154
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 46155
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46156
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 46157
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 46158
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46159
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46160
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46161
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 46162
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46163
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46164
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 46165
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 46166
            //LT
            tb0 = t2.w<0.0;
            //Instruction 46167
            //MOV
            t2.y = (-t2.w);
            //Instruction 46168
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 46169
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 46170
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 46171
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 46172
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 46173
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 46174
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 46175
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46176
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46177
            //MUL
            t30 = t30 * t5.x;
            //Instruction 46178
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 46179
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 46180
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 46181
        //ENDIF
        }
        //Instruction 46182
    //ENDIF
    }
    //Instruction 46183
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 46184
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 46185
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 46186
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 46187
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 46188
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 46189
    //NE
    tb30 = t28!=0.0;
    //Instruction 46190
    //LOG
    t4.x = log2(t28);
    //Instruction 46191
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 46192
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 46193
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 46194
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46195
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46196
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 46197
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 46198
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46199
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 46200
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46201
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 46202
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 46203
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 46204
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46205
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 46206
    //MUL
    t28 = t28 * t30;
    //Instruction 46207
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 46208
    //MOV
    t4.y = t3.y;
    //Instruction 46209
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 46210
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46211
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 46212
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 46213
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 46214
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 46215
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 46216
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 46217
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 46218
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 46219
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 46220
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 46221
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 46222
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 46223
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 46224
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 46225
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 46226
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 46227
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 46228
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 46229
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 46230
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 46231
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 46232
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 46233
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 46234
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 46235
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 46236
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 46237
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 46238
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 46239
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 46240
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 46241
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 46242
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 46243
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 46244
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 46245
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 46246
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 46247
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 46248
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 46249
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 46250
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 46251
    //MOV
    t0.w = 1.0;
    //Instruction 46252
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 46253
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 46254
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 46255
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 46256
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 46257
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 46258
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 46259
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 46260
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 46261
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 46262
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 46263
    //MOV
    gl_Position = t2;
    //Instruction 46264
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46265
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 46266
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 46267
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 46268
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 46269
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46270
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 46271
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 46022
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 46023
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 46024
    //MOV
    t1.x = t16_0.x;
    //Instruction 46025
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 46026
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46027
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46028
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46029
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46030
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 46031
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 46032
    //LT
    tb1 = t10_2<0.0;
    //Instruction 46033
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46034
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 46035
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 46036
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 46037
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 46038
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 46039
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 46040
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 46041
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 46042
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 46043
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46044
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 46045
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46046
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46047
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 46048
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 46049
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 46050
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46051
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_67;
  tmpvar_67.x = tmpvar_66.x;
  tmpvar_67.y = (tmpvar_66.y * _ProjectionParams.x);
  o_65.xy = (tmpvar_67 + tmpvar_66.w);
  o_65.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_68;
  v_68.x = _World2Object[0].x;
  v_68.y = _World2Object[1].x;
  v_68.z = _World2Object[2].x;
  v_68.w = _World2Object[3].x;
  highp vec4 v_69;
  v_69.x = _World2Object[0].y;
  v_69.y = _World2Object[1].y;
  v_69.z = _World2Object[2].y;
  v_69.w = _World2Object[3].y;
  highp vec4 v_70;
  v_70.x = _World2Object[0].z;
  v_70.y = _World2Object[1].z;
  v_70.z = _World2Object[2].z;
  v_70.w = _World2Object[3].z;
  highp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = normalize(((
    (v_68.xyz * tmpvar_14.x)
   + 
    (v_69.xyz * tmpvar_14.y)
  ) + (v_70.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_72;
  mediump vec4 normal_73;
  normal_73 = tmpvar_71;
  mediump vec3 x2_74;
  mediump vec3 x1_75;
  x1_75.x = dot (unity_SHAr, normal_73);
  x1_75.y = dot (unity_SHAg, normal_73);
  x1_75.z = dot (unity_SHAb, normal_73);
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_76);
  x2_74.y = dot (unity_SHBg, tmpvar_76);
  x2_74.z = dot (unity_SHBb, tmpvar_76);
  tmpvar_72 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + x1_75);
  tmpvar_7 = tmpvar_72;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_60;
  xlv_TEXCOORD4 = o_65;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 46947
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46948
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 46949
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 46950
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 46951
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 46952
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 46953
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 46954
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 46955
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 46956
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 46957
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 46958
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46959
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 46960
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 46961
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 46962
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46963
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 46964
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 46965
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 46966
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 46967
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 46968
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 46969
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 46970
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 46971
    //FRC
    t3.x = fract(t3.x);
    //Instruction 46972
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 46973
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 46974
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 46975
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 46976
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 46977
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 46978
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 46979
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 46980
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 46981
    //IF
    if(tb30){
        //Instruction 46982
        //IF
        if(tb28){
            //Instruction 46983
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46984
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 46985
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 46986
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 46987
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 46988
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 46989
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46990
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46991
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46992
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 46993
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 46994
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 46995
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46996
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 46997
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 46998
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 46999
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47000
            //FRC
            t2 = fract(t2);
            //Instruction 47001
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47002
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 47003
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47004
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47005
            //ADD
            t2 = t2 + t2;
            //Instruction 47006
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 47007
            //LT
            tb30 = t6.w<0.0;
            //Instruction 47008
            //MOV
            t6.y = (-t6.w);
            //Instruction 47009
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 47010
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 47011
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 47012
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 47013
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 47014
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 47015
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 47016
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47017
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47018
            //MUL
            t32 = t2.x * t32;
            //Instruction 47019
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 47020
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47021
            //MUL
            t30 = t30 * t31;
            //Instruction 47022
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 47023
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 47024
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47025
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47026
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47027
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 47028
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 47029
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47030
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 47031
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47032
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 47033
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 47034
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 47035
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 47036
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47037
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 47038
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 47039
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 47040
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47041
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 47042
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 47043
        //ELSE
        } else {
            //Instruction 47044
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47045
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47046
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47047
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47048
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 47049
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 47050
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47051
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 47052
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 47053
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47054
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47055
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47056
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 47057
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47058
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47059
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 47060
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 47061
            //LT
            tb0 = t2.w<0.0;
            //Instruction 47062
            //MOV
            t2.y = (-t2.w);
            //Instruction 47063
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 47064
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 47065
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 47066
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 47067
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 47068
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 47069
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 47070
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47071
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47072
            //MUL
            t30 = t30 * t5.x;
            //Instruction 47073
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 47074
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 47075
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 47076
        //ENDIF
        }
        //Instruction 47077
    //ENDIF
    }
    //Instruction 47078
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 47079
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 47080
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47081
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 47082
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 47083
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 47084
    //NE
    tb30 = t28!=0.0;
    //Instruction 47085
    //LOG
    t4.x = log2(t28);
    //Instruction 47086
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 47087
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 47088
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 47089
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47090
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47091
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 47092
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 47093
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47094
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 47095
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47096
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 47097
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 47098
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 47099
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47100
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 47101
    //MUL
    t28 = t28 * t30;
    //Instruction 47102
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 47103
    //MOV
    t4.y = t3.y;
    //Instruction 47104
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 47105
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 47106
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 47107
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 47108
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 47109
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 47110
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 47111
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 47112
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 47113
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 47114
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 47115
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 47116
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 47117
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 47118
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 47119
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 47120
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 47121
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 47122
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 47123
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 47124
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 47125
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 47126
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 47127
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 47128
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 47129
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 47130
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 47131
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 47132
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 47133
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 47134
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 47135
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 47136
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 47137
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 47138
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 47139
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 47140
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 47141
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 47142
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 47143
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 47144
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 47145
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 47146
    //MOV
    t0.w = 1.0;
    //Instruction 47147
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 47148
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 47149
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 47150
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 47151
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 47152
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 47153
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 47154
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 47155
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 47156
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 47157
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 47158
    //MOV
    gl_Position = t2;
    //Instruction 47159
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 47160
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 47161
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 47162
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 47163
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 47164
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47165
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 47166
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 46916
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 46917
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 46918
    //MOV
    t1.x = t16_0.x;
    //Instruction 46919
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 46920
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46921
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46922
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46923
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46924
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 46925
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 46926
    //LT
    tb1 = t10_2<0.0;
    //Instruction 46927
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46928
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 46929
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 46930
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 46931
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 46932
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 46933
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 46934
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 46935
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 46936
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 46937
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46938
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 46939
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46940
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46941
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 46942
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 46943
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 46944
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 46945
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46946
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_67;
  tmpvar_67.x = tmpvar_66.x;
  tmpvar_67.y = (tmpvar_66.y * _ProjectionParams.x);
  o_65.xy = (tmpvar_67 + tmpvar_66.w);
  o_65.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_68;
  v_68.x = _World2Object[0].x;
  v_68.y = _World2Object[1].x;
  v_68.z = _World2Object[2].x;
  v_68.w = _World2Object[3].x;
  highp vec4 v_69;
  v_69.x = _World2Object[0].y;
  v_69.y = _World2Object[1].y;
  v_69.z = _World2Object[2].y;
  v_69.w = _World2Object[3].y;
  highp vec4 v_70;
  v_70.x = _World2Object[0].z;
  v_70.y = _World2Object[1].z;
  v_70.z = _World2Object[2].z;
  v_70.w = _World2Object[3].z;
  highp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = normalize(((
    (v_68.xyz * tmpvar_14.x)
   + 
    (v_69.xyz * tmpvar_14.y)
  ) + (v_70.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_72;
  mediump vec4 normal_73;
  normal_73 = tmpvar_71;
  mediump vec3 x2_74;
  mediump vec3 x1_75;
  x1_75.x = dot (unity_SHAr, normal_73);
  x1_75.y = dot (unity_SHAg, normal_73);
  x1_75.z = dot (unity_SHAb, normal_73);
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_76);
  x2_74.y = dot (unity_SHBg, tmpvar_76);
  x2_74.z = dot (unity_SHBb, tmpvar_76);
  tmpvar_72 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + x1_75);
  tmpvar_7 = tmpvar_72;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_60;
  xlv_TEXCOORD4 = o_65;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_16.w;
  light_3.xyz = (tmpvar_16.xyz + xlv_TEXCOORD6);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
mediump vec4 t16_4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 46288
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46289
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 46290
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 46291
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 46292
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 46293
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 46294
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 46295
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 46296
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 46297
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 46298
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 46299
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46300
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 46301
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 46302
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 46303
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46304
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 46305
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 46306
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 46307
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 46308
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 46309
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 46310
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 46311
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 46312
    //FRC
    t3.x = fract(t3.x);
    //Instruction 46313
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 46314
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 46315
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 46316
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 46317
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 46318
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 46319
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 46320
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 46321
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 46322
    //IF
    if(tb30){
        //Instruction 46323
        //IF
        if(tb28){
            //Instruction 46324
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46325
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 46326
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 46327
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 46328
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 46329
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 46330
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46331
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46332
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46333
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 46334
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 46335
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 46336
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46337
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 46338
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 46339
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 46340
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46341
            //FRC
            t2 = fract(t2);
            //Instruction 46342
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46343
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 46344
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46345
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46346
            //ADD
            t2 = t2 + t2;
            //Instruction 46347
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 46348
            //LT
            tb30 = t6.w<0.0;
            //Instruction 46349
            //MOV
            t6.y = (-t6.w);
            //Instruction 46350
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 46351
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 46352
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 46353
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 46354
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 46355
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 46356
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 46357
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46358
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46359
            //MUL
            t32 = t2.x * t32;
            //Instruction 46360
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 46361
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46362
            //MUL
            t30 = t30 * t31;
            //Instruction 46363
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 46364
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 46365
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46366
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46367
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46368
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 46369
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 46370
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46371
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 46372
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46373
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 46374
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 46375
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 46376
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 46377
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46378
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 46379
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 46380
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 46381
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46382
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 46383
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 46384
        //ELSE
        } else {
            //Instruction 46385
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46386
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46387
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46388
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 46389
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 46390
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 46391
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46392
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 46393
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 46394
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46395
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46396
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46397
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 46398
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46399
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46400
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 46401
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 46402
            //LT
            tb0 = t2.w<0.0;
            //Instruction 46403
            //MOV
            t2.y = (-t2.w);
            //Instruction 46404
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 46405
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 46406
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 46407
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 46408
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 46409
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 46410
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 46411
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46412
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46413
            //MUL
            t30 = t30 * t5.x;
            //Instruction 46414
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 46415
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 46416
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 46417
        //ENDIF
        }
        //Instruction 46418
    //ENDIF
    }
    //Instruction 46419
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 46420
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 46421
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 46422
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 46423
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 46424
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 46425
    //NE
    tb30 = t28!=0.0;
    //Instruction 46426
    //LOG
    t4.x = log2(t28);
    //Instruction 46427
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 46428
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 46429
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 46430
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46431
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46432
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 46433
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 46434
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46435
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 46436
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46437
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 46438
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 46439
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 46440
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46441
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 46442
    //MUL
    t28 = t28 * t30;
    //Instruction 46443
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 46444
    //MOV
    t4.y = t3.y;
    //Instruction 46445
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 46446
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 46447
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 46448
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 46449
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 46450
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 46451
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 46452
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 46453
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 46454
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 46455
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 46456
    //MUL
    t2.xyz = t3.xyz * t4.xyz;
    //Instruction 46457
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 46458
    //ADD
    t5.xy = t2.zz + t2.xw;
    //Instruction 46459
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 46460
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 46461
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 46462
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 46463
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 46464
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 46465
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 46466
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 46467
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 46468
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 46469
    //MUL
    t0.xyz = t4.xyz * t2.xyw;
    //Instruction 46470
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 46471
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 46472
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 46473
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 46474
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 46475
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 46476
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 46477
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 46478
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 46479
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 46480
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 46481
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 46482
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 46483
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 46484
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 46485
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 46486
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 46487
    //MOV
    t0.w = 1.0;
    //Instruction 46488
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 46489
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 46490
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 46491
    //MUL
    t16_4 = t0.yzzx * t0.xyzz;
    //Instruction 46492
    //DP4
    t16_8.x = dot(unity_SHBr, t16_4);
    //Instruction 46493
    //DP4
    t16_8.y = dot(unity_SHBg, t16_4);
    //Instruction 46494
    //DP4
    t16_8.z = dot(unity_SHBb, t16_4);
    //Instruction 46495
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 46496
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 46497
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 46498
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 46499
    //MOV
    gl_Position = t2;
    //Instruction 46500
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46501
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 46502
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 46503
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 46504
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 46505
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46506
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 46507
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 46258
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 46259
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 46260
    //MOV
    t1.x = t16_0.x;
    //Instruction 46261
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 46262
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46263
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46264
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46265
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46266
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 46267
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 46268
    //LT
    tb1 = t10_2<0.0;
    //Instruction 46269
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46270
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 46271
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 46272
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 46273
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 46274
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 46275
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 46276
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 46277
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 46278
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 46279
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46280
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 46281
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46282
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46283
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 46284
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 46285
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 46286
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46287
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_96;
  hPos_96 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_97;
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (hPos_96 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = hPos_96.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  screenPos_97 = tmpvar_101;
  screenPos_97.xy = (screenPos_97.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_11.x)
   + 
    (v_106.xyz * tmpvar_11.y)
  ) + (v_107.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_7 = tmpvar_109;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_97;
  xlv_TEXCOORD4 = o_102;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
mediump vec3 t16_15;
highp vec3 t17;
highp int ti17;
highp vec3 t18;
bool tb18;
highp vec3 t23;
highp float t33;
bool tb33;
highp vec2 t36;
highp float t37;
highp vec2 t38;
highp float t49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
mediump float t16_62;
void main()
{
    //Instruction 46294
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46295
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 46296
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 46297
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46298
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 46299
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 46300
    //DP3
    t33 = dot(t2.xyz, t2.xyz);
    //Instruction 46301
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 46302
    //MUL
    t2.xyz = vec3(t33) * t2.xyz;
    //Instruction 46303
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 46304
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 46305
    //LT
    tb33 = t16_0<5.000000;
    //Instruction 46306
    //AND
    ti17 = int(uint(tb33) & uint(tb1.y));
    //Instruction 46307
    //IF
    if((uint(ti17))!=uint(0u)){
        //Instruction 46308
        //ADD
        t17.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 46309
        //EQ
        tb33 = t16_0==4.000000;
        //Instruction 46310
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 46311
        //MOVC
        t4.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 46312
        //ADD
        t17.x = t17.x + t4.x;
        //Instruction 46313
        //ADD
        t17.x = t17.x + 0.500000;
        //Instruction 46314
        //FRC
        t17.x = fract(t17.x);
        //Instruction 46315
        //MAD
        t17.x = t17.x * 2.000000 + -1.0;
        //Instruction 46316
        //MUL
        t50 = abs(t17.x) * abs(t17.x);
        //Instruction 46317
        //MAD
        t17.x = -abs(t17.x) * 2.000000 + 3.000000;
        //Instruction 46318
        //MAD
        t17.x = t50 * t17.x + -0.500000;
        //Instruction 46319
        //DP2
        t17.x = dot(t17.xx, t4.yy);
        //Instruction 46320
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 46321
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 46322
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 46323
        //MUL
        t4.xyz = t17.xxx * t4.xyz;
        //Instruction 46324
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 46325
        //IF
        if(tb33){
            //Instruction 46326
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 46327
            //FRC
            t4 = fract(t4);
            //Instruction 46328
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46329
            //MOVC
            t5 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 46330
            //MOVC
            t17.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 46331
            //MUL
            t50 = t4.w * 3.000000;
            //Instruction 46332
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 46333
            //MAD
            t6.x = t5.x * 0.750000 + (-t50);
            //Instruction 46334
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 46335
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 46336
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46337
            //MUL
            t38.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 46338
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46339
            //MAD
            t6.xy = t38.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 46340
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 46341
            //DP3
            t50 = dot(t3.xyz, t3.xyz);
            //Instruction 46342
            //SQRT
            t50 = sqrt(t50);
            //Instruction 46343
            //MAD
            t51 = t6.x * t6.x + t6.y;
            //Instruction 46344
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 46345
            //MUL
            t51 = t51 * t5.x;
            //Instruction 46346
            //SINCOS
            t5.x = sin(t51);
            t7.x = cos(t51);
            //Instruction 46347
            //ADD
            t51 = (-t7.x) + 1.0;
            //Instruction 46348
            //MUL
            t8 = t4.xxxy * vec4(t51);
            //Instruction 46349
            //MUL
            t23.xyz = t4.zxy * t5.xxx;
            //Instruction 46350
            //MAD
            t9.xy = t8.zy * t4.zy + t23.zx;
            //Instruction 46351
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 46352
            //MAD
            t9.z = t8.w * t4.z + (-t23.y);
            //Instruction 46353
            //MAD
            t11.xy = t8.yz * t4.yz + (-t23.xz);
            //Instruction 46354
            //MAD
            t11.z = t8.w * t4.z + t23.y;
            //Instruction 46355
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 46356
            //MAD
            t11.w = t5.x * t51 + t7.x;
            //Instruction 46357
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 46358
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 46359
            //DP3
            t18.x = dot(t2.xyz, t4.xyz);
            //Instruction 46360
            //MAX
            t18.x = max(t18.x, -1.0);
            //Instruction 46361
            //MIN
            t18.x = min(t18.x, 1.0);
            //Instruction 46362
            //ADD
            t7.w = t18.x + t7.y;
            //Instruction 46363
            //DP3
            t51 = dot(t7.xzw, t7.xzw);
            //Instruction 46364
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 46365
            //MUL
            t4.xyz = vec3(t51) * t7.zxw;
            //Instruction 46366
            //ADD
            t51 = -abs(t18.x) + 1.0;
            //Instruction 46367
            //SQRT
            t51 = sqrt(t51);
            //Instruction 46368
            //MAD
            t5.x = abs(t18.x) * -0.018729 + 0.074261;
            //Instruction 46369
            //MAD
            t5.x = t5.x * abs(t18.x) + -0.212114;
            //Instruction 46370
            //MAD
            t5.x = t5.x * abs(t18.x) + 1.570729;
            //Instruction 46371
            //MUL
            t37 = t51 * t5.x;
            //Instruction 46372
            //MAD
            t37 = t37 * -2.000000 + 3.141593;
            //Instruction 46373
            //LT
            tb18 = t18.x<(-t18.x);
            //Instruction 46374
            //AND
            t18.x = tb18 ? t37 : float(0.0);
            //Instruction 46375
            //MAD
            t18.x = t5.x * t51 + t18.x;
            //Instruction 46376
            //MAD
            t51 = (-t6.y) * t6.y + t6.x;
            //Instruction 46377
            //MAD
            t6.x = t4.w * 3.000000 + t17.z;
            //Instruction 46378
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 46379
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 46380
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 46381
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46382
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 46383
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46384
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 46385
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 46386
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 46387
            //MAD
            t49 = t49 * t5.x + 1.0;
            //Instruction 46388
            //MUL
            t49 = t49 * 0.500000;
            t49 = clamp(t49, 0.0, 1.0);
            //Instruction 46389
            //LOG
            t49 = log2(t49);
            //Instruction 46390
            //MUL
            t33 = t49 * t17.y;
            //Instruction 46391
            //EXP
            t33 = exp2(t33);
            //Instruction 46392
            //MUL
            t49 = t5.y * t51;
            //Instruction 46393
            //MAD
            t49 = t18.x * t5.w + t49;
            //Instruction 46394
            //MAD
            t17.x = t17.x * t33 + t49;
            //Instruction 46395
            //MUL
            t17.x = t17.x * in_TEXCOORD2.x;
            //Instruction 46396
            //SINCOS
            t5.x = sin(t17.x);
            t6.x = cos(t17.x);
            //Instruction 46397
            //ADD
            t17.x = (-t6.x) + 1.0;
            //Instruction 46398
            //MUL
            t7 = vec4(t4.y * t17.x, t4.y * t17.x, t4.y * t17.x, t4.z * t17.x);
            //Instruction 46399
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 46400
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 46401
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 46402
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 46403
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 46404
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 46405
            //MUL
            t33 = t4.x * t4.x;
            //Instruction 46406
            //MAD
            t8.w = t33 * t17.x + t6.x;
            //Instruction 46407
            //MOV
            t10.z = t11.x;
            //Instruction 46408
            //MOV
            t10.w = t9.x;
            //Instruction 46409
            //MOV
            t12.z = t8.y;
            //Instruction 46410
            //MOV
            t12.w = t13.y;
            //Instruction 46411
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 46412
            //MOV
            t13.w = t12.y;
            //Instruction 46413
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 46414
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 46415
            //MOV
            t9.w = t10.y;
            //Instruction 46416
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 46417
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 46418
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 46419
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 46420
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 46421
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 46422
            //DP3
            t17.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 46423
            //DP3
            t17.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 46424
            //DP3
            t17.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 46425
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 46426
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 46427
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 46428
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 46429
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 46430
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 46431
            //MUL
            t3.xyz = vec3(t50) * t4.xyz;
            //Instruction 46432
        //ELSE
        } else {
            //Instruction 46433
            //MOV
            t17.xyz = in_NORMAL0.xyz;
            //Instruction 46434
        //ENDIF
        }
        //Instruction 46435
    //ELSE
    } else {
        //Instruction 46436
        //MOV
        t17.xyz = in_NORMAL0.xyz;
        //Instruction 46437
    //ENDIF
    }
    //Instruction 46438
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 46439
    //GE
    tb18 = t16_0>=3.000000;
    //Instruction 46440
    //IF
    if(tb18){
        //Instruction 46441
        //EQ
        tb18 = t16_0==5.000000;
        //Instruction 46442
        //IF
        if(tb18){
            //Instruction 46443
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46444
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 46445
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 46446
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 46447
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 46448
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 46449
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46450
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46451
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46452
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 46453
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 46454
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 46455
            //ADD
            t0.x = t18.x + in_TEXCOORD0.w;
            //Instruction 46456
            //MAD
            t0.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46457
            //MUL
            t50 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 46458
            //MUL
            t0.z = t50 * 0.500000;
            //Instruction 46459
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 46460
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46461
            //FRC
            t0 = fract(t0);
            //Instruction 46462
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46463
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 46464
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46465
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46466
            //ADD
            t0 = t0 + t0;
            //Instruction 46467
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 46468
            //LT
            tb50 = t6.w<0.0;
            //Instruction 46469
            //MOV
            t6.y = (-t6.w);
            //Instruction 46470
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 46471
            //MOVC
            t6.xy = (bool(tb50)) ? t6.xy : t6.zw;
            //Instruction 46472
            //MAD
            t50 = (-t0.y) * t0.z + t6.x;
            //Instruction 46473
            //MAD
            t50 = t6.y * t50 + t6.w;
            //Instruction 46474
            //ADD
            t51 = (-t50) + t6.x;
            //Instruction 46475
            //MAD
            t50 = t6.y * t51 + t50;
            //Instruction 46476
            //MUL
            t50 = t50 * _ST_WindBranchTwitch.x;
            //Instruction 46477
            //ADD
            t51 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46478
            //ADD
            t52 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46479
            //MUL
            t52 = t0.x * t52;
            //Instruction 46480
            //MAD
            t50 = t50 * t51 + t52;
            //Instruction 46481
            //MAD
            t51 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46482
            //MUL
            t50 = t50 * t51;
            //Instruction 46483
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 46484
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 46485
            //MAD
            t6.x = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46486
            //MUL
            t18.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46487
            //MAD
            t6.y = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46488
            //ADD
            t18.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 46489
            //FRC
            t18.xz = fract(t18.xz);
            //Instruction 46490
            //MAD
            t18.xz = t18.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46491
            //MUL
            t6.xy = abs(t18.xz) * abs(t18.xz);
            //Instruction 46492
            //MAD
            t18.xz = -abs(t18.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46493
            //MAD
            t18.xz = t6.xy * t18.xz + vec2(-0.500000, -0.500000);
            //Instruction 46494
            //ADD
            t18.xz = t18.xz + t18.xz;
            //Instruction 46495
            //MUL
            t18.xz = t18.xz * t18.xz;
            //Instruction 46496
            //MUL
            t18.x = t18.x * t18.z;
            //Instruction 46497
            //MAD
            t18.x = (-t18.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46498
            //MUL
            t50 = t0.w * _ST_WindVector.w;
            //Instruction 46499
            //MAD
            t18.x = t50 * _ST_WindBranchWhip.x + t18.x;
            //Instruction 46500
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 46501
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46502
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 46503
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 46504
        //ELSE
        } else {
            //Instruction 46505
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46506
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 46507
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46508
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 46509
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 46510
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 46511
            //ADD
            t5.x = t18.x + in_TEXCOORD0.w;
            //Instruction 46512
            //MAD
            t5.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46513
            //MUL
            t18.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 46514
            //MUL
            t5.z = t18.x * 0.500000;
            //Instruction 46515
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46516
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46517
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46518
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 46519
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46520
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46521
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 46522
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 46523
            //LT
            tb18 = t0.w<0.0;
            //Instruction 46524
            //MOV
            t0.y = (-t0.w);
            //Instruction 46525
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 46526
            //MOVC
            t18.xz = (bool(tb18)) ? t0.xy : t0.zw;
            //Instruction 46527
            //MAD
            t51 = (-t5.y) * t5.z + t18.x;
            //Instruction 46528
            //MAD
            t51 = t18.z * t51 + t0.w;
            //Instruction 46529
            //ADD
            t18.x = t18.x + (-t51);
            //Instruction 46530
            //MAD
            t18.x = t18.z * t18.x + t51;
            //Instruction 46531
            //MUL
            t18.x = t18.x * _ST_WindBranchTwitch.x;
            //Instruction 46532
            //ADD
            t50 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46533
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46534
            //MUL
            t51 = t51 * t5.x;
            //Instruction 46535
            //MAD
            t18.x = t18.x * t50 + t51;
            //Instruction 46536
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 46537
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 46538
        //ENDIF
        }
        //Instruction 46539
    //ENDIF
    }
    //Instruction 46540
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 46541
    //SQRT
    t18.x = sqrt(t18.x);
    //Instruction 46542
    //DIV
    t50 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 46543
    //MAD
    t50 = (-t50) * 0.250000 + t3.y;
    //Instruction 46544
    //MAX
    t50 = max(t50, 0.0);
    //Instruction 46545
    //MUL
    t50 = t50 * _ST_WindGlobal.z;
    //Instruction 46546
    //NE
    tb51 = t50!=0.0;
    //Instruction 46547
    //LOG
    t4.x = log2(t50);
    //Instruction 46548
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 46549
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 46550
    //MOVC
    t50 = (tb51) ? t4.x : t50;
    //Instruction 46551
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46552
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46553
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 46554
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 46555
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46556
    //MUL
    t36.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 46557
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46558
    //MAD
    t4.xy = t36.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 46559
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 46560
    //MAD
    t51 = t4.y * t4.y + t4.x;
    //Instruction 46561
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46562
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t4.x;
    //Instruction 46563
    //MUL
    t50 = t50 * t51;
    //Instruction 46564
    //MAD
    t4.xz = t2.xz * vec2(t50) + t3.xz;
    //Instruction 46565
    //MOV
    t4.y = t3.y;
    //Instruction 46566
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 46567
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 46568
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 46569
    //MUL
    t2.xyz = t18.xxx * t2.xzw;
    //Instruction 46570
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 46571
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 46572
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 46573
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 46574
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 46575
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 46576
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 46577
    //MUL
    t0.xyz = t3.xyz * t4.xyz;
    //Instruction 46578
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 46579
    //ADD
    t5.xy = t0.zz + t0.xw;
    //Instruction 46580
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 46581
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 46582
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 46583
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 46584
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 46585
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 46586
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 46587
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 46588
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 46589
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 46590
    //MUL
    t2.xyz = t4.xyz * t0.xyw;
    //Instruction 46591
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 46592
    //ADD
    vs_TEXCOORD4.xy = t2.zz + t2.xw;
    //Instruction 46593
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 46594
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 46595
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 46596
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 46597
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 46598
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 46599
    //MUL
    t4.xyz = t17.yyy * t4.xyz;
    //Instruction 46600
    //MAD
    t1.xyz = t2.xyz * t17.xxx + t4.xyz;
    //Instruction 46601
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 46602
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 46603
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 46604
    //MAD
    t1.xyz = t2.xyz * t17.zzz + t1.xyz;
    //Instruction 46605
    //DP3
    t49 = dot(t1.xyz, t1.xyz);
    //Instruction 46606
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 46607
    //MUL
    t1.xyz = vec3(t49) * t1.xyz;
    //Instruction 46608
    //MOV
    t1.w = 1.0;
    //Instruction 46609
    //DP4
    t16_14.x = dot(unity_SHAr, t1);
    //Instruction 46610
    //DP4
    t16_14.y = dot(unity_SHAg, t1);
    //Instruction 46611
    //DP4
    t16_14.z = dot(unity_SHAb, t1);
    //Instruction 46612
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 46613
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 46614
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 46615
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 46616
    //MUL
    t16_62 = t1.y * t1.y;
    //Instruction 46617
    //MAD
    t16_62 = t1.x * t1.x + (-t16_62);
    //Instruction 46618
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_62) + t16_15.xyz;
    //Instruction 46619
    //ADD
    t16_14.xyz = t16_14.xyz + t16_15.xyz;
    //Instruction 46620
    //MOV
    gl_Position = t0;
    //Instruction 46621
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46622
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 46623
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 46624
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 46625
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 46626
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46627
    //MOV
    vs_TEXCOORD6.xyz = t16_14.xyz;
    //Instruction 46628
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 46272
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 46273
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 46274
    //MOV
    t1.x = t16_0.x;
    //Instruction 46275
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 46276
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46277
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46278
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46279
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46280
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 46281
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 46282
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46283
    //LT
    tb1 = t10_2<0.0;
    //Instruction 46284
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46285
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 46286
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46287
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46288
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 46289
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 46290
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 46291
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 46292
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46293
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_96;
  hPos_96 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_97;
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (hPos_96 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = hPos_96.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  screenPos_97 = tmpvar_101;
  screenPos_97.xy = (screenPos_97.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_104;
  tmpvar_104.x = tmpvar_103.x;
  tmpvar_104.y = (tmpvar_103.y * _ProjectionParams.x);
  o_102.xy = (tmpvar_104 + tmpvar_103.w);
  o_102.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = normalize(((
    (v_105.xyz * tmpvar_11.x)
   + 
    (v_106.xyz * tmpvar_11.y)
  ) + (v_107.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_109;
  mediump vec4 normal_110;
  normal_110 = tmpvar_108;
  mediump vec3 x2_111;
  mediump vec3 x1_112;
  x1_112.x = dot (unity_SHAr, normal_110);
  x1_112.y = dot (unity_SHAg, normal_110);
  x1_112.z = dot (unity_SHAb, normal_110);
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_113);
  x2_111.y = dot (unity_SHBg, tmpvar_113);
  x2_111.z = dot (unity_SHBb, tmpvar_113);
  tmpvar_109 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + x1_112);
  tmpvar_7 = tmpvar_109;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_97;
  xlv_TEXCOORD4 = o_102;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
mediump vec3 t16_15;
highp vec3 t17;
highp int ti17;
highp vec3 t18;
bool tb18;
highp vec3 t23;
highp float t33;
bool tb33;
highp vec2 t36;
highp float t37;
highp vec2 t38;
highp float t49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
mediump float t16_62;
void main()
{
    //Instruction 47188
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47189
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 47190
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 47191
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47192
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 47193
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 47194
    //DP3
    t33 = dot(t2.xyz, t2.xyz);
    //Instruction 47195
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 47196
    //MUL
    t2.xyz = vec3(t33) * t2.xyz;
    //Instruction 47197
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 47198
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 47199
    //LT
    tb33 = t16_0<5.000000;
    //Instruction 47200
    //AND
    ti17 = int(uint(tb33) & uint(tb1.y));
    //Instruction 47201
    //IF
    if((uint(ti17))!=uint(0u)){
        //Instruction 47202
        //ADD
        t17.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 47203
        //EQ
        tb33 = t16_0==4.000000;
        //Instruction 47204
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 47205
        //MOVC
        t4.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 47206
        //ADD
        t17.x = t17.x + t4.x;
        //Instruction 47207
        //ADD
        t17.x = t17.x + 0.500000;
        //Instruction 47208
        //FRC
        t17.x = fract(t17.x);
        //Instruction 47209
        //MAD
        t17.x = t17.x * 2.000000 + -1.0;
        //Instruction 47210
        //MUL
        t50 = abs(t17.x) * abs(t17.x);
        //Instruction 47211
        //MAD
        t17.x = -abs(t17.x) * 2.000000 + 3.000000;
        //Instruction 47212
        //MAD
        t17.x = t50 * t17.x + -0.500000;
        //Instruction 47213
        //DP2
        t17.x = dot(t17.xx, t4.yy);
        //Instruction 47214
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 47215
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 47216
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 47217
        //MUL
        t4.xyz = t17.xxx * t4.xyz;
        //Instruction 47218
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 47219
        //IF
        if(tb33){
            //Instruction 47220
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 47221
            //FRC
            t4 = fract(t4);
            //Instruction 47222
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47223
            //MOVC
            t5 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 47224
            //MOVC
            t17.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 47225
            //MUL
            t50 = t4.w * 3.000000;
            //Instruction 47226
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 47227
            //MAD
            t6.x = t5.x * 0.750000 + (-t50);
            //Instruction 47228
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 47229
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 47230
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47231
            //MUL
            t38.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 47232
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47233
            //MAD
            t6.xy = t38.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 47234
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 47235
            //DP3
            t50 = dot(t3.xyz, t3.xyz);
            //Instruction 47236
            //SQRT
            t50 = sqrt(t50);
            //Instruction 47237
            //MAD
            t51 = t6.x * t6.x + t6.y;
            //Instruction 47238
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 47239
            //MUL
            t51 = t51 * t5.x;
            //Instruction 47240
            //SINCOS
            t5.x = sin(t51);
            t7.x = cos(t51);
            //Instruction 47241
            //ADD
            t51 = (-t7.x) + 1.0;
            //Instruction 47242
            //MUL
            t8 = t4.xxxy * vec4(t51);
            //Instruction 47243
            //MUL
            t23.xyz = t4.zxy * t5.xxx;
            //Instruction 47244
            //MAD
            t9.xy = t8.zy * t4.zy + t23.zx;
            //Instruction 47245
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 47246
            //MAD
            t9.z = t8.w * t4.z + (-t23.y);
            //Instruction 47247
            //MAD
            t11.xy = t8.yz * t4.yz + (-t23.xz);
            //Instruction 47248
            //MAD
            t11.z = t8.w * t4.z + t23.y;
            //Instruction 47249
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 47250
            //MAD
            t11.w = t5.x * t51 + t7.x;
            //Instruction 47251
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 47252
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 47253
            //DP3
            t18.x = dot(t2.xyz, t4.xyz);
            //Instruction 47254
            //MAX
            t18.x = max(t18.x, -1.0);
            //Instruction 47255
            //MIN
            t18.x = min(t18.x, 1.0);
            //Instruction 47256
            //ADD
            t7.w = t18.x + t7.y;
            //Instruction 47257
            //DP3
            t51 = dot(t7.xzw, t7.xzw);
            //Instruction 47258
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 47259
            //MUL
            t4.xyz = vec3(t51) * t7.zxw;
            //Instruction 47260
            //ADD
            t51 = -abs(t18.x) + 1.0;
            //Instruction 47261
            //SQRT
            t51 = sqrt(t51);
            //Instruction 47262
            //MAD
            t5.x = abs(t18.x) * -0.018729 + 0.074261;
            //Instruction 47263
            //MAD
            t5.x = t5.x * abs(t18.x) + -0.212114;
            //Instruction 47264
            //MAD
            t5.x = t5.x * abs(t18.x) + 1.570729;
            //Instruction 47265
            //MUL
            t37 = t51 * t5.x;
            //Instruction 47266
            //MAD
            t37 = t37 * -2.000000 + 3.141593;
            //Instruction 47267
            //LT
            tb18 = t18.x<(-t18.x);
            //Instruction 47268
            //AND
            t18.x = tb18 ? t37 : float(0.0);
            //Instruction 47269
            //MAD
            t18.x = t5.x * t51 + t18.x;
            //Instruction 47270
            //MAD
            t51 = (-t6.y) * t6.y + t6.x;
            //Instruction 47271
            //MAD
            t6.x = t4.w * 3.000000 + t17.z;
            //Instruction 47272
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 47273
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 47274
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 47275
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47276
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 47277
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47278
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 47279
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 47280
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 47281
            //MAD
            t49 = t49 * t5.x + 1.0;
            //Instruction 47282
            //MUL
            t49 = t49 * 0.500000;
            t49 = clamp(t49, 0.0, 1.0);
            //Instruction 47283
            //LOG
            t49 = log2(t49);
            //Instruction 47284
            //MUL
            t33 = t49 * t17.y;
            //Instruction 47285
            //EXP
            t33 = exp2(t33);
            //Instruction 47286
            //MUL
            t49 = t5.y * t51;
            //Instruction 47287
            //MAD
            t49 = t18.x * t5.w + t49;
            //Instruction 47288
            //MAD
            t17.x = t17.x * t33 + t49;
            //Instruction 47289
            //MUL
            t17.x = t17.x * in_TEXCOORD2.x;
            //Instruction 47290
            //SINCOS
            t5.x = sin(t17.x);
            t6.x = cos(t17.x);
            //Instruction 47291
            //ADD
            t17.x = (-t6.x) + 1.0;
            //Instruction 47292
            //MUL
            t7 = vec4(t4.y * t17.x, t4.y * t17.x, t4.y * t17.x, t4.z * t17.x);
            //Instruction 47293
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 47294
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 47295
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 47296
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 47297
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 47298
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 47299
            //MUL
            t33 = t4.x * t4.x;
            //Instruction 47300
            //MAD
            t8.w = t33 * t17.x + t6.x;
            //Instruction 47301
            //MOV
            t10.z = t11.x;
            //Instruction 47302
            //MOV
            t10.w = t9.x;
            //Instruction 47303
            //MOV
            t12.z = t8.y;
            //Instruction 47304
            //MOV
            t12.w = t13.y;
            //Instruction 47305
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 47306
            //MOV
            t13.w = t12.y;
            //Instruction 47307
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 47308
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 47309
            //MOV
            t9.w = t10.y;
            //Instruction 47310
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 47311
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 47312
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 47313
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 47314
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 47315
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 47316
            //DP3
            t17.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 47317
            //DP3
            t17.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 47318
            //DP3
            t17.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 47319
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 47320
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 47321
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 47322
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 47323
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 47324
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 47325
            //MUL
            t3.xyz = vec3(t50) * t4.xyz;
            //Instruction 47326
        //ELSE
        } else {
            //Instruction 47327
            //MOV
            t17.xyz = in_NORMAL0.xyz;
            //Instruction 47328
        //ENDIF
        }
        //Instruction 47329
    //ELSE
    } else {
        //Instruction 47330
        //MOV
        t17.xyz = in_NORMAL0.xyz;
        //Instruction 47331
    //ENDIF
    }
    //Instruction 47332
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 47333
    //GE
    tb18 = t16_0>=3.000000;
    //Instruction 47334
    //IF
    if(tb18){
        //Instruction 47335
        //EQ
        tb18 = t16_0==5.000000;
        //Instruction 47336
        //IF
        if(tb18){
            //Instruction 47337
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47338
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 47339
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 47340
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 47341
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 47342
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 47343
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47344
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47345
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47346
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 47347
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 47348
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 47349
            //ADD
            t0.x = t18.x + in_TEXCOORD0.w;
            //Instruction 47350
            //MAD
            t0.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47351
            //MUL
            t50 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 47352
            //MUL
            t0.z = t50 * 0.500000;
            //Instruction 47353
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 47354
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47355
            //FRC
            t0 = fract(t0);
            //Instruction 47356
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47357
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 47358
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47359
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47360
            //ADD
            t0 = t0 + t0;
            //Instruction 47361
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 47362
            //LT
            tb50 = t6.w<0.0;
            //Instruction 47363
            //MOV
            t6.y = (-t6.w);
            //Instruction 47364
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 47365
            //MOVC
            t6.xy = (bool(tb50)) ? t6.xy : t6.zw;
            //Instruction 47366
            //MAD
            t50 = (-t0.y) * t0.z + t6.x;
            //Instruction 47367
            //MAD
            t50 = t6.y * t50 + t6.w;
            //Instruction 47368
            //ADD
            t51 = (-t50) + t6.x;
            //Instruction 47369
            //MAD
            t50 = t6.y * t51 + t50;
            //Instruction 47370
            //MUL
            t50 = t50 * _ST_WindBranchTwitch.x;
            //Instruction 47371
            //ADD
            t51 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47372
            //ADD
            t52 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47373
            //MUL
            t52 = t0.x * t52;
            //Instruction 47374
            //MAD
            t50 = t50 * t51 + t52;
            //Instruction 47375
            //MAD
            t51 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47376
            //MUL
            t50 = t50 * t51;
            //Instruction 47377
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 47378
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 47379
            //MAD
            t6.x = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47380
            //MUL
            t18.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47381
            //MAD
            t6.y = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47382
            //ADD
            t18.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 47383
            //FRC
            t18.xz = fract(t18.xz);
            //Instruction 47384
            //MAD
            t18.xz = t18.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47385
            //MUL
            t6.xy = abs(t18.xz) * abs(t18.xz);
            //Instruction 47386
            //MAD
            t18.xz = -abs(t18.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47387
            //MAD
            t18.xz = t6.xy * t18.xz + vec2(-0.500000, -0.500000);
            //Instruction 47388
            //ADD
            t18.xz = t18.xz + t18.xz;
            //Instruction 47389
            //MUL
            t18.xz = t18.xz * t18.xz;
            //Instruction 47390
            //MUL
            t18.x = t18.x * t18.z;
            //Instruction 47391
            //MAD
            t18.x = (-t18.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47392
            //MUL
            t50 = t0.w * _ST_WindVector.w;
            //Instruction 47393
            //MAD
            t18.x = t50 * _ST_WindBranchWhip.x + t18.x;
            //Instruction 47394
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 47395
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47396
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 47397
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 47398
        //ELSE
        } else {
            //Instruction 47399
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47400
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47401
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47402
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47403
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 47404
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 47405
            //ADD
            t5.x = t18.x + in_TEXCOORD0.w;
            //Instruction 47406
            //MAD
            t5.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47407
            //MUL
            t18.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 47408
            //MUL
            t5.z = t18.x * 0.500000;
            //Instruction 47409
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47410
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47411
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47412
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 47413
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47414
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47415
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 47416
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 47417
            //LT
            tb18 = t0.w<0.0;
            //Instruction 47418
            //MOV
            t0.y = (-t0.w);
            //Instruction 47419
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 47420
            //MOVC
            t18.xz = (bool(tb18)) ? t0.xy : t0.zw;
            //Instruction 47421
            //MAD
            t51 = (-t5.y) * t5.z + t18.x;
            //Instruction 47422
            //MAD
            t51 = t18.z * t51 + t0.w;
            //Instruction 47423
            //ADD
            t18.x = t18.x + (-t51);
            //Instruction 47424
            //MAD
            t18.x = t18.z * t18.x + t51;
            //Instruction 47425
            //MUL
            t18.x = t18.x * _ST_WindBranchTwitch.x;
            //Instruction 47426
            //ADD
            t50 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47427
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47428
            //MUL
            t51 = t51 * t5.x;
            //Instruction 47429
            //MAD
            t18.x = t18.x * t50 + t51;
            //Instruction 47430
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 47431
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 47432
        //ENDIF
        }
        //Instruction 47433
    //ENDIF
    }
    //Instruction 47434
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 47435
    //SQRT
    t18.x = sqrt(t18.x);
    //Instruction 47436
    //DIV
    t50 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47437
    //MAD
    t50 = (-t50) * 0.250000 + t3.y;
    //Instruction 47438
    //MAX
    t50 = max(t50, 0.0);
    //Instruction 47439
    //MUL
    t50 = t50 * _ST_WindGlobal.z;
    //Instruction 47440
    //NE
    tb51 = t50!=0.0;
    //Instruction 47441
    //LOG
    t4.x = log2(t50);
    //Instruction 47442
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 47443
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 47444
    //MOVC
    t50 = (tb51) ? t4.x : t50;
    //Instruction 47445
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47446
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47447
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 47448
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 47449
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47450
    //MUL
    t36.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 47451
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47452
    //MAD
    t4.xy = t36.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 47453
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 47454
    //MAD
    t51 = t4.y * t4.y + t4.x;
    //Instruction 47455
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47456
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t4.x;
    //Instruction 47457
    //MUL
    t50 = t50 * t51;
    //Instruction 47458
    //MAD
    t4.xz = t2.xz * vec2(t50) + t3.xz;
    //Instruction 47459
    //MOV
    t4.y = t3.y;
    //Instruction 47460
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 47461
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 47462
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 47463
    //MUL
    t2.xyz = t18.xxx * t2.xzw;
    //Instruction 47464
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 47465
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 47466
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 47467
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 47468
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 47469
    //MOV
    t4.xz = vec2(0.500000, 0.500000);
    //Instruction 47470
    //MOV
    t4.y = _ProjectionParams.x;
    //Instruction 47471
    //MUL
    t0.xyz = t3.xyz * t4.xyz;
    //Instruction 47472
    //MUL
    t0.w = t0.y * 0.500000;
    //Instruction 47473
    //ADD
    t5.xy = t0.zz + t0.xw;
    //Instruction 47474
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 47475
    //MUL
    t3.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 47476
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 47477
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 47478
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 47479
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 47480
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 47481
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 47482
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 47483
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 47484
    //MUL
    t2.xyz = t4.xyz * t0.xyw;
    //Instruction 47485
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 47486
    //ADD
    vs_TEXCOORD4.xy = t2.zz + t2.xw;
    //Instruction 47487
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 47488
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 47489
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 47490
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 47491
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 47492
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 47493
    //MUL
    t4.xyz = t17.yyy * t4.xyz;
    //Instruction 47494
    //MAD
    t1.xyz = t2.xyz * t17.xxx + t4.xyz;
    //Instruction 47495
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 47496
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 47497
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 47498
    //MAD
    t1.xyz = t2.xyz * t17.zzz + t1.xyz;
    //Instruction 47499
    //DP3
    t49 = dot(t1.xyz, t1.xyz);
    //Instruction 47500
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 47501
    //MUL
    t1.xyz = vec3(t49) * t1.xyz;
    //Instruction 47502
    //MOV
    t1.w = 1.0;
    //Instruction 47503
    //DP4
    t16_14.x = dot(unity_SHAr, t1);
    //Instruction 47504
    //DP4
    t16_14.y = dot(unity_SHAg, t1);
    //Instruction 47505
    //DP4
    t16_14.z = dot(unity_SHAb, t1);
    //Instruction 47506
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 47507
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 47508
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 47509
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 47510
    //MUL
    t16_62 = t1.y * t1.y;
    //Instruction 47511
    //MAD
    t16_62 = t1.x * t1.x + (-t16_62);
    //Instruction 47512
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_62) + t16_15.xyz;
    //Instruction 47513
    //ADD
    t16_14.xyz = t16_14.xyz + t16_15.xyz;
    //Instruction 47514
    //MOV
    gl_Position = t0;
    //Instruction 47515
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 47516
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 47517
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 47518
    //MOV
    vs_TEXCOORD3.xyz = t3.xyz;
    //Instruction 47519
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 47520
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47521
    //MOV
    vs_TEXCOORD6.xyz = t16_14.xyz;
    //Instruction 47522
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 47167
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 47168
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 47169
    //MOV
    t1.x = t16_0.x;
    //Instruction 47170
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 47171
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 47172
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 47173
    //LT
    tb1 = t16_1<0.0;
    //Instruction 47174
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 47175
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 47176
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 47177
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 47178
    //LT
    tb1 = t10_2<0.0;
    //Instruction 47179
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 47180
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 47181
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 47182
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 47183
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 47184
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 47185
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 47186
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47187
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_104;
  highp vec4 tmpvar_105;
  tmpvar_105 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_106;
  tmpvar_106.x = tmpvar_105.x;
  tmpvar_106.y = (tmpvar_105.y * _ProjectionParams.x);
  o_104.xy = (tmpvar_106 + tmpvar_105.w);
  o_104.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = normalize(((
    (v_107.xyz * tmpvar_14.x)
   + 
    (v_108.xyz * tmpvar_14.y)
  ) + (v_109.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_111;
  mediump vec4 normal_112;
  normal_112 = tmpvar_110;
  mediump vec3 x2_113;
  mediump vec3 x1_114;
  x1_114.x = dot (unity_SHAr, normal_112);
  x1_114.y = dot (unity_SHAg, normal_112);
  x1_114.z = dot (unity_SHAb, normal_112);
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_115);
  x2_113.y = dot (unity_SHBg, tmpvar_115);
  x2_113.z = dot (unity_SHBb, tmpvar_115);
  tmpvar_111 = ((x2_113 + (unity_SHC.xyz * 
    ((normal_112.x * normal_112.x) - (normal_112.y * normal_112.y))
  )) + x1_114);
  tmpvar_7 = tmpvar_111;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_99;
  xlv_TEXCOORD4 = o_104;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 46539
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46540
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 46541
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 46542
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 46543
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 46544
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 46545
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 46546
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 46547
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 46548
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 46549
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 46550
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46551
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 46552
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 46553
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 46554
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 46555
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 46556
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 46557
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 46558
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 46559
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 46560
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 46561
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 46562
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 46563
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 46564
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 46565
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 46566
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 46567
        //FRC
        t34.x = fract(t34.x);
        //Instruction 46568
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 46569
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 46570
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 46571
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 46572
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 46573
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 46574
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 46575
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 46576
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 46577
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 46578
        //IF
        if(tb51){
            //Instruction 46579
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 46580
            //FRC
            t5 = fract(t5);
            //Instruction 46581
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46582
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 46583
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 46584
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 46585
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 46586
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 46587
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 46588
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 46589
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46590
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 46591
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46592
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 46593
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 46594
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 46595
            //SQRT
            t52 = sqrt(t52);
            //Instruction 46596
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 46597
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 46598
            //MUL
            t54 = t54 * t55;
            //Instruction 46599
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 46600
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 46601
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 46602
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 46603
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 46604
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 46605
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 46606
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 46607
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 46608
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 46609
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 46610
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 46611
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 46612
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 46613
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 46614
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 46615
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 46616
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 46617
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 46618
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 46619
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 46620
            //SQRT
            t54 = sqrt(t54);
            //Instruction 46621
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 46622
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 46623
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 46624
            //MUL
            t6.x = t54 * t55;
            //Instruction 46625
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 46626
            //LT
            tb20 = t20<(-t20);
            //Instruction 46627
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 46628
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 46629
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 46630
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 46631
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 46632
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 46633
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 46634
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46635
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 46636
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46637
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 46638
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 46639
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 46640
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 46641
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 46642
            //LOG
            t51 = log2(t51);
            //Instruction 46643
            //MUL
            t51 = t51 * t7.y;
            //Instruction 46644
            //EXP
            t51 = exp2(t51);
            //Instruction 46645
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 46646
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 46647
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 46648
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 46649
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 46650
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 46651
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 46652
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 46653
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 46654
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 46655
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 46656
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 46657
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 46658
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 46659
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 46660
            //MOV
            t11.z = t12.x;
            //Instruction 46661
            //MOV
            t11.w = t10.x;
            //Instruction 46662
            //MOV
            t13.z = t9.y;
            //Instruction 46663
            //MOV
            t13.w = t14.y;
            //Instruction 46664
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 46665
            //MOV
            t14.w = t13.y;
            //Instruction 46666
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 46667
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 46668
            //MOV
            t10.w = t11.y;
            //Instruction 46669
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 46670
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 46671
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 46672
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 46673
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 46674
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 46675
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 46676
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 46677
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 46678
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 46679
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 46680
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 46681
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 46682
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 46683
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 46684
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 46685
        //ELSE
        } else {
            //Instruction 46686
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 46687
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 46688
        //ENDIF
        }
        //Instruction 46689
    //ELSE
    } else {
        //Instruction 46690
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 46691
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 46692
    //ENDIF
    }
    //Instruction 46693
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 46694
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 46695
    //IF
    if(tb52){
        //Instruction 46696
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 46697
        //IF
        if(tb52){
            //Instruction 46698
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46699
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 46700
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 46701
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 46702
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 46703
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 46704
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46705
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 46706
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46707
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 46708
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 46709
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 46710
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46711
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 46712
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 46713
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 46714
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46715
            //FRC
            t2 = fract(t2);
            //Instruction 46716
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46717
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 46718
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46719
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46720
            //ADD
            t2 = t2 + t2;
            //Instruction 46721
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 46722
            //LT
            tb54 = t7.w<0.0;
            //Instruction 46723
            //MOV
            t7.y = (-t7.w);
            //Instruction 46724
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 46725
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 46726
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 46727
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 46728
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 46729
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 46730
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 46731
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46732
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46733
            //MUL
            t56 = t2.x * t56;
            //Instruction 46734
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 46735
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46736
            //MUL
            t54 = t54 * t55;
            //Instruction 46737
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 46738
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 46739
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46740
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46741
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46742
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 46743
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 46744
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46745
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 46746
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46747
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 46748
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 46749
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 46750
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 46751
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46752
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 46753
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 46754
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 46755
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46756
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 46757
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 46758
        //ELSE
        } else {
            //Instruction 46759
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46760
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46761
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46762
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 46763
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 46764
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 46765
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46766
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 46767
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 46768
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46769
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 46770
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46771
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 46772
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46773
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46774
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 46775
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 46776
            //LT
            tb0 = t2.w<0.0;
            //Instruction 46777
            //MOV
            t2.y = (-t2.w);
            //Instruction 46778
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 46779
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 46780
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 46781
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 46782
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 46783
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 46784
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 46785
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46786
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46787
            //MUL
            t54 = t54 * t6.x;
            //Instruction 46788
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 46789
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 46790
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 46791
        //ENDIF
        }
        //Instruction 46792
    //ENDIF
    }
    //Instruction 46793
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 46794
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 46795
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 46796
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 46797
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 46798
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 46799
    //NE
    tb54 = t52!=0.0;
    //Instruction 46800
    //LOG
    t55 = log2(t52);
    //Instruction 46801
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 46802
    //EXP
    t55 = exp2(t55);
    //Instruction 46803
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 46804
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46805
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46806
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 46807
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 46808
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46809
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 46810
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46811
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 46812
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 46813
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 46814
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46815
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 46816
    //MUL
    t52 = t52 * t54;
    //Instruction 46817
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 46818
    //MOV
    t5.y = t4.y;
    //Instruction 46819
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 46820
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 46821
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 46822
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 46823
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 46824
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 46825
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 46826
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 46827
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 46828
    //MOV
    t5.xz = vec2(0.500000, 0.500000);
    //Instruction 46829
    //MOV
    t5.y = _ProjectionParams.x;
    //Instruction 46830
    //MUL
    t2.xyz = t4.xyz * t5.xyz;
    //Instruction 46831
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 46832
    //ADD
    t0.xy = t2.zz + t2.xw;
    //Instruction 46833
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 46834
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 46835
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 46836
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 46837
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 46838
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 46839
    //MUL
    t6.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 46840
    //MAD
    t6.xyz = _Object2World[0].xyz * t3.xxx + t6.xyz;
    //Instruction 46841
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t6.xyz;
    //Instruction 46842
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 46843
    //MUL
    t5.xyz = t5.xyz * t2.xyw;
    //Instruction 46844
    //MUL
    t5.w = t5.y * 0.500000;
    //Instruction 46845
    //ADD
    vs_TEXCOORD4.xy = t5.zz + t5.xw;
    //Instruction 46846
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 46847
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 46848
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 46849
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 46850
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 46851
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 46852
    //MUL
    t0.xyw = t34.yyy * t6.xyz;
    //Instruction 46853
    //MAD
    t0.xyz = t5.xyz * t34.xxx + t0.xyw;
    //Instruction 46854
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 46855
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 46856
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 46857
    //MAD
    t0.xyz = t5.xyz * vec3(t20) + t0.xyz;
    //Instruction 46858
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 46859
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 46860
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 46861
    //MOV
    t0.w = 1.0;
    //Instruction 46862
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 46863
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 46864
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 46865
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 46866
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 46867
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 46868
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 46869
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 46870
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 46871
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 46872
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 46873
    //MOV
    gl_Position = t2;
    //Instruction 46874
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46875
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 46876
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 46877
    //MOV
    vs_TEXCOORD3.xyz = t4.xyz;
    //Instruction 46878
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 46879
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 46880
    //MOV
    vs_TEXCOORD6.xyz = t16_15.xyz;
    //Instruction 46881
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 46508
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 46509
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 46510
    //MOV
    t1.x = t16_0.x;
    //Instruction 46511
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 46512
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46513
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46514
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46515
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46516
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 46517
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 46518
    //LT
    tb1 = t10_2<0.0;
    //Instruction 46519
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46520
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 46521
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 46522
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 46523
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 46524
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 46525
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 46526
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 46527
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 46528
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 46529
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46530
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 46531
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46532
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46533
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 46534
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 46535
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 46536
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 46537
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46538
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_104;
  highp vec4 tmpvar_105;
  tmpvar_105 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_106;
  tmpvar_106.x = tmpvar_105.x;
  tmpvar_106.y = (tmpvar_105.y * _ProjectionParams.x);
  o_104.xy = (tmpvar_106 + tmpvar_105.w);
  o_104.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = normalize(((
    (v_107.xyz * tmpvar_14.x)
   + 
    (v_108.xyz * tmpvar_14.y)
  ) + (v_109.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_111;
  mediump vec4 normal_112;
  normal_112 = tmpvar_110;
  mediump vec3 x2_113;
  mediump vec3 x1_114;
  x1_114.x = dot (unity_SHAr, normal_112);
  x1_114.y = dot (unity_SHAg, normal_112);
  x1_114.z = dot (unity_SHAb, normal_112);
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_115);
  x2_113.y = dot (unity_SHBg, tmpvar_115);
  x2_113.z = dot (unity_SHBb, tmpvar_115);
  tmpvar_111 = ((x2_113 + (unity_SHC.xyz * 
    ((normal_112.x * normal_112.x) - (normal_112.y * normal_112.y))
  )) + x1_114);
  tmpvar_7 = tmpvar_111;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_99;
  xlv_TEXCOORD4 = o_104;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_16.w;
  light_3.xyz = (tmpvar_16.xyz + xlv_TEXCOORD6);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 46659
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46660
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 46661
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 46662
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 46663
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 46664
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 46665
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 46666
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 46667
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 46668
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 46669
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 46670
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46671
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 46672
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 46673
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 46674
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 46675
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 46676
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 46677
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 46678
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 46679
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 46680
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 46681
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 46682
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 46683
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 46684
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 46685
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 46686
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 46687
        //FRC
        t34.x = fract(t34.x);
        //Instruction 46688
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 46689
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 46690
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 46691
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 46692
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 46693
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 46694
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 46695
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 46696
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 46697
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 46698
        //IF
        if(tb51){
            //Instruction 46699
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 46700
            //FRC
            t5 = fract(t5);
            //Instruction 46701
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46702
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 46703
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 46704
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 46705
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 46706
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 46707
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 46708
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 46709
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46710
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 46711
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46712
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 46713
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 46714
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 46715
            //SQRT
            t52 = sqrt(t52);
            //Instruction 46716
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 46717
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 46718
            //MUL
            t54 = t54 * t55;
            //Instruction 46719
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 46720
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 46721
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 46722
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 46723
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 46724
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 46725
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 46726
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 46727
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 46728
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 46729
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 46730
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 46731
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 46732
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 46733
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 46734
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 46735
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 46736
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 46737
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 46738
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 46739
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 46740
            //SQRT
            t54 = sqrt(t54);
            //Instruction 46741
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 46742
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 46743
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 46744
            //MUL
            t6.x = t54 * t55;
            //Instruction 46745
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 46746
            //LT
            tb20 = t20<(-t20);
            //Instruction 46747
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 46748
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 46749
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 46750
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 46751
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 46752
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 46753
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 46754
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46755
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 46756
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46757
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 46758
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 46759
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 46760
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 46761
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 46762
            //LOG
            t51 = log2(t51);
            //Instruction 46763
            //MUL
            t51 = t51 * t7.y;
            //Instruction 46764
            //EXP
            t51 = exp2(t51);
            //Instruction 46765
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 46766
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 46767
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 46768
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 46769
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 46770
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 46771
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 46772
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 46773
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 46774
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 46775
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 46776
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 46777
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 46778
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 46779
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 46780
            //MOV
            t11.z = t12.x;
            //Instruction 46781
            //MOV
            t11.w = t10.x;
            //Instruction 46782
            //MOV
            t13.z = t9.y;
            //Instruction 46783
            //MOV
            t13.w = t14.y;
            //Instruction 46784
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 46785
            //MOV
            t14.w = t13.y;
            //Instruction 46786
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 46787
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 46788
            //MOV
            t10.w = t11.y;
            //Instruction 46789
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 46790
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 46791
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 46792
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 46793
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 46794
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 46795
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 46796
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 46797
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 46798
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 46799
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 46800
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 46801
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 46802
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 46803
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 46804
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 46805
        //ELSE
        } else {
            //Instruction 46806
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 46807
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 46808
        //ENDIF
        }
        //Instruction 46809
    //ELSE
    } else {
        //Instruction 46810
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 46811
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 46812
    //ENDIF
    }
    //Instruction 46813
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 46814
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 46815
    //IF
    if(tb52){
        //Instruction 46816
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 46817
        //IF
        if(tb52){
            //Instruction 46818
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 46819
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 46820
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 46821
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 46822
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 46823
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 46824
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46825
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 46826
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46827
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 46828
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 46829
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 46830
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46831
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 46832
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 46833
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 46834
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 46835
            //FRC
            t2 = fract(t2);
            //Instruction 46836
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 46837
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 46838
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 46839
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 46840
            //ADD
            t2 = t2 + t2;
            //Instruction 46841
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 46842
            //LT
            tb54 = t7.w<0.0;
            //Instruction 46843
            //MOV
            t7.y = (-t7.w);
            //Instruction 46844
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 46845
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 46846
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 46847
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 46848
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 46849
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 46850
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 46851
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46852
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46853
            //MUL
            t56 = t2.x * t56;
            //Instruction 46854
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 46855
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 46856
            //MUL
            t54 = t54 * t55;
            //Instruction 46857
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 46858
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 46859
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46860
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 46861
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 46862
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 46863
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 46864
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46865
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 46866
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46867
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 46868
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 46869
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 46870
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 46871
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 46872
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 46873
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 46874
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 46875
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 46876
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 46877
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 46878
        //ELSE
        } else {
            //Instruction 46879
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 46880
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 46881
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46882
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 46883
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 46884
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 46885
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 46886
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 46887
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 46888
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 46889
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 46890
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46891
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 46892
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 46893
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 46894
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 46895
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 46896
            //LT
            tb0 = t2.w<0.0;
            //Instruction 46897
            //MOV
            t2.y = (-t2.w);
            //Instruction 46898
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 46899
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 46900
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 46901
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 46902
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 46903
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 46904
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 46905
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 46906
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 46907
            //MUL
            t54 = t54 * t6.x;
            //Instruction 46908
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 46909
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 46910
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 46911
        //ENDIF
        }
        //Instruction 46912
    //ENDIF
    }
    //Instruction 46913
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 46914
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 46915
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 46916
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 46917
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 46918
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 46919
    //NE
    tb54 = t52!=0.0;
    //Instruction 46920
    //LOG
    t55 = log2(t52);
    //Instruction 46921
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 46922
    //EXP
    t55 = exp2(t55);
    //Instruction 46923
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 46924
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 46925
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 46926
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 46927
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 46928
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 46929
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 46930
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 46931
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 46932
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 46933
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 46934
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 46935
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 46936
    //MUL
    t52 = t52 * t54;
    //Instruction 46937
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 46938
    //MOV
    t5.y = t4.y;
    //Instruction 46939
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 46940
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 46941
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 46942
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 46943
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 46944
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 46945
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 46946
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 46947
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 46948
    //MOV
    t5.xz = vec2(0.500000, 0.500000);
    //Instruction 46949
    //MOV
    t5.y = _ProjectionParams.x;
    //Instruction 46950
    //MUL
    t2.xyz = t4.xyz * t5.xyz;
    //Instruction 46951
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 46952
    //ADD
    t0.xy = t2.zz + t2.xw;
    //Instruction 46953
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 46954
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 46955
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 46956
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 46957
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 46958
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 46959
    //MUL
    t6.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 46960
    //MAD
    t6.xyz = _Object2World[0].xyz * t3.xxx + t6.xyz;
    //Instruction 46961
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t6.xyz;
    //Instruction 46962
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 46963
    //MUL
    t5.xyz = t5.xyz * t2.xyw;
    //Instruction 46964
    //MUL
    t5.w = t5.y * 0.500000;
    //Instruction 46965
    //ADD
    vs_TEXCOORD4.xy = t5.zz + t5.xw;
    //Instruction 46966
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 46967
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 46968
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 46969
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 46970
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 46971
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 46972
    //MUL
    t0.xyw = t34.yyy * t6.xyz;
    //Instruction 46973
    //MAD
    t0.xyz = t5.xyz * t34.xxx + t0.xyw;
    //Instruction 46974
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 46975
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 46976
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 46977
    //MAD
    t0.xyz = t5.xyz * vec3(t20) + t0.xyz;
    //Instruction 46978
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 46979
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 46980
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 46981
    //MOV
    t0.w = 1.0;
    //Instruction 46982
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 46983
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 46984
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 46985
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 46986
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 46987
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 46988
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 46989
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 46990
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 46991
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 46992
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 46993
    //MOV
    gl_Position = t2;
    //Instruction 46994
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 46995
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 46996
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 46997
    //MOV
    vs_TEXCOORD3.xyz = t4.xyz;
    //Instruction 46998
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 46999
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47000
    //MOV
    vs_TEXCOORD6.xyz = t16_15.xyz;
    //Instruction 47001
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 46629
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 46630
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 46631
    //MOV
    t1.x = t16_0.x;
    //Instruction 46632
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 46633
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46634
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46635
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46636
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46637
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 46638
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 46639
    //LT
    tb1 = t10_2<0.0;
    //Instruction 46640
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46641
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 46642
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 46643
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 46644
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 46645
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 46646
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 46647
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 46648
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 46649
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 46650
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46651
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 46652
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46653
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46654
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 46655
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 46656
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 46657
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46658
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_104;
  highp vec4 tmpvar_105;
  tmpvar_105 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_106;
  tmpvar_106.x = tmpvar_105.x;
  tmpvar_106.y = (tmpvar_105.y * _ProjectionParams.x);
  o_104.xy = (tmpvar_106 + tmpvar_105.w);
  o_104.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = normalize(((
    (v_107.xyz * tmpvar_14.x)
   + 
    (v_108.xyz * tmpvar_14.y)
  ) + (v_109.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_111;
  mediump vec4 normal_112;
  normal_112 = tmpvar_110;
  mediump vec3 x2_113;
  mediump vec3 x1_114;
  x1_114.x = dot (unity_SHAr, normal_112);
  x1_114.y = dot (unity_SHAg, normal_112);
  x1_114.z = dot (unity_SHAb, normal_112);
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_115);
  x2_113.y = dot (unity_SHBg, tmpvar_115);
  x2_113.z = dot (unity_SHBb, tmpvar_115);
  tmpvar_111 = ((x2_113 + (unity_SHC.xyz * 
    ((normal_112.x * normal_112.x) - (normal_112.y * normal_112.y))
  )) + x1_114);
  tmpvar_7 = tmpvar_111;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_99;
  xlv_TEXCOORD4 = o_104;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_16;
  c_16.xyz = (tmpvar_5 * light_3.xyz);
  c_16.w = tmpvar_6;
  c_2.xyz = c_16.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 47554
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47555
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 47556
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 47557
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 47558
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 47559
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 47560
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 47561
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 47562
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 47563
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 47564
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 47565
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47566
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 47567
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 47568
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 47569
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 47570
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 47571
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 47572
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 47573
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 47574
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 47575
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 47576
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 47577
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 47578
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 47579
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 47580
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 47581
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 47582
        //FRC
        t34.x = fract(t34.x);
        //Instruction 47583
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 47584
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 47585
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 47586
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 47587
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 47588
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 47589
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 47590
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 47591
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 47592
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 47593
        //IF
        if(tb51){
            //Instruction 47594
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 47595
            //FRC
            t5 = fract(t5);
            //Instruction 47596
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47597
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 47598
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 47599
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 47600
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 47601
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 47602
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 47603
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 47604
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47605
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 47606
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47607
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 47608
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 47609
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 47610
            //SQRT
            t52 = sqrt(t52);
            //Instruction 47611
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 47612
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 47613
            //MUL
            t54 = t54 * t55;
            //Instruction 47614
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 47615
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 47616
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 47617
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 47618
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 47619
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 47620
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 47621
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 47622
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 47623
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 47624
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 47625
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 47626
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 47627
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 47628
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 47629
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 47630
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 47631
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 47632
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 47633
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 47634
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 47635
            //SQRT
            t54 = sqrt(t54);
            //Instruction 47636
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 47637
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 47638
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 47639
            //MUL
            t6.x = t54 * t55;
            //Instruction 47640
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 47641
            //LT
            tb20 = t20<(-t20);
            //Instruction 47642
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 47643
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 47644
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 47645
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 47646
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 47647
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 47648
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 47649
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47650
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 47651
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47652
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 47653
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 47654
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 47655
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 47656
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 47657
            //LOG
            t51 = log2(t51);
            //Instruction 47658
            //MUL
            t51 = t51 * t7.y;
            //Instruction 47659
            //EXP
            t51 = exp2(t51);
            //Instruction 47660
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 47661
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 47662
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 47663
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 47664
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 47665
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 47666
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 47667
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 47668
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 47669
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 47670
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 47671
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 47672
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 47673
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 47674
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 47675
            //MOV
            t11.z = t12.x;
            //Instruction 47676
            //MOV
            t11.w = t10.x;
            //Instruction 47677
            //MOV
            t13.z = t9.y;
            //Instruction 47678
            //MOV
            t13.w = t14.y;
            //Instruction 47679
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 47680
            //MOV
            t14.w = t13.y;
            //Instruction 47681
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 47682
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 47683
            //MOV
            t10.w = t11.y;
            //Instruction 47684
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 47685
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 47686
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 47687
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 47688
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 47689
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 47690
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 47691
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 47692
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 47693
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 47694
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 47695
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 47696
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 47697
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 47698
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 47699
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 47700
        //ELSE
        } else {
            //Instruction 47701
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 47702
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 47703
        //ENDIF
        }
        //Instruction 47704
    //ELSE
    } else {
        //Instruction 47705
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 47706
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 47707
    //ENDIF
    }
    //Instruction 47708
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 47709
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 47710
    //IF
    if(tb52){
        //Instruction 47711
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 47712
        //IF
        if(tb52){
            //Instruction 47713
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47714
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 47715
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 47716
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 47717
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 47718
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 47719
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47720
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 47721
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47722
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 47723
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 47724
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 47725
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47726
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 47727
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 47728
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 47729
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47730
            //FRC
            t2 = fract(t2);
            //Instruction 47731
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47732
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 47733
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47734
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47735
            //ADD
            t2 = t2 + t2;
            //Instruction 47736
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 47737
            //LT
            tb54 = t7.w<0.0;
            //Instruction 47738
            //MOV
            t7.y = (-t7.w);
            //Instruction 47739
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 47740
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 47741
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 47742
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 47743
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 47744
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 47745
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 47746
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47747
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47748
            //MUL
            t56 = t2.x * t56;
            //Instruction 47749
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 47750
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47751
            //MUL
            t54 = t54 * t55;
            //Instruction 47752
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 47753
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 47754
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47755
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47756
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47757
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 47758
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 47759
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47760
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 47761
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47762
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 47763
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 47764
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 47765
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 47766
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47767
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 47768
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 47769
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 47770
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47771
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 47772
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 47773
        //ELSE
        } else {
            //Instruction 47774
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47775
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47776
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47777
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 47778
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 47779
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 47780
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47781
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 47782
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 47783
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47784
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 47785
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47786
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 47787
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47788
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47789
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 47790
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 47791
            //LT
            tb0 = t2.w<0.0;
            //Instruction 47792
            //MOV
            t2.y = (-t2.w);
            //Instruction 47793
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 47794
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 47795
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 47796
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 47797
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 47798
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 47799
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 47800
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47801
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47802
            //MUL
            t54 = t54 * t6.x;
            //Instruction 47803
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 47804
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 47805
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 47806
        //ENDIF
        }
        //Instruction 47807
    //ENDIF
    }
    //Instruction 47808
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 47809
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 47810
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47811
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 47812
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 47813
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 47814
    //NE
    tb54 = t52!=0.0;
    //Instruction 47815
    //LOG
    t55 = log2(t52);
    //Instruction 47816
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 47817
    //EXP
    t55 = exp2(t55);
    //Instruction 47818
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 47819
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47820
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47821
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 47822
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 47823
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47824
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 47825
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47826
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 47827
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 47828
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 47829
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47830
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 47831
    //MUL
    t52 = t52 * t54;
    //Instruction 47832
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 47833
    //MOV
    t5.y = t4.y;
    //Instruction 47834
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 47835
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 47836
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 47837
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 47838
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 47839
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 47840
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 47841
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 47842
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 47843
    //MOV
    t5.xz = vec2(0.500000, 0.500000);
    //Instruction 47844
    //MOV
    t5.y = _ProjectionParams.x;
    //Instruction 47845
    //MUL
    t2.xyz = t4.xyz * t5.xyz;
    //Instruction 47846
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 47847
    //ADD
    t0.xy = t2.zz + t2.xw;
    //Instruction 47848
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 47849
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 47850
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 47851
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 47852
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 47853
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 47854
    //MUL
    t6.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 47855
    //MAD
    t6.xyz = _Object2World[0].xyz * t3.xxx + t6.xyz;
    //Instruction 47856
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t6.xyz;
    //Instruction 47857
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 47858
    //MUL
    t5.xyz = t5.xyz * t2.xyw;
    //Instruction 47859
    //MUL
    t5.w = t5.y * 0.500000;
    //Instruction 47860
    //ADD
    vs_TEXCOORD4.xy = t5.zz + t5.xw;
    //Instruction 47861
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 47862
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 47863
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 47864
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 47865
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 47866
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 47867
    //MUL
    t0.xyw = t34.yyy * t6.xyz;
    //Instruction 47868
    //MAD
    t0.xyz = t5.xyz * t34.xxx + t0.xyw;
    //Instruction 47869
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 47870
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 47871
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 47872
    //MAD
    t0.xyz = t5.xyz * vec3(t20) + t0.xyz;
    //Instruction 47873
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 47874
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 47875
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 47876
    //MOV
    t0.w = 1.0;
    //Instruction 47877
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 47878
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 47879
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 47880
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 47881
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 47882
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 47883
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 47884
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 47885
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 47886
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 47887
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 47888
    //MOV
    gl_Position = t2;
    //Instruction 47889
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 47890
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 47891
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 47892
    //MOV
    vs_TEXCOORD3.xyz = t4.xyz;
    //Instruction 47893
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 47894
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47895
    //MOV
    vs_TEXCOORD6.xyz = t16_15.xyz;
    //Instruction 47896
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 47523
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 47524
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 47525
    //MOV
    t1.x = t16_0.x;
    //Instruction 47526
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 47527
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 47528
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 47529
    //LT
    tb1 = t16_1<0.0;
    //Instruction 47530
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 47531
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 47532
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 47533
    //LT
    tb1 = t10_2<0.0;
    //Instruction 47534
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 47535
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 47536
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 47537
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 47538
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 47539
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 47540
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 47541
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 47542
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 47543
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 47544
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 47545
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 47546
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 47547
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 47548
    //LOG
    t16_4.xyz = log2(t16_4.xyz);
    //Instruction 47549
    //ADD
    t1.xyz = (-t16_4.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 47550
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 47551
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 47552
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47553
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_104;
  highp vec4 tmpvar_105;
  tmpvar_105 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_106;
  tmpvar_106.x = tmpvar_105.x;
  tmpvar_106.y = (tmpvar_105.y * _ProjectionParams.x);
  o_104.xy = (tmpvar_106 + tmpvar_105.w);
  o_104.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_107;
  v_107.x = _World2Object[0].x;
  v_107.y = _World2Object[1].x;
  v_107.z = _World2Object[2].x;
  v_107.w = _World2Object[3].x;
  highp vec4 v_108;
  v_108.x = _World2Object[0].y;
  v_108.y = _World2Object[1].y;
  v_108.z = _World2Object[2].y;
  v_108.w = _World2Object[3].y;
  highp vec4 v_109;
  v_109.x = _World2Object[0].z;
  v_109.y = _World2Object[1].z;
  v_109.z = _World2Object[2].z;
  v_109.w = _World2Object[3].z;
  highp vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = normalize(((
    (v_107.xyz * tmpvar_14.x)
   + 
    (v_108.xyz * tmpvar_14.y)
  ) + (v_109.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_111;
  mediump vec4 normal_112;
  normal_112 = tmpvar_110;
  mediump vec3 x2_113;
  mediump vec3 x1_114;
  x1_114.x = dot (unity_SHAr, normal_112);
  x1_114.y = dot (unity_SHAg, normal_112);
  x1_114.z = dot (unity_SHAb, normal_112);
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_115);
  x2_113.y = dot (unity_SHBg, tmpvar_115);
  x2_113.z = dot (unity_SHBb, tmpvar_115);
  tmpvar_111 = ((x2_113 + (unity_SHC.xyz * 
    ((normal_112.x * normal_112.x) - (normal_112.y * normal_112.y))
  )) + x1_114);
  tmpvar_7 = tmpvar_111;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = screenPos_99;
  xlv_TEXCOORD4 = o_104;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD3.xy / xlv_TEXCOORD3.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_16.w;
  light_3.xyz = (tmpvar_16.xyz + xlv_TEXCOORD6);
  lowp vec4 c_17;
  c_17.xyz = (tmpvar_5 * light_3.xyz);
  c_17.w = tmpvar_6;
  c_2.xyz = c_17.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 46912
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 46913
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 46914
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 46915
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 46916
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 46917
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 46918
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 46919
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 46920
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 46921
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 46922
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 46923
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 46924
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 46925
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 46926
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 46927
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 46928
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 46929
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 46930
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 46931
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 46932
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 46933
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 46934
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 46935
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 46936
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 46937
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 46938
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 46939
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 46940
        //FRC
        t34.x = fract(t34.x);
        //Instruction 46941
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 46942
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 46943
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 46944
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 46945
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 46946
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 46947
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 46948
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 46949
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 46950
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 46951
        //IF
        if(tb51){
            //Instruction 46952
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 46953
            //FRC
            t5 = fract(t5);
            //Instruction 46954
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 46955
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 46956
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 46957
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 46958
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 46959
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 46960
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 46961
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 46962
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 46963
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 46964
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 46965
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 46966
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 46967
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 46968
            //SQRT
            t52 = sqrt(t52);
            //Instruction 46969
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 46970
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 46971
            //MUL
            t54 = t54 * t55;
            //Instruction 46972
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 46973
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 46974
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 46975
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 46976
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 46977
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 46978
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 46979
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 46980
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 46981
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 46982
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 46983
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 46984
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 46985
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 46986
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 46987
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 46988
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 46989
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 46990
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 46991
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 46992
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 46993
            //SQRT
            t54 = sqrt(t54);
            //Instruction 46994
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 46995
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 46996
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 46997
            //MUL
            t6.x = t54 * t55;
            //Instruction 46998
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 46999
            //LT
            tb20 = t20<(-t20);
            //Instruction 47000
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 47001
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 47002
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 47003
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 47004
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 47005
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 47006
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 47007
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47008
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 47009
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47010
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 47011
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 47012
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 47013
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 47014
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 47015
            //LOG
            t51 = log2(t51);
            //Instruction 47016
            //MUL
            t51 = t51 * t7.y;
            //Instruction 47017
            //EXP
            t51 = exp2(t51);
            //Instruction 47018
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 47019
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 47020
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 47021
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 47022
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 47023
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 47024
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 47025
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 47026
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 47027
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 47028
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 47029
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 47030
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 47031
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 47032
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 47033
            //MOV
            t11.z = t12.x;
            //Instruction 47034
            //MOV
            t11.w = t10.x;
            //Instruction 47035
            //MOV
            t13.z = t9.y;
            //Instruction 47036
            //MOV
            t13.w = t14.y;
            //Instruction 47037
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 47038
            //MOV
            t14.w = t13.y;
            //Instruction 47039
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 47040
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 47041
            //MOV
            t10.w = t11.y;
            //Instruction 47042
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 47043
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 47044
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 47045
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 47046
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 47047
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 47048
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 47049
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 47050
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 47051
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 47052
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 47053
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 47054
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 47055
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 47056
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 47057
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 47058
        //ELSE
        } else {
            //Instruction 47059
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 47060
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 47061
        //ENDIF
        }
        //Instruction 47062
    //ELSE
    } else {
        //Instruction 47063
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 47064
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 47065
    //ENDIF
    }
    //Instruction 47066
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 47067
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 47068
    //IF
    if(tb52){
        //Instruction 47069
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 47070
        //IF
        if(tb52){
            //Instruction 47071
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47072
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 47073
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 47074
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 47075
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 47076
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 47077
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47078
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 47079
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47080
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 47081
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 47082
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 47083
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47084
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 47085
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 47086
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 47087
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47088
            //FRC
            t2 = fract(t2);
            //Instruction 47089
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47090
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 47091
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47092
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47093
            //ADD
            t2 = t2 + t2;
            //Instruction 47094
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 47095
            //LT
            tb54 = t7.w<0.0;
            //Instruction 47096
            //MOV
            t7.y = (-t7.w);
            //Instruction 47097
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 47098
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 47099
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 47100
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 47101
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 47102
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 47103
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 47104
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47105
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47106
            //MUL
            t56 = t2.x * t56;
            //Instruction 47107
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 47108
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47109
            //MUL
            t54 = t54 * t55;
            //Instruction 47110
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 47111
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 47112
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47113
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47114
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47115
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 47116
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 47117
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47118
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 47119
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47120
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 47121
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 47122
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 47123
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 47124
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47125
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 47126
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 47127
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 47128
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47129
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 47130
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 47131
        //ELSE
        } else {
            //Instruction 47132
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47133
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47134
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47135
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 47136
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 47137
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 47138
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47139
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 47140
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 47141
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47142
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 47143
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47144
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 47145
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47146
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47147
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 47148
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 47149
            //LT
            tb0 = t2.w<0.0;
            //Instruction 47150
            //MOV
            t2.y = (-t2.w);
            //Instruction 47151
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 47152
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 47153
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 47154
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 47155
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 47156
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 47157
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 47158
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47159
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47160
            //MUL
            t54 = t54 * t6.x;
            //Instruction 47161
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 47162
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 47163
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 47164
        //ENDIF
        }
        //Instruction 47165
    //ENDIF
    }
    //Instruction 47166
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 47167
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 47168
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47169
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 47170
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 47171
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 47172
    //NE
    tb54 = t52!=0.0;
    //Instruction 47173
    //LOG
    t55 = log2(t52);
    //Instruction 47174
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 47175
    //EXP
    t55 = exp2(t55);
    //Instruction 47176
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 47177
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47178
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47179
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 47180
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 47181
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47182
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 47183
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47184
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 47185
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 47186
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 47187
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47188
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 47189
    //MUL
    t52 = t52 * t54;
    //Instruction 47190
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 47191
    //MOV
    t5.y = t4.y;
    //Instruction 47192
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 47193
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 47194
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 47195
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 47196
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 47197
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 47198
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 47199
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 47200
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 47201
    //MOV
    t5.xz = vec2(0.500000, 0.500000);
    //Instruction 47202
    //MOV
    t5.y = _ProjectionParams.x;
    //Instruction 47203
    //MUL
    t2.xyz = t4.xyz * t5.xyz;
    //Instruction 47204
    //MUL
    t2.w = t2.y * 0.500000;
    //Instruction 47205
    //ADD
    t0.xy = t2.zz + t2.xw;
    //Instruction 47206
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 47207
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 47208
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 47209
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 47210
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 47211
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 47212
    //MUL
    t6.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 47213
    //MAD
    t6.xyz = _Object2World[0].xyz * t3.xxx + t6.xyz;
    //Instruction 47214
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t6.xyz;
    //Instruction 47215
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 47216
    //MUL
    t5.xyz = t5.xyz * t2.xyw;
    //Instruction 47217
    //MUL
    t5.w = t5.y * 0.500000;
    //Instruction 47218
    //ADD
    vs_TEXCOORD4.xy = t5.zz + t5.xw;
    //Instruction 47219
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 47220
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 47221
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 47222
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 47223
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 47224
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 47225
    //MUL
    t0.xyw = t34.yyy * t6.xyz;
    //Instruction 47226
    //MAD
    t0.xyz = t5.xyz * t34.xxx + t0.xyw;
    //Instruction 47227
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 47228
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 47229
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 47230
    //MAD
    t0.xyz = t5.xyz * vec3(t20) + t0.xyz;
    //Instruction 47231
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 47232
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 47233
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 47234
    //MOV
    t0.w = 1.0;
    //Instruction 47235
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 47236
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 47237
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 47238
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 47239
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 47240
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 47241
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 47242
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 47243
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 47244
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 47245
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 47246
    //MOV
    gl_Position = t2;
    //Instruction 47247
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 47248
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 47249
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 47250
    //MOV
    vs_TEXCOORD3.xyz = t4.xyz;
    //Instruction 47251
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 47252
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47253
    //MOV
    vs_TEXCOORD6.xyz = t16_15.xyz;
    //Instruction 47254
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 46882
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 46883
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 46884
    //MOV
    t1.x = t16_0.x;
    //Instruction 46885
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 46886
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 46887
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 46888
    //LT
    tb1 = t16_1<0.0;
    //Instruction 46889
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46890
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 46891
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 46892
    //LT
    tb1 = t10_2<0.0;
    //Instruction 46893
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 46894
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 46895
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 46896
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 46897
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 46898
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 46899
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 46900
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 46901
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 46902
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 46903
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 46904
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 46905
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 46906
    //MAX
    t16_4.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 46907
    //ADD
    t1.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 46908
    //MUL
    t16_3.xyz = t1.xyz * t16_3.xyz;
    //Instruction 46909
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 46910
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 46911
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="Deferred" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 262492
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_3;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_57 + (unity_SHC.xyz * (
    (normal_56.x * normal_56.x)
   - 
    (normal_56.y * normal_56.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_8;
  normalWorld_8 = tmpvar_3;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = normalWorld_8;
  mediump vec3 x1_10;
  x1_10.x = dot (unity_SHAr, tmpvar_9);
  x1_10.y = dot (unity_SHAg, tmpvar_9);
  x1_10.z = dot (unity_SHAb, tmpvar_9);
  mediump vec4 outDiffuseOcclusion_11;
  mediump vec4 outNormal_12;
  mediump vec4 emission_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_5;
  outDiffuseOcclusion_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  emission_13 = tmpvar_16;
  emission_13.xyz = (emission_13.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_10)));
  outDiffuse_1.xyz = outDiffuseOcclusion_11.xyz;
  outEmission_2.w = emission_13.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_13.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_12;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 47273
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47274
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 47275
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 47276
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47277
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 47278
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 47279
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 47280
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 47281
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 47282
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 47283
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 47284
    //IF
    if(tb22){
        //Instruction 47285
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 47286
        //IF
        if(tb22){
            //Instruction 47287
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47288
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 47289
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 47290
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 47291
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 47292
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 47293
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47294
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 47295
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47296
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 47297
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 47298
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 47299
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 47300
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47301
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 47302
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 47303
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 47304
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47305
            //FRC
            t0 = fract(t0);
            //Instruction 47306
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47307
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 47308
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47309
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47310
            //ADD
            t0 = t0 + t0;
            //Instruction 47311
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 47312
            //LT
            tb23 = t4.w<0.0;
            //Instruction 47313
            //MOV
            t4.y = (-t4.w);
            //Instruction 47314
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 47315
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 47316
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 47317
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 47318
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 47319
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 47320
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 47321
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47322
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47323
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 47324
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 47325
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47326
            //MUL
            t23 = t23 * t24;
            //Instruction 47327
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 47328
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47329
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47330
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47331
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47332
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 47333
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 47334
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47335
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 47336
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47337
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 47338
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 47339
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 47340
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 47341
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47342
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 47343
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 47344
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 47345
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47346
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 47347
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 47348
        //ELSE
        } else {
            //Instruction 47349
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47350
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 47351
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47352
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 47353
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 47354
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 47355
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 47356
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47357
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 47358
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 47359
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47360
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47361
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47362
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 47363
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47364
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47365
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 47366
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 47367
            //LT
            tb22 = t0.w<0.0;
            //Instruction 47368
            //MOV
            t0.y = (-t0.w);
            //Instruction 47369
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 47370
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 47371
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 47372
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 47373
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 47374
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 47375
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 47376
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47377
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47378
            //MUL
            t24 = t24 * t4.x;
            //Instruction 47379
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 47380
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 47381
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47382
        //ENDIF
        }
        //Instruction 47383
    //ELSE
    } else {
        //Instruction 47384
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 47385
    //ENDIF
    }
    //Instruction 47386
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 47387
    //SQRT
    t22 = sqrt(t22);
    //Instruction 47388
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47389
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 47390
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 47391
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 47392
    //NE
    tb3 = t23!=0.0;
    //Instruction 47393
    //LOG
    t10 = log2(t23);
    //Instruction 47394
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 47395
    //EXP
    t10 = exp2(t10);
    //Instruction 47396
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 47397
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47398
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47399
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 47400
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 47401
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47402
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 47403
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47404
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 47405
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 47406
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 47407
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47408
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 47409
    //MUL
    t23 = t23 * t3.x;
    //Instruction 47410
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 47411
    //MOV
    t3.y = t2.y;
    //Instruction 47412
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 47413
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 47414
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 47415
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 47416
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 47417
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 47418
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 47419
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 47420
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 47421
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 47422
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 47423
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 47424
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 47425
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 47426
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 47427
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 47428
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 47429
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 47430
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 47431
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 47432
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 47433
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 47434
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 47435
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 47436
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 47437
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 47438
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 47439
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 47440
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 47441
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 47442
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 47443
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 47444
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 47445
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 47446
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 47447
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 47448
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 47449
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 47450
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 47451
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47452
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 47255
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 47256
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 47257
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 47258
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47259
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47260
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47261
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 47262
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47263
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 47264
    //MOV
    t16_0.w = 1.0;
    //Instruction 47265
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 47266
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 47267
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 47268
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 47269
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 47270
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 47271
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47272
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_3;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_57 + (unity_SHC.xyz * (
    (normal_56.x * normal_56.x)
   - 
    (normal_56.y * normal_56.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_4 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_7;
  normalWorld_7 = tmpvar_2;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normalWorld_7;
  mediump vec3 x1_9;
  x1_9.x = dot (unity_SHAr, tmpvar_8);
  x1_9.y = dot (unity_SHAg, tmpvar_8);
  x1_9.z = dot (unity_SHAb, tmpvar_8);
  mediump vec4 outDiffuseOcclusion_10;
  mediump vec4 outNormal_11;
  mediump vec4 emission_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_4;
  outDiffuseOcclusion_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  emission_12 = tmpvar_15;
  emission_12.xyz = (emission_12.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_9)));
  outDiffuse_1.xyz = outDiffuseOcclusion_10.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_11;
  gl_FragData[3] = emission_12;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 47470
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47471
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 47472
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 47473
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47474
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 47475
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 47476
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 47477
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 47478
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 47479
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 47480
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 47481
    //IF
    if(tb22){
        //Instruction 47482
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 47483
        //IF
        if(tb22){
            //Instruction 47484
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47485
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 47486
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 47487
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 47488
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 47489
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 47490
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47491
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 47492
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47493
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 47494
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 47495
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 47496
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 47497
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47498
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 47499
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 47500
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 47501
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47502
            //FRC
            t0 = fract(t0);
            //Instruction 47503
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47504
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 47505
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47506
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47507
            //ADD
            t0 = t0 + t0;
            //Instruction 47508
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 47509
            //LT
            tb23 = t4.w<0.0;
            //Instruction 47510
            //MOV
            t4.y = (-t4.w);
            //Instruction 47511
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 47512
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 47513
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 47514
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 47515
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 47516
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 47517
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 47518
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47519
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47520
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 47521
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 47522
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47523
            //MUL
            t23 = t23 * t24;
            //Instruction 47524
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 47525
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47526
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47527
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47528
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47529
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 47530
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 47531
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47532
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 47533
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47534
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 47535
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 47536
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 47537
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 47538
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47539
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 47540
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 47541
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 47542
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47543
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 47544
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 47545
        //ELSE
        } else {
            //Instruction 47546
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47547
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 47548
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47549
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 47550
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 47551
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 47552
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 47553
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47554
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 47555
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 47556
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47557
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47558
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47559
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 47560
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47561
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47562
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 47563
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 47564
            //LT
            tb22 = t0.w<0.0;
            //Instruction 47565
            //MOV
            t0.y = (-t0.w);
            //Instruction 47566
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 47567
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 47568
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 47569
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 47570
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 47571
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 47572
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 47573
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47574
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47575
            //MUL
            t24 = t24 * t4.x;
            //Instruction 47576
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 47577
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 47578
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47579
        //ENDIF
        }
        //Instruction 47580
    //ELSE
    } else {
        //Instruction 47581
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 47582
    //ENDIF
    }
    //Instruction 47583
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 47584
    //SQRT
    t22 = sqrt(t22);
    //Instruction 47585
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47586
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 47587
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 47588
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 47589
    //NE
    tb3 = t23!=0.0;
    //Instruction 47590
    //LOG
    t10 = log2(t23);
    //Instruction 47591
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 47592
    //EXP
    t10 = exp2(t10);
    //Instruction 47593
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 47594
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47595
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47596
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 47597
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 47598
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47599
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 47600
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47601
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 47602
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 47603
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 47604
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47605
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 47606
    //MUL
    t23 = t23 * t3.x;
    //Instruction 47607
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 47608
    //MOV
    t3.y = t2.y;
    //Instruction 47609
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 47610
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 47611
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 47612
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 47613
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 47614
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 47615
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 47616
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 47617
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 47618
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 47619
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 47620
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 47621
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 47622
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 47623
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 47624
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 47625
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 47626
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 47627
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 47628
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 47629
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 47630
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 47631
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 47632
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 47633
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 47634
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 47635
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 47636
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 47637
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 47638
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 47639
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 47640
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 47641
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 47642
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 47643
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 47644
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 47645
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 47646
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 47647
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 47648
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47649
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 47453
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 47454
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 47455
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 47456
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47457
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47458
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47459
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 47460
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47461
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 47462
    //MOV
    t16_0.w = 1.0;
    //Instruction 47463
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 47464
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 47465
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 47466
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 47467
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 47468
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47469
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_9 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 47924
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47925
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 47926
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 47927
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 47928
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 47929
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 47930
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 47931
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 47932
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 47933
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 47934
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 47935
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47936
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 47937
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 47938
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 47939
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 47940
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 47941
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 47942
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 47943
    //IF
    if(tb25){
        //Instruction 47944
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 47945
        //IF
        if(tb25){
            //Instruction 47946
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47947
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 47948
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 47949
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 47950
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 47951
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 47952
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47953
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47954
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47955
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47956
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 47957
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 47958
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47959
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 47960
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 47961
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 47962
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47963
            //FRC
            t2 = fract(t2);
            //Instruction 47964
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47965
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 47966
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47967
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47968
            //ADD
            t2 = t2 + t2;
            //Instruction 47969
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 47970
            //LT
            tb27 = t5.w<0.0;
            //Instruction 47971
            //MOV
            t5.y = (-t5.w);
            //Instruction 47972
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 47973
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 47974
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 47975
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 47976
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 47977
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 47978
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 47979
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47980
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47981
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 47982
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 47983
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47984
            //MUL
            t27 = t27 * t28;
            //Instruction 47985
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 47986
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47987
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47988
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47989
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47990
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 47991
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 47992
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47993
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 47994
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47995
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 47996
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 47997
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 47998
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 47999
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48000
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 48001
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 48002
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 48003
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48004
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 48005
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 48006
        //ELSE
        } else {
            //Instruction 48007
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48008
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48009
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48010
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48011
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 48012
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 48013
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48014
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 48015
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 48016
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48017
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48018
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48019
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 48020
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48021
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48022
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 48023
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 48024
            //LT
            tb0 = t2.w<0.0;
            //Instruction 48025
            //MOV
            t2.y = (-t2.w);
            //Instruction 48026
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 48027
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 48028
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 48029
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 48030
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 48031
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 48032
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 48033
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48034
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48035
            //MUL
            t27 = t27 * t5.x;
            //Instruction 48036
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 48037
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 48038
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48039
        //ENDIF
        }
        //Instruction 48040
    //ELSE
    } else {
        //Instruction 48041
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 48042
    //ENDIF
    }
    //Instruction 48043
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 48044
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 48045
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48046
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 48047
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 48048
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 48049
    //NE
    tb27 = t25!=0.0;
    //Instruction 48050
    //LOG
    t4.x = log2(t25);
    //Instruction 48051
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 48052
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 48053
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 48054
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48055
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48056
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 48057
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 48058
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48059
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 48060
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48061
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 48062
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 48063
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 48064
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48065
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 48066
    //MUL
    t25 = t25 * t27;
    //Instruction 48067
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 48068
    //MOV
    t4.y = t3.y;
    //Instruction 48069
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 48070
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 48071
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 48072
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 48073
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 48074
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 48075
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 48076
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 48077
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 48078
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 48079
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 48080
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 48081
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 48082
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 48083
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 48084
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 48085
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 48086
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 48087
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 48088
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 48089
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 48090
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 48091
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 48092
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 48093
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 48094
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 48095
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 48096
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 48097
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 48098
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 48099
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 48100
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 48101
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 48102
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 48103
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 48104
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 48105
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 48106
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 48107
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 48108
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48109
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 47897
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 47898
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 47899
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 47900
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 47901
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 47902
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 47903
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 47904
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 47905
    //MAD
    t16_0.x = t16_13 * 0.500000 + 0.500000;
    //Instruction 47906
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 47907
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 47908
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 47909
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47910
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47911
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47912
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 47913
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47914
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 47915
    //MOV
    t16_0.w = 1.0;
    //Instruction 47916
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 47917
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 47918
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 47919
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 47920
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 47921
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 47922
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47923
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_8 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 48136
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48137
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 48138
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 48139
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 48140
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 48141
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 48142
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 48143
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 48144
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 48145
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 48146
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 48147
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48148
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 48149
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 48150
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 48151
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 48152
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 48153
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 48154
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 48155
    //IF
    if(tb25){
        //Instruction 48156
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 48157
        //IF
        if(tb25){
            //Instruction 48158
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48159
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 48160
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 48161
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 48162
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 48163
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 48164
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48165
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48166
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48167
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48168
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 48169
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 48170
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48171
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 48172
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 48173
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 48174
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48175
            //FRC
            t2 = fract(t2);
            //Instruction 48176
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48177
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 48178
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48179
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48180
            //ADD
            t2 = t2 + t2;
            //Instruction 48181
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 48182
            //LT
            tb27 = t5.w<0.0;
            //Instruction 48183
            //MOV
            t5.y = (-t5.w);
            //Instruction 48184
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 48185
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 48186
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 48187
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 48188
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 48189
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 48190
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 48191
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48192
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48193
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 48194
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 48195
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48196
            //MUL
            t27 = t27 * t28;
            //Instruction 48197
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 48198
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48199
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48200
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48201
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48202
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 48203
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 48204
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48205
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 48206
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48207
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 48208
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 48209
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 48210
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 48211
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48212
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 48213
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 48214
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 48215
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48216
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 48217
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 48218
        //ELSE
        } else {
            //Instruction 48219
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48220
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48221
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48222
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48223
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 48224
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 48225
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48226
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 48227
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 48228
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48229
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48230
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48231
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 48232
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48233
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48234
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 48235
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 48236
            //LT
            tb0 = t2.w<0.0;
            //Instruction 48237
            //MOV
            t2.y = (-t2.w);
            //Instruction 48238
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 48239
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 48240
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 48241
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 48242
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 48243
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 48244
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 48245
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48246
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48247
            //MUL
            t27 = t27 * t5.x;
            //Instruction 48248
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 48249
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 48250
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48251
        //ENDIF
        }
        //Instruction 48252
    //ELSE
    } else {
        //Instruction 48253
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 48254
    //ENDIF
    }
    //Instruction 48255
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 48256
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 48257
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48258
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 48259
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 48260
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 48261
    //NE
    tb27 = t25!=0.0;
    //Instruction 48262
    //LOG
    t4.x = log2(t25);
    //Instruction 48263
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 48264
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 48265
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 48266
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48267
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48268
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 48269
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 48270
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48271
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 48272
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48273
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 48274
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 48275
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 48276
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48277
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 48278
    //MUL
    t25 = t25 * t27;
    //Instruction 48279
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 48280
    //MOV
    t4.y = t3.y;
    //Instruction 48281
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 48282
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 48283
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 48284
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 48285
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 48286
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 48287
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 48288
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 48289
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 48290
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 48291
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 48292
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 48293
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 48294
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 48295
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 48296
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 48297
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 48298
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 48299
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 48300
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 48301
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 48302
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 48303
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 48304
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 48305
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 48306
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 48307
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 48308
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 48309
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 48310
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 48311
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 48312
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 48313
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 48314
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 48315
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 48316
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 48317
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 48318
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 48319
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 48320
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48321
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 48110
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 48111
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 48112
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 48113
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 48114
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 48115
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 48116
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 48117
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 48118
    //MAD
    t16_0.x = t16_13 * 0.500000 + 0.500000;
    //Instruction 48119
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 48120
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 48121
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 48122
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48123
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48124
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48125
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 48126
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48127
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 48128
    //MOV
    t16_0.w = 1.0;
    //Instruction 48129
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 48130
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 48131
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 48132
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 48133
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 48134
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48135
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_9 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD0.xyz, tmpvar_10);
  worldN_3.x = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD1.xyz, tmpvar_10);
  worldN_3.y = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD2.xyz, tmpvar_10);
  worldN_3.z = tmpvar_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = worldN_3;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_5;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outEmission_2.w = emission_19.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 47681
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47682
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 47683
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 47684
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 47685
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 47686
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 47687
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 47688
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 47689
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 47690
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 47691
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 47692
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47693
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 47694
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 47695
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 47696
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 47697
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 47698
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 47699
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 47700
    //IF
    if(tb28){
        //Instruction 47701
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 47702
        //IF
        if(tb28){
            //Instruction 47703
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47704
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 47705
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 47706
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 47707
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 47708
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 47709
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47710
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47711
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47712
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47713
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 47714
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 47715
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47716
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 47717
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 47718
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 47719
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47720
            //FRC
            t2 = fract(t2);
            //Instruction 47721
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47722
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 47723
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47724
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47725
            //ADD
            t2 = t2 + t2;
            //Instruction 47726
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 47727
            //LT
            tb30 = t5.w<0.0;
            //Instruction 47728
            //MOV
            t5.y = (-t5.w);
            //Instruction 47729
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 47730
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 47731
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 47732
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 47733
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 47734
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 47735
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 47736
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47737
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47738
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 47739
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 47740
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47741
            //MUL
            t30 = t30 * t31;
            //Instruction 47742
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 47743
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47744
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47745
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47746
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47747
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 47748
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 47749
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47750
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 47751
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47752
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 47753
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 47754
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 47755
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 47756
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47757
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 47758
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 47759
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 47760
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47761
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 47762
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 47763
        //ELSE
        } else {
            //Instruction 47764
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47765
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47766
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47767
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47768
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 47769
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 47770
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47771
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 47772
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 47773
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47774
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47775
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47776
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 47777
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47778
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47779
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 47780
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 47781
            //LT
            tb0 = t2.w<0.0;
            //Instruction 47782
            //MOV
            t2.y = (-t2.w);
            //Instruction 47783
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 47784
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 47785
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 47786
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 47787
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 47788
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 47789
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 47790
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47791
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47792
            //MUL
            t30 = t30 * t5.x;
            //Instruction 47793
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 47794
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 47795
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47796
        //ENDIF
        }
        //Instruction 47797
    //ELSE
    } else {
        //Instruction 47798
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 47799
    //ENDIF
    }
    //Instruction 47800
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 47801
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 47802
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47803
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 47804
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 47805
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 47806
    //NE
    tb30 = t28!=0.0;
    //Instruction 47807
    //LOG
    t4.x = log2(t28);
    //Instruction 47808
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 47809
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 47810
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 47811
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47812
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47813
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 47814
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 47815
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47816
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 47817
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47818
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 47819
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 47820
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 47821
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47822
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 47823
    //MUL
    t28 = t28 * t30;
    //Instruction 47824
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 47825
    //MOV
    t4.y = t3.y;
    //Instruction 47826
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 47827
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 47828
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 47829
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 47830
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 47831
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 47832
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 47833
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 47834
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 47835
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 47836
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 47837
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 47838
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 47839
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 47840
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 47841
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 47842
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 47843
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 47844
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 47845
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 47846
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 47847
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 47848
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 47849
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 47850
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 47851
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 47852
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 47853
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 47854
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 47855
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 47856
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 47857
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 47858
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 47859
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 47860
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 47861
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 47862
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 47863
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 47864
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 47865
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 47866
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 47867
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 47868
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 47869
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 47870
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 47871
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 47872
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 47873
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 47874
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 47875
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 47876
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 47877
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 47878
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 47879
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 47880
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 47881
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 47882
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 47883
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 47884
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 47885
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47886
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 47650
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 47651
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 47652
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 47653
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 47654
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 47655
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 47656
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 47657
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 47658
    //MAD
    t16_0 = t16_13 * 0.500000 + 0.500000;
    //Instruction 47659
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 47660
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 47661
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 47662
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47663
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47664
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47665
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 47666
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 47667
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 47668
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 47669
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 47670
    //MAD
    t10_3.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47671
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 47672
    //MOV
    t0.w = 1.0;
    //Instruction 47673
    //DP4
    t16_2.x = dot(unity_SHAr, t0);
    //Instruction 47674
    //DP4
    t16_2.y = dot(unity_SHAg, t0);
    //Instruction 47675
    //DP4
    t16_2.z = dot(unity_SHAb, t0);
    //Instruction 47676
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 47677
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 47678
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 47679
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47680
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_8 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = worldN_2;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_4;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 47032
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47033
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 47034
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 47035
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 47036
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 47037
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 47038
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 47039
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 47040
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 47041
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 47042
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 47043
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47044
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 47045
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 47046
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 47047
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 47048
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 47049
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 47050
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 47051
    //IF
    if(tb28){
        //Instruction 47052
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 47053
        //IF
        if(tb28){
            //Instruction 47054
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47055
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 47056
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 47057
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 47058
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 47059
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 47060
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47061
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47062
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47063
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47064
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 47065
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 47066
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47067
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 47068
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 47069
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 47070
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47071
            //FRC
            t2 = fract(t2);
            //Instruction 47072
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47073
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 47074
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47075
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47076
            //ADD
            t2 = t2 + t2;
            //Instruction 47077
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 47078
            //LT
            tb30 = t5.w<0.0;
            //Instruction 47079
            //MOV
            t5.y = (-t5.w);
            //Instruction 47080
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 47081
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 47082
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 47083
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 47084
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 47085
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 47086
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 47087
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47088
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47089
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 47090
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 47091
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47092
            //MUL
            t30 = t30 * t31;
            //Instruction 47093
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 47094
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47095
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47096
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47097
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47098
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 47099
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 47100
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47101
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 47102
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47103
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 47104
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 47105
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 47106
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 47107
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47108
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 47109
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 47110
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 47111
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47112
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 47113
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 47114
        //ELSE
        } else {
            //Instruction 47115
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47116
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47117
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47118
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47119
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 47120
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 47121
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47122
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 47123
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 47124
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47125
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47126
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47127
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 47128
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47129
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47130
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 47131
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 47132
            //LT
            tb0 = t2.w<0.0;
            //Instruction 47133
            //MOV
            t2.y = (-t2.w);
            //Instruction 47134
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 47135
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 47136
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 47137
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 47138
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 47139
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 47140
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 47141
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47142
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47143
            //MUL
            t30 = t30 * t5.x;
            //Instruction 47144
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 47145
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 47146
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47147
        //ENDIF
        }
        //Instruction 47148
    //ELSE
    } else {
        //Instruction 47149
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 47150
    //ENDIF
    }
    //Instruction 47151
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 47152
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 47153
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47154
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 47155
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 47156
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 47157
    //NE
    tb30 = t28!=0.0;
    //Instruction 47158
    //LOG
    t4.x = log2(t28);
    //Instruction 47159
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 47160
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 47161
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 47162
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47163
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47164
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 47165
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 47166
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47167
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 47168
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47169
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 47170
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 47171
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 47172
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47173
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 47174
    //MUL
    t28 = t28 * t30;
    //Instruction 47175
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 47176
    //MOV
    t4.y = t3.y;
    //Instruction 47177
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 47178
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 47179
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 47180
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 47181
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 47182
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 47183
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 47184
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 47185
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 47186
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 47187
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 47188
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 47189
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 47190
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 47191
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 47192
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 47193
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 47194
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 47195
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 47196
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 47197
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 47198
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 47199
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 47200
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 47201
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 47202
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 47203
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 47204
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 47205
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 47206
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 47207
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 47208
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 47209
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 47210
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 47211
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 47212
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 47213
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 47214
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 47215
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 47216
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 47217
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 47218
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 47219
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 47220
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 47221
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 47222
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 47223
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 47224
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 47225
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 47226
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 47227
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 47228
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 47229
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 47230
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 47231
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 47232
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 47233
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 47234
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 47235
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 47236
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47237
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 47002
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 47003
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 47004
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 47005
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 47006
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 47007
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 47008
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 47009
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 47010
    //MAD
    t16_0 = t16_13 * 0.500000 + 0.500000;
    //Instruction 47011
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 47012
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 47013
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 47014
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47015
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47016
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47017
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 47018
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 47019
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 47020
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 47021
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 47022
    //MAD
    t10_3.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47023
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 47024
    //MOV
    t0.w = 1.0;
    //Instruction 47025
    //DP4
    t16_2.x = dot(unity_SHAr, t0);
    //Instruction 47026
    //DP4
    t16_2.y = dot(unity_SHAg, t0);
    //Instruction 47027
    //DP4
    t16_2.z = dot(unity_SHAb, t0);
    //Instruction 47028
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 47029
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 47030
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47031
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_9;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 48344
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48345
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 48346
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 48347
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48348
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 48349
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 48350
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 48351
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 48352
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 48353
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 48354
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 48355
    //IF
    if(tb22){
        //Instruction 48356
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 48357
        //IF
        if(tb22){
            //Instruction 48358
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48359
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 48360
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 48361
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 48362
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 48363
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 48364
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48365
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 48366
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48367
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 48368
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 48369
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 48370
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 48371
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48372
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 48373
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 48374
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 48375
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48376
            //FRC
            t0 = fract(t0);
            //Instruction 48377
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48378
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 48379
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48380
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48381
            //ADD
            t0 = t0 + t0;
            //Instruction 48382
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 48383
            //LT
            tb23 = t4.w<0.0;
            //Instruction 48384
            //MOV
            t4.y = (-t4.w);
            //Instruction 48385
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 48386
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 48387
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 48388
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 48389
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 48390
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 48391
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 48392
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48393
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48394
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 48395
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 48396
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48397
            //MUL
            t23 = t23 * t24;
            //Instruction 48398
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 48399
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48400
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48401
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48402
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48403
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 48404
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 48405
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48406
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 48407
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48408
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 48409
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 48410
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 48411
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 48412
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48413
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 48414
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 48415
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 48416
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48417
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 48418
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 48419
        //ELSE
        } else {
            //Instruction 48420
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48421
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 48422
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48423
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 48424
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 48425
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 48426
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 48427
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48428
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 48429
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 48430
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48431
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48432
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48433
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 48434
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48435
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48436
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 48437
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 48438
            //LT
            tb22 = t0.w<0.0;
            //Instruction 48439
            //MOV
            t0.y = (-t0.w);
            //Instruction 48440
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 48441
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 48442
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 48443
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 48444
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 48445
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 48446
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 48447
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48448
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48449
            //MUL
            t24 = t24 * t4.x;
            //Instruction 48450
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 48451
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 48452
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48453
        //ENDIF
        }
        //Instruction 48454
    //ELSE
    } else {
        //Instruction 48455
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 48456
    //ENDIF
    }
    //Instruction 48457
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 48458
    //SQRT
    t22 = sqrt(t22);
    //Instruction 48459
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48460
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 48461
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 48462
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 48463
    //NE
    tb3 = t23!=0.0;
    //Instruction 48464
    //LOG
    t10 = log2(t23);
    //Instruction 48465
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 48466
    //EXP
    t10 = exp2(t10);
    //Instruction 48467
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 48468
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48469
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48470
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 48471
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 48472
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48473
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 48474
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48475
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 48476
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 48477
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 48478
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48479
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 48480
    //MUL
    t23 = t23 * t3.x;
    //Instruction 48481
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 48482
    //MOV
    t3.y = t2.y;
    //Instruction 48483
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 48484
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 48485
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 48486
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 48487
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 48488
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 48489
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 48490
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 48491
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 48492
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 48493
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 48494
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 48495
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 48496
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 48497
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 48498
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 48499
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 48500
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 48501
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 48502
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 48503
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 48504
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 48505
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 48506
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 48507
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 48508
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 48509
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 48510
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 48511
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 48512
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 48513
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 48514
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 48515
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 48516
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 48517
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 48518
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 48519
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 48520
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 48521
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 48522
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 48523
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 48524
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 48525
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48526
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
void main()
{
    //Instruction 48322
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 48323
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 48324
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 48325
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 48326
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 48327
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 48328
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 48329
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48330
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48331
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48332
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 48333
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48334
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 48335
    //MOV
    t16_1.w = 1.0;
    //Instruction 48336
    //DP4
    t16_4.x = dot(unity_SHAr, t16_1);
    //Instruction 48337
    //DP4
    t16_4.y = dot(unity_SHAg, t16_1);
    //Instruction 48338
    //DP4
    t16_4.z = dot(unity_SHAb, t16_1);
    //Instruction 48339
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 48340
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 48341
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 48342
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48343
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 blendColor_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_5 = tmpvar_8;
  diffuseColor_6.xyz = mix (blendColor_5.xyz, diffuseColor_6.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 47908
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47909
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 47910
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 47911
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47912
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 47913
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 47914
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 47915
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 47916
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 47917
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 47918
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 47919
    //IF
    if(tb22){
        //Instruction 47920
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 47921
        //IF
        if(tb22){
            //Instruction 47922
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47923
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 47924
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 47925
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 47926
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 47927
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 47928
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47929
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 47930
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47931
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 47932
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 47933
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 47934
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 47935
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47936
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 47937
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 47938
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 47939
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47940
            //FRC
            t0 = fract(t0);
            //Instruction 47941
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47942
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 47943
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47944
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47945
            //ADD
            t0 = t0 + t0;
            //Instruction 47946
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 47947
            //LT
            tb23 = t4.w<0.0;
            //Instruction 47948
            //MOV
            t4.y = (-t4.w);
            //Instruction 47949
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 47950
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 47951
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 47952
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 47953
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 47954
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 47955
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 47956
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47957
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47958
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 47959
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 47960
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47961
            //MUL
            t23 = t23 * t24;
            //Instruction 47962
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 47963
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47964
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47965
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47966
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47967
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 47968
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 47969
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47970
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 47971
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47972
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 47973
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 47974
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 47975
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 47976
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47977
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 47978
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 47979
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 47980
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47981
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 47982
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 47983
        //ELSE
        } else {
            //Instruction 47984
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47985
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 47986
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47987
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 47988
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 47989
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 47990
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 47991
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47992
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 47993
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 47994
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47995
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47996
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47997
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 47998
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47999
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48000
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 48001
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 48002
            //LT
            tb22 = t0.w<0.0;
            //Instruction 48003
            //MOV
            t0.y = (-t0.w);
            //Instruction 48004
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 48005
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 48006
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 48007
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 48008
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 48009
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 48010
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 48011
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48012
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48013
            //MUL
            t24 = t24 * t4.x;
            //Instruction 48014
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 48015
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 48016
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48017
        //ENDIF
        }
        //Instruction 48018
    //ELSE
    } else {
        //Instruction 48019
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 48020
    //ENDIF
    }
    //Instruction 48021
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 48022
    //SQRT
    t22 = sqrt(t22);
    //Instruction 48023
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48024
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 48025
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 48026
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 48027
    //NE
    tb3 = t23!=0.0;
    //Instruction 48028
    //LOG
    t10 = log2(t23);
    //Instruction 48029
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 48030
    //EXP
    t10 = exp2(t10);
    //Instruction 48031
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 48032
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48033
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48034
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 48035
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 48036
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48037
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 48038
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48039
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 48040
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 48041
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 48042
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48043
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 48044
    //MUL
    t23 = t23 * t3.x;
    //Instruction 48045
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 48046
    //MOV
    t3.y = t2.y;
    //Instruction 48047
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 48048
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 48049
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 48050
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 48051
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 48052
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 48053
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 48054
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 48055
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 48056
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 48057
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 48058
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 48059
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 48060
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 48061
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 48062
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 48063
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 48064
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 48065
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 48066
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 48067
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 48068
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 48069
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 48070
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 48071
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 48072
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 48073
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 48074
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 48075
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 48076
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 48077
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 48078
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 48079
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 48080
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 48081
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 48082
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 48083
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 48084
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 48085
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 48086
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 48087
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 48088
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 48089
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48090
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
void main()
{
    //Instruction 47887
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 47888
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 47889
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 47890
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 47891
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 47892
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 47893
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 47894
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47895
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47896
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47897
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 47898
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47899
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 47900
    //MOV
    t16_1.w = 1.0;
    //Instruction 47901
    //DP4
    t16_4.x = dot(unity_SHAr, t16_1);
    //Instruction 47902
    //DP4
    t16_4.y = dot(unity_SHAg, t16_1);
    //Instruction 47903
    //DP4
    t16_4.z = dot(unity_SHAb, t16_1);
    //Instruction 47904
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 47905
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 47906
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47907
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_7 = tmpvar_10;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 47269
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47270
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 47271
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 47272
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 47273
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 47274
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 47275
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 47276
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 47277
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 47278
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 47279
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 47280
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47281
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 47282
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 47283
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 47284
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 47285
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 47286
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 47287
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 47288
    //IF
    if(tb25){
        //Instruction 47289
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 47290
        //IF
        if(tb25){
            //Instruction 47291
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47292
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 47293
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 47294
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 47295
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 47296
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 47297
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47298
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47299
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47300
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47301
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 47302
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 47303
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47304
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 47305
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 47306
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 47307
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47308
            //FRC
            t2 = fract(t2);
            //Instruction 47309
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47310
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 47311
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47312
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47313
            //ADD
            t2 = t2 + t2;
            //Instruction 47314
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 47315
            //LT
            tb27 = t5.w<0.0;
            //Instruction 47316
            //MOV
            t5.y = (-t5.w);
            //Instruction 47317
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 47318
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 47319
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 47320
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 47321
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 47322
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 47323
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 47324
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47325
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47326
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 47327
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 47328
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47329
            //MUL
            t27 = t27 * t28;
            //Instruction 47330
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 47331
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47332
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47333
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47334
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47335
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 47336
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 47337
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47338
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 47339
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47340
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 47341
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 47342
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 47343
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 47344
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47345
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 47346
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 47347
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 47348
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47349
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 47350
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 47351
        //ELSE
        } else {
            //Instruction 47352
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47353
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47354
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47355
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47356
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 47357
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 47358
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47359
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 47360
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 47361
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47362
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47363
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47364
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 47365
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47366
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47367
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 47368
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 47369
            //LT
            tb0 = t2.w<0.0;
            //Instruction 47370
            //MOV
            t2.y = (-t2.w);
            //Instruction 47371
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 47372
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 47373
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 47374
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 47375
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 47376
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 47377
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 47378
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47379
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47380
            //MUL
            t27 = t27 * t5.x;
            //Instruction 47381
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 47382
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 47383
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47384
        //ENDIF
        }
        //Instruction 47385
    //ELSE
    } else {
        //Instruction 47386
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 47387
    //ENDIF
    }
    //Instruction 47388
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 47389
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 47390
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47391
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 47392
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 47393
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 47394
    //NE
    tb27 = t25!=0.0;
    //Instruction 47395
    //LOG
    t4.x = log2(t25);
    //Instruction 47396
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 47397
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 47398
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 47399
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47400
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47401
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 47402
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 47403
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47404
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 47405
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47406
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 47407
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 47408
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 47409
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47410
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 47411
    //MUL
    t25 = t25 * t27;
    //Instruction 47412
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 47413
    //MOV
    t4.y = t3.y;
    //Instruction 47414
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 47415
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 47416
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 47417
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 47418
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 47419
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 47420
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 47421
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 47422
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 47423
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 47424
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 47425
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 47426
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 47427
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 47428
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 47429
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 47430
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 47431
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 47432
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 47433
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 47434
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 47435
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 47436
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 47437
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 47438
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 47439
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 47440
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 47441
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 47442
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 47443
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 47444
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 47445
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 47446
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 47447
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 47448
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 47449
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 47450
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 47451
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 47452
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 47453
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 47454
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 47455
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 47456
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47457
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 47238
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 47239
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 47240
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 47241
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 47242
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 47243
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 47244
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 47245
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 47246
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 47247
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 47248
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 47249
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 47250
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 47251
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 47252
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 47253
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 47254
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47255
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47256
    //MAD
    t10_4.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47257
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 47258
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47259
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 47260
    //MOV
    t16_1.w = 1.0;
    //Instruction 47261
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 47262
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 47263
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 47264
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 47265
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 47266
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 47267
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47268
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_9;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_5 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 48557
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48558
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 48559
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 48560
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 48561
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 48562
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 48563
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 48564
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 48565
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 48566
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 48567
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 48568
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48569
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 48570
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 48571
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 48572
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 48573
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 48574
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 48575
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 48576
    //IF
    if(tb25){
        //Instruction 48577
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 48578
        //IF
        if(tb25){
            //Instruction 48579
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48580
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 48581
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 48582
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 48583
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 48584
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 48585
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48586
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48587
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48588
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48589
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 48590
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 48591
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48592
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 48593
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 48594
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 48595
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48596
            //FRC
            t2 = fract(t2);
            //Instruction 48597
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48598
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 48599
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48600
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48601
            //ADD
            t2 = t2 + t2;
            //Instruction 48602
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 48603
            //LT
            tb27 = t5.w<0.0;
            //Instruction 48604
            //MOV
            t5.y = (-t5.w);
            //Instruction 48605
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 48606
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 48607
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 48608
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 48609
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 48610
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 48611
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 48612
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48613
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48614
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 48615
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 48616
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48617
            //MUL
            t27 = t27 * t28;
            //Instruction 48618
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 48619
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48620
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48621
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48622
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48623
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 48624
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 48625
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48626
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 48627
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48628
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 48629
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 48630
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 48631
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 48632
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48633
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 48634
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 48635
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 48636
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48637
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 48638
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 48639
        //ELSE
        } else {
            //Instruction 48640
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48641
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48642
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48643
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48644
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 48645
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 48646
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48647
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 48648
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 48649
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48650
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48651
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48652
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 48653
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48654
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48655
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 48656
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 48657
            //LT
            tb0 = t2.w<0.0;
            //Instruction 48658
            //MOV
            t2.y = (-t2.w);
            //Instruction 48659
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 48660
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 48661
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 48662
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 48663
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 48664
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 48665
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 48666
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48667
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48668
            //MUL
            t27 = t27 * t5.x;
            //Instruction 48669
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 48670
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 48671
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48672
        //ENDIF
        }
        //Instruction 48673
    //ELSE
    } else {
        //Instruction 48674
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 48675
    //ENDIF
    }
    //Instruction 48676
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 48677
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 48678
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48679
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 48680
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 48681
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 48682
    //NE
    tb27 = t25!=0.0;
    //Instruction 48683
    //LOG
    t4.x = log2(t25);
    //Instruction 48684
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 48685
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 48686
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 48687
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48688
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48689
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 48690
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 48691
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48692
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 48693
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48694
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 48695
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 48696
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 48697
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48698
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 48699
    //MUL
    t25 = t25 * t27;
    //Instruction 48700
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 48701
    //MOV
    t4.y = t3.y;
    //Instruction 48702
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 48703
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 48704
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 48705
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 48706
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 48707
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 48708
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 48709
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 48710
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 48711
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 48712
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 48713
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 48714
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 48715
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 48716
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 48717
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 48718
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 48719
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 48720
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 48721
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 48722
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 48723
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 48724
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 48725
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 48726
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 48727
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 48728
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 48729
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 48730
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 48731
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 48732
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 48733
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 48734
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 48735
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 48736
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 48737
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 48738
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 48739
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 48740
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 48741
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 48742
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 48743
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 48744
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48745
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 48527
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 48528
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 48529
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 48530
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 48531
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 48532
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 48533
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 48534
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 48535
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 48536
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 48537
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 48538
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 48539
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 48540
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 48541
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 48542
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 48543
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48544
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48545
    //MAD
    t10_4.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48546
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 48547
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48548
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 48549
    //MOV
    t16_1.w = 1.0;
    //Instruction 48550
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 48551
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 48552
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 48553
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 48554
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 48555
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48556
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_7 = tmpvar_10;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 48126
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48127
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 48128
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 48129
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 48130
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 48131
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 48132
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 48133
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 48134
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 48135
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 48136
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 48137
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48138
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 48139
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 48140
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 48141
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 48142
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 48143
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 48144
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 48145
    //IF
    if(tb28){
        //Instruction 48146
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 48147
        //IF
        if(tb28){
            //Instruction 48148
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48149
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 48150
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 48151
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 48152
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 48153
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 48154
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48155
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48156
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48157
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48158
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 48159
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 48160
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48161
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 48162
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 48163
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 48164
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48165
            //FRC
            t2 = fract(t2);
            //Instruction 48166
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48167
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 48168
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48169
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48170
            //ADD
            t2 = t2 + t2;
            //Instruction 48171
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 48172
            //LT
            tb30 = t5.w<0.0;
            //Instruction 48173
            //MOV
            t5.y = (-t5.w);
            //Instruction 48174
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 48175
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 48176
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 48177
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 48178
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 48179
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 48180
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 48181
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48182
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48183
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 48184
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 48185
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48186
            //MUL
            t30 = t30 * t31;
            //Instruction 48187
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 48188
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48189
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48190
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48191
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48192
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 48193
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 48194
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48195
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 48196
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48197
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 48198
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 48199
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 48200
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 48201
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48202
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 48203
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 48204
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 48205
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48206
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 48207
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 48208
        //ELSE
        } else {
            //Instruction 48209
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48210
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48211
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48212
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48213
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 48214
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 48215
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48216
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 48217
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 48218
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48219
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48220
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48221
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 48222
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48223
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48224
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 48225
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 48226
            //LT
            tb0 = t2.w<0.0;
            //Instruction 48227
            //MOV
            t2.y = (-t2.w);
            //Instruction 48228
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 48229
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 48230
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 48231
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 48232
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 48233
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 48234
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 48235
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48236
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48237
            //MUL
            t30 = t30 * t5.x;
            //Instruction 48238
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 48239
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 48240
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 48241
        //ENDIF
        }
        //Instruction 48242
    //ELSE
    } else {
        //Instruction 48243
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 48244
    //ENDIF
    }
    //Instruction 48245
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 48246
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 48247
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48248
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 48249
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 48250
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 48251
    //NE
    tb30 = t28!=0.0;
    //Instruction 48252
    //LOG
    t4.x = log2(t28);
    //Instruction 48253
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 48254
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 48255
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 48256
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48257
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48258
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 48259
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 48260
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48261
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 48262
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48263
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 48264
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 48265
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 48266
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48267
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 48268
    //MUL
    t28 = t28 * t30;
    //Instruction 48269
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 48270
    //MOV
    t4.y = t3.y;
    //Instruction 48271
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 48272
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 48273
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 48274
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 48275
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 48276
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 48277
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 48278
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 48279
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 48280
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 48281
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 48282
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 48283
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 48284
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 48285
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 48286
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 48287
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 48288
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 48289
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 48290
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 48291
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 48292
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 48293
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 48294
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 48295
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 48296
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 48297
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 48298
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 48299
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 48300
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 48301
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 48302
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 48303
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 48304
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 48305
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 48306
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 48307
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 48308
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 48309
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 48310
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 48311
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 48312
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 48313
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 48314
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 48315
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 48316
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 48317
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 48318
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 48319
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 48320
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 48321
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 48322
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 48323
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 48324
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 48325
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 48326
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 48327
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 48328
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 48329
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 48330
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 48331
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 48332
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 48333
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48334
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 48091
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 48092
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 48093
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 48094
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 48095
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 48096
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 48097
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 48098
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 48099
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 48100
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 48101
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 48102
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 48103
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 48104
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 48105
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 48106
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 48107
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48108
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48109
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48110
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 48111
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 48112
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 48113
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 48114
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 48115
    //MAD
    t10_4.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48116
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 48117
    //MOV
    t1.w = 1.0;
    //Instruction 48118
    //DP4
    t16_3.x = dot(unity_SHAr, t1);
    //Instruction 48119
    //DP4
    t16_3.y = dot(unity_SHAg, t1);
    //Instruction 48120
    //DP4
    t16_3.z = dot(unity_SHAb, t1);
    //Instruction 48121
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD8.xyz;
    //Instruction 48122
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 48123
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 48124
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48125
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_6 = tmpvar_9;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_5 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 47492
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47493
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 47494
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 47495
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 47496
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 47497
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 47498
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 47499
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 47500
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 47501
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 47502
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 47503
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47504
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 47505
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 47506
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 47507
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 47508
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 47509
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 47510
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 47511
    //IF
    if(tb28){
        //Instruction 47512
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 47513
        //IF
        if(tb28){
            //Instruction 47514
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47515
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 47516
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 47517
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 47518
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 47519
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 47520
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47521
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47522
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47523
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47524
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 47525
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 47526
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47527
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 47528
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 47529
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 47530
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47531
            //FRC
            t2 = fract(t2);
            //Instruction 47532
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47533
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 47534
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47535
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47536
            //ADD
            t2 = t2 + t2;
            //Instruction 47537
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 47538
            //LT
            tb30 = t5.w<0.0;
            //Instruction 47539
            //MOV
            t5.y = (-t5.w);
            //Instruction 47540
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 47541
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 47542
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 47543
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 47544
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 47545
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 47546
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 47547
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47548
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47549
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 47550
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 47551
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47552
            //MUL
            t30 = t30 * t31;
            //Instruction 47553
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 47554
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47555
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47556
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47557
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47558
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 47559
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 47560
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47561
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 47562
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47563
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 47564
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 47565
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 47566
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 47567
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47568
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 47569
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 47570
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 47571
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47572
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 47573
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 47574
        //ELSE
        } else {
            //Instruction 47575
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47576
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47577
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47578
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47579
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 47580
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 47581
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47582
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 47583
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 47584
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47585
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47586
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47587
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 47588
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47589
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47590
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 47591
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 47592
            //LT
            tb0 = t2.w<0.0;
            //Instruction 47593
            //MOV
            t2.y = (-t2.w);
            //Instruction 47594
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 47595
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 47596
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 47597
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 47598
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 47599
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 47600
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 47601
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47602
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47603
            //MUL
            t30 = t30 * t5.x;
            //Instruction 47604
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 47605
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 47606
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 47607
        //ENDIF
        }
        //Instruction 47608
    //ELSE
    } else {
        //Instruction 47609
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 47610
    //ENDIF
    }
    //Instruction 47611
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 47612
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 47613
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47614
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 47615
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 47616
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 47617
    //NE
    tb30 = t28!=0.0;
    //Instruction 47618
    //LOG
    t4.x = log2(t28);
    //Instruction 47619
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 47620
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 47621
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 47622
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47623
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47624
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 47625
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 47626
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47627
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 47628
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47629
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 47630
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 47631
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 47632
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47633
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 47634
    //MUL
    t28 = t28 * t30;
    //Instruction 47635
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 47636
    //MOV
    t4.y = t3.y;
    //Instruction 47637
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 47638
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 47639
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 47640
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 47641
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 47642
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 47643
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 47644
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 47645
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 47646
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 47647
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 47648
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 47649
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 47650
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 47651
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 47652
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 47653
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 47654
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 47655
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 47656
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 47657
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 47658
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 47659
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 47660
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 47661
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 47662
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 47663
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 47664
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 47665
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 47666
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 47667
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 47668
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 47669
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 47670
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 47671
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 47672
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 47673
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 47674
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 47675
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 47676
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 47677
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 47678
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 47679
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 47680
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 47681
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 47682
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 47683
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 47684
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 47685
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 47686
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 47687
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 47688
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 47689
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 47690
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 47691
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 47692
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 47693
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 47694
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 47695
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 47696
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 47697
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 47698
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 47699
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47700
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 47458
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 47459
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 47460
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 47461
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 47462
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 47463
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 47464
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 47465
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 47466
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 47467
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 47468
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 47469
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 47470
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 47471
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 47472
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 47473
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 47474
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47475
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47476
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47477
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 47478
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 47479
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 47480
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 47481
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 47482
    //MAD
    t10_4.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47483
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 47484
    //MOV
    t1.w = 1.0;
    //Instruction 47485
    //DP4
    t16_3.x = dot(unity_SHAr, t1);
    //Instruction 47486
    //DP4
    t16_3.y = dot(unity_SHAg, t1);
    //Instruction 47487
    //DP4
    t16_3.z = dot(unity_SHAb, t1);
    //Instruction 47488
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD8.xyz;
    //Instruction 47489
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 47490
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47491
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 48767
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48768
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 48769
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 48770
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48771
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 48772
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 48773
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 48774
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 48775
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 48776
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 48777
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 48778
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 48779
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 48780
    //ADD
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 48781
    //MAD
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 48782
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 48783
    //FRC
    t2.x = fract(t2.x);
    //Instruction 48784
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 48785
    //MUL
    t9 = abs(t2.x) * abs(t2.x);
    //Instruction 48786
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 48787
    //MAD
    t2.x = t9 * t2.x + -0.500000;
    //Instruction 48788
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 48789
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 48790
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 48791
    //MOVC
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 48792
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 48793
    //IF
    if(tb23){
        //Instruction 48794
        //IF
        if(tb22){
            //Instruction 48795
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48796
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 48797
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 48798
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 48799
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 48800
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 48801
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48802
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48803
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48804
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48805
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 48806
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 48807
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 48808
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48809
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 48810
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 48811
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 48812
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48813
            //FRC
            t0 = fract(t0);
            //Instruction 48814
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48815
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 48816
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48817
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48818
            //ADD
            t0 = t0 + t0;
            //Instruction 48819
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 48820
            //LT
            tb23 = t5.w<0.0;
            //Instruction 48821
            //MOV
            t5.y = (-t5.w);
            //Instruction 48822
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 48823
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 48824
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 48825
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 48826
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 48827
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 48828
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 48829
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48830
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48831
            //MUL
            t25 = t0.x * t25;
            //Instruction 48832
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 48833
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48834
            //MUL
            t23 = t23 * t24;
            //Instruction 48835
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 48836
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 48837
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48838
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48839
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48840
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 48841
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 48842
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48843
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 48844
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48845
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 48846
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 48847
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 48848
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 48849
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48850
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 48851
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 48852
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 48853
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48854
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 48855
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 48856
        //ELSE
        } else {
            //Instruction 48857
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48858
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 48859
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48860
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 48861
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 48862
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 48863
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 48864
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48865
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 48866
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 48867
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48868
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48869
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48870
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 48871
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48872
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48873
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 48874
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 48875
            //LT
            tb22 = t0.w<0.0;
            //Instruction 48876
            //MOV
            t0.y = (-t0.w);
            //Instruction 48877
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 48878
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 48879
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 48880
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 48881
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 48882
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 48883
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 48884
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48