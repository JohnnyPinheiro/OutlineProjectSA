= t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 26149
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26150
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26151
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 26152
        //ELSE
        } else {
            //Instruction 26153
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26154
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 26155
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26156
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 26157
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 26158
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 26159
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 26160
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26161
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 26162
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 26163
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26164
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26165
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26166
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 26167
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26168
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26169
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 26170
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 26171
            //LT
            tb16 = t0.w<0.0;
            //Instruction 26172
            //MOV
            t0.y = (-t0.w);
            //Instruction 26173
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 26174
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 26175
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 26176
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 26177
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 26178
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 26179
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 26180
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26181
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26182
            //MUL
            t45 = t45 * t5.x;
            //Instruction 26183
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 26184
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26185
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26186
        //ENDIF
        }
        //Instruction 26187
    //ENDIF
    }
    //Instruction 26188
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 26189
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 26190
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26191
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 26192
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 26193
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 26194
    //NE
    tb45 = t44!=0.0;
    //Instruction 26195
    //LOG
    t4.x = log2(t44);
    //Instruction 26196
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 26197
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 26198
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 26199
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26200
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26201
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 26202
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 26203
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26204
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 26205
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26206
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 26207
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 26208
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 26209
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26210
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 26211
    //MUL
    t44 = t44 * t45;
    //Instruction 26212
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 26213
    //MOV
    t4.y = t3.y;
    //Instruction 26214
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 26215
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 26216
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 26217
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 26218
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 26219
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 26220
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 26221
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 26222
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 26223
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 26224
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 26225
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 26226
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 26227
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 26228
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 26229
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 26230
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 26231
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 26232
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 26233
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 26234
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 26235
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 26236
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 26237
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 26238
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 26239
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 26240
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 26241
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 26242
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 26243
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 26244
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 26245
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 26246
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    //Instruction 25930
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 25931
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 25932
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 25933
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 25934
    //LT
    tb0 = t10_1<0.0;
    //Instruction 25935
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 25936
    //DP3
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 25937
    //MAX
    t16_11 = max(t16_11, 0.0);
    //Instruction 25938
    //MUL
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    //Instruction 25939
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 25940
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 25941
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_10.x)
   + 
    (v_96.xyz * tmpvar_10.y)
  ) + (v_97.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_98;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 26170
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26171
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 26172
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 26173
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26174
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 26175
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 26176
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 26177
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 26178
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 26179
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 26180
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 26181
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 26182
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 26183
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 26184
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 26185
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 26186
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 26187
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 26188
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 26189
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 26190
        //FRC
        t15.x = fract(t15.x);
        //Instruction 26191
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 26192
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 26193
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 26194
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 26195
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 26196
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 26197
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 26198
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 26199
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 26200
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 26201
        //IF
        if(tb29){
            //Instruction 26202
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 26203
            //FRC
            t4 = fract(t4);
            //Instruction 26204
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26205
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 26206
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 26207
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 26208
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 26209
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 26210
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26211
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 26212
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26213
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 26214
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26215
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 26216
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 26217
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 26218
            //SQRT
            t44 = sqrt(t44);
            //Instruction 26219
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 26220
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 26221
            //MUL
            t45 = t45 * t5.x;
            //Instruction 26222
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 26223
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 26224
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 26225
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 26226
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 26227
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 26228
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 26229
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 26230
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 26231
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 26232
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 26233
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 26234
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 26235
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 26236
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 26237
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 26238
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 26239
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 26240
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 26241
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 26242
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 26243
            //SQRT
            t45 = sqrt(t45);
            //Instruction 26244
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 26245
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 26246
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 26247
            //MUL
            t33 = t45 * t5.x;
            //Instruction 26248
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 26249
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 26250
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 26251
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 26252
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 26253
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 26254
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 26255
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26256
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 26257
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26258
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 26259
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26260
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 26261
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 26262
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 26263
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 26264
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 26265
            //LOG
            t43 = log2(t43);
            //Instruction 26266
            //MUL
            t29 = t43 * t15.y;
            //Instruction 26267
            //EXP
            t29 = exp2(t29);
            //Instruction 26268
            //MUL
            t43 = t5.y * t45;
            //Instruction 26269
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 26270
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 26271
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 26272
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 26273
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 26274
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 26275
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 26276
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 26277
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 26278
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 26279
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 26280
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 26281
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 26282
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 26283
            //MOV
            t10.z = t11.x;
            //Instruction 26284
            //MOV
            t10.w = t9.x;
            //Instruction 26285
            //MOV
            t12.z = t8.y;
            //Instruction 26286
            //MOV
            t12.w = t13.y;
            //Instruction 26287
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 26288
            //MOV
            t13.w = t12.y;
            //Instruction 26289
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 26290
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 26291
            //MOV
            t9.w = t10.y;
            //Instruction 26292
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 26293
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 26294
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 26295
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 26296
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 26297
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 26298
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 26299
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 26300
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 26301
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 26302
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 26303
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 26304
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 26305
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 26306
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26307
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 26308
        //ELSE
        } else {
            //Instruction 26309
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 26310
        //ENDIF
        }
        //Instruction 26311
    //ELSE
    } else {
        //Instruction 26312
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 26313
    //ENDIF
    }
    //Instruction 26314
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 26315
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 26316
    //IF
    if(tb16){
        //Instruction 26317
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 26318
        //IF
        if(tb16){
            //Instruction 26319
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 26320
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 26321
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 26322
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 26323
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 26324
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26325
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26326
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26327
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26328
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 26329
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 26330
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 26331
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 26332
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26333
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 26334
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 26335
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 26336
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 26337
            //FRC
            t0 = fract(t0);
            //Instruction 26338
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 26339
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 26340
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 26341
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 26342
            //ADD
            t0 = t0 + t0;
            //Instruction 26343
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 26344
            //LT
            tb44 = t6.w<0.0;
            //Instruction 26345
            //MOV
            t6.y = (-t6.w);
            //Instruction 26346
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 26347
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 26348
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 26349
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 26350
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 26351
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 26352
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 26353
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26354
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26355
            //MUL
            t46 = t0.x * t46;
            //Instruction 26356
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 26357
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26358
            //MUL
            t44 = t44 * t45;
            //Instruction 26359
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 26360
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26361
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26362
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26363
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26364
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26365
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 26366
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26367
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 26368
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26369
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 26370
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 26371
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 26372
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 26373
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26374
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 26375
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 26376
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 26377
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26378
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26379
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 26380
        //ELSE
        } else {
            //Instruction 26381
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26382
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 26383
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26384
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 26385
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 26386
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 26387
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 26388
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26389
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 26390
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 26391
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26392
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26393
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26394
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 26395
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26396
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26397
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 26398
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 26399
            //LT
            tb16 = t0.w<0.0;
            //Instruction 26400
            //MOV
            t0.y = (-t0.w);
            //Instruction 26401
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 26402
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 26403
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 26404
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 26405
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 26406
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 26407
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 26408
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26409
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26410
            //MUL
            t45 = t45 * t5.x;
            //Instruction 26411
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 26412
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26413
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26414
        //ENDIF
        }
        //Instruction 26415
    //ENDIF
    }
    //Instruction 26416
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 26417
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 26418
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26419
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 26420
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 26421
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 26422
    //NE
    tb45 = t44!=0.0;
    //Instruction 26423
    //LOG
    t4.x = log2(t44);
    //Instruction 26424
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 26425
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 26426
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 26427
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26428
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26429
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 26430
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 26431
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26432
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 26433
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26434
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 26435
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 26436
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 26437
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26438
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 26439
    //MUL
    t44 = t44 * t45;
    //Instruction 26440
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 26441
    //MOV
    t4.y = t3.y;
    //Instruction 26442
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 26443
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 26444
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 26445
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 26446
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 26447
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 26448
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 26449
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 26450
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 26451
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 26452
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 26453
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 26454
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 26455
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 26456
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 26457
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 26458
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 26459
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 26460
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 26461
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 26462
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 26463
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 26464
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 26465
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 26466
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 26467
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 26468
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 26469
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 26470
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 26471
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 26472
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 26473
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 26474
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
bool tb9;
mediump float t16_14;
lowp float t10_14;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 26140
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 26141
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26142
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 26143
    //LT
    tb0 = t10_1<0.0;
    //Instruction 26144
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 26145
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 26146
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 26147
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 26148
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 26149
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 26150
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 26151
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 26152
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 26153
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 26154
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 26155
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 26156
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 26157
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 26158
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 26159
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 26160
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 26161
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 26162
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 26163
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 26164
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 26165
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 26166
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 26167
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26168
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26169
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_10.x)
   + 
    (v_96.xyz * tmpvar_10.y)
  ) + (v_97.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_98;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, tmpvar_14).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 27212
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 27213
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 27214
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 27215
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 27216
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 27217
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 27218
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 27219
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 27220
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 27221
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 27222
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 27223
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 27224
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 27225
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 27226
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 27227
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 27228
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 27229
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 27230
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 27231
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 27232
        //FRC
        t15.x = fract(t15.x);
        //Instruction 27233
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 27234
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 27235
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 27236
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 27237
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 27238
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 27239
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 27240
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 27241
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 27242
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 27243
        //IF
        if(tb29){
            //Instruction 27244
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 27245
            //FRC
            t4 = fract(t4);
            //Instruction 27246
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27247
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 27248
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 27249
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 27250
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 27251
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 27252
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 27253
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 27254
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27255
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 27256
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27257
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 27258
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 27259
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 27260
            //SQRT
            t44 = sqrt(t44);
            //Instruction 27261
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 27262
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 27263
            //MUL
            t45 = t45 * t5.x;
            //Instruction 27264
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 27265
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 27266
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 27267
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 27268
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 27269
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 27270
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 27271
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 27272
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 27273
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 27274
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 27275
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 27276
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 27277
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 27278
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 27279
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 27280
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 27281
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 27282
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 27283
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 27284
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 27285
            //SQRT
            t45 = sqrt(t45);
            //Instruction 27286
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 27287
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 27288
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 27289
            //MUL
            t33 = t45 * t5.x;
            //Instruction 27290
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 27291
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 27292
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 27293
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 27294
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 27295
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 27296
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 27297
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 27298
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 27299
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27300
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 27301
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27302
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 27303
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 27304
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 27305
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 27306
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 27307
            //LOG
            t43 = log2(t43);
            //Instruction 27308
            //MUL
            t29 = t43 * t15.y;
            //Instruction 27309
            //EXP
            t29 = exp2(t29);
            //Instruction 27310
            //MUL
            t43 = t5.y * t45;
            //Instruction 27311
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 27312
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 27313
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 27314
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 27315
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 27316
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 27317
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 27318
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 27319
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 27320
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 27321
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 27322
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 27323
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 27324
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 27325
            //MOV
            t10.z = t11.x;
            //Instruction 27326
            //MOV
            t10.w = t9.x;
            //Instruction 27327
            //MOV
            t12.z = t8.y;
            //Instruction 27328
            //MOV
            t12.w = t13.y;
            //Instruction 27329
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 27330
            //MOV
            t13.w = t12.y;
            //Instruction 27331
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 27332
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 27333
            //MOV
            t9.w = t10.y;
            //Instruction 27334
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 27335
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 27336
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 27337
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 27338
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 27339
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 27340
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 27341
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 27342
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 27343
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 27344
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 27345
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 27346
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 27347
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 27348
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 27349
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 27350
        //ELSE
        } else {
            //Instruction 27351
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 27352
        //ENDIF
        }
        //Instruction 27353
    //ELSE
    } else {
        //Instruction 27354
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 27355
    //ENDIF
    }
    //Instruction 27356
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 27357
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 27358
    //IF
    if(tb16){
        //Instruction 27359
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 27360
        //IF
        if(tb16){
            //Instruction 27361
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27362
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 27363
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 27364
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 27365
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 27366
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 27367
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27368
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27369
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27370
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 27371
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27372
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 27373
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 27374
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27375
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 27376
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 27377
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 27378
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27379
            //FRC
            t0 = fract(t0);
            //Instruction 27380
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27381
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 27382
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27383
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27384
            //ADD
            t0 = t0 + t0;
            //Instruction 27385
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 27386
            //LT
            tb44 = t6.w<0.0;
            //Instruction 27387
            //MOV
            t6.y = (-t6.w);
            //Instruction 27388
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 27389
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 27390
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 27391
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 27392
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 27393
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 27394
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 27395
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27396
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27397
            //MUL
            t46 = t0.x * t46;
            //Instruction 27398
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 27399
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27400
            //MUL
            t44 = t44 * t45;
            //Instruction 27401
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 27402
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 27403
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27404
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27405
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27406
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 27407
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 27408
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27409
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 27410
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27411
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 27412
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 27413
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 27414
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 27415
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27416
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 27417
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 27418
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 27419
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27420
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 27421
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 27422
        //ELSE
        } else {
            //Instruction 27423
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27424
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 27425
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27426
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 27427
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27428
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 27429
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 27430
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27431
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 27432
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 27433
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27434
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27435
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27436
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 27437
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27438
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27439
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 27440
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 27441
            //LT
            tb16 = t0.w<0.0;
            //Instruction 27442
            //MOV
            t0.y = (-t0.w);
            //Instruction 27443
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 27444
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 27445
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 27446
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 27447
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 27448
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 27449
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 27450
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27451
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27452
            //MUL
            t45 = t45 * t5.x;
            //Instruction 27453
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 27454
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 27455
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 27456
        //ENDIF
        }
        //Instruction 27457
    //ENDIF
    }
    //Instruction 27458
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 27459
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 27460
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27461
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 27462
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 27463
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 27464
    //NE
    tb45 = t44!=0.0;
    //Instruction 27465
    //LOG
    t4.x = log2(t44);
    //Instruction 27466
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 27467
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 27468
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 27469
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27470
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27471
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 27472
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 27473
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27474
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 27475
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27476
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 27477
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 27478
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 27479
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27480
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 27481
    //MUL
    t44 = t44 * t45;
    //Instruction 27482
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 27483
    //MOV
    t4.y = t3.y;
    //Instruction 27484
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 27485
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 27486
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 27487
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 27488
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 27489
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 27490
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 27491
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 27492
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 27493
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 27494
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 27495
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 27496
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 27497
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 27498
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 27499
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 27500
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 27501
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 27502
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 27503
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 27504
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 27505
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 27506
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 27507
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 27508
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 27509
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 27510
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 27511
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 27512
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 27513
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 27514
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 27515
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 27516
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 27187
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 27188
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 27189
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 27190
    //LT
    tb0 = t10_1<0.0;
    //Instruction 27191
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 27192
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 27193
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 27194
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 27195
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 27196
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 27197
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 27198
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 27199
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 27200
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 27201
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 27202
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 27203
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 27204
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 27205
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 27206
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 27207
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 27208
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 27209
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 27210
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 27211
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_10.x)
   + 
    (v_96.xyz * tmpvar_10.y)
  ) + (v_97.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_98;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 26265
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26266
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 26267
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 26268
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26269
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 26270
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 26271
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 26272
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 26273
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 26274
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 26275
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 26276
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 26277
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 26278
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 26279
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 26280
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 26281
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 26282
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 26283
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 26284
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 26285
        //FRC
        t15.x = fract(t15.x);
        //Instruction 26286
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 26287
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 26288
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 26289
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 26290
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 26291
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 26292
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 26293
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 26294
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 26295
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 26296
        //IF
        if(tb29){
            //Instruction 26297
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 26298
            //FRC
            t4 = fract(t4);
            //Instruction 26299
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26300
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 26301
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 26302
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 26303
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 26304
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 26305
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26306
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 26307
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26308
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 26309
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26310
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 26311
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 26312
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 26313
            //SQRT
            t44 = sqrt(t44);
            //Instruction 26314
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 26315
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 26316
            //MUL
            t45 = t45 * t5.x;
            //Instruction 26317
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 26318
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 26319
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 26320
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 26321
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 26322
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 26323
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 26324
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 26325
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 26326
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 26327
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 26328
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 26329
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 26330
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 26331
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 26332
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 26333
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 26334
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 26335
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 26336
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 26337
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 26338
            //SQRT
            t45 = sqrt(t45);
            //Instruction 26339
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 26340
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 26341
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 26342
            //MUL
            t33 = t45 * t5.x;
            //Instruction 26343
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 26344
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 26345
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 26346
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 26347
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 26348
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 26349
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 26350
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26351
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 26352
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26353
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 26354
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26355
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 26356
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 26357
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 26358
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 26359
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 26360
            //LOG
            t43 = log2(t43);
            //Instruction 26361
            //MUL
            t29 = t43 * t15.y;
            //Instruction 26362
            //EXP
            t29 = exp2(t29);
            //Instruction 26363
            //MUL
            t43 = t5.y * t45;
            //Instruction 26364
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 26365
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 26366
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 26367
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 26368
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 26369
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 26370
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 26371
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 26372
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 26373
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 26374
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 26375
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 26376
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 26377
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 26378
            //MOV
            t10.z = t11.x;
            //Instruction 26379
            //MOV
            t10.w = t9.x;
            //Instruction 26380
            //MOV
            t12.z = t8.y;
            //Instruction 26381
            //MOV
            t12.w = t13.y;
            //Instruction 26382
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 26383
            //MOV
            t13.w = t12.y;
            //Instruction 26384
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 26385
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 26386
            //MOV
            t9.w = t10.y;
            //Instruction 26387
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 26388
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 26389
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 26390
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 26391
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 26392
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 26393
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 26394
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 26395
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 26396
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 26397
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 26398
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 26399
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 26400
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 26401
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26402
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 26403
        //ELSE
        } else {
            //Instruction 26404
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 26405
        //ENDIF
        }
        //Instruction 26406
    //ELSE
    } else {
        //Instruction 26407
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 26408
    //ENDIF
    }
    //Instruction 26409
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 26410
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 26411
    //IF
    if(tb16){
        //Instruction 26412
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 26413
        //IF
        if(tb16){
            //Instruction 26414
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 26415
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 26416
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 26417
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 26418
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 26419
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26420
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26421
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26422
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26423
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 26424
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 26425
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 26426
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 26427
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26428
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 26429
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 26430
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 26431
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 26432
            //FRC
            t0 = fract(t0);
            //Instruction 26433
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 26434
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 26435
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 26436
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 26437
            //ADD
            t0 = t0 + t0;
            //Instruction 26438
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 26439
            //LT
            tb44 = t6.w<0.0;
            //Instruction 26440
            //MOV
            t6.y = (-t6.w);
            //Instruction 26441
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 26442
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 26443
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 26444
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 26445
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 26446
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 26447
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 26448
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26449
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26450
            //MUL
            t46 = t0.x * t46;
            //Instruction 26451
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 26452
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26453
            //MUL
            t44 = t44 * t45;
            //Instruction 26454
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 26455
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26456
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26457
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26458
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26459
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 26460
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 26461
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26462
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 26463
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26464
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 26465
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 26466
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 26467
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 26468
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26469
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 26470
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 26471
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 26472
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26473
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26474
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 26475
        //ELSE
        } else {
            //Instruction 26476
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26477
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 26478
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26479
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 26480
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 26481
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 26482
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 26483
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26484
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 26485
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 26486
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26487
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26488
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26489
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 26490
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26491
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26492
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 26493
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 26494
            //LT
            tb16 = t0.w<0.0;
            //Instruction 26495
            //MOV
            t0.y = (-t0.w);
            //Instruction 26496
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 26497
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 26498
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 26499
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 26500
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 26501
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 26502
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 26503
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26504
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26505
            //MUL
            t45 = t45 * t5.x;
            //Instruction 26506
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 26507
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 26508
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 26509
        //ENDIF
        }
        //Instruction 26510
    //ENDIF
    }
    //Instruction 26511
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 26512
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 26513
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26514
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 26515
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 26516
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 26517
    //NE
    tb45 = t44!=0.0;
    //Instruction 26518
    //LOG
    t4.x = log2(t44);
    //Instruction 26519
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 26520
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 26521
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 26522
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26523
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26524
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 26525
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 26526
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26527
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 26528
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26529
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 26530
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 26531
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 26532
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26533
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 26534
    //MUL
    t44 = t44 * t45;
    //Instruction 26535
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 26536
    //MOV
    t4.y = t3.y;
    //Instruction 26537
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 26538
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 26539
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 26540
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 26541
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 26542
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 26543
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 26544
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 26545
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 26546
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 26547
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 26548
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 26549
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 26550
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 26551
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 26552
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 26553
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 26554
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 26555
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 26556
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 26557
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 26558
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 26559
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 26560
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 26561
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 26562
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 26563
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 26564
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 26565
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 26566
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 26567
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 26568
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 26569
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 26247
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 26248
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26249
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 26250
    //LT
    tb0 = t10_1<0.0;
    //Instruction 26251
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 26252
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 26253
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 26254
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 26255
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 26256
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 26257
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 26258
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 26259
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 26260
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 26261
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 26262
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26263
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26264
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_13.x)
   + 
    (v_98.xyz * tmpvar_13.y)
  ) + (v_99.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 26507
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26508
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 26509
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 26510
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 26511
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 26512
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 26513
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 26514
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 26515
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 26516
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 26517
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 26518
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26519
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 26520
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 26521
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 26522
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 26523
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 26524
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 26525
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 26526
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 26527
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 26528
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 26529
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 26530
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 26531
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 26532
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 26533
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 26534
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 26535
        //FRC
        t30.x = fract(t30.x);
        //Instruction 26536
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 26537
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 26538
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 26539
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 26540
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 26541
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 26542
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 26543
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 26544
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 26545
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 26546
        //IF
        if(tb45){
            //Instruction 26547
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 26548
            //FRC
            t5 = fract(t5);
            //Instruction 26549
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26550
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 26551
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 26552
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 26553
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 26554
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 26555
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 26556
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 26557
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26558
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 26559
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26560
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 26561
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 26562
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 26563
            //SQRT
            t46 = sqrt(t46);
            //Instruction 26564
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 26565
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 26566
            //MUL
            t48 = t48 * t49;
            //Instruction 26567
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 26568
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 26569
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 26570
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 26571
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 26572
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 26573
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 26574
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 26575
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 26576
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 26577
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 26578
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 26579
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 26580
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 26581
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 26582
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 26583
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 26584
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 26585
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 26586
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 26587
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 26588
            //SQRT
            t48 = sqrt(t48);
            //Instruction 26589
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 26590
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 26591
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 26592
            //MUL
            t6.x = t48 * t49;
            //Instruction 26593
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 26594
            //LT
            tb18 = t18<(-t18);
            //Instruction 26595
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 26596
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 26597
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 26598
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 26599
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 26600
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 26601
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 26602
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26603
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 26604
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26605
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 26606
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 26607
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 26608
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 26609
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 26610
            //LOG
            t45 = log2(t45);
            //Instruction 26611
            //MUL
            t45 = t45 * t7.y;
            //Instruction 26612
            //EXP
            t45 = exp2(t45);
            //Instruction 26613
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 26614
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 26615
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 26616
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 26617
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 26618
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 26619
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 26620
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 26621
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 26622
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 26623
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 26624
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 26625
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 26626
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 26627
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 26628
            //MOV
            t11.z = t12.x;
            //Instruction 26629
            //MOV
            t11.w = t10.x;
            //Instruction 26630
            //MOV
            t13.z = t9.y;
            //Instruction 26631
            //MOV
            t13.w = t14.y;
            //Instruction 26632
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 26633
            //MOV
            t14.w = t13.y;
            //Instruction 26634
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 26635
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 26636
            //MOV
            t10.w = t11.y;
            //Instruction 26637
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 26638
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 26639
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 26640
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 26641
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 26642
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 26643
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 26644
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 26645
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 26646
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 26647
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 26648
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 26649
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 26650
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 26651
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 26652
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 26653
        //ELSE
        } else {
            //Instruction 26654
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 26655
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 26656
        //ENDIF
        }
        //Instruction 26657
    //ELSE
    } else {
        //Instruction 26658
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 26659
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 26660
    //ENDIF
    }
    //Instruction 26661
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 26662
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 26663
    //IF
    if(tb46){
        //Instruction 26664
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 26665
        //IF
        if(tb46){
            //Instruction 26666
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 26667
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 26668
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 26669
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 26670
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 26671
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 26672
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26673
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 26674
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26675
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 26676
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 26677
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 26678
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26679
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 26680
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 26681
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 26682
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 26683
            //FRC
            t2 = fract(t2);
            //Instruction 26684
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 26685
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 26686
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 26687
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 26688
            //ADD
            t2 = t2 + t2;
            //Instruction 26689
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 26690
            //LT
            tb48 = t7.w<0.0;
            //Instruction 26691
            //MOV
            t7.y = (-t7.w);
            //Instruction 26692
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 26693
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 26694
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 26695
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 26696
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 26697
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 26698
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 26699
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26700
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26701
            //MUL
            t50 = t2.x * t50;
            //Instruction 26702
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 26703
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26704
            //MUL
            t48 = t48 * t49;
            //Instruction 26705
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 26706
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 26707
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26708
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26709
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26710
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 26711
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 26712
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26713
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 26714
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26715
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 26716
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 26717
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 26718
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 26719
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26720
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 26721
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 26722
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 26723
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26724
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 26725
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 26726
        //ELSE
        } else {
            //Instruction 26727
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26728
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26729
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26730
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 26731
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 26732
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 26733
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26734
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 26735
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 26736
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26737
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 26738
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26739
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 26740
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26741
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26742
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 26743
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 26744
            //LT
            tb0 = t2.w<0.0;
            //Instruction 26745
            //MOV
            t2.y = (-t2.w);
            //Instruction 26746
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 26747
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 26748
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 26749
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 26750
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 26751
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 26752
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 26753
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26754
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26755
            //MUL
            t48 = t48 * t6.x;
            //Instruction 26756
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 26757
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 26758
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 26759
        //ENDIF
        }
        //Instruction 26760
    //ENDIF
    }
    //Instruction 26761
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 26762
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 26763
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26764
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 26765
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 26766
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 26767
    //NE
    tb48 = t46!=0.0;
    //Instruction 26768
    //LOG
    t49 = log2(t46);
    //Instruction 26769
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 26770
    //EXP
    t49 = exp2(t49);
    //Instruction 26771
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 26772
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26773
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26774
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 26775
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 26776
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26777
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 26778
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26779
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 26780
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 26781
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 26782
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26783
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 26784
    //MUL
    t46 = t46 * t48;
    //Instruction 26785
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 26786
    //MOV
    t5.y = t4.y;
    //Instruction 26787
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 26788
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 26789
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 26790
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 26791
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 26792
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 26793
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 26794
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 26795
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 26796
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 26797
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 26798
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 26799
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 26800
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 26801
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 26802
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 26803
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 26804
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 26805
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 26806
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 26807
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 26808
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 26809
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 26810
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 26811
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 26812
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 26813
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 26814
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 26815
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 26816
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 26817
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 26818
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 26819
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 26475
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 26476
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26477
    //LT
    tb12 = t10_1<0.0;
    //Instruction 26478
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 26479
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 26480
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 26481
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 26482
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 26483
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 26484
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 26485
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 26486
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 26487
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 26488
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 26489
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 26490
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 26491
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 26492
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 26493
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 26494
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 26495
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 26496
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 26497
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 26498
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 26499
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 26500
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 26501
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 26502
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 26503
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 26504
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26505
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26506
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_13.x)
   + 
    (v_98.xyz * tmpvar_13.y)
  ) + (v_99.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 26841
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26842
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 26843
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 26844
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 26845
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 26846
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 26847
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 26848
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 26849
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 26850
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 26851
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 26852
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26853
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 26854
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 26855
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 26856
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 26857
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 26858
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 26859
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 26860
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 26861
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 26862
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 26863
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 26864
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 26865
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 26866
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 26867
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 26868
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 26869
        //FRC
        t30.x = fract(t30.x);
        //Instruction 26870
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 26871
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 26872
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 26873
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 26874
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 26875
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 26876
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 26877
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 26878
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 26879
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 26880
        //IF
        if(tb45){
            //Instruction 26881
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 26882
            //FRC
            t5 = fract(t5);
            //Instruction 26883
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26884
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 26885
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 26886
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 26887
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 26888
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 26889
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 26890
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 26891
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26892
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 26893
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26894
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 26895
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 26896
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 26897
            //SQRT
            t46 = sqrt(t46);
            //Instruction 26898
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 26899
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 26900
            //MUL
            t48 = t48 * t49;
            //Instruction 26901
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 26902
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 26903
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 26904
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 26905
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 26906
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 26907
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 26908
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 26909
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 26910
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 26911
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 26912
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 26913
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 26914
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 26915
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 26916
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 26917
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 26918
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 26919
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 26920
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 26921
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 26922
            //SQRT
            t48 = sqrt(t48);
            //Instruction 26923
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 26924
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 26925
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 26926
            //MUL
            t6.x = t48 * t49;
            //Instruction 26927
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 26928
            //LT
            tb18 = t18<(-t18);
            //Instruction 26929
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 26930
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 26931
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 26932
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 26933
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 26934
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 26935
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 26936
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26937
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 26938
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26939
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 26940
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 26941
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 26942
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 26943
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 26944
            //LOG
            t45 = log2(t45);
            //Instruction 26945
            //MUL
            t45 = t45 * t7.y;
            //Instruction 26946
            //EXP
            t45 = exp2(t45);
            //Instruction 26947
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 26948
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 26949
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 26950
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 26951
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 26952
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 26953
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 26954
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 26955
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 26956
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 26957
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 26958
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 26959
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 26960
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 26961
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 26962
            //MOV
            t11.z = t12.x;
            //Instruction 26963
            //MOV
            t11.w = t10.x;
            //Instruction 26964
            //MOV
            t13.z = t9.y;
            //Instruction 26965
            //MOV
            t13.w = t14.y;
            //Instruction 26966
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 26967
            //MOV
            t14.w = t13.y;
            //Instruction 26968
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 26969
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 26970
            //MOV
            t10.w = t11.y;
            //Instruction 26971
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 26972
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 26973
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 26974
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 26975
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 26976
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 26977
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 26978
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 26979
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 26980
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 26981
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 26982
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 26983
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 26984
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 26985
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 26986
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 26987
        //ELSE
        } else {
            //Instruction 26988
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 26989
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 26990
        //ENDIF
        }
        //Instruction 26991
    //ELSE
    } else {
        //Instruction 26992
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 26993
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 26994
    //ENDIF
    }
    //Instruction 26995
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 26996
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 26997
    //IF
    if(tb46){
        //Instruction 26998
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 26999
        //IF
        if(tb46){
            //Instruction 27000
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27001
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 27002
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 27003
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 27004
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 27005
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 27006
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27007
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27008
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27009
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 27010
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 27011
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 27012
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27013
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 27014
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 27015
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 27016
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27017
            //FRC
            t2 = fract(t2);
            //Instruction 27018
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27019
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 27020
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27021
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27022
            //ADD
            t2 = t2 + t2;
            //Instruction 27023
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 27024
            //LT
            tb48 = t7.w<0.0;
            //Instruction 27025
            //MOV
            t7.y = (-t7.w);
            //Instruction 27026
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 27027
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 27028
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 27029
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 27030
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 27031
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 27032
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 27033
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27034
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27035
            //MUL
            t50 = t2.x * t50;
            //Instruction 27036
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 27037
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27038
            //MUL
            t48 = t48 * t49;
            //Instruction 27039
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 27040
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27041
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27042
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27043
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27044
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 27045
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 27046
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27047
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 27048
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27049
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 27050
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 27051
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 27052
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 27053
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27054
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 27055
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 27056
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 27057
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27058
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 27059
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 27060
        //ELSE
        } else {
            //Instruction 27061
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27062
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27063
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27064
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 27065
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 27066
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 27067
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27068
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 27069
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 27070
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27071
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27072
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27073
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 27074
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27075
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27076
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 27077
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 27078
            //LT
            tb0 = t2.w<0.0;
            //Instruction 27079
            //MOV
            t2.y = (-t2.w);
            //Instruction 27080
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 27081
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 27082
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 27083
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 27084
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 27085
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 27086
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 27087
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27088
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27089
            //MUL
            t48 = t48 * t6.x;
            //Instruction 27090
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 27091
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 27092
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27093
        //ENDIF
        }
        //Instruction 27094
    //ENDIF
    }
    //Instruction 27095
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 27096
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 27097
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27098
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 27099
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 27100
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 27101
    //NE
    tb48 = t46!=0.0;
    //Instruction 27102
    //LOG
    t49 = log2(t46);
    //Instruction 27103
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 27104
    //EXP
    t49 = exp2(t49);
    //Instruction 27105
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 27106
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27107
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27108
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 27109
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 27110
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27111
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 27112
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27113
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 27114
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 27115
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 27116
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27117
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 27118
    //MUL
    t46 = t46 * t48;
    //Instruction 27119
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 27120
    //MOV
    t5.y = t4.y;
    //Instruction 27121
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 27122
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 27123
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 27124
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 27125
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 27126
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 27127
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 27128
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 27129
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 27130
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 27131
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 27132
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 27133
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 27134
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 27135
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 27136
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 27137
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 27138
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 27139
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 27140
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 27141
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 27142
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 27143
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 27144
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 27145
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 27146
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 27147
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 27148
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 27149
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 27150
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 27151
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 27152
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 27153
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 26820
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 26821
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26822
    //LT
    tb12 = t10_1<0.0;
    //Instruction 26823
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 26824
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 26825
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 26826
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 26827
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 26828
    //MAX
    t16_3 = max(t16_6.z, t16_6.y);
    //Instruction 26829
    //MAX
    t16_3 = max(t16_6.x, t16_3);
    //Instruction 26830
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 26831
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 26832
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 26833
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 26834
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 26835
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 26836
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 26837
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 26838
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26839
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26840
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_13.x)
   + 
    (v_98.xyz * tmpvar_13.y)
  ) + (v_99.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_5.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 26609
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26610
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 26611
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 26612
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 26613
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 26614
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 26615
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 26616
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 26617
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 26618
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 26619
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 26620
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26621
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 26622
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 26623
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 26624
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 26625
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 26626
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 26627
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 26628
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 26629
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 26630
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 26631
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 26632
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 26633
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 26634
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 26635
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 26636
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 26637
        //FRC
        t30.x = fract(t30.x);
        //Instruction 26638
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 26639
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 26640
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 26641
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 26642
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 26643
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 26644
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 26645
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 26646
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 26647
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 26648
        //IF
        if(tb45){
            //Instruction 26649
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 26650
            //FRC
            t5 = fract(t5);
            //Instruction 26651
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26652
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 26653
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 26654
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 26655
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 26656
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 26657
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 26658
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 26659
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26660
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 26661
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26662
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 26663
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 26664
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 26665
            //SQRT
            t46 = sqrt(t46);
            //Instruction 26666
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 26667
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 26668
            //MUL
            t48 = t48 * t49;
            //Instruction 26669
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 26670
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 26671
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 26672
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 26673
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 26674
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 26675
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 26676
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 26677
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 26678
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 26679
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 26680
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 26681
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 26682
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 26683
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 26684
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 26685
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 26686
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 26687
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 26688
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 26689
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 26690
            //SQRT
            t48 = sqrt(t48);
            //Instruction 26691
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 26692
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 26693
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 26694
            //MUL
            t6.x = t48 * t49;
            //Instruction 26695
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 26696
            //LT
            tb18 = t18<(-t18);
            //Instruction 26697
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 26698
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 26699
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 26700
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 26701
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 26702
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 26703
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 26704
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26705
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 26706
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26707
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 26708
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 26709
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 26710
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 26711
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 26712
            //LOG
            t45 = log2(t45);
            //Instruction 26713
            //MUL
            t45 = t45 * t7.y;
            //Instruction 26714
            //EXP
            t45 = exp2(t45);
            //Instruction 26715
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 26716
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 26717
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 26718
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 26719
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 26720
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 26721
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 26722
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 26723
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 26724
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 26725
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 26726
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 26727
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 26728
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 26729
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 26730
            //MOV
            t11.z = t12.x;
            //Instruction 26731
            //MOV
            t11.w = t10.x;
            //Instruction 26732
            //MOV
            t13.z = t9.y;
            //Instruction 26733
            //MOV
            t13.w = t14.y;
            //Instruction 26734
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 26735
            //MOV
            t14.w = t13.y;
            //Instruction 26736
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 26737
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 26738
            //MOV
            t10.w = t11.y;
            //Instruction 26739
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 26740
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 26741
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 26742
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 26743
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 26744
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 26745
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 26746
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 26747
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 26748
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 26749
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 26750
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 26751
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 26752
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 26753
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 26754
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 26755
        //ELSE
        } else {
            //Instruction 26756
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 26757
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 26758
        //ENDIF
        }
        //Instruction 26759
    //ELSE
    } else {
        //Instruction 26760
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 26761
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 26762
    //ENDIF
    }
    //Instruction 26763
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 26764
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 26765
    //IF
    if(tb46){
        //Instruction 26766
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 26767
        //IF
        if(tb46){
            //Instruction 26768
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 26769
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 26770
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 26771
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 26772
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 26773
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 26774
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26775
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 26776
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26777
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 26778
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 26779
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 26780
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26781
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 26782
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 26783
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 26784
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 26785
            //FRC
            t2 = fract(t2);
            //Instruction 26786
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 26787
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 26788
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 26789
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 26790
            //ADD
            t2 = t2 + t2;
            //Instruction 26791
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 26792
            //LT
            tb48 = t7.w<0.0;
            //Instruction 26793
            //MOV
            t7.y = (-t7.w);
            //Instruction 26794
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 26795
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 26796
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 26797
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 26798
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 26799
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 26800
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 26801
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26802
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26803
            //MUL
            t50 = t2.x * t50;
            //Instruction 26804
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 26805
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 26806
            //MUL
            t48 = t48 * t49;
            //Instruction 26807
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 26808
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 26809
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26810
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 26811
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 26812
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 26813
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 26814
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 26815
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 26816
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 26817
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 26818
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 26819
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 26820
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 26821
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 26822
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 26823
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 26824
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 26825
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 26826
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 26827
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 26828
        //ELSE
        } else {
            //Instruction 26829
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 26830
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 26831
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26832
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 26833
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 26834
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 26835
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 26836
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 26837
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 26838
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 26839
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 26840
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 26841
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 26842
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 26843
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 26844
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 26845
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 26846
            //LT
            tb0 = t2.w<0.0;
            //Instruction 26847
            //MOV
            t2.y = (-t2.w);
            //Instruction 26848
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 26849
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 26850
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 26851
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 26852
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 26853
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 26854
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 26855
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 26856
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 26857
            //MUL
            t48 = t48 * t6.x;
            //Instruction 26858
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 26859
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 26860
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 26861
        //ENDIF
        }
        //Instruction 26862
    //ENDIF
    }
    //Instruction 26863
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 26864
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 26865
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 26866
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 26867
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 26868
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 26869
    //NE
    tb48 = t46!=0.0;
    //Instruction 26870
    //LOG
    t49 = log2(t46);
    //Instruction 26871
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 26872
    //EXP
    t49 = exp2(t49);
    //Instruction 26873
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 26874
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 26875
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 26876
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 26877
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 26878
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 26879
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 26880
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 26881
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 26882
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 26883
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 26884
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 26885
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 26886
    //MUL
    t46 = t46 * t48;
    //Instruction 26887
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 26888
    //MOV
    t5.y = t4.y;
    //Instruction 26889
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 26890
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 26891
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 26892
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 26893
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 26894
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 26895
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 26896
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 26897
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 26898
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 26899
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 26900
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 26901
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 26902
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 26903
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 26904
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 26905
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 26906
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 26907
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 26908
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 26909
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 26910
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 26911
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 26912
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 26913
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 26914
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 26915
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 26916
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 26917
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 26918
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 26919
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 26920
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 26921
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
mediump vec3 t16_7;
bool tb9;
mediump float t16_14;
lowp float t10_14;
bool tb15;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 26570
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 26571
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26572
    //LT
    tb15 = t10_1<0.0;
    //Instruction 26573
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 26574
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 26575
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 26576
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 26577
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 26578
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 26579
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 26580
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 26581
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 26582
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 26583
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 26584
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 26585
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 26586
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 26587
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 26588
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 26589
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 26590
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 26591
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 26592
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 26593
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 26594
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 26595
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 26596
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 26597
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 26598
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 26599
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 26600
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 26601
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 26602
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 26603
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 26604
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 26605
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 26606
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26607
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26608
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_13.x)
   + 
    (v_98.xyz * tmpvar_13.y)
  ) + (v_99.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 27551
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 27552
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 27553
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 27554
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 27555
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 27556
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 27557
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 27558
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 27559
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 27560
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 27561
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 27562
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 27563
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 27564
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 27565
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 27566
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 27567
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 27568
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 27569
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 27570
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 27571
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 27572
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 27573
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 27574
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 27575
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 27576
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 27577
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 27578
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 27579
        //FRC
        t30.x = fract(t30.x);
        //Instruction 27580
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 27581
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 27582
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 27583
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 27584
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 27585
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 27586
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 27587
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 27588
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 27589
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 27590
        //IF
        if(tb45){
            //Instruction 27591
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 27592
            //FRC
            t5 = fract(t5);
            //Instruction 27593
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27594
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 27595
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 27596
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 27597
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 27598
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 27599
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27600
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 27601
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27602
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 27603
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27604
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 27605
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 27606
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 27607
            //SQRT
            t46 = sqrt(t46);
            //Instruction 27608
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 27609
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 27610
            //MUL
            t48 = t48 * t49;
            //Instruction 27611
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 27612
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 27613
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 27614
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 27615
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 27616
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 27617
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 27618
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 27619
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 27620
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 27621
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 27622
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 27623
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 27624
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 27625
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 27626
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 27627
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 27628
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 27629
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 27630
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 27631
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 27632
            //SQRT
            t48 = sqrt(t48);
            //Instruction 27633
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 27634
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 27635
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 27636
            //MUL
            t6.x = t48 * t49;
            //Instruction 27637
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 27638
            //LT
            tb18 = t18<(-t18);
            //Instruction 27639
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 27640
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 27641
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 27642
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 27643
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 27644
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27645
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 27646
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27647
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 27648
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27649
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 27650
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 27651
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 27652
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 27653
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 27654
            //LOG
            t45 = log2(t45);
            //Instruction 27655
            //MUL
            t45 = t45 * t7.y;
            //Instruction 27656
            //EXP
            t45 = exp2(t45);
            //Instruction 27657
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 27658
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 27659
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 27660
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 27661
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 27662
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 27663
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 27664
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 27665
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 27666
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 27667
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 27668
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 27669
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 27670
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 27671
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 27672
            //MOV
            t11.z = t12.x;
            //Instruction 27673
            //MOV
            t11.w = t10.x;
            //Instruction 27674
            //MOV
            t13.z = t9.y;
            //Instruction 27675
            //MOV
            t13.w = t14.y;
            //Instruction 27676
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 27677
            //MOV
            t14.w = t13.y;
            //Instruction 27678
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 27679
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 27680
            //MOV
            t10.w = t11.y;
            //Instruction 27681
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 27682
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 27683
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 27684
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 27685
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 27686
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 27687
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 27688
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 27689
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 27690
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 27691
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 27692
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 27693
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 27694
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 27695
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 27696
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 27697
        //ELSE
        } else {
            //Instruction 27698
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 27699
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 27700
        //ENDIF
        }
        //Instruction 27701
    //ELSE
    } else {
        //Instruction 27702
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 27703
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 27704
    //ENDIF
    }
    //Instruction 27705
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 27706
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 27707
    //IF
    if(tb46){
        //Instruction 27708
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 27709
        //IF
        if(tb46){
            //Instruction 27710
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27711
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 27712
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 27713
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 27714
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 27715
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 27716
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27717
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27718
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27719
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 27720
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 27721
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 27722
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27723
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 27724
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 27725
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 27726
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27727
            //FRC
            t2 = fract(t2);
            //Instruction 27728
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27729
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 27730
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27731
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27732
            //ADD
            t2 = t2 + t2;
            //Instruction 27733
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 27734
            //LT
            tb48 = t7.w<0.0;
            //Instruction 27735
            //MOV
            t7.y = (-t7.w);
            //Instruction 27736
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 27737
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 27738
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 27739
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 27740
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 27741
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 27742
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 27743
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27744
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27745
            //MUL
            t50 = t2.x * t50;
            //Instruction 27746
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 27747
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27748
            //MUL
            t48 = t48 * t49;
            //Instruction 27749
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 27750
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27751
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27752
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27753
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27754
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 27755
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 27756
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27757
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 27758
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27759
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 27760
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 27761
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 27762
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 27763
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27764
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 27765
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 27766
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 27767
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27768
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 27769
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 27770
        //ELSE
        } else {
            //Instruction 27771
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27772
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27773
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27774
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 27775
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 27776
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 27777
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27778
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 27779
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 27780
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27781
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27782
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27783
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 27784
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27785
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27786
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 27787
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 27788
            //LT
            tb0 = t2.w<0.0;
            //Instruction 27789
            //MOV
            t2.y = (-t2.w);
            //Instruction 27790
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 27791
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 27792
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 27793
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 27794
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 27795
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 27796
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 27797
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27798
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27799
            //MUL
            t48 = t48 * t6.x;
            //Instruction 27800
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 27801
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 27802
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27803
        //ENDIF
        }
        //Instruction 27804
    //ENDIF
    }
    //Instruction 27805
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 27806
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 27807
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27808
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 27809
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 27810
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 27811
    //NE
    tb48 = t46!=0.0;
    //Instruction 27812
    //LOG
    t49 = log2(t46);
    //Instruction 27813
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 27814
    //EXP
    t49 = exp2(t49);
    //Instruction 27815
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 27816
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27817
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27818
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 27819
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 27820
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27821
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 27822
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27823
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 27824
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 27825
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 27826
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27827
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 27828
    //MUL
    t46 = t46 * t48;
    //Instruction 27829
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 27830
    //MOV
    t5.y = t4.y;
    //Instruction 27831
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 27832
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 27833
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 27834
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 27835
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 27836
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 27837
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 27838
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 27839
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 27840
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 27841
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 27842
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 27843
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 27844
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 27845
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 27846
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 27847
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 27848
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 27849
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 27850
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 27851
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 27852
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 27853
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 27854
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 27855
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 27856
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 27857
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 27858
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 27859
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 27860
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 27861
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 27862
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 27863
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 27517
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 27518
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 27519
    //LT
    tb12 = t10_1<0.0;
    //Instruction 27520
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 27521
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 27522
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 27523
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 27524
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 27525
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 27526
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 27527
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 27528
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 27529
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 27530
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 27531
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 27532
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 27533
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 27534
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 27535
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 27536
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 27537
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 27538
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 27539
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 27540
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 27541
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 27542
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 27543
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 27544
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 27545
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 27546
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 27547
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 27548
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 27549
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 27550
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_13.x)
   + 
    (v_98.xyz * tmpvar_13.y)
  ) + (v_99.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 27181
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 27182
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 27183
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 27184
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 27185
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 27186
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 27187
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 27188
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 27189
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 27190
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 27191
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 27192
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 27193
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 27194
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 27195
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 27196
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 27197
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 27198
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 27199
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 27200
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 27201
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 27202
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 27203
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 27204
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 27205
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 27206
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 27207
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 27208
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 27209
        //FRC
        t30.x = fract(t30.x);
        //Instruction 27210
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 27211
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 27212
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 27213
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 27214
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 27215
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 27216
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 27217
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 27218
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 27219
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 27220
        //IF
        if(tb45){
            //Instruction 27221
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 27222
            //FRC
            t5 = fract(t5);
            //Instruction 27223
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27224
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 27225
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 27226
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 27227
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 27228
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 27229
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27230
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 27231
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27232
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 27233
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27234
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 27235
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 27236
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 27237
            //SQRT
            t46 = sqrt(t46);
            //Instruction 27238
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 27239
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 27240
            //MUL
            t48 = t48 * t49;
            //Instruction 27241
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 27242
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 27243
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 27244
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 27245
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 27246
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 27247
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 27248
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 27249
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 27250
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 27251
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 27252
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 27253
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 27254
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 27255
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 27256
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 27257
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 27258
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 27259
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 27260
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 27261
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 27262
            //SQRT
            t48 = sqrt(t48);
            //Instruction 27263
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 27264
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 27265
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 27266
            //MUL
            t6.x = t48 * t49;
            //Instruction 27267
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 27268
            //LT
            tb18 = t18<(-t18);
            //Instruction 27269
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 27270
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 27271
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 27272
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 27273
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 27274
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27275
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 27276
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27277
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 27278
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27279
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 27280
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 27281
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 27282
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 27283
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 27284
            //LOG
            t45 = log2(t45);
            //Instruction 27285
            //MUL
            t45 = t45 * t7.y;
            //Instruction 27286
            //EXP
            t45 = exp2(t45);
            //Instruction 27287
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 27288
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 27289
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 27290
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 27291
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 27292
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 27293
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 27294
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 27295
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 27296
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 27297
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 27298
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 27299
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 27300
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 27301
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 27302
            //MOV
            t11.z = t12.x;
            //Instruction 27303
            //MOV
            t11.w = t10.x;
            //Instruction 27304
            //MOV
            t13.z = t9.y;
            //Instruction 27305
            //MOV
            t13.w = t14.y;
            //Instruction 27306
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 27307
            //MOV
            t14.w = t13.y;
            //Instruction 27308
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 27309
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 27310
            //MOV
            t10.w = t11.y;
            //Instruction 27311
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 27312
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 27313
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 27314
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 27315
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 27316
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 27317
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 27318
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 27319
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 27320
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 27321
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 27322
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 27323
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 27324
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 27325
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 27326
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 27327
        //ELSE
        } else {
            //Instruction 27328
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 27329
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 27330
        //ENDIF
        }
        //Instruction 27331
    //ELSE
    } else {
        //Instruction 27332
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 27333
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 27334
    //ENDIF
    }
    //Instruction 27335
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 27336
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 27337
    //IF
    if(tb46){
        //Instruction 27338
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 27339
        //IF
        if(tb46){
            //Instruction 27340
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27341
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 27342
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 27343
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 27344
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 27345
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 27346
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27347
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27348
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27349
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 27350
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 27351
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 27352
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27353
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 27354
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 27355
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 27356
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27357
            //FRC
            t2 = fract(t2);
            //Instruction 27358
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27359
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 27360
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27361
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27362
            //ADD
            t2 = t2 + t2;
            //Instruction 27363
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 27364
            //LT
            tb48 = t7.w<0.0;
            //Instruction 27365
            //MOV
            t7.y = (-t7.w);
            //Instruction 27366
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 27367
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 27368
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 27369
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 27370
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 27371
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 27372
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 27373
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27374
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27375
            //MUL
            t50 = t2.x * t50;
            //Instruction 27376
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 27377
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27378
            //MUL
            t48 = t48 * t49;
            //Instruction 27379
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 27380
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27381
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27382
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27383
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27384
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 27385
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 27386
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27387
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 27388
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27389
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 27390
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 27391
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 27392
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 27393
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27394
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 27395
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 27396
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 27397
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27398
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 27399
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 27400
        //ELSE
        } else {
            //Instruction 27401
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27402
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27403
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27404
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 27405
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 27406
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 27407
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27408
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 27409
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 27410
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27411
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27412
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27413
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 27414
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27415
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27416
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 27417
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 27418
            //LT
            tb0 = t2.w<0.0;
            //Instruction 27419
            //MOV
            t2.y = (-t2.w);
            //Instruction 27420
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 27421
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 27422
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 27423
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 27424
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 27425
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 27426
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 27427
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27428
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27429
            //MUL
            t48 = t48 * t6.x;
            //Instruction 27430
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 27431
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 27432
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27433
        //ENDIF
        }
        //Instruction 27434
    //ENDIF
    }
    //Instruction 27435
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 27436
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 27437
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27438
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 27439
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 27440
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 27441
    //NE
    tb48 = t46!=0.0;
    //Instruction 27442
    //LOG
    t49 = log2(t46);
    //Instruction 27443
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 27444
    //EXP
    t49 = exp2(t49);
    //Instruction 27445
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 27446
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27447
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27448
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 27449
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 27450
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27451
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 27452
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27453
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 27454
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 27455
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 27456
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27457
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 27458
    //MUL
    t46 = t46 * t48;
    //Instruction 27459
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 27460
    //MOV
    t5.y = t4.y;
    //Instruction 27461
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 27462
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 27463
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 27464
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 27465
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 27466
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 27467
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 27468
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 27469
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 27470
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 27471
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 27472
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 27473
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 27474
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 27475
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 27476
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 27477
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 27478
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 27479
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 27480
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 27481
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 27482
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 27483
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 27484
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 27485
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 27486
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 27487
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 27488
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 27489
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 27490
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 27491
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 27492
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 27493
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 27154
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 27155
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 27156
    //LT
    tb12 = t10_1<0.0;
    //Instruction 27157
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 27158
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 27159
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 27160
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 27161
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 27162
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 27163
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 27164
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 27165
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 27166
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 27167
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 27168
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 27169
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 27170
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 27171
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 27172
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 27173
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 27174
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 27175
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 27176
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 27177
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 27178
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 27179
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 27180
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_14.x)
   + 
    (v_99.xyz * tmpvar_14.y)
  ) + (v_100.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_101;
  highp mat3 tmpvar_102;
  tmpvar_102[0] = _Object2World[0].xyz;
  tmpvar_102[1] = _Object2World[1].xyz;
  tmpvar_102[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize((tmpvar_102 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_103;
  lowp vec3 tmpvar_104;
  tmpvar_104 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_104 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106.x = worldTangent_5.x;
  tmpvar_106.y = worldBinormal_4.x;
  tmpvar_106.z = worldNormal_6.x;
  lowp vec3 tmpvar_107;
  tmpvar_107.x = worldTangent_5.y;
  tmpvar_107.y = worldBinormal_4.y;
  tmpvar_107.z = worldNormal_6.y;
  lowp vec3 tmpvar_108;
  tmpvar_108.x = worldTangent_5.z;
  tmpvar_108.y = worldBinormal_4.z;
  tmpvar_108.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_106;
  xlv_TEXCOORD1 = tmpvar_107;
  xlv_TEXCOORD2 = tmpvar_108;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 26959
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 26960
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 26961
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 26962
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 26963
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 26964
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 26965
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 26966
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 26967
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 26968
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 26969
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 26970
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 26971
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 26972
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 26973
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 26974
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 26975
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 26976
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 26977
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 26978
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 26979
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 26980
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 26981
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 26982
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 26983
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 26984
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 26985
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 26986
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 26987
        //FRC
        t32.x = fract(t32.x);
        //Instruction 26988
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 26989
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 26990
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 26991
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 26992
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 26993
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 26994
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 26995
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 26996
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 26997
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 26998
        //IF
        if(tb48){
            //Instruction 26999
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 27000
            //FRC
            t5 = fract(t5);
            //Instruction 27001
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27002
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 27003
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 27004
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 27005
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 27006
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 27007
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27008
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 27009
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27010
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 27011
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27012
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 27013
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 27014
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 27015
            //SQRT
            t49 = sqrt(t49);
            //Instruction 27016
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 27017
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 27018
            //MUL
            t51 = t51 * t52;
            //Instruction 27019
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 27020
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 27021
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 27022
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 27023
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 27024
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 27025
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 27026
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 27027
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 27028
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 27029
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 27030
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 27031
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 27032
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 27033
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 27034
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 27035
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 27036
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 27037
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 27038
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 27039
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 27040
            //SQRT
            t51 = sqrt(t51);
            //Instruction 27041
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 27042
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 27043
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 27044
            //MUL
            t6.x = t51 * t52;
            //Instruction 27045
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 27046
            //LT
            tb19 = t19<(-t19);
            //Instruction 27047
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 27048
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 27049
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 27050
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 27051
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 27052
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27053
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 27054
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27055
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 27056
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27057
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 27058
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 27059
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 27060
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 27061
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 27062
            //LOG
            t48 = log2(t48);
            //Instruction 27063
            //MUL
            t48 = t48 * t7.y;
            //Instruction 27064
            //EXP
            t48 = exp2(t48);
            //Instruction 27065
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 27066
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 27067
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 27068
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 27069
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 27070
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 27071
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 27072
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 27073
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 27074
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 27075
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 27076
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 27077
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 27078
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 27079
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 27080
            //MOV
            t11.z = t12.x;
            //Instruction 27081
            //MOV
            t11.w = t10.x;
            //Instruction 27082
            //MOV
            t13.z = t9.y;
            //Instruction 27083
            //MOV
            t13.w = t14.y;
            //Instruction 27084
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 27085
            //MOV
            t14.w = t13.y;
            //Instruction 27086
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 27087
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 27088
            //MOV
            t10.w = t11.y;
            //Instruction 27089
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 27090
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 27091
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 27092
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 27093
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 27094
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 27095
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 27096
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 27097
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 27098
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 27099
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 27100
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 27101
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 27102
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 27103
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 27104
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 27105
        //ELSE
        } else {
            //Instruction 27106
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 27107
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 27108
        //ENDIF
        }
        //Instruction 27109
    //ELSE
    } else {
        //Instruction 27110
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 27111
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 27112
    //ENDIF
    }
    //Instruction 27113
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 27114
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 27115
    //IF
    if(tb49){
        //Instruction 27116
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 27117
        //IF
        if(tb49){
            //Instruction 27118
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27119
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 27120
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 27121
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 27122
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 27123
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 27124
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27125
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27126
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27127
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 27128
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 27129
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 27130
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27131
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 27132
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 27133
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 27134
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27135
            //FRC
            t2 = fract(t2);
            //Instruction 27136
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27137
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 27138
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27139
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27140
            //ADD
            t2 = t2 + t2;
            //Instruction 27141
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 27142
            //LT
            tb51 = t7.w<0.0;
            //Instruction 27143
            //MOV
            t7.y = (-t7.w);
            //Instruction 27144
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 27145
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 27146
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 27147
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 27148
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 27149
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 27150
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 27151
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27152
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27153
            //MUL
            t53 = t2.x * t53;
            //Instruction 27154
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 27155
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27156
            //MUL
            t51 = t51 * t52;
            //Instruction 27157
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 27158
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27159
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27160
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27161
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27162
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 27163
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 27164
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27165
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 27166
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27167
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 27168
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 27169
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 27170
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 27171
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27172
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 27173
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 27174
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 27175
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27176
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 27177
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 27178
        //ELSE
        } else {
            //Instruction 27179
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27180
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27181
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27182
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 27183
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 27184
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 27185
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27186
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 27187
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 27188
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27189
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27190
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27191
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 27192
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27193
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27194
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 27195
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 27196
            //LT
            tb0 = t2.w<0.0;
            //Instruction 27197
            //MOV
            t2.y = (-t2.w);
            //Instruction 27198
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 27199
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 27200
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 27201
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 27202
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 27203
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 27204
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 27205
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27206
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27207
            //MUL
            t51 = t51 * t6.x;
            //Instruction 27208
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 27209
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 27210
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27211
        //ENDIF
        }
        //Instruction 27212
    //ENDIF
    }
    //Instruction 27213
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 27214
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 27215
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27216
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 27217
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 27218
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 27219
    //NE
    tb51 = t49!=0.0;
    //Instruction 27220
    //LOG
    t52 = log2(t49);
    //Instruction 27221
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 27222
    //EXP
    t52 = exp2(t52);
    //Instruction 27223
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 27224
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27225
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27226
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 27227
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 27228
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27229
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 27230
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27231
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 27232
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 27233
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 27234
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27235
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 27236
    //MUL
    t49 = t49 * t51;
    //Instruction 27237
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 27238
    //MOV
    t5.y = t4.y;
    //Instruction 27239
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 27240
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 27241
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 27242
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 27243
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 27244
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 27245
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 27246
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 27247
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 27248
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 27249
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 27250
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 27251
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 27252
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 27253
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 27254
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 27255
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 27256
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 27257
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 27258
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 27259
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 27260
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 27261
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 27262
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 27263
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 27264
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 27265
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 27266
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 27267
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 27268
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 27269
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 27270
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 27271
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 27272
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 27273
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 27274
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 27275
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 27276
    //MOV
    t5.x = t3.z;
    //Instruction 27277
    //MOV
    t5.y = t4.x;
    //Instruction 27278
    //MOV
    t5.z = t0.x;
    //Instruction 27279
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 27280
    //MOV
    t5.x = t3.x;
    //Instruction 27281
    //MOV
    t5.y = t4.y;
    //Instruction 27282
    //MOV
    t5.z = t0.y;
    //Instruction 27283
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 27284
    //MOV
    t0.x = t3.y;
    //Instruction 27285
    //MOV
    t0.y = t4.z;
    //Instruction 27286
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 27287
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 27288
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 27289
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 27290
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 26922
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 26923
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 26924
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 26925
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 26926
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 26927
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 26928
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 26929
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 26930
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 26931
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 26932
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 26933
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 26934
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 26935
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 26936
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 26937
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 26938
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 26939
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 26940
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 26941
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 26942
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 26943
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 26944
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 26945
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 26946
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 26947
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 26948
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 26949
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 26950
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 26951
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 26952
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 26953
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 26954
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 26955
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 26956
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 26957
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 26958
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_14.x)
   + 
    (v_99.xyz * tmpvar_14.y)
  ) + (v_100.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_101;
  highp mat3 tmpvar_102;
  tmpvar_102[0] = _Object2World[0].xyz;
  tmpvar_102[1] = _Object2World[1].xyz;
  tmpvar_102[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize((tmpvar_102 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_103;
  lowp vec3 tmpvar_104;
  tmpvar_104 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_104 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106.x = worldTangent_5.x;
  tmpvar_106.y = worldBinormal_4.x;
  tmpvar_106.z = worldNormal_6.x;
  lowp vec3 tmpvar_107;
  tmpvar_107.x = worldTangent_5.y;
  tmpvar_107.y = worldBinormal_4.y;
  tmpvar_107.z = worldNormal_6.y;
  lowp vec3 tmpvar_108;
  tmpvar_108.x = worldTangent_5.z;
  tmpvar_108.y = worldBinormal_4.z;
  tmpvar_108.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_106;
  xlv_TEXCOORD1 = tmpvar_107;
  xlv_TEXCOORD2 = tmpvar_108;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 27890
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 27891
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 27892
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 27893
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 27894
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 27895
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 27896
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 27897
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 27898
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 27899
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 27900
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 27901
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 27902
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 27903
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 27904
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 27905
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 27906
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 27907
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 27908
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 27909
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 27910
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 27911
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 27912
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 27913
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 27914
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 27915
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 27916
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 27917
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 27918
        //FRC
        t32.x = fract(t32.x);
        //Instruction 27919
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 27920
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 27921
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 27922
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 27923
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 27924
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 27925
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 27926
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 27927
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 27928
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 27929
        //IF
        if(tb48){
            //Instruction 27930
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 27931
            //FRC
            t5 = fract(t5);
            //Instruction 27932
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27933
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 27934
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 27935
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 27936
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 27937
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 27938
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27939
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 27940
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27941
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 27942
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27943
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 27944
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 27945
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 27946
            //SQRT
            t49 = sqrt(t49);
            //Instruction 27947
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 27948
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 27949
            //MUL
            t51 = t51 * t52;
            //Instruction 27950
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 27951
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 27952
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 27953
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 27954
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 27955
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 27956
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 27957
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 27958
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 27959
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 27960
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 27961
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 27962
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 27963
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 27964
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 27965
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 27966
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 27967
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 27968
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 27969
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 27970
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 27971
            //SQRT
            t51 = sqrt(t51);
            //Instruction 27972
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 27973
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 27974
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 27975
            //MUL
            t6.x = t51 * t52;
            //Instruction 27976
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 27977
            //LT
            tb19 = t19<(-t19);
            //Instruction 27978
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 27979
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 27980
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 27981
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 27982
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 27983
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27984
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 27985
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27986
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 27987
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27988
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 27989
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 27990
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 27991
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 27992
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 27993
            //LOG
            t48 = log2(t48);
            //Instruction 27994
            //MUL
            t48 = t48 * t7.y;
            //Instruction 27995
            //EXP
            t48 = exp2(t48);
            //Instruction 27996
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 27997
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 27998
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 27999
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 28000
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 28001
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 28002
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 28003
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 28004
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 28005
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 28006
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 28007
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 28008
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 28009
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 28010
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 28011
            //MOV
            t11.z = t12.x;
            //Instruction 28012
            //MOV
            t11.w = t10.x;
            //Instruction 28013
            //MOV
            t13.z = t9.y;
            //Instruction 28014
            //MOV
            t13.w = t14.y;
            //Instruction 28015
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 28016
            //MOV
            t14.w = t13.y;
            //Instruction 28017
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 28018
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 28019
            //MOV
            t10.w = t11.y;
            //Instruction 28020
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 28021
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 28022
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 28023
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 28024
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 28025
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 28026
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 28027
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 28028
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 28029
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 28030
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 28031
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 28032
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 28033
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 28034
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 28035
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 28036
        //ELSE
        } else {
            //Instruction 28037
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 28038
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 28039
        //ENDIF
        }
        //Instruction 28040
    //ELSE
    } else {
        //Instruction 28041
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 28042
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 28043
    //ENDIF
    }
    //Instruction 28044
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 28045
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 28046
    //IF
    if(tb49){
        //Instruction 28047
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 28048
        //IF
        if(tb49){
            //Instruction 28049
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 28050
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 28051
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 28052
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 28053
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 28054
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 28055
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28056
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 28057
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28058
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 28059
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 28060
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 28061
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28062
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 28063
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 28064
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 28065
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 28066
            //FRC
            t2 = fract(t2);
            //Instruction 28067
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 28068
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 28069
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 28070
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 28071
            //ADD
            t2 = t2 + t2;
            //Instruction 28072
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 28073
            //LT
            tb51 = t7.w<0.0;
            //Instruction 28074
            //MOV
            t7.y = (-t7.w);
            //Instruction 28075
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 28076
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 28077
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 28078
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 28079
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 28080
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 28081
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 28082
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28083
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28084
            //MUL
            t53 = t2.x * t53;
            //Instruction 28085
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 28086
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 28087
            //MUL
            t51 = t51 * t52;
            //Instruction 28088
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 28089
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 28090
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28091
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 28092
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28093
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 28094
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 28095
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 28096
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 28097
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 28098
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 28099
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 28100
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 28101
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 28102
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 28103
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 28104
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 28105
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 28106
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 28107
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 28108
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 28109
        //ELSE
        } else {
            //Instruction 28110
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28111
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 28112
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28113
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 28114
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 28115
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 28116
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28117
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 28118
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 28119
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 28120
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 28121
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28122
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 28123
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 28124
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 28125
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 28126
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 28127
            //LT
            tb0 = t2.w<0.0;
            //Instruction 28128
            //MOV
            t2.y = (-t2.w);
            //Instruction 28129
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 28130
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 28131
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 28132
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 28133
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 28134
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 28135
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 28136
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28137
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28138
            //MUL
            t51 = t51 * t6.x;
            //Instruction 28139
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 28140
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 28141
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 28142
        //ENDIF
        }
        //Instruction 28143
    //ENDIF
    }
    //Instruction 28144
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 28145
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 28146
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 28147
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 28148
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 28149
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 28150
    //NE
    tb51 = t49!=0.0;
    //Instruction 28151
    //LOG
    t52 = log2(t49);
    //Instruction 28152
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 28153
    //EXP
    t52 = exp2(t52);
    //Instruction 28154
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 28155
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 28156
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 28157
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 28158
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 28159
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 28160
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 28161
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 28162
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 28163
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 28164
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 28165
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 28166
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 28167
    //MUL
    t49 = t49 * t51;
    //Instruction 28168
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 28169
    //MOV
    t5.y = t4.y;
    //Instruction 28170
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 28171
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 28172
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 28173
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 28174
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 28175
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 28176
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 28177
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 28178
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 28179
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 28180
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 28181
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 28182
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 28183
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 28184
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 28185
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 28186
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 28187
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 28188
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 28189
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 28190
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 28191
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 28192
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 28193
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 28194
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 28195
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 28196
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 28197
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 28198
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 28199
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 28200
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 28201
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 28202
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 28203
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 28204
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 28205
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 28206
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 28207
    //MOV
    t5.x = t3.z;
    //Instruction 28208
    //MOV
    t5.y = t4.x;
    //Instruction 28209
    //MOV
    t5.z = t0.x;
    //Instruction 28210
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 28211
    //MOV
    t5.x = t3.x;
    //Instruction 28212
    //MOV
    t5.y = t4.y;
    //Instruction 28213
    //MOV
    t5.z = t0.y;
    //Instruction 28214
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 28215
    //MOV
    t0.x = t3.y;
    //Instruction 28216
    //MOV
    t0.y = t4.z;
    //Instruction 28217
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 28218
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 28219
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 28220
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 28221
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 27864
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 27865
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 27866
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 27867
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 27868
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 27869
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 27870
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 27871
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 27872
    //MAX
    t16_3 = max(t16_7.z, t16_7.y);
    //Instruction 27873
    //MAX
    t16_3 = max(t16_7.x, t16_3);
    //Instruction 27874
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 27875
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 27876
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 27877
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 27878
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 27879
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 27880
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 27881
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 27882
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 27883
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 27884
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 27885
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 27886
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 27887
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 27888
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 27889
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_14.x)
   + 
    (v_99.xyz * tmpvar_14.y)
  ) + (v_100.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_101;
  highp mat3 tmpvar_102;
  tmpvar_102[0] = _Object2World[0].xyz;
  tmpvar_102[1] = _Object2World[1].xyz;
  tmpvar_102[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize((tmpvar_102 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_103;
  lowp vec3 tmpvar_104;
  tmpvar_104 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_104 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106.x = worldTangent_5.x;
  tmpvar_106.y = worldBinormal_4.x;
  tmpvar_106.z = worldNormal_6.x;
  lowp vec3 tmpvar_107;
  tmpvar_107.x = worldTangent_5.y;
  tmpvar_107.y = worldBinormal_4.y;
  tmpvar_107.z = worldNormal_6.y;
  lowp vec3 tmpvar_108;
  tmpvar_108.x = worldTangent_5.z;
  tmpvar_108.y = worldBinormal_4.z;
  tmpvar_108.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_106;
  xlv_TEXCOORD1 = tmpvar_107;
  xlv_TEXCOORD2 = tmpvar_108;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_6.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 27538
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 27539
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 27540
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 27541
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 27542
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 27543
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 27544
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 27545
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 27546
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 27547
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 27548
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 27549
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 27550
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 27551
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 27552
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 27553
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 27554
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 27555
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 27556
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 27557
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 27558
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 27559
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 27560
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 27561
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 27562
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 27563
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 27564
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 27565
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 27566
        //FRC
        t32.x = fract(t32.x);
        //Instruction 27567
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 27568
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 27569
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 27570
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 27571
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 27572
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 27573
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 27574
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 27575
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 27576
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 27577
        //IF
        if(tb48){
            //Instruction 27578
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 27579
            //FRC
            t5 = fract(t5);
            //Instruction 27580
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27581
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 27582
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 27583
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 27584
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 27585
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 27586
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27587
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 27588
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27589
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 27590
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27591
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 27592
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 27593
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 27594
            //SQRT
            t49 = sqrt(t49);
            //Instruction 27595
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 27596
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 27597
            //MUL
            t51 = t51 * t52;
            //Instruction 27598
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 27599
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 27600
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 27601
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 27602
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 27603
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 27604
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 27605
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 27606
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 27607
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 27608
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 27609
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 27610
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 27611
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 27612
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 27613
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 27614
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 27615
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 27616
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 27617
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 27618
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 27619
            //SQRT
            t51 = sqrt(t51);
            //Instruction 27620
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 27621
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 27622
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 27623
            //MUL
            t6.x = t51 * t52;
            //Instruction 27624
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 27625
            //LT
            tb19 = t19<(-t19);
            //Instruction 27626
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 27627
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 27628
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 27629
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 27630
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 27631
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27632
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 27633
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27634
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 27635
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27636
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 27637
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 27638
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 27639
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 27640
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 27641
            //LOG
            t48 = log2(t48);
            //Instruction 27642
            //MUL
            t48 = t48 * t7.y;
            //Instruction 27643
            //EXP
            t48 = exp2(t48);
            //Instruction 27644
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 27645
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 27646
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 27647
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 27648
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 27649
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 27650
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 27651
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 27652
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 27653
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 27654
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 27655
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 27656
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 27657
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 27658
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 27659
            //MOV
            t11.z = t12.x;
            //Instruction 27660
            //MOV
            t11.w = t10.x;
            //Instruction 27661
            //MOV
            t13.z = t9.y;
            //Instruction 27662
            //MOV
            t13.w = t14.y;
            //Instruction 27663
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 27664
            //MOV
            t14.w = t13.y;
            //Instruction 27665
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 27666
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 27667
            //MOV
            t10.w = t11.y;
            //Instruction 27668
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 27669
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 27670
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 27671
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 27672
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 27673
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 27674
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 27675
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 27676
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 27677
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 27678
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 27679
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 27680
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 27681
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 27682
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 27683
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 27684
        //ELSE
        } else {
            //Instruction 27685
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 27686
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 27687
        //ENDIF
        }
        //Instruction 27688
    //ELSE
    } else {
        //Instruction 27689
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 27690
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 27691
    //ENDIF
    }
    //Instruction 27692
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 27693
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 27694
    //IF
    if(tb49){
        //Instruction 27695
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 27696
        //IF
        if(tb49){
            //Instruction 27697
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27698
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 27699
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 27700
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 27701
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 27702
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 27703
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27704
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27705
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27706
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 27707
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 27708
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 27709
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27710
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 27711
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 27712
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 27713
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27714
            //FRC
            t2 = fract(t2);
            //Instruction 27715
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27716
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 27717
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27718
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27719
            //ADD
            t2 = t2 + t2;
            //Instruction 27720
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 27721
            //LT
            tb51 = t7.w<0.0;
            //Instruction 27722
            //MOV
            t7.y = (-t7.w);
            //Instruction 27723
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 27724
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 27725
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 27726
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 27727
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 27728
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 27729
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 27730
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27731
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27732
            //MUL
            t53 = t2.x * t53;
            //Instruction 27733
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 27734
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27735
            //MUL
            t51 = t51 * t52;
            //Instruction 27736
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 27737
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27738
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27739
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27740
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27741
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 27742
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 27743
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27744
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 27745
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27746
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 27747
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 27748
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 27749
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 27750
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27751
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 27752
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 27753
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 27754
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27755
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 27756
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 27757
        //ELSE
        } else {
            //Instruction 27758
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27759
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27760
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27761
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 27762
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 27763
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 27764
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27765
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 27766
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 27767
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27768
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27769
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27770
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 27771
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27772
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27773
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 27774
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 27775
            //LT
            tb0 = t2.w<0.0;
            //Instruction 27776
            //MOV
            t2.y = (-t2.w);
            //Instruction 27777
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 27778
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 27779
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 27780
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 27781
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 27782
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 27783
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 27784
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27785
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27786
            //MUL
            t51 = t51 * t6.x;
            //Instruction 27787
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 27788
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 27789
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27790
        //ENDIF
        }
        //Instruction 27791
    //ENDIF
    }
    //Instruction 27792
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 27793
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 27794
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27795
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 27796
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 27797
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 27798
    //NE
    tb51 = t49!=0.0;
    //Instruction 27799
    //LOG
    t52 = log2(t49);
    //Instruction 27800
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 27801
    //EXP
    t52 = exp2(t52);
    //Instruction 27802
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 27803
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27804
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27805
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 27806
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 27807
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27808
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 27809
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27810
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 27811
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 27812
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 27813
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27814
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 27815
    //MUL
    t49 = t49 * t51;
    //Instruction 27816
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 27817
    //MOV
    t5.y = t4.y;
    //Instruction 27818
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 27819
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 27820
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 27821
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 27822
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 27823
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 27824
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 27825
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 27826
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 27827
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 27828
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 27829
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 27830
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 27831
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 27832
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 27833
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 27834
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 27835
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 27836
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 27837
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 27838
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 27839
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 27840
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 27841
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 27842
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 27843
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 27844
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 27845
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 27846
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 27847
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 27848
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 27849
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 27850
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 27851
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 27852
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 27853
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 27854
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 27855
    //MOV
    t5.x = t3.z;
    //Instruction 27856
    //MOV
    t5.y = t4.x;
    //Instruction 27857
    //MOV
    t5.z = t0.x;
    //Instruction 27858
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 27859
    //MOV
    t5.x = t3.x;
    //Instruction 27860
    //MOV
    t5.y = t4.y;
    //Instruction 27861
    //MOV
    t5.z = t0.y;
    //Instruction 27862
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 27863
    //MOV
    t0.x = t3.y;
    //Instruction 27864
    //MOV
    t0.y = t4.z;
    //Instruction 27865
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 27866
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 27867
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 27868
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 27869
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_9;
bool tb11;
mediump float t16_18;
lowp float t10_18;
bool tb21;
mediump float t16_23;
highp float t25;
void main()
{
    //Instruction 27494
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 27495
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 27496
    //LT
    tb21 = t10_1.x<0.0;
    //Instruction 27497
    //DISCARD
    if((int(tb21))!=0){discard;}
    //Instruction 27498
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 27499
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 27500
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 27501
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 27502
    //MAX
    t16_3.x = max(t16_9.z, t16_9.y);
    //Instruction 27503
    //MAX
    t16_3.x = max(t16_9.x, t16_3.x);
    //Instruction 27504
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 27505
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 27506
    //MUL
    t16_2.xyz = t16_0.xxx * t16_9.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 27507
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 27508
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 27509
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 27510
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 27511
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 27512
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 27513
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 27514
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 27515
    //LT
    tb11 = 0.0<t16_0.z;
    //Instruction 27516
    //DP3
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 27517
    //SAMPLE
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    //Instruction 27518
    //MOVC
    t10_1.x = (tb11) ? 1.0 : 0.0;
    //Instruction 27519
    //MUL
    t10_1.x = t10_4 * t10_1.x;
    //Instruction 27520
    //MUL
    t10_1.x = t10_18 * t10_1.x;
    //Instruction 27521
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 27522
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 27523
    //ADD
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 27524
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 27525
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 27526
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 27527
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 27528
    //MAD
    t10_1.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 27529
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 27530
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 27531
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 27532
    //DP3
    t16_23 = dot(t10_6.xyz, t4.xyz);
    //Instruction 27533
    //MAX
    t16_23 = max(t16_23, 0.0);
    //Instruction 27534
    //MUL
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    //Instruction 27535
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 27536
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 27537
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_14.x)
   + 
    (v_99.xyz * tmpvar_14.y)
  ) + (v_100.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_101;
  highp mat3 tmpvar_102;
  tmpvar_102[0] = _Object2World[0].xyz;
  tmpvar_102[1] = _Object2World[1].xyz;
  tmpvar_102[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize((tmpvar_102 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_103;
  lowp vec3 tmpvar_104;
  tmpvar_104 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_104 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106.x = worldTangent_5.x;
  tmpvar_106.y = worldBinormal_4.x;
  tmpvar_106.z = worldNormal_6.x;
  lowp vec3 tmpvar_107;
  tmpvar_107.x = worldTangent_5.y;
  tmpvar_107.y = worldBinormal_4.y;
  tmpvar_107.z = worldNormal_6.y;
  lowp vec3 tmpvar_108;
  tmpvar_108.x = worldTangent_5.z;
  tmpvar_108.y = worldBinormal_4.z;
  tmpvar_108.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_106;
  xlv_TEXCOORD1 = tmpvar_107;
  xlv_TEXCOORD2 = tmpvar_108;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 27330
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 27331
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 27332
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 27333
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 27334
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 27335
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 27336
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 27337
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 27338
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 27339
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 27340
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 27341
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 27342
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 27343
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 27344
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 27345
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 27346
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 27347
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 27348
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 27349
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 27350
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 27351
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 27352
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 27353
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 27354
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 27355
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 27356
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 27357
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 27358
        //FRC
        t32.x = fract(t32.x);
        //Instruction 27359
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 27360
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 27361
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 27362
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 27363
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 27364
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 27365
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 27366
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 27367
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 27368
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 27369
        //IF
        if(tb48){
            //Instruction 27370
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 27371
            //FRC
            t5 = fract(t5);
            //Instruction 27372
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27373
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 27374
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 27375
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 27376
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 27377
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 27378
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27379
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 27380
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27381
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 27382
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27383
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 27384
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 27385
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 27386
            //SQRT
            t49 = sqrt(t49);
            //Instruction 27387
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 27388
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 27389
            //MUL
            t51 = t51 * t52;
            //Instruction 27390
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 27391
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 27392
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 27393
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 27394
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 27395
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 27396
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 27397
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 27398
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 27399
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 27400
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 27401
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 27402
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 27403
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 27404
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 27405
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 27406
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 27407
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 27408
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 27409
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 27410
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 27411
            //SQRT
            t51 = sqrt(t51);
            //Instruction 27412
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 27413
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 27414
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 27415
            //MUL
            t6.x = t51 * t52;
            //Instruction 27416
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 27417
            //LT
            tb19 = t19<(-t19);
            //Instruction 27418
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 27419
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 27420
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 27421
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 27422
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 27423
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 27424
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 27425
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27426
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 27427
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27428
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 27429
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 27430
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 27431
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 27432
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 27433
            //LOG
            t48 = log2(t48);
            //Instruction 27434
            //MUL
            t48 = t48 * t7.y;
            //Instruction 27435
            //EXP
            t48 = exp2(t48);
            //Instruction 27436
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 27437
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 27438
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 27439
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 27440
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 27441
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 27442
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 27443
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 27444
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 27445
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 27446
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 27447
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 27448
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 27449
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 27450
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 27451
            //MOV
            t11.z = t12.x;
            //Instruction 27452
            //MOV
            t11.w = t10.x;
            //Instruction 27453
            //MOV
            t13.z = t9.y;
            //Instruction 27454
            //MOV
            t13.w = t14.y;
            //Instruction 27455
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 27456
            //MOV
            t14.w = t13.y;
            //Instruction 27457
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 27458
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 27459
            //MOV
            t10.w = t11.y;
            //Instruction 27460
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 27461
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 27462
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 27463
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 27464
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 27465
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 27466
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 27467
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 27468
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 27469
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 27470
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 27471
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 27472
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 27473
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 27474
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 27475
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 27476
        //ELSE
        } else {
            //Instruction 27477
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 27478
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 27479
        //ENDIF
        }
        //Instruction 27480
    //ELSE
    } else {
        //Instruction 27481
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 27482
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 27483
    //ENDIF
    }
    //Instruction 27484
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 27485
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 27486
    //IF
    if(tb49){
        //Instruction 27487
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 27488
        //IF
        if(tb49){
            //Instruction 27489
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27490
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 27491
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 27492
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 27493
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 27494
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 27495
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27496
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27497
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27498
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 27499
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 27500
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 27501
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27502
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 27503
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 27504
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 27505
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27506
            //FRC
            t2 = fract(t2);
            //Instruction 27507
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27508
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 27509
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27510
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27511
            //ADD
            t2 = t2 + t2;
            //Instruction 27512
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 27513
            //LT
            tb51 = t7.w<0.0;
            //Instruction 27514
            //MOV
            t7.y = (-t7.w);
            //Instruction 27515
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 27516
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 27517
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 27518
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 27519
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 27520
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 27521
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 27522
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27523
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27524
            //MUL
            t53 = t2.x * t53;
            //Instruction 27525
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 27526
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27527
            //MUL
            t51 = t51 * t52;
            //Instruction 27528
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 27529
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27530
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27531
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27532
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27533
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 27534
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 27535
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27536
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 27537
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27538
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 27539
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 27540
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 27541
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 27542
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27543
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 27544
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 27545
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 27546
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27547
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 27548
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 27549
        //ELSE
        } else {
            //Instruction 27550
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27551
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 27552
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27553
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 27554
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 27555
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 27556
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27557
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 27558
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 27559
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27560
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 27561
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27562
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 27563
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27564
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27565
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 27566
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 27567
            //LT
            tb0 = t2.w<0.0;
            //Instruction 27568
            //MOV
            t2.y = (-t2.w);
            //Instruction 27569
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 27570
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 27571
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 27572
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 27573
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 27574
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 27575
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 27576
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27577
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27578
            //MUL
            t51 = t51 * t6.x;
            //Instruction 27579
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 27580
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 27581
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 27582
        //ENDIF
        }
        //Instruction 27583
    //ENDIF
    }
    //Instruction 27584
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 27585
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 27586
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27587
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 27588
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 27589
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 27590
    //NE
    tb51 = t49!=0.0;
    //Instruction 27591
    //LOG
    t52 = log2(t49);
    //Instruction 27592
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 27593
    //EXP
    t52 = exp2(t52);
    //Instruction 27594
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 27595
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27596
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27597
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 27598
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 27599
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27600
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 27601
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27602
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 27603
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 27604
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 27605
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27606
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 27607
    //MUL
    t49 = t49 * t51;
    //Instruction 27608
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 27609
    //MOV
    t5.y = t4.y;
    //Instruction 27610
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 27611
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 27612
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 27613
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 27614
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 27615
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 27616
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 27617
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 27618
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 27619
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 27620
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 27621
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 27622
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 27623
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 27624
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 27625
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 27626
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 27627
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 27628
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 27629
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 27630
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 27631
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 27632
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 27633
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 27634
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 27635
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 27636
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 27637
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 27638
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 27639
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 27640
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 27641
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 27642
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 27643
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 27644
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 27645
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 27646
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 27647
    //MOV
    t5.x = t3.z;
    //Instruction 27648
    //MOV
    t5.y = t4.x;
    //Instruction 27649
    //MOV
    t5.z = t0.x;
    //Instruction 27650
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 27651
    //MOV
    t5.x = t3.x;
    //Instruction 27652
    //MOV
    t5.y = t4.y;
    //Instruction 27653
    //MOV
    t5.z = t0.y;
    //Instruction 27654
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 27655
    //MOV
    t0.x = t3.y;
    //Instruction 27656
    //MOV
    t0.y = t4.z;
    //Instruction 27657
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 27658
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 27659
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 27660
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 27661
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 27291
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 27292
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 27293
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 27294
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 27295
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 27296
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 27297
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 27298
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 27299
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 27300
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 27301
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 27302
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 27303
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 27304
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 27305
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 27306
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 27307
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 27308
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 27309
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 27310
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 27311
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 27312
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 27313
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 27314
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 27315
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 27316
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 27317
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 27318
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 27319
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 27320
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 27321
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 27322
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 27323
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 27324
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 27325
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 27326
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 27327
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 27328
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 27329
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_14.x)
   + 
    (v_99.xyz * tmpvar_14.y)
  ) + (v_100.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_101;
  highp mat3 tmpvar_102;
  tmpvar_102[0] = _Object2World[0].xyz;
  tmpvar_102[1] = _Object2World[1].xyz;
  tmpvar_102[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize((tmpvar_102 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_103;
  lowp vec3 tmpvar_104;
  tmpvar_104 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_105;
  tmpvar_105 = (tmpvar_104 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106.x = worldTangent_5.x;
  tmpvar_106.y = worldBinormal_4.x;
  tmpvar_106.z = worldNormal_6.x;
  lowp vec3 tmpvar_107;
  tmpvar_107.x = worldTangent_5.y;
  tmpvar_107.y = worldBinormal_4.y;
  tmpvar_107.z = worldNormal_6.y;
  lowp vec3 tmpvar_108;
  tmpvar_108.x = worldTangent_5.z;
  tmpvar_108.y = worldBinormal_4.z;
  tmpvar_108.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_106;
  xlv_TEXCOORD1 = tmpvar_107;
  xlv_TEXCOORD2 = tmpvar_108;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 28254
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 28255
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 28256
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 28257
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 28258
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 28259
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 28260
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 28261
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 28262
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 28263
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 28264
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 28265
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 28266
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 28267
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 28268
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 28269
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 28270
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 28271
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 28272
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 28273
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 28274
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 28275
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 28276
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 28277
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 28278
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 28279
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 28280
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 28281
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 28282
        //FRC
        t32.x = fract(t32.x);
        //Instruction 28283
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 28284
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 28285
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 28286
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 28287
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 28288
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 28289
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 28290
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 28291
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 28292
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 28293
        //IF
        if(tb48){
            //Instruction 28294
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 28295
            //FRC
            t5 = fract(t5);
            //Instruction 28296
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28297
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 28298
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 28299
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 28300
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 28301
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 28302
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 28303
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 28304
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 28305
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 28306
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 28307
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 28308
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 28309
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 28310
            //SQRT
            t49 = sqrt(t49);
            //Instruction 28311
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 28312
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 28313
            //MUL
            t51 = t51 * t52;
            //Instruction 28314
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 28315
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 28316
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 28317
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 28318
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 28319
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 28320
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 28321
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 28322
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 28323
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 28324
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 28325
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 28326
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 28327
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 28328
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 28329
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 28330
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 28331
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 28332
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 28333
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 28334
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 28335
            //SQRT
            t51 = sqrt(t51);
            //Instruction 28336
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 28337
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 28338
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 28339
            //MUL
            t6.x = t51 * t52;
            //Instruction 28340
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 28341
            //LT
            tb19 = t19<(-t19);
            //Instruction 28342
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 28343
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 28344
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 28345
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 28346
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 28347
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 28348
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 28349
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 28350
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 28351
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 28352
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 28353
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 28354
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 28355
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 28356
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 28357
            //LOG
            t48 = log2(t48);
            //Instruction 28358
            //MUL
            t48 = t48 * t7.y;
            //Instruction 28359
            //EXP
            t48 = exp2(t48);
            //Instruction 28360
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 28361
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 28362
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 28363
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 28364
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 28365
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 28366
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 28367
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 28368
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 28369
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 28370
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 28371
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 28372
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 28373
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 28374
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 28375
            //MOV
            t11.z = t12.x;
            //Instruction 28376
            //MOV
            t11.w = t10.x;
            //Instruction 28377
            //MOV
            t13.z = t9.y;
            //Instruction 28378
            //MOV
            t13.w = t14.y;
            //Instruction 28379
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 28380
            //MOV
            t14.w = t13.y;
            //Instruction 28381
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 28382
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 28383
            //MOV
            t10.w = t11.y;
            //Instruction 28384
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 28385
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 28386
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 28387
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 28388
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 28389
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 28390
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 28391
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 28392
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 28393
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 28394
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 28395
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 28396
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 28397
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 28398
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 28399
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 28400
        //ELSE
        } else {
            //Instruction 28401
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 28402
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 28403
        //ENDIF
        }
        //Instruction 28404
    //ELSE
    } else {
        //Instruction 28405
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 28406
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 28407
    //ENDIF
    }
    //Instruction 28408
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 28409
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 28410
    //IF
    if(tb49){
        //Instruction 28411
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 28412
        //IF
        if(tb49){
            //Instruction 28413
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 28414
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 28415
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 28416
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 28417
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 28418
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 28419
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28420
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 28421
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28422
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 28423
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 28424
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 28425
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28426
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 28427
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 28428
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 28429
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 28430
            //FRC
            t2 = fract(t2);
            //Instruction 28431
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 28432
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 28433
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 28434
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 28435
            //ADD
            t2 = t2 + t2;
            //Instruction 28436
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 28437
            //LT
            tb51 = t7.w<0.0;
            //Instruction 28438
            //MOV
            t7.y = (-t7.w);
            //Instruction 28439
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 28440
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 28441
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 28442
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 28443
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 28444
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 28445
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 28446
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28447
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28448
            //MUL
            t53 = t2.x * t53;
            //Instruction 28449
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 28450
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 28451
            //MUL
            t51 = t51 * t52;
            //Instruction 28452
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 28453
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 28454
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28455
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 28456
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28457
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 28458
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 28459
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 28460
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 28461
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 28462
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 28463
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 28464
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 28465
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 28466
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 28467
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 28468
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 28469
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 28470
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 28471
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 28472
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 28473
        //ELSE
        } else {
            //Instruction 28474
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28475
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 28476
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28477
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 28478
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 28479
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 28480
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28481
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 28482
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 28483
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 28484
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 28485
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28486
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 28487
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 28488
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 28489
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 28490
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 28491
            //LT
            tb0 = t2.w<0.0;
            //Instruction 28492
            //MOV
            t2.y = (-t2.w);
            //Instruction 28493
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 28494
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 28495
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 28496
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 28497
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 28498
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 28499
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 28500
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28501
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28502
            //MUL
            t51 = t51 * t6.x;
            //Instruction 28503
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 28504
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 28505
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 28506
        //ENDIF
        }
        //Instruction 28507
    //ENDIF
    }
    //Instruction 28508
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 28509
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 28510
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 28511
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 28512
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 28513
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 28514
    //NE
    tb51 = t49!=0.0;
    //Instruction 28515
    //LOG
    t52 = log2(t49);
    //Instruction 28516
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 28517
    //EXP
    t52 = exp2(t52);
    //Instruction 28518
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 28519
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 28520
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 28521
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 28522
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 28523
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 28524
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 28525
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 28526
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 28527
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 28528
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 28529
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 28530
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 28531
    //MUL
    t49 = t49 * t51;
    //Instruction 28532
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 28533
    //MOV
    t5.y = t4.y;
    //Instruction 28534
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 28535
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 28536
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 28537
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 28538
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 28539
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 28540
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 28541
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 28542
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 28543
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 28544
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 28545
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 28546
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 28547
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 28548
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 28549
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 28550
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 28551
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 28552
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 28553
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 28554
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 28555
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 28556
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 28557
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 28558
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 28559
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 28560
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 28561
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 28562
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 28563
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 28564
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 28565
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 28566
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 28567
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 28568
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 28569
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 28570
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 28571
    //MOV
    t5.x = t3.z;
    //Instruction 28572
    //MOV
    t5.y = t4.x;
    //Instruction 28573
    //MOV
    t5.z = t0.x;
    //Instruction 28574
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 28575
    //MOV
    t5.x = t3.x;
    //Instruction 28576
    //MOV
    t5.y = t4.y;
    //Instruction 28577
    //MOV
    t5.z = t0.y;
    //Instruction 28578
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 28579
    //MOV
    t0.x = t3.y;
    //Instruction 28580
    //MOV
    t0.y = t4.z;
    //Instruction 28581
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 28582
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 28583
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 28584
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 28585
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 28222
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 28223
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 28224
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 28225
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 28226
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 28227
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 28228
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 28229
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 28230
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 28231
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 28232
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 28233
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 28234
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 28235
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 28236
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 28237
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 28238
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 28239
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 28240
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 28241
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 28242
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 28243
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 28244
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 28245
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 28246
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 28247
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 28248
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 28249
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 28250
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 28251
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 28252
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 28253
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, vec2(tmpvar_14)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 27890
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 27891
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 27892
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 27893
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 27894
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 27895
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 27896
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 27897
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 27898
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 27899
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 27900
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 27901
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 27902
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 27903
    //IF
    if(tb19){
        //Instruction 27904
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 27905
        //IF
        if(tb19){
            //Instruction 27906
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27907
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 27908
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 27909
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 27910
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 27911
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 27912
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27913
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 27914
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27915
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 27916
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27917
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 27918
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 27919
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27920
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 27921
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 27922
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 27923
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27924
            //FRC
            t0 = fract(t0);
            //Instruction 27925
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27926
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 27927
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27928
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27929
            //ADD
            t0 = t0 + t0;
            //Instruction 27930
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 27931
            //LT
            tb20 = t5.w<0.0;
            //Instruction 27932
            //MOV
            t5.y = (-t5.w);
            //Instruction 27933
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 27934
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 27935
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 27936
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 27937
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 27938
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 27939
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 27940
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27941
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27942
            //MUL
            t22 = t0.x * t22;
            //Instruction 27943
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 27944
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27945
            //MUL
            t20 = t20 * t21;
            //Instruction 27946
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 27947
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 27948
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27949
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27950
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27951
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 27952
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 27953
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27954
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 27955
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27956
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 27957
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 27958
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 27959
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 27960
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27961
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 27962
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 27963
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 27964
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27965
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 27966
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 27967
        //ELSE
        } else {
            //Instruction 27968
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27969
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 27970
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27971
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 27972
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27973
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 27974
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 27975
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27976
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 27977
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 27978
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27979
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 27980
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27981
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 27982
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27983
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27984
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 27985
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 27986
            //LT
            tb19 = t0.w<0.0;
            //Instruction 27987
            //MOV
            t0.y = (-t0.w);
            //Instruction 27988
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 27989
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 27990
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 27991
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 27992
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 27993
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 27994
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 27995
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27996
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27997
            //MUL
            t21 = t21 * t4.x;
            //Instruction 27998
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 27999
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 28000
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 28001
        //ENDIF
        }
        //Instruction 28002
    //ENDIF
    }
    //Instruction 28003
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 28004
    //SQRT
    t19 = sqrt(t19);
    //Instruction 28005
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 28006
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 28007
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 28008
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 28009
    //NE
    tb3 = t20!=0.0;
    //Instruction 28010
    //LOG
    t9 = log2(t20);
    //Instruction 28011
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 28012
    //EXP
    t9 = exp2(t9);
    //Instruction 28013
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 28014
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 28015
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 28016
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 28017
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 28018
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 28019
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 28020
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 28021
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 28022
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 28023
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 28024
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 28025
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 28026
    //MUL
    t20 = t20 * t3.x;
    //Instruction 28027
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 28028
    //MOV
    t3.y = t2.y;
    //Instruction 28029
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 28030
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 28031
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 28032
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 28033
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 28034
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 28035
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 28036
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 28037
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 28038
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 28039
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 28040
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 28041
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 28042
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 28043
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 28044
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 28045
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 28046
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 28047
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 28048
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 28049
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 28050
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 28051
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 28052
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 28053
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 28054
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 28055
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 28056
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 28057
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 28058
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 28059
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 28060
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 28061
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 27870
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 27871
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 27872
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 27873
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 27874
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 27875
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 27876
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 27877
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 27878
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 27879
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 27880
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 27881
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 27882
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 27883
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 27884
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 27885
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 27886
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 27887
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 27888
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 27889
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8 * tmpvar_1) * diff_14);
  c_13.w = tmpvar_9;
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 27671
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 27672
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 27673
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 27674
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 27675
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 27676
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 27677
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 27678
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 27679
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 27680
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 27681
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 27682
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 27683
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 27684
    //IF
    if(tb19){
        //Instruction 27685
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 27686
        //IF
        if(tb19){
            //Instruction 27687
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27688
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 27689
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 27690
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 27691
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 27692
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 27693
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27694
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 27695
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27696
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 27697
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27698
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 27699
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 27700
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27701
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 27702
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 27703
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 27704
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27705
            //FRC
            t0 = fract(t0);
            //Instruction 27706
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27707
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 27708
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27709
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27710
            //ADD
            t0 = t0 + t0;
            //Instruction 27711
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 27712
            //LT
            tb20 = t5.w<0.0;
            //Instruction 27713
            //MOV
            t5.y = (-t5.w);
            //Instruction 27714
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 27715
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 27716
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 27717
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 27718
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 27719
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 27720
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 27721
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27722
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27723
            //MUL
            t22 = t0.x * t22;
            //Instruction 27724
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 27725
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27726
            //MUL
            t20 = t20 * t21;
            //Instruction 27727
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 27728
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 27729
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27730
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27731
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27732
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 27733
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 27734
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27735
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 27736
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27737
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 27738
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 27739
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 27740
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 27741
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27742
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 27743
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 27744
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 27745
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27746
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 27747
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 27748
        //ELSE
        } else {
            //Instruction 27749
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27750
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 27751
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27752
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 27753
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27754
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 27755
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 27756
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27757
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 27758
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 27759
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27760
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 27761
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27762
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 27763
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27764
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27765
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 27766
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 27767
            //LT
            tb19 = t0.w<0.0;
            //Instruction 27768
            //MOV
            t0.y = (-t0.w);
            //Instruction 27769
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 27770
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 27771
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 27772
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 27773
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 27774
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 27775
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 27776
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27777
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27778
            //MUL
            t21 = t21 * t4.x;
            //Instruction 27779
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 27780
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 27781
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 27782
        //ENDIF
        }
        //Instruction 27783
    //ENDIF
    }
    //Instruction 27784
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 27785
    //SQRT
    t19 = sqrt(t19);
    //Instruction 27786
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27787
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 27788
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 27789
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 27790
    //NE
    tb3 = t20!=0.0;
    //Instruction 27791
    //LOG
    t9 = log2(t20);
    //Instruction 27792
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 27793
    //EXP
    t9 = exp2(t9);
    //Instruction 27794
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 27795
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27796
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27797
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 27798
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 27799
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27800
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 27801
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27802
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 27803
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 27804
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 27805
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27806
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 27807
    //MUL
    t20 = t20 * t3.x;
    //Instruction 27808
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 27809
    //MOV
    t3.y = t2.y;
    //Instruction 27810
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 27811
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 27812
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 27813
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 27814
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 27815
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 27816
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 27817
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 27818
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 27819
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 27820
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 27821
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 27822
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 27823
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 27824
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 27825
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 27826
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 27827
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 27828
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 27829
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 27830
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 27831
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 27832
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 27833
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 27834
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 27835
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 27836
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 27837
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 27838
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 27839
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 27840
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 27841
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 27842
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_7;
void main()
{
    //Instruction 27662
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 27663
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 27664
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 27665
    //DP3
    t16_7 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 27666
    //MAX
    t16_7 = max(t16_7, 0.0);
    //Instruction 27667
    //MUL
    t16_1.xyz = vec3(t16_7) * t16_1.xyz;
    //Instruction 27668
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 27669
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 27670
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14);
  lightCoord_5 = tmpvar_15;
  lowp vec4 tmpvar_16;
  mediump vec2 P_17;
  P_17 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  highp vec3 LightCoord_18;
  LightCoord_18 = lightCoord_5.xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (LightCoord_18, LightCoord_18);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(tmpvar_19));
  mediump float tmpvar_21;
  tmpvar_21 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_16.w) * tmpvar_20.w);
  atten_4 = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_10 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_11;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 28613
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 28614
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 28615
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 28616
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 28617
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 28618
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 28619
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 28620
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 28621
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 28622
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 28623
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 28624
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 28625
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 28626
    //IF
    if(tb19){
        //Instruction 28627
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 28628
        //IF
        if(tb19){
            //Instruction 28629
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 28630
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 28631
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 28632
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 28633
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 28634
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 28635
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28636
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 28637
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28638
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 28639
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 28640
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 28641
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 28642
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28643
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 28644
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 28645
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 28646
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 28647
            //FRC
            t0 = fract(t0);
            //Instruction 28648
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 28649
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 28650
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 28651
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 28652
            //ADD
            t0 = t0 + t0;
            //Instruction 28653
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 28654
            //LT
            tb20 = t5.w<0.0;
            //Instruction 28655
            //MOV
            t5.y = (-t5.w);
            //Instruction 28656
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 28657
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 28658
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 28659
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 28660
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 28661
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 28662
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 28663
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28664
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28665
            //MUL
            t22 = t0.x * t22;
            //Instruction 28666
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 28667
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 28668
            //MUL
            t20 = t20 * t21;
            //Instruction 28669
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 28670
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 28671
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28672
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 28673
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28674
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 28675
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 28676
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 28677
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 28678
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 28679
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 28680
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 28681
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 28682
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 28683
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 28684
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 28685
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 28686
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 28687
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 28688
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 28689
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 28690
        //ELSE
        } else {
            //Instruction 28691
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28692
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 28693
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28694
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 28695
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 28696
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 28697
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 28698
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28699
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 28700
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 28701
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 28702
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 28703
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28704
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 28705
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 28706
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 28707
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 28708
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 28709
            //LT
            tb19 = t0.w<0.0;
            //Instruction 28710
            //MOV
            t0.y = (-t0.w);
            //Instruction 28711
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 28712
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 28713
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 28714
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 28715
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 28716
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 28717
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 28718
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28719
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28720
            //MUL
            t21 = t21 * t4.x;
            //Instruction 28721
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 28722
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 28723
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 28724
        //ENDIF
        }
        //Instruction 28725
    //ENDIF
    }
    //Instruction 28726
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 28727
    //SQRT
    t19 = sqrt(t19);
    //Instruction 28728
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 28729
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 28730
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 28731
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 28732
    //NE
    tb3 = t20!=0.0;
    //Instruction 28733
    //LOG
    t9 = log2(t20);
    //Instruction 28734
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 28735
    //EXP
    t9 = exp2(t9);
    //Instruction 28736
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 28737
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 28738
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 28739
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 28740
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 28741
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 28742
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 28743
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 28744
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 28745
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 28746
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 28747
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 28748
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 28749
    //MUL
    t20 = t20 * t3.x;
    //Instruction 28750
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 28751
    //MOV
    t3.y = t2.y;
    //Instruction 28752
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 28753
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 28754
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 28755
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 28756
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 28757
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 28758
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 28759
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 28760
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 28761
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 28762
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 28763
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 28764
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 28765
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 28766
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 28767
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 28768
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 28769
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 28770
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 28771
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 28772
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 28773
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 28774
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 28775
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 28776
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 28777
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 28778
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 28779
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 28780
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 28781
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 28782
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 28783
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 28784
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
highp vec3 t2;
lowp vec3 t10_2;
lowp float t10_3;
bool tb6;
mediump float t16_10;
lowp float t10_10;
mediump float t16_12;
highp float t14;
void main()
{
    //Instruction 28586
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 28587
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 28588
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 28589
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 28590
    //DIV
    t16_1.xy = t16_0.xy / t16_0.ww;
    //Instruction 28591
    //ADD
    t16_1.xy = t16_1.xy + vec2(0.500000, 0.500000);
    //Instruction 28592
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_1.xy).w;
    //Instruction 28593
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 28594
    //DP3
    t16_10 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 28595
    //SAMPLE
    t10_10 = texture(_LightTextureB0, vec2(t16_10)).w;
    //Instruction 28596
    //MOVC
    t10_3 = (tb6) ? 1.0 : 0.0;
    //Instruction 28597
    //MUL
    t10_3 = t10_2.x * t10_3;
    //Instruction 28598
    //MUL
    t10_3 = t10_10 * t10_3;
    //Instruction 28599
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 28600
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 28601
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 28602
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 28603
    //ADD
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 28604
    //DP3
    t14 = dot(t2.xyz, t2.xyz);
    //Instruction 28605
    //RSQ
    t14 = inversesqrt(t14);
    //Instruction 28606
    //MUL
    t2.xyz = vec3(t14) * t2.xyz;
    //Instruction 28607
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    //Instruction 28608
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 28609
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 28610
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 28611
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 28612
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xyz;
  highp float tmpvar_14;
  tmpvar_14 = dot (tmpvar_13, tmpvar_13);
  lowp float tmpvar_15;
  tmpvar_15 = (texture2D (_LightTextureB0, vec2(tmpvar_14)).w * textureCube (_LightTexture0, tmpvar_13).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 28084
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 28085
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 28086
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 28087
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 28088
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 28089
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 28090
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 28091
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 28092
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 28093
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 28094
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 28095
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 28096
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 28097
    //IF
    if(tb19){
        //Instruction 28098
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 28099
        //IF
        if(tb19){
            //Instruction 28100
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 28101
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 28102
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 28103
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 28104
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 28105
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 28106
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28107
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 28108
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28109
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 28110
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 28111
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 28112
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 28113
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28114
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 28115
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 28116
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 28117
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 28118
            //FRC
            t0 = fract(t0);
            //Instruction 28119
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 28120
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 28121
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 28122
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 28123
            //ADD
            t0 = t0 + t0;
            //Instruction 28124
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 28125
            //LT
            tb20 = t5.w<0.0;
            //Instruction 28126
            //MOV
            t5.y = (-t5.w);
            //Instruction 28127
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 28128
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 28129
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 28130
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 28131
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 28132
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 28133
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 28134
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28135
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28136
            //MUL
            t22 = t0.x * t22;
            //Instruction 28137
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 28138
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 28139
            //MUL
            t20 = t20 * t21;
            //Instruction 28140
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 28141
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 28142
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28143
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 28144
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28145
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 28146
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 28147
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 28148
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 28149
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 28150
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 28151
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 28152
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 28153
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 28154
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 28155
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 28156
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 28157
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 28158
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 28159
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 28160
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 28161
        //ELSE
        } else {
            //Instruction 28162
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28163
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 28164
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28165
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 28166
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 28167
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 28168
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 28169
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28170
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 28171
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 28172
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 28173
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 28174
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28175
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 28176
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 28177
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 28178
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 28179
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 28180
            //LT
            tb19 = t0.w<0.0;
            //Instruction 28181
            //MOV
            t0.y = (-t0.w);
            //Instruction 28182
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 28183
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 28184
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 28185
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 28186
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 28187
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 28188
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 28189
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28190
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28191
            //MUL
            t21 = t21 * t4.x;
            //Instruction 28192
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 28193
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 28194
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 28195
        //ENDIF
        }
        //Instruction 28196
    //ENDIF
    }
    //Instruction 28197
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 28198
    //SQRT
    t19 = sqrt(t19);
    //Instruction 28199
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 28200
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 28201
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 28202
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 28203
    //NE
    tb3 = t20!=0.0;
    //Instruction 28204
    //LOG
    t9 = log2(t20);
    //Instruction 28205
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 28206
    //EXP
    t9 = exp2(t9);
    //Instruction 28207
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 28208
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 28209
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 28210
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 28211
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 28212
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 28213
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 28214
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 28215
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 28216
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 28217
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 28218
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 28219
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 28220
    //MUL
    t20 = t20 * t3.x;
    //Instruction 28221
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 28222
    //MOV
    t3.y = t2.y;
    //Instruction 28223
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 28224
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 28225
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 28226
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 28227
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 28228
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 28229
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 28230
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 28231
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 28232
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 28233
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 28234
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 28235
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 28236
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 28237
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 28238
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 28239
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 28240
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 28241
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 28242
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 28243
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 28244
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 28245
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 28246
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 28247
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 28248
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 28249
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 28250
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 28251
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 28252
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 28253
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 28254
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 28255
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
mediump vec3 t16_2;
lowp float t10_4;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 28062
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 28063
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 28064
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 28065
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 28066
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 28067
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_0.xyz).w;
    //Instruction 28068
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 28069
    //MUL
    t16_1 = t10_4 * t10_1.x;
    //Instruction 28070
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 28071
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 28072
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 28073
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 28074
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 28075
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 28076
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 28077
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 28078
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 28079
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 28080
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 28081
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 28082
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 28083
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_13;
  tmpvar_13 = (_LightMatrix0 * tmpvar_12).xy;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_LightTexture0, tmpvar_13).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_14);
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 27858
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 27859
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 27860
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 27861
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 27862
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 27863
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 27864
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 27865
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 27866
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 27867
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 27868
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 27869
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 27870
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 27871
    //IF
    if(tb19){
        //Instruction 27872
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 27873
        //IF
        if(tb19){
            //Instruction 27874
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 27875
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 27876
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 27877
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 27878
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 27879
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 27880
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27881
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 27882
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27883
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 27884
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27885
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 27886
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 27887
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27888
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 27889
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 27890
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 27891
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 27892
            //FRC
            t0 = fract(t0);
            //Instruction 27893
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 27894
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 27895
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 27896
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 27897
            //ADD
            t0 = t0 + t0;
            //Instruction 27898
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 27899
            //LT
            tb20 = t5.w<0.0;
            //Instruction 27900
            //MOV
            t5.y = (-t5.w);
            //Instruction 27901
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 27902
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 27903
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 27904
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 27905
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 27906
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 27907
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 27908
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27909
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27910
            //MUL
            t22 = t0.x * t22;
            //Instruction 27911
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 27912
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 27913
            //MUL
            t20 = t20 * t21;
            //Instruction 27914
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 27915
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 27916
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27917
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 27918
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 27919
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 27920
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 27921
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 27922
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 27923
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 27924
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 27925
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 27926
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 27927
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 27928
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 27929
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 27930
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 27931
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 27932
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 27933
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 27934
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 27935
        //ELSE
        } else {
            //Instruction 27936
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 27937
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 27938
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27939
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 27940
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 27941
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 27942
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 27943
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 27944
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 27945
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 27946
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 27947
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 27948
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 27949
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 27950
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 27951
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 27952
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 27953
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 27954
            //LT
            tb19 = t0.w<0.0;
            //Instruction 27955
            //MOV
            t0.y = (-t0.w);
            //Instruction 27956
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 27957
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 27958
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 27959
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 27960
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 27961
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 27962
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 27963
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 27964
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 27965
            //MUL
            t21 = t21 * t4.x;
            //Instruction 27966
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 27967
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 27968
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 27969
        //ENDIF
        }
        //Instruction 27970
    //ENDIF
    }
    //Instruction 27971
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 27972
    //SQRT
    t19 = sqrt(t19);
    //Instruction 27973
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 27974
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 27975
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 27976
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 27977
    //NE
    tb3 = t20!=0.0;
    //Instruction 27978
    //LOG
    t9 = log2(t20);
    //Instruction 27979
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 27980
    //EXP
    t9 = exp2(t9);
    //Instruction 27981
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 27982
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 27983
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 27984
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 27985
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 27986
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 27987
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 27988
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 27989
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 27990
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 27991
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 27992
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 27993
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 27994
    //MUL
    t20 = t20 * t3.x;
    //Instruction 27995
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 27996
    //MOV
    t3.y = t2.y;
    //Instruction 27997
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 27998
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 27999
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 28000
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 28001
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 28002
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 28003
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 28004
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 28005
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 28006
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 28007
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 28008
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 28009
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 28010
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 28011
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 28012
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 28013
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 28014
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 28015
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 28016
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 28017
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 28018
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 28019
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 28020
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 28021
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 28022
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 28023
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 28024
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 28025
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 28026
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 28027
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 28028
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 28029
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_9;
void main()
{
    //Instruction 27843
    //MUL
    t16_0.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 27844
    //MAD
    t16_0.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_0.xy;
    //Instruction 27845
    //MAD
    t16_0.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_0.xy;
    //Instruction 27846
    //ADD
    t16_0.xy = t16_0.xy + _LightMatrix0[3].xy;
    //Instruction 27847
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 27848
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 27849
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 27850
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 27851
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 27852
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 27853
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 27854
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 27855
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 27856
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 27857
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 28059
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 28060
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 28061
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 28062
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 28063
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 28064
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 28065
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 28066
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 28067
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 28068
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 28069
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 28070
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 28071
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 28072
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 28073
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 28074
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 28075
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 28076
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 28077
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 28078
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 28079
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 28080
    //IF
    if(tb22){
        //Instruction 28081
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 28082
        //IF
        if(tb22){
            //Instruction 28083
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 28084
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 28085
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 28086
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 28087
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 28088
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 28089
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28090
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 28091
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28092
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 28093
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 28094
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 28095
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28096
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 28097
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 28098
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 28099
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 28100
            //FRC
            t2 = fract(t2);
            //Instruction 28101
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 28102
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 28103
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 28104
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 28105
            //ADD
            t2 = t2 + t2;
            //Instruction 28106
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 28107
            //LT
            tb24 = t6.w<0.0;
            //Instruction 28108
            //MOV
            t6.y = (-t6.w);
            //Instruction 28109
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 28110
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 28111
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 28112
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 28113
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 28114
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 28115
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 28116
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28117
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28118
            //MUL
            t26 = t2.x * t26;
            //Instruction 28119
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 28120
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 28121
            //MUL
            t24 = t24 * t25;
            //Instruction 28122
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 28123
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 28124
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28125
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 28126
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28127
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 28128
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 28129
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 28130
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 28131
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 28132
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 28133
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 28134
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 28135
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 28136
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 28137
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 28138
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 28139
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 28140
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 28141
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 28142
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 28143
        //ELSE
        } else {
            //Instruction 28144
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28145
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 28146
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28147
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 28148
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 28149
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 28150
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28151
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 28152
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 28153
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 28154
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 28155
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28156
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 28157
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 28158
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 28159
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 28160
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 28161
            //LT
            tb0 = t2.w<0.0;
            //Instruction 28162
            //MOV
            t2.y = (-t2.w);
            //Instruction 28163
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 28164
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 28165
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 28166
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 28167
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 28168
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 28169
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 28170
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28171
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28172
            //MUL
            t24 = t24 * t5.x;
            //Instruction 28173
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 28174
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 28175
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 28176
        //ENDIF
        }
        //Instruction 28177
    //ENDIF
    }
    //Instruction 28178
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 28179
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 28180
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 28181
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 28182
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 28183
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 28184
    //NE
    tb24 = t22!=0.0;
    //Instruction 28185
    //LOG
    t4.x = log2(t22);
    //Instruction 28186
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 28187
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 28188
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 28189
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 28190
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 28191
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 28192
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 28193
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 28194
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 28195
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 28196
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 28197
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 28198
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 28199
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 28200
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 28201
    //MUL
    t22 = t22 * t24;
    //Instruction 28202
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 28203
    //MOV
    t4.y = t3.y;
    //Instruction 28204
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 28205
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 28206
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 28207
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 28208
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 28209
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 28210
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 28211
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 28212
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 28213
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 28214
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 28215
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 28216
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 28217
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 28218
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 28219
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 28220
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 28221
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 28222
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 28223
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 28224
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 28225
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 28226
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 28227
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 28228
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 28229
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 28230
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 28231
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 28232
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 28233
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 28234
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 28235
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 28236
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
highp float t9;
mediump float t16_10;
void main()
{
    //Instruction 28030
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 28031
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 28032
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 28033
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 28034
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 28035
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 28036
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 28037
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 28038
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 28039
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 28040
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 28041
    //MUL
    t16_2.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 28042
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_2.xyz;
    //Instruction 28043
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_2.xyz;
    //Instruction 28044
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 28045
    //DP3
    t16_0 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 28046
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 28047
    //MUL
    t16_2.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 28048
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 28049
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 28050
    //DP3
    t9 = dot(t0.xyz, t0.xyz);
    //Instruction 28051
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 28052
    //MUL
    t0.xyz = vec3(t9) * t0.xyz;
    //Instruction 28053
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 28054
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 28055
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 28056
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 28057
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 28058
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_14;
  lowp vec4 c_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_16 = tmpvar_17;
  c_15.xyz = ((tmpvar_8 * tmpvar_1) * diff_16);
  c_15.w = tmpvar_9;
  c_14.w = c_15.w;
  c_14.xyz = c_15.xyz;
  c_3.xyz = c_14.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 28274
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 28275
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 28276
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 28277
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 28278
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 28279
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 28280
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 28281
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 28282
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 28283
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 28284
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 28285
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 28286
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 28287
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 28288
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 28289
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 28290
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 28291
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 28292
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 28293
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 28294
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 28295
    //IF
    if(tb22){
        //Instruction 28296
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 28297
        //IF
        if(tb22){
            //Instruction 28298
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 28299
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 28300
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 28301
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 28302
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 28303
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 28304
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28305
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 28306
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28307
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 28308
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 28309
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 28310
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28311
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 28312
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 28313
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 28314
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 28315
            //FRC
            t2 = fract(t2);
            //Instruction 28316
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 28317
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 28318
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 28319
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 28320
            //ADD
            t2 = t2 + t2;
            //Instruction 28321
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 28322
            //LT
            tb24 = t6.w<0.0;
            //Instruction 28323
            //MOV
            t6.y = (-t6.w);
            //Instruction 28324
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 28325
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 28326
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 28327
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 28328
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 28329
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 28330
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 28331
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28332
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28333
            //MUL
            t26 = t2.x * t26;
            //Instruction 28334
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 28335
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 28336
            //MUL
            t24 = t24 * t25;
            //Instruction 28337
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 28338
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 28339
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28340
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 28341
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 28342
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 28343
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 28344
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 28345
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 28346
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 28347
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 28348
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 28349
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 28350
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 28351
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 28352
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 28353
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 28354
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 28355
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 28356
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 28357
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 28358
        //ELSE
        } else {
            //Instruction 28359
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 28360
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 28361
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28362
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 28363
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 28364
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 28365
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 28366
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 28367
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 28368
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 28369
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 28370
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 28371
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 28372
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 28373
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 28374
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 28375
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 28376
            //LT
            tb0 = t2.w<0.0;
            //Instruction 28377
            //MOV
            t2.y = (-t2.w);
            //Instruction 28378
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 28379
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 28380
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 28381
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 28382
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 28383
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 28384
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 28385
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 28386
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 28387
            //MUL
            t24 = t24 * t5.x;
            //Instruction 28388
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 28389
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 28390
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 28391
        //ENDIF
        }
        //Instruction 28392
    //ENDIF
    }
    //Instruction 28393
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 28394
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 28395
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 28396
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 28397
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 28398
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 28399
    //NE
    tb24 = t22!=0.0;
    //Instruction 28400
    //LOG
    t4.x = log2(t22);
    //Instruction 28401
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 28402
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 28403
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 28404
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 28405
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 28406
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 28407
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 28408
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 28409
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 28410
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 28411
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 28412
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 28413
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 28414
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 28415
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 28416
    //MUL
    t22 = t22 * t24;
    //Instruction 28417
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 28418
    //MOV
    t4.y = t3.y;
    //Instruction 28419
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 28420
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 28421
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 28422
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 28423
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 28424
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 28425
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 28426
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 28427
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 28428
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 28429
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 28430
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 28431
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 28432
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 28433
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 28434
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 28435
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 28436
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 28437
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 28438
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 28439
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 28440
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 28441
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 28442
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 28443
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 28444
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 28445
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 28446
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 28447
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 28448
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 28449
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 28450
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 28451
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump float t16_10;
void main()
{
    //Instruction 28256
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 28257
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 28258
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 28259
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 28260
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 28261
    //MAX
    t16_2 = max(t10_0.z, t10_0.y);
    //Instruction 28262
    //MAX
    t16_2 = max(t10_0.x, t16_2);
    //Instruction 28263
    //DIV
    t16_10 = t16_2 / t16_10;
    //Instruction 28264
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 28265
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 28266
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 28267
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 28268
    //DP3
    t16_10 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 28269
    //MAX
    t16_10 = max(t16_10, 0.0);
    //Instruction 28270
    //MUL
    t16_1.xyz = vec3(t16_10) * t16_1.xyz;
    //Instruction 28271
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 28272
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 28273
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_15 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16);
  lightCoord_5 = tmpvar_17;
  lowp vec4 tmpvar_18;
  mediump vec2 P_19;
  P_19 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_18 = texture2D (_LightTexture0, P_19);
  highp vec3 LightCoord_20;
  LightCoord_20 = lightCoord_5.xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (LightCoord_20, LightCoord_20);
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(tmpvar_21));
  mediump float tmpvar_23;
  tmpvar_23 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_18.w) * tmpvar_22.w);
  atten_4 = tmpvar_23;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_10 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_11;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_3.xyz = c_24.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 28821
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 28822
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 28823
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 28824
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 28825
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 28826
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 28827
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 28828
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 28829
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 28830
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 28831
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 28832
    //MUL
    t3