4;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 12489
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12490
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 12491
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 12492
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 12493
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 12494
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 12495
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 12496
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 12497
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 12498
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 12499
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 12500
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12501
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 12502
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 12503
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 12504
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 12505
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 12506
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 12507
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 12508
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 12509
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 12510
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 12511
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 12512
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 12513
    //FRC
    t3.x = fract(t3.x);
    //Instruction 12514
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 12515
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 12516
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 12517
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 12518
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 12519
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 12520
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 12521
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 12522
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 12523
    //IF
    if(tb30){
        //Instruction 12524
        //IF
        if(tb28){
            //Instruction 12525
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12526
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12527
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12528
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 12529
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 12530
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 12531
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12532
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12533
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12534
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12535
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 12536
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 12537
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12538
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 12539
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 12540
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 12541
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12542
            //FRC
            t2 = fract(t2);
            //Instruction 12543
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12544
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 12545
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12546
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12547
            //ADD
            t2 = t2 + t2;
            //Instruction 12548
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 12549
            //LT
            tb30 = t6.w<0.0;
            //Instruction 12550
            //MOV
            t6.y = (-t6.w);
            //Instruction 12551
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12552
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 12553
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 12554
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 12555
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 12556
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 12557
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 12558
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12559
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12560
            //MUL
            t32 = t2.x * t32;
            //Instruction 12561
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 12562
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12563
            //MUL
            t30 = t30 * t31;
            //Instruction 12564
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 12565
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12566
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12567
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12568
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12569
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12570
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12571
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12572
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12573
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12574
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12575
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12576
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 12577
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 12578
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12579
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 12580
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 12581
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12582
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12583
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 12584
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12585
        //ELSE
        } else {
            //Instruction 12586
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12587
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12588
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12589
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12590
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 12591
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 12592
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12593
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12594
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 12595
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12596
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12597
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12598
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12599
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12600
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12601
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12602
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 12603
            //LT
            tb0 = t2.w<0.0;
            //Instruction 12604
            //MOV
            t2.y = (-t2.w);
            //Instruction 12605
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 12606
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 12607
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 12608
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 12609
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 12610
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 12611
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 12612
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12613
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12614
            //MUL
            t30 = t30 * t5.x;
            //Instruction 12615
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 12616
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 12617
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12618
        //ENDIF
        }
        //Instruction 12619
    //ENDIF
    }
    //Instruction 12620
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 12621
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 12622
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12623
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 12624
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 12625
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 12626
    //NE
    tb30 = t28!=0.0;
    //Instruction 12627
    //LOG
    t4.x = log2(t28);
    //Instruction 12628
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12629
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12630
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 12631
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12632
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12633
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12634
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12635
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12636
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12637
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12638
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12639
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12640
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 12641
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12642
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 12643
    //MUL
    t28 = t28 * t30;
    //Instruction 12644
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 12645
    //MOV
    t4.y = t3.y;
    //Instruction 12646
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 12647
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 12648
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 12649
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 12650
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 12651
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 12652
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 12653
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 12654
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 12655
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 12656
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 12657
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 12658
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 12659
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 12660
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 12661
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 12662
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 12663
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 12664
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 12665
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 12666
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 12667
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 12668
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 12669
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 12670
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 12671
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 12672
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 12673
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 12674
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 12675
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 12676
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 12677
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 12678
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 12679
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 12680
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 12681
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 12682
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 12683
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 12684
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 12685
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 12686
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 12687
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 12688
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 12689
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 12690
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 12691
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 12692
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 12693
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 12694
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 12695
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 12696
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 12697
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 12698
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 12699
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 12700
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 12701
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 12702
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 12703
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 12704
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 12705
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 12706
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 12707
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 12708
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 12709
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 12710
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 12711
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 12712
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 12713
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 12714
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 12453
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 12454
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12455
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 12456
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 12457
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 12458
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 12459
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 12460
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 12461
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 12462
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 12463
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 12464
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 12465
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 12466
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 12467
    //SAMPLE_C_LZ
    vec3 txVec33 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec33, 0.0);
    //Instruction 12468
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 12469
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 12470
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 12471
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 12472
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 12473
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 12474
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 12475
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 12476
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 12477
    //MOV
    t0.w = 1.0;
    //Instruction 12478
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 12479
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 12480
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 12481
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12482
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 12483
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 12484
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 12485
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 12486
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12487
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12488
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fTime_30;
      highp float fAdherenceScale_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_30 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (fTime_30 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_30 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((fTime_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_34 = (fOscillation_34 * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((fTime_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((tmpvar_41.x * tmpvar_41.y) * (
        (tmpvar_41.x * tmpvar_41.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp float fTime_44;
      highp vec3 vWindVector_45;
      vWindVector_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_44 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_46;
      highp float fOscillation_47;
      fOscillation_47 = 1.0;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (fTime_44 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((fTime_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      fOscillation_47 = (((
        mix (mix (tmpvar_52, fTarget_49, fAmount_48), fTarget_49, fAmount_48)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_43 = (vPos_28 + ((vWindVector_45 * fOscillation_47) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_19;
    highp float fMoveAmount_54;
    highp float fAdjust_55;
    highp float fLength_56;
    fLength_56 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_57;
    tmpvar_57 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_55 = tmpvar_57;
    if ((tmpvar_57 != 0.0)) {
      fAdjust_55 = pow (tmpvar_57, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_58.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_59;
    highp vec4 tmpvar_60;
    tmpvar_60 = abs(((
      fract((tmpvar_58 + 0.5))
     * 2.0) - 1.0));
    tmpvar_59 = (((
      (tmpvar_60 * tmpvar_60)
     * 
      (3.0 - (2.0 * tmpvar_60))
    ) - 0.5) * 2.0);
    fMoveAmount_54 = ((_ST_WindGlobal.y * (tmpvar_59.x + 
      (tmpvar_59.y * tmpvar_59.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_54 = (fMoveAmount_54 * fAdjust_55);
    vPos_53.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_54));
    vPos_53 = (normalize(vPos_53) * fLength_56);
    FinalPosition_19 = vPos_53;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_16.x)
   + 
    (v_63.xyz * tmpvar_16.y)
  ) + (v_64.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.x;
  tmpvar_70.y = worldBinormal_4.x;
  tmpvar_70.z = worldNormal_6.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.y;
  tmpvar_71.y = worldBinormal_4.y;
  tmpvar_71.z = worldNormal_6.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_5.z;
  tmpvar_72.y = worldBinormal_4.z;
  tmpvar_72.z = worldNormal_6.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_6;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_6;
  highp vec3 col_83;
  highp vec4 ndotl_84;
  highp vec4 lengthSq_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_61.z);
  lengthSq_85 = (tmpvar_86 * tmpvar_86);
  lengthSq_85 = (lengthSq_85 + (tmpvar_87 * tmpvar_87));
  lengthSq_85 = (lengthSq_85 + (tmpvar_88 * tmpvar_88));
  ndotl_84 = (tmpvar_86 * normal_82.x);
  ndotl_84 = (ndotl_84 + (tmpvar_87 * normal_82.y));
  ndotl_84 = (ndotl_84 + (tmpvar_88 * normal_82.z));
  highp vec4 tmpvar_89;
  tmpvar_89 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_84 * inversesqrt(lengthSq_85)));
  ndotl_84 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (tmpvar_89 * (1.0/((1.0 + 
    (lengthSq_85 * lightAttenSq_81)
  ))));
  col_83 = (lightColor0_77 * tmpvar_90.x);
  col_83 = (col_83 + (lightColor1_78 * tmpvar_90.y));
  col_83 = (col_83 + (lightColor2_79 * tmpvar_90.z));
  col_83 = (col_83 + (lightColor3_80 * tmpvar_90.w));
  tmpvar_8 = ((x2_75 + (unity_SHC.xyz * 
    ((normal_74.x * normal_74.x) - (normal_74.y * normal_74.y))
  )) + col_83);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp float t14;
highp vec2 t22;
highp vec2 t26;
highp vec2 t28;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
highp float t38;
mediump float t16_41;
void main()
{
    //Instruction 12650
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12651
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 12652
    //ADD
    t11.x = t0.x + _Object2World[3].z;
    //Instruction 12653
    //ADD
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 12654
    //ADD
    t11.y = t22.x + in_NORMAL0.x;
    //Instruction 12655
    //FRC
    t11.xy = fract(t11.xy);
    //Instruction 12656
    //MAD
    t11.x = t11.y * 0.500000 + t11.x;
    //Instruction 12657
    //ADD
    t11.x = t11.x + -0.300000;
    //Instruction 12658
    //MUL
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 12659
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 12660
    //LT
    tb11 = 0.0<t16_2;
    //Instruction 12661
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12662
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 12663
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 12664
    //DP3
    t22.x = dot(t3.xyz, t3.xyz);
    //Instruction 12665
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 12666
    //MUL
    t22.xy = t22.xx * t3.xz;
    //Instruction 12667
    //AND
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, bvec2(tb11));
    //Instruction 12668
    //EQ
    tb34 = t16_2==5.000000;
    //Instruction 12669
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 12670
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 12671
    //ADD
    t14 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 12672
    //MAD
    t3.x = t14 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 12673
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 12674
    //FRC
    t3.x = fract(t3.x);
    //Instruction 12675
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 12676
    //MUL
    t14 = abs(t3.x) * abs(t3.x);
    //Instruction 12677
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 12678
    //MAD
    t3.x = t14 * t3.x + -0.500000;
    //Instruction 12679
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 12680
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 12681
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 12682
    //MOVC
    t3.xyz = (bool(tb34)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 12683
    //GE
    tb36 = t16_2>=3.000000;
    //Instruction 12684
    //IF
    if(tb36){
        //Instruction 12685
        //IF
        if(tb34){
            //Instruction 12686
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12687
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12688
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12689
            //DP3
            t34 = dot(t4.xyz, t4.xyz);
            //Instruction 12690
            //RSQ
            t34 = inversesqrt(t34);
            //Instruction 12691
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 12692
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12693
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12694
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12695
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12696
            //ADD
            t34 = t0.x + _ST_WindBranch.x;
            //Instruction 12697
            //ADD
            t2.x = t34 + in_TEXCOORD0.w;
            //Instruction 12698
            //MAD
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12699
            //MUL
            t36 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 12700
            //MUL
            t2.z = t36 * 0.500000;
            //Instruction 12701
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 12702
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12703
            //FRC
            t2 = fract(t2);
            //Instruction 12704
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12705
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 12706
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12707
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12708
            //ADD
            t2 = t2 + t2;
            //Instruction 12709
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 12710
            //LT
            tb36 = t6.w<0.0;
            //Instruction 12711
            //MOV
            t6.y = (-t6.w);
            //Instruction 12712
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12713
            //MOVC
            t6.xy = (bool(tb36)) ? t6.xy : t6.zw;
            //Instruction 12714
            //MAD
            t36 = (-t2.y) * t2.z + t6.x;
            //Instruction 12715
            //MAD
            t36 = t6.y * t36 + t6.w;
            //Instruction 12716
            //ADD
            t37 = (-t36) + t6.x;
            //Instruction 12717
            //MAD
            t36 = t6.y * t37 + t36;
            //Instruction 12718
            //MUL
            t36 = t36 * _ST_WindBranchTwitch.x;
            //Instruction 12719
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12720
            //ADD
            t38 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12721
            //MUL
            t38 = t2.x * t38;
            //Instruction 12722
            //MAD
            t36 = t36 * t37 + t38;
            //Instruction 12723
            //MAD
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12724
            //MUL
            t36 = t36 * t37;
            //Instruction 12725
            //MUL
            t5.xyz = vec3(t36) * t5.xyz;
            //Instruction 12726
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12727
            //MAD
            t6.x = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12728
            //MUL
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12729
            //MAD
            t6.y = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12730
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12731
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12732
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12733
            //MUL
            t28.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12734
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12735
            //MAD
            t6.xy = t28.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12736
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12737
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 12738
            //MUL
            t34 = t6.x * t6.y;
            //Instruction 12739
            //MAD
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12740
            //MUL
            t36 = t2.w * _ST_WindVector.w;
            //Instruction 12741
            //MAD
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            //Instruction 12742
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12743
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12744
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 12745
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12746
        //ELSE
        } else {
            //Instruction 12747
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12748
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12749
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12750
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12751
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 12752
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 12753
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12754
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12755
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 12756
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12757
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12758
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12759
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12760
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12761
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12762
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12763
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 12764
            //LT
            tb0 = t2.w<0.0;
            //Instruction 12765
            //MOV
            t2.y = (-t2.w);
            //Instruction 12766
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 12767
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 12768
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 12769
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 12770
            //ADD
            t34 = (-t0.x) + t6.x;
            //Instruction 12771
            //MAD
            t0.x = t6.y * t34 + t0.x;
            //Instruction 12772
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 12773
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12774
            //ADD
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12775
            //MUL
            t36 = t36 * t5.x;
            //Instruction 12776
            //MAD
            t0.x = t0.x * t34 + t36;
            //Instruction 12777
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 12778
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12779
        //ENDIF
        }
        //Instruction 12780
    //ENDIF
    }
    //Instruction 12781
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 12782
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 12783
    //DIV
    t34 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12784
    //MAD
    t34 = (-t34) * 0.250000 + t3.y;
    //Instruction 12785
    //MAX
    t34 = max(t34, 0.0);
    //Instruction 12786
    //MUL
    t34 = t34 * _ST_WindGlobal.z;
    //Instruction 12787
    //NE
    tb36 = t34!=0.0;
    //Instruction 12788
    //LOG
    t4.x = log2(t34);
    //Instruction 12789
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12790
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12791
    //MOVC
    t34 = (tb36) ? t4.x : t34;
    //Instruction 12792
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12793
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12794
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12795
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12796
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12797
    //MUL
    t26.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12798
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12799
    //MAD
    t4.xy = t26.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12800
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12801
    //MAD
    t36 = t4.y * t4.y + t4.x;
    //Instruction 12802
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12803
    //MAD
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    //Instruction 12804
    //MUL
    t34 = t34 * t36;
    //Instruction 12805
    //MAD
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    //Instruction 12806
    //MOV
    t4.y = t3.y;
    //Instruction 12807
    //DP3
    t22.x = dot(t4.xyz, t4.xyz);
    //Instruction 12808
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 12809
    //MUL
    t4.xyz = t22.xxx * t4.xyz;
    //Instruction 12810
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 12811
    //MOVC
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    //Instruction 12812
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 12813
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 12814
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 12815
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 12816
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 12817
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 12818
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 12819
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 12820
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 12821
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 12822
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 12823
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 12824
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 12825
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 12826
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 12827
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 12828
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 12829
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 12830
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 12831
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 12832
    //DP3
    t33 = dot(t2.xyw, t2.xyw);
    //Instruction 12833
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 12834
    //MUL
    t2 = vec4(t33) * t2;
    //Instruction 12835
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 12836
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 12837
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 12838
    //DP3
    t33 = dot(t4.xyz, t4.xyz);
    //Instruction 12839
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 12840
    //MUL
    t4.xyz = vec3(t33) * t4.xyz;
    //Instruction 12841
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 12842
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 12843
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 12844
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 12845
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 12846
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 12847
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 12848
    //MUL
    t16_41 = t2.y * t2.y;
    //Instruction 12849
    //MAD
    t16_41 = t2.x * t2.x + (-t16_41);
    //Instruction 12850
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    //Instruction 12851
    //ADD
    t6 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 12852
    //ADD
    t7 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 12853
    //ADD
    t9 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 12854
    //MUL
    t10 = t7 * t7;
    //Instruction 12855
    //MAD
    t10 = t6 * t6 + t10;
    //Instruction 12856
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 12857
    //MUL
    t7 = t2.yyyy * t7;
    //Instruction 12858
    //MAD
    t6 = t6 * t2.xxxx + t7;
    //Instruction 12859
    //MAD
    t6 = t9 * t2.wwww + t6;
    //Instruction 12860
    //RSQ
    t7 = inversesqrt(t10);
    //Instruction 12861
    //MUL
    t6 = t6 * t7;
    //Instruction 12862
    //MAX
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 12863
    //MAD
    t7 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 12864
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 12865
    //MUL
    t6 = t6 * t7;
    //Instruction 12866
    //MUL
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    //Instruction 12867
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    //Instruction 12868
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    //Instruction 12869
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    //Instruction 12870
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 12871
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 12872
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 12873
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 12874
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 12875
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 12876
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 12877
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 12878
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 12879
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 12880
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 12881
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 12882
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 12883
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 12884
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 12885
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 12886
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 12887
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 12888
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 12889
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 12890
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 12891
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 12892
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 12893
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 12894
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 12895
    //MOV
    vs_TEXCOORD5.xyz = t9.xyz;
    //Instruction 12896
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 12614
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 12615
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12616
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 12617
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 12618
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 12619
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 12620
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 12621
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 12622
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 12623
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 12624
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 12625
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 12626
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 12627
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 12628
    //SAMPLE_C_LZ
    vec3 txVec45 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec45, 0.0);
    //Instruction 12629
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 12630
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 12631
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 12632
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 12633
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 12634
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 12635
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 12636
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 12637
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 12638
    //MOV
    t0.w = 1.0;
    //Instruction 12639
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 12640
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 12641
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 12642
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12643
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 12644
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 12645
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 12646
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 12647
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12648
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12649
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_10.x)
   + 
    (v_96.xyz * tmpvar_10.y)
  ) + (v_97.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_98;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_99;
  tmpvar_99.w = 1.0;
  tmpvar_99.xyz = worldNormal_4;
  mediump vec4 normal_100;
  normal_100 = tmpvar_99;
  mediump vec3 x2_101;
  mediump vec4 tmpvar_102;
  tmpvar_102 = (normal_100.xyzz * normal_100.yzzx);
  x2_101.x = dot (unity_SHBr, tmpvar_102);
  x2_101.y = dot (unity_SHBg, tmpvar_102);
  x2_101.z = dot (unity_SHBb, tmpvar_102);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_101 + (unity_SHC.xyz * (
    (normal_100.x * normal_100.x)
   - 
    (normal_100.y * normal_100.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 12287
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12288
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 12289
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 12290
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12291
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 12292
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 12293
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 12294
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 12295
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 12296
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 12297
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 12298
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 12299
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 12300
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 12301
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 12302
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 12303
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 12304
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 12305
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 12306
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 12307
        //FRC
        t16.x = fract(t16.x);
        //Instruction 12308
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 12309
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 12310
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 12311
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 12312
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 12313
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 12314
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 12315
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 12316
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 12317
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 12318
        //IF
        if(tb31){
            //Instruction 12319
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 12320
            //FRC
            t4 = fract(t4);
            //Instruction 12321
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12322
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 12323
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 12324
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 12325
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 12326
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 12327
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12328
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12329
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12330
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12331
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12332
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12333
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12334
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 12335
            //SQRT
            t47 = sqrt(t47);
            //Instruction 12336
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 12337
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 12338
            //MUL
            t48 = t48 * t5.x;
            //Instruction 12339
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 12340
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 12341
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 12342
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 12343
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 12344
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 12345
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 12346
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 12347
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 12348
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 12349
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 12350
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 12351
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 12352
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 12353
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 12354
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 12355
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 12356
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 12357
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 12358
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 12359
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 12360
            //SQRT
            t48 = sqrt(t48);
            //Instruction 12361
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 12362
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 12363
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 12364
            //MUL
            t35 = t48 * t5.x;
            //Instruction 12365
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 12366
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 12367
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 12368
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 12369
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 12370
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 12371
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 12372
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12373
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 12374
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12375
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 12376
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12377
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 12378
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 12379
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 12380
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 12381
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 12382
            //LOG
            t46 = log2(t46);
            //Instruction 12383
            //MUL
            t31 = t46 * t16.y;
            //Instruction 12384
            //EXP
            t31 = exp2(t31);
            //Instruction 12385
            //MUL
            t46 = t5.y * t48;
            //Instruction 12386
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 12387
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 12388
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 12389
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 12390
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 12391
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 12392
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 12393
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 12394
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 12395
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 12396
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 12397
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 12398
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 12399
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 12400
            //MOV
            t10.z = t11.x;
            //Instruction 12401
            //MOV
            t10.w = t9.x;
            //Instruction 12402
            //MOV
            t12.z = t8.y;
            //Instruction 12403
            //MOV
            t12.w = t13.y;
            //Instruction 12404
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 12405
            //MOV
            t13.w = t12.y;
            //Instruction 12406
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 12407
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 12408
            //MOV
            t9.w = t10.y;
            //Instruction 12409
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 12410
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 12411
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 12412
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 12413
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 12414
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 12415
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 12416
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 12417
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 12418
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 12419
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 12420
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 12421
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 12422
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 12423
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12424
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 12425
        //ELSE
        } else {
            //Instruction 12426
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 12427
        //ENDIF
        }
        //Instruction 12428
    //ELSE
    } else {
        //Instruction 12429
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 12430
    //ENDIF
    }
    //Instruction 12431
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 12432
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 12433
    //IF
    if(tb17){
        //Instruction 12434
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 12435
        //IF
        if(tb17){
            //Instruction 12436
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12437
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12438
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12439
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 12440
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 12441
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12442
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12443
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12444
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12445
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12446
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 12447
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 12448
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 12449
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12450
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 12451
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 12452
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 12453
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12454
            //FRC
            t0 = fract(t0);
            //Instruction 12455
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12456
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 12457
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12458
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12459
            //ADD
            t0 = t0 + t0;
            //Instruction 12460
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 12461
            //LT
            tb47 = t6.w<0.0;
            //Instruction 12462
            //MOV
            t6.y = (-t6.w);
            //Instruction 12463
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12464
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 12465
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 12466
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 12467
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 12468
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 12469
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 12470
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12471
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12472
            //MUL
            t49 = t0.x * t49;
            //Instruction 12473
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 12474
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12475
            //MUL
            t47 = t47 * t48;
            //Instruction 12476
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 12477
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12478
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12479
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12480
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12481
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12482
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 12483
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12484
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 12485
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12486
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 12487
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 12488
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 12489
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 12490
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12491
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 12492
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 12493
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12494
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12495
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12496
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12497
        //ELSE
        } else {
            //Instruction 12498
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12499
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12500
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12501
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12502
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 12503
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 12504
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 12505
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12506
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12507
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 12508
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12509
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12510
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12511
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12512
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12513
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12514
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12515
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 12516
            //LT
            tb17 = t0.w<0.0;
            //Instruction 12517
            //MOV
            t0.y = (-t0.w);
            //Instruction 12518
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 12519
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 12520
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 12521
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 12522
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 12523
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 12524
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 12525
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12526
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12527
            //MUL
            t48 = t48 * t5.x;
            //Instruction 12528
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 12529
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12530
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12531
        //ENDIF
        }
        //Instruction 12532
    //ENDIF
    }
    //Instruction 12533
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 12534
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 12535
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12536
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 12537
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 12538
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 12539
    //NE
    tb48 = t47!=0.0;
    //Instruction 12540
    //LOG
    t4.x = log2(t47);
    //Instruction 12541
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12542
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12543
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 12544
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12545
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12546
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12547
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12548
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12549
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12550
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12551
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12552
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12553
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 12554
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12555
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 12556
    //MUL
    t47 = t47 * t48;
    //Instruction 12557
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 12558
    //MOV
    t4.y = t3.y;
    //Instruction 12559
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 12560
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 12561
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 12562
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 12563
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 12564
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 12565
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 12566
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 12567
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 12568
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 12569
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 12570
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 12571
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 12572
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 12573
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 12574
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 12575
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 12576
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 12577
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 12578
    //MUL
    t3.xyz = t16.yyy * t3.xyz;
    //Instruction 12579
    //MAD
    t1.xyz = t2.xyz * t16.xxx + t3.xyz;
    //Instruction 12580
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 12581
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 12582
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 12583
    //MAD
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    //Instruction 12584
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 12585
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 12586
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 12587
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 12588
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 12589
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 12590
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 12591
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 12592
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 12593
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 12594
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 12595
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 12596
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 12597
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 12598
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 12268
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 12269
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12270
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 12271
    //LT
    tb0 = t10_1<0.0;
    //Instruction 12272
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 12273
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 12274
    //MOV
    t16_0.w = 1.0;
    //Instruction 12275
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 12276
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 12277
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 12278
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 12279
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 12280
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 12281
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12282
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 12283
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 12284
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12285
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12286
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_96;
  v_96.x = _World2Object[0].x;
  v_96.y = _World2Object[1].x;
  v_96.z = _World2Object[2].x;
  v_96.w = _World2Object[3].x;
  highp vec4 v_97;
  v_97.x = _World2Object[0].y;
  v_97.y = _World2Object[1].y;
  v_97.z = _World2Object[2].y;
  v_97.w = _World2Object[3].y;
  highp vec4 v_98;
  v_98.x = _World2Object[0].z;
  v_98.y = _World2Object[1].z;
  v_98.z = _World2Object[2].z;
  v_98.w = _World2Object[3].z;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize(((
    (v_96.xyz * tmpvar_11.x)
   + 
    (v_97.xyz * tmpvar_11.y)
  ) + (v_98.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_99;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = worldNormal_4;
  mediump vec4 normal_101;
  normal_101 = tmpvar_100;
  mediump vec3 x2_102;
  mediump vec4 tmpvar_103;
  tmpvar_103 = (normal_101.xyzz * normal_101.yzzx);
  x2_102.x = dot (unity_SHBr, tmpvar_103);
  x2_102.y = dot (unity_SHBg, tmpvar_103);
  x2_102.z = dot (unity_SHBb, tmpvar_103);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_102 + (unity_SHC.xyz * (
    (normal_101.x * normal_101.x)
   - 
    (normal_101.y * normal_101.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_96;
  tmpvar_96 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_11.x)
   + 
    (v_98.xyz * tmpvar_11.y)
  ) + (v_99.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_101;
  tmpvar_101.w = 1.0;
  tmpvar_101.xyz = worldNormal_4;
  mediump vec4 normal_102;
  normal_102 = tmpvar_101;
  mediump vec3 x2_103;
  mediump vec4 tmpvar_104;
  tmpvar_104 = (normal_102.xyzz * normal_102.yzzx);
  x2_103.x = dot (unity_SHBr, tmpvar_104);
  x2_103.y = dot (unity_SHBg, tmpvar_104);
  x2_103.z = dot (unity_SHBb, tmpvar_104);
  highp vec3 lightColor0_105;
  lightColor0_105 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_106;
  lightColor1_106 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_107;
  lightColor2_107 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_108;
  lightColor3_108 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_109;
  lightAttenSq_109 = unity_4LightAtten0;
  highp vec3 normal_110;
  normal_110 = worldNormal_4;
  highp vec3 col_111;
  highp vec4 ndotl_112;
  highp vec4 lengthSq_113;
  highp vec4 tmpvar_114;
  tmpvar_114 = (unity_4LightPosX0 - tmpvar_96.x);
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosY0 - tmpvar_96.y);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosZ0 - tmpvar_96.z);
  lengthSq_113 = (tmpvar_114 * tmpvar_114);
  lengthSq_113 = (lengthSq_113 + (tmpvar_115 * tmpvar_115));
  lengthSq_113 = (lengthSq_113 + (tmpvar_116 * tmpvar_116));
  ndotl_112 = (tmpvar_114 * normal_110.x);
  ndotl_112 = (ndotl_112 + (tmpvar_115 * normal_110.y));
  ndotl_112 = (ndotl_112 + (tmpvar_116 * normal_110.z));
  highp vec4 tmpvar_117;
  tmpvar_117 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_112 * inversesqrt(lengthSq_113)));
  ndotl_112 = tmpvar_117;
  highp vec4 tmpvar_118;
  tmpvar_118 = (tmpvar_117 * (1.0/((1.0 + 
    (lengthSq_113 * lightAttenSq_109)
  ))));
  col_111 = (lightColor0_105 * tmpvar_118.x);
  col_111 = (col_111 + (lightColor1_106 * tmpvar_118.y));
  col_111 = (col_111 + (lightColor2_107 * tmpvar_118.z));
  col_111 = (col_111 + (lightColor3_108 * tmpvar_118.w));
  tmpvar_7 = ((x2_103 + (unity_SHC.xyz * 
    ((normal_102.x * normal_102.x) - (normal_102.y * normal_102.y))
  )) + col_111);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_96;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 12618
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12619
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 12620
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 12621
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12622
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 12623
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 12624
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 12625
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 12626
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 12627
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 12628
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 12629
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 12630
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 12631
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 12632
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 12633
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 12634
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 12635
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 12636
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 12637
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 12638
        //FRC
        t16.x = fract(t16.x);
        //Instruction 12639
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 12640
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 12641
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 12642
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 12643
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 12644
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 12645
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 12646
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 12647
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 12648
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 12649
        //IF
        if(tb31){
            //Instruction 12650
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 12651
            //FRC
            t4 = fract(t4);
            //Instruction 12652
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12653
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 12654
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 12655
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 12656
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 12657
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 12658
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12659
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12660
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12661
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12662
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12663
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12664
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12665
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 12666
            //SQRT
            t47 = sqrt(t47);
            //Instruction 12667
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 12668
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 12669
            //MUL
            t48 = t48 * t5.x;
            //Instruction 12670
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 12671
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 12672
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 12673
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 12674
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 12675
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 12676
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 12677
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 12678
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 12679
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 12680
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 12681
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 12682
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 12683
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 12684
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 12685
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 12686
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 12687
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 12688
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 12689
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 12690
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 12691
            //SQRT
            t48 = sqrt(t48);
            //Instruction 12692
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 12693
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 12694
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 12695
            //MUL
            t35 = t48 * t5.x;
            //Instruction 12696
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 12697
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 12698
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 12699
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 12700
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 12701
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 12702
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 12703
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12704
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 12705
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12706
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 12707
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12708
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 12709
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 12710
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 12711
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 12712
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 12713
            //LOG
            t46 = log2(t46);
            //Instruction 12714
            //MUL
            t31 = t46 * t16.y;
            //Instruction 12715
            //EXP
            t31 = exp2(t31);
            //Instruction 12716
            //MUL
            t46 = t5.y * t48;
            //Instruction 12717
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 12718
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 12719
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 12720
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 12721
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 12722
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 12723
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 12724
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 12725
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 12726
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 12727
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 12728
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 12729
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 12730
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 12731
            //MOV
            t10.z = t11.x;
            //Instruction 12732
            //MOV
            t10.w = t9.x;
            //Instruction 12733
            //MOV
            t12.z = t8.y;
            //Instruction 12734
            //MOV
            t12.w = t13.y;
            //Instruction 12735
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 12736
            //MOV
            t13.w = t12.y;
            //Instruction 12737
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 12738
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 12739
            //MOV
            t9.w = t10.y;
            //Instruction 12740
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 12741
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 12742
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 12743
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 12744
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 12745
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 12746
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 12747
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 12748
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 12749
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 12750
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 12751
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 12752
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 12753
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 12754
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12755
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 12756
        //ELSE
        } else {
            //Instruction 12757
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 12758
        //ENDIF
        }
        //Instruction 12759
    //ELSE
    } else {
        //Instruction 12760
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 12761
    //ENDIF
    }
    //Instruction 12762
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 12763
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 12764
    //IF
    if(tb17){
        //Instruction 12765
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 12766
        //IF
        if(tb17){
            //Instruction 12767
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12768
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12769
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12770
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 12771
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 12772
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12773
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12774
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12775
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12776
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12777
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 12778
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 12779
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 12780
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12781
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 12782
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 12783
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 12784
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12785
            //FRC
            t0 = fract(t0);
            //Instruction 12786
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12787
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 12788
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12789
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12790
            //ADD
            t0 = t0 + t0;
            //Instruction 12791
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 12792
            //LT
            tb47 = t6.w<0.0;
            //Instruction 12793
            //MOV
            t6.y = (-t6.w);
            //Instruction 12794
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12795
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 12796
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 12797
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 12798
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 12799
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 12800
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 12801
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12802
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12803
            //MUL
            t49 = t0.x * t49;
            //Instruction 12804
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 12805
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12806
            //MUL
            t47 = t47 * t48;
            //Instruction 12807
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 12808
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12809
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12810
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12811
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12812
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12813
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 12814
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12815
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 12816
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12817
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 12818
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 12819
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 12820
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 12821
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12822
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 12823
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 12824
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12825
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12826
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12827
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12828
        //ELSE
        } else {
            //Instruction 12829
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12830
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12831
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12832
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12833
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 12834
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 12835
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 12836
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12837
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12838
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 12839
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12840
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12841
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12842
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12843
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12844
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12845
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12846
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 12847
            //LT
            tb17 = t0.w<0.0;
            //Instruction 12848
            //MOV
            t0.y = (-t0.w);
            //Instruction 12849
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 12850
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 12851
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 12852
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 12853
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 12854
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 12855
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 12856
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12857
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12858
            //MUL
            t48 = t48 * t5.x;
            //Instruction 12859
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 12860
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12861
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12862
        //ENDIF
        }
        //Instruction 12863
    //ENDIF
    }
    //Instruction 12864
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 12865
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 12866
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12867
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 12868
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 12869
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 12870
    //NE
    tb48 = t47!=0.0;
    //Instruction 12871
    //LOG
    t4.x = log2(t47);
    //Instruction 12872
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12873
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12874
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 12875
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12876
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12877
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12878
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12879
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12880
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12881
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12882
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12883
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12884
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 12885
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12886
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 12887
    //MUL
    t47 = t47 * t48;
    //Instruction 12888
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 12889
    //MOV
    t4.y = t3.y;
    //Instruction 12890
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 12891
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 12892
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 12893
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 12894
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 12895
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 12896
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 12897
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 12898
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 12899
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 12900
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 12901
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 12902
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 12903
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 12904
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 12905
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 12906
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 12907
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 12908
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 12909
    //MUL
    t4.xyz = t16.yyy * t4.xyz;
    //Instruction 12910
    //MAD
    t1.xyz = t3.xyz * t16.xxx + t4.xyz;
    //Instruction 12911
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 12912
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 12913
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 12914
    //MAD
    t1.xyz = t3.xyz * t16.zzz + t1.xyz;
    //Instruction 12915
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 12916
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 12917
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 12918
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 12919
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 12920
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 12921
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 12922
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 12923
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 12924
    //MAD
    t16_14.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 12925
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 12926
    //ADD
    t3 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 12927
    //ADD
    t4 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 12928
    //MUL
    t5 = t3 * t3;
    //Instruction 12929
    //MAD
    t5 = t0 * t0 + t5;
    //Instruction 12930
    //MAD
    t5 = t4 * t4 + t5;
    //Instruction 12931
    //MUL
    t3 = t1.yyyy * t3;
    //Instruction 12932
    //MAD
    t0 = t0 * t1.xxxx + t3;
    //Instruction 12933
    //MAD
    t0 = t4 * t1.zzzz + t0;
    //Instruction 12934
    //RSQ
    t3 = inversesqrt(t5);
    //Instruction 12935
    //MUL
    t0 = t0 * t3;
    //Instruction 12936
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 12937
    //MAD
    t3 = t5 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 12938
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 12939
    //MUL
    t0 = t0 * t3;
    //Instruction 12940
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 12941
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 12942
    //MAD
    t3.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 12943
    //MAD
    t3.xyz = unity_LightColor[3].xyz * t0.www + t3.xyz;
    //Instruction 12944
    //ADD
    t3.xyz = t3.xyz + t16_14.xyz;
    //Instruction 12945
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 12946
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 12947
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 12948
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 12949
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 12950
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 12951
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 12599
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 12600
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12601
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 12602
    //LT
    tb0 = t10_1<0.0;
    //Instruction 12603
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 12604
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 12605
    //MOV
    t16_0.w = 1.0;
    //Instruction 12606
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 12607
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 12608
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 12609
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 12610
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 12611
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 12612
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12613
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 12614
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 12615
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12616
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12617
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_15;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_14.zxy) - (tmpvar_30.zxy * vRotatedWindVector_14.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_14, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_12 = vDirection_24;
    FinalPosition_15 = vPos_23;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_15;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_15 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_13 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_15 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_97;
  tmpvar_97 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_12.x)
   + 
    (v_99.xyz * tmpvar_12.y)
  ) + (v_100.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_101;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_4;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  highp vec3 lightColor0_106;
  lightColor0_106 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_107;
  lightColor1_107 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_108;
  lightColor2_108 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_109;
  lightColor3_109 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_110;
  lightAttenSq_110 = unity_4LightAtten0;
  highp vec3 normal_111;
  normal_111 = worldNormal_4;
  highp vec3 col_112;
  highp vec4 ndotl_113;
  highp vec4 lengthSq_114;
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosX0 - tmpvar_97.x);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosY0 - tmpvar_97.y);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosZ0 - tmpvar_97.z);
  lengthSq_114 = (tmpvar_115 * tmpvar_115);
  lengthSq_114 = (lengthSq_114 + (tmpvar_116 * tmpvar_116));
  lengthSq_114 = (lengthSq_114 + (tmpvar_117 * tmpvar_117));
  ndotl_113 = (tmpvar_115 * normal_111.x);
  ndotl_113 = (ndotl_113 + (tmpvar_116 * normal_111.y));
  ndotl_113 = (ndotl_113 + (tmpvar_117 * normal_111.z));
  highp vec4 tmpvar_118;
  tmpvar_118 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_113 * inversesqrt(lengthSq_114)));
  ndotl_113 = tmpvar_118;
  highp vec4 tmpvar_119;
  tmpvar_119 = (tmpvar_118 * (1.0/((1.0 + 
    (lengthSq_114 * lightAttenSq_110)
  ))));
  col_112 = (lightColor0_106 * tmpvar_119.x);
  col_112 = (col_112 + (lightColor1_107 * tmpvar_119.y));
  col_112 = (col_112 + (lightColor2_108 * tmpvar_119.z));
  col_112 = (col_112 + (lightColor3_109 * tmpvar_119.w));
  tmpvar_7 = ((x2_104 + (unity_SHC.xyz * 
    ((normal_103.x * normal_103.x) - (normal_103.y * normal_103.y))
  )) + col_112);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_97;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_96;
  v_96.x = _World2Object[0].x;
  v_96.y = _World2Object[1].x;
  v_96.z = _World2Object[2].x;
  v_96.w = _World2Object[3].x;
  highp vec4 v_97;
  v_97.x = _World2Object[0].y;
  v_97.y = _World2Object[1].y;
  v_97.z = _World2Object[2].y;
  v_97.w = _World2Object[3].y;
  highp vec4 v_98;
  v_98.x = _World2Object[0].z;
  v_98.y = _World2Object[1].z;
  v_98.z = _World2Object[2].z;
  v_98.w = _World2Object[3].z;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize(((
    (v_96.xyz * tmpvar_11.x)
   + 
    (v_97.xyz * tmpvar_11.y)
  ) + (v_98.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_99;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = worldNormal_4;
  mediump vec4 normal_101;
  normal_101 = tmpvar_100;
  mediump vec3 x2_102;
  mediump vec4 tmpvar_103;
  tmpvar_103 = (normal_101.xyzz * normal_101.yzzx);
  x2_102.x = dot (unity_SHBr, tmpvar_103);
  x2_102.y = dot (unity_SHBg, tmpvar_103);
  x2_102.z = dot (unity_SHBb, tmpvar_103);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_102 + (unity_SHC.xyz * (
    (normal_101.x * normal_101.x)
   - 
    (normal_101.y * normal_101.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 12975
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12976
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 12977
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 12978
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12979
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 12980
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 12981
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 12982
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 12983
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 12984
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 12985
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 12986
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 12987
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 12988
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 12989
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 12990
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 12991
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 12992
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 12993
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 12994
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 12995
        //FRC
        t16.x = fract(t16.x);
        //Instruction 12996
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 12997
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 12998
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 12999
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 13000
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 13001
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 13002
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 13003
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 13004
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 13005
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 13006
        //IF
        if(tb31){
            //Instruction 13007
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 13008
            //FRC
            t4 = fract(t4);
            //Instruction 13009
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13010
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 13011
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 13012
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 13013
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 13014
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 13015
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 13016
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 13017
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13018
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 13019
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13020
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 13021
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 13022
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 13023
            //SQRT
            t47 = sqrt(t47);
            //Instruction 13024
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 13025
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 13026
            //MUL
            t48 = t48 * t5.x;
            //Instruction 13027
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 13028
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 13029
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 13030
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 13031
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 13032
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 13033
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 13034
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 13035
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 13036
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 13037
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 13038
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 13039
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 13040
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 13041
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 13042
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 13043
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 13044
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 13045
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 13046
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 13047
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 13048
            //SQRT
            t48 = sqrt(t48);
            //Instruction 13049
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 13050
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 13051
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 13052
            //MUL
            t35 = t48 * t5.x;
            //Instruction 13053
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 13054
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 13055
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 13056
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 13057
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 13058
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 13059
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 13060
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 13061
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 13062
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13063
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 13064
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13065
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 13066
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 13067
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 13068
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 13069
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 13070
            //LOG
            t46 = log2(t46);
            //Instruction 13071
            //MUL
            t31 = t46 * t16.y;
            //Instruction 13072
            //EXP
            t31 = exp2(t31);
            //Instruction 13073
            //MUL
            t46 = t5.y * t48;
            //Instruction 13074
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 13075
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 13076
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 13077
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 13078
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 13079
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 13080
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 13081
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 13082
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 13083
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 13084
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 13085
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 13086
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 13087
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 13088
            //MOV
            t10.z = t11.x;
            //Instruction 13089
            //MOV
            t10.w = t9.x;
            //Instruction 13090
            //MOV
            t12.z = t8.y;
            //Instruction 13091
            //MOV
            t12.w = t13.y;
            //Instruction 13092
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 13093
            //MOV
            t13.w = t12.y;
            //Instruction 13094
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 13095
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 13096
            //MOV
            t9.w = t10.y;
            //Instruction 13097
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 13098
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 13099
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 13100
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 13101
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 13102
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 13103
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 13104
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 13105
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 13106
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 13107
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 13108
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 13109
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 13110
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 13111
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 13112
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 13113
        //ELSE
        } else {
            //Instruction 13114
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 13115
        //ENDIF
        }
        //Instruction 13116
    //ELSE
    } else {
        //Instruction 13117
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 13118
    //ENDIF
    }
    //Instruction 13119
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 13120
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 13121
    //IF
    if(tb17){
        //Instruction 13122
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 13123
        //IF
        if(tb17){
            //Instruction 13124
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 13125
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 13126
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 13127
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 13128
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 13129
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 13130
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13131
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 13132
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13133
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 13134
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 13135
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 13136
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 13137
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13138
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 13139
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 13140
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 13141
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 13142
            //FRC
            t0 = fract(t0);
            //Instruction 13143
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 13144
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 13145
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 13146
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 13147
            //ADD
            t0 = t0 + t0;
            //Instruction 13148
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 13149
            //LT
            tb47 = t6.w<0.0;
            //Instruction 13150
            //MOV
            t6.y = (-t6.w);
            //Instruction 13151
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 13152
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 13153
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 13154
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 13155
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 13156
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 13157
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 13158
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13159
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13160
            //MUL
            t49 = t0.x * t49;
            //Instruction 13161
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 13162
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 13163
            //MUL
            t47 = t47 * t48;
            //Instruction 13164
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 13165
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 13166
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13167
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 13168
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13169
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 13170
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 13171
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13172
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 13173
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13174
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 13175
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 13176
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 13177
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 13178
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 13179
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 13180
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 13181
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 13182
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 13183
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 13184
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 13185
        //ELSE
        } else {
            //Instruction 13186
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13187
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 13188
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13189
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 13190
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 13191
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 13192
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 13193
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13194
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 13195
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 13196
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 13197
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 13198
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13199
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 13200
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 13201
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 13202
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 13203
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 13204
            //LT
            tb17 = t0.w<0.0;
            //Instruction 13205
            //MOV
            t0.y = (-t0.w);
            //Instruction 13206
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 13207
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 13208
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 13209
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 13210
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 13211
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 13212
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 13213
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13214
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13215
            //MUL
            t48 = t48 * t5.x;
            //Instruction 13216
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 13217
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 13218
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 13219
        //ENDIF
        }
        //Instruction 13220
    //ENDIF
    }
    //Instruction 13221
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 13222
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 13223
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 13224
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 13225
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 13226
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 13227
    //NE
    tb48 = t47!=0.0;
    //Instruction 13228
    //LOG
    t4.x = log2(t47);
    //Instruction 13229
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 13230
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 13231
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 13232
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 13233
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 13234
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 13235
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 13236
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 13237
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 13238
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 13239
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 13240
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 13241
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 13242
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 13243
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 13244
    //MUL
    t47 = t47 * t48;
    //Instruction 13245
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 13246
    //MOV
    t4.y = t3.y;
    //Instruction 13247
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 13248
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 13249
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 13250
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 13251
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 13252
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 13253
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 13254
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 13255
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 13256
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 13257
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 13258
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    //Instruction 13259
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 13260
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 13261
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 13262
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 13263
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 13264
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 13265
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 13266
    //MUL
    t4.xyz = t16.yyy * t4.xyz;
    //Instruction 13267
    //MAD
    t1.xyz = t3.xyz * t16.xxx + t4.xyz;
    //Instruction 13268
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 13269
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 13270
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 13271
    //MAD
    t1.xyz = t3.xyz * t16.zzz + t1.xyz;
    //Instruction 13272
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 13273
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 13274
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 13275
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 13276
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 13277
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 13278
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 13279
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 13280
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 13281
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 13282
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 13283
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 13284
    //MAD
    t0 = _Object2World[2] * t2.zzzz + t0;
    //Instruction 13285
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 13286
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 13287
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 13288
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 13289
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 13290
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 13291
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 13292
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 13293
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 13294
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 13295
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 12952
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 12953
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12954
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 12955
    //LT
    tb0 = t10_1<0.0;
    //Instruction 12956
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 12957
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 12958
    //MOV
    t16_0.w = 1.0;
    //Instruction 12959
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 12960
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 12961
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 12962
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 12963
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 12964
    //SAMPLE_C_LZ
    vec3 txVec29 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec29, 0.0);
    //Instruction 12965
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 12966
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 12967
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 12968
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 12969
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12970
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 12971
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 12972
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12973
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12974
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_15;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_14.zxy) - (tmpvar_30.zxy * vRotatedWindVector_14.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_14, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_12 = vDirection_24;
    FinalPosition_15 = vPos_23;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_15;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_15 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_13 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_15 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_97;
  tmpvar_97 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_12.x)
   + 
    (v_99.xyz * tmpvar_12.y)
  ) + (v_100.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_101;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_4;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  highp vec3 lightColor0_106;
  lightColor0_106 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_107;
  lightColor1_107 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_108;
  lightColor2_108 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_109;
  lightColor3_109 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_110;
  lightAttenSq_110 = unity_4LightAtten0;
  highp vec3 normal_111;
  normal_111 = worldNormal_4;
  highp vec3 col_112;
  highp vec4 ndotl_113;
  highp vec4 lengthSq_114;
  highp vec4 tmpvar_115;
  tmpvar_115 = (unity_4LightPosX0 - tmpvar_97.x);
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosY0 - tmpvar_97.y);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosZ0 - tmpvar_97.z);
  lengthSq_114 = (tmpvar_115 * tmpvar_115);
  lengthSq_114 = (lengthSq_114 + (tmpvar_116 * tmpvar_116));
  lengthSq_114 = (lengthSq_114 + (tmpvar_117 * tmpvar_117));
  ndotl_113 = (tmpvar_115 * normal_111.x);
  ndotl_113 = (ndotl_113 + (tmpvar_116 * normal_111.y));
  ndotl_113 = (ndotl_113 + (tmpvar_117 * normal_111.z));
  highp vec4 tmpvar_118;
  tmpvar_118 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_113 * inversesqrt(lengthSq_114)));
  ndotl_113 = tmpvar_118;
  highp vec4 tmpvar_119;
  tmpvar_119 = (tmpvar_118 * (1.0/((1.0 + 
    (lengthSq_114 * lightAttenSq_110)
  ))));
  col_112 = (lightColor0_106 * tmpvar_119.x);
  col_112 = (col_112 + (lightColor1_107 * tmpvar_119.y));
  col_112 = (col_112 + (lightColor2_108 * tmpvar_119.z));
  col_112 = (col_112 + (lightColor3_109 * tmpvar_119.w));
  tmpvar_7 = ((x2_104 + (unity_SHC.xyz * 
    ((normal_103.x * normal_103.x) - (normal_103.y * normal_103.y))
  )) + col_112);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_97;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 12738
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12739
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 12740
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 12741
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12742
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 12743
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 12744
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 12745
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 12746
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 12747
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 12748
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 12749
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 12750
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 12751
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 12752
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 12753
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 12754
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 12755
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 12756
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 12757
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 12758
        //FRC
        t16.x = fract(t16.x);
        //Instruction 12759
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 12760
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 12761
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 12762
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 12763
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 12764
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 12765
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 12766
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 12767
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 12768
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 12769
        //IF
        if(tb31){
            //Instruction 12770
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 12771
            //FRC
            t4 = fract(t4);
            //Instruction 12772
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12773
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 12774
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 12775
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 12776
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 12777
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 12778
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12779
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12780
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12781
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12782
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12783
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12784
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12785
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 12786
            //SQRT
            t47 = sqrt(t47);
            //Instruction 12787
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 12788
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 12789
            //MUL
            t48 = t48 * t5.x;
            //Instruction 12790
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 12791
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 12792
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 12793
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 12794
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 12795
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 12796
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 12797
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 12798
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 12799
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 12800
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 12801
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 12802
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 12803
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 12804
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 12805
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 12806
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 12807
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 12808
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 12809
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 12810
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 12811
            //SQRT
            t48 = sqrt(t48);
            //Instruction 12812
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 12813
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 12814
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 12815
            //MUL
            t35 = t48 * t5.x;
            //Instruction 12816
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 12817
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 12818
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 12819
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 12820
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 12821
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 12822
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 12823
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12824
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 12825
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12826
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 12827
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12828
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 12829
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 12830
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 12831
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 12832
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 12833
            //LOG
            t46 = log2(t46);
            //Instruction 12834
            //MUL
            t31 = t46 * t16.y;
            //Instruction 12835
            //EXP
            t31 = exp2(t31);
            //Instruction 12836
            //MUL
            t46 = t5.y * t48;
            //Instruction 12837
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 12838
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 12839
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 12840
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 12841
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 12842
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 12843
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 12844
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 12845
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 12846
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 12847
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 12848
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 12849
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 12850
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 12851
            //MOV
            t10.z = t11.x;
            //Instruction 12852
            //MOV
            t10.w = t9.x;
            //Instruction 12853
            //MOV
            t12.z = t8.y;
            //Instruction 12854
            //MOV
            t12.w = t13.y;
            //Instruction 12855
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 12856
            //MOV
            t13.w = t12.y;
            //Instruction 12857
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 12858
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 12859
            //MOV
            t9.w = t10.y;
            //Instruction 12860
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 12861
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 12862
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 12863
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 12864
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 12865
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 12866
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 12867
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 12868
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 12869
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 12870
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 12871
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 12872
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 12873
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 12874
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12875
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 12876
        //ELSE
        } else {
            //Instruction 12877
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 12878
        //ENDIF
        }
        //Instruction 12879
    //ELSE
    } else {
        //Instruction 12880
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 12881
    //ENDIF
    }
    //Instruction 12882
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 12883
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 12884
    //IF
    if(tb17){
        //Instruction 12885
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 12886
        //IF
        if(tb17){
            //Instruction 12887
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12888
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12889
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12890
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 12891
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 12892
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12893
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12894
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12895
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12896
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12897
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 12898
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 12899
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 12900
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12901
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 12902
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 12903
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 12904
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12905
            //FRC
            t0 = fract(t0);
            //Instruction 12906
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12907
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 12908
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12909
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12910
            //ADD
            t0 = t0 + t0;
            //Instruction 12911
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 12912
            //LT
            tb47 = t6.w<0.0;
            //Instruction 12913
            //MOV
            t6.y = (-t6.w);
            //Instruction 12914
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12915
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 12916
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 12917
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 12918
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 12919
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 12920
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 12921
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12922
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12923
            //MUL
            t49 = t0.x * t49;
            //Instruction 12924
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 12925
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12926
            //MUL
            t47 = t47 * t48;
            //Instruction 12927
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 12928
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12929
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12930
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12931
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12932
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12933
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 12934
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12935
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 12936
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12937
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 12938
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 12939
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 12940
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 12941
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12942
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 12943
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 12944
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12945
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12946
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12947
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12948
        //ELSE
        } else {
            //Instruction 12949
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12950
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12951
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12952
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12953
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 12954
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 12955
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 12956
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12957
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12958
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 12959
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12960
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12961
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12962
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12963
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12964
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12965
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12966
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 12967
            //LT
            tb17 = t0.w<0.0;
            //Instruction 12968
            //MOV
            t0.y = (-t0.w);
            //Instruction 12969
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 12970
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 12971
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 12972
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 12973
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 12974
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 12975
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 12976
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12977
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12978
            //MUL
            t48 = t48 * t5.x;
            //Instruction 12979
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 12980
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 12981
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12982
        //ENDIF
        }
        //Instruction 12983
    //ENDIF
    }
    //Instruction 12984
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 12985
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 12986
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12987
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 12988
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 12989
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 12990
    //NE
    tb48 = t47!=0.0;
    //Instruction 12991
    //LOG
    t4.x = log2(t47);
    //Instruction 12992
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12993
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12994
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 12995
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12996
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12997
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12998
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12999
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 13000
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 13001
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 13002
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 13003
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 13004
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 13005
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 13006
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 13007
    //MUL
    t47 = t47 * t48;
    //Instruction 13008
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 13009
    //MOV
    t4.y = t3.y;
    //Instruction 13010
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 13011
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 13012
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 13013
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 13014
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 13015
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 13016
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 13017
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 13018
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 13019
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 13020
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 13021
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    //Instruction 13022
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 13023
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 13024
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 13025
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 13026
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 13027
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 13028
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 13029
    //MUL
    t5.xyz = t16.yyy * t5.xyz;
    //Instruction 13030
    //MAD
    t1.xyz = t4.xyz * t16.xxx + t5.xyz;
    //Instruction 13031
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 13032
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 13033
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 13034
    //MAD
    t1.xyz = t4.xyz * t16.zzz + t1.xyz;
    //Instruction 13035
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 13036
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 13037
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 13038
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 13039
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 13040
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 13041
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 13042
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 13043
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 13044
    //MAD
    t16_14.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 13045
    //ADD
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 13046
    //ADD
    t4 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 13047
    //ADD
    t5 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 13048
    //MUL
    t6 = t4 * t4;
    //Instruction 13049
    //MAD
    t6 = t0 * t0 + t6;
    //Instruction 13050
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 13051
    //MUL
    t4 = t1.yyyy * t4;
    //Instruction 13052
    //MAD
    t0 = t0 * t1.xxxx + t4;
    //Instruction 13053
    //MAD
    t0 = t5 * t1.zzzz + t0;
    //Instruction 13054
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 13055
    //MUL
    t0 = t0 * t4;
    //Instruction 13056
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 13057
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 13058
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 13059
    //MUL
    t0 = t0 * t4;
    //Instruction 13060
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 13061
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 13062
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 13063
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 13064
    //ADD
    t4.xyz = t4.xyz + t16_14.xyz;
    //Instruction 13065
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 13066
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 13067
    //MAD
    t0 = _Object2World[2] * t2.zzzz + t0;
    //Instruction 13068
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 13069
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 13070
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 13071
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 13072
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 13073
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 13074
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 13075
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 13076
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 13077
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 13078
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 13079
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 13080
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 12715
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 12716
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12717
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 12718
    //LT
    tb0 = t10_1<0.0;
    //Instruction 12719
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 12720
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 12721
    //MOV
    t16_0.w = 1.0;
    //Instruction 12722
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 12723
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 12724
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 12725
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 12726
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 12727
    //SAMPLE_C_LZ
    vec3 txVec34 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec34, 0.0);
    //Instruction 12728
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 12729
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 12730
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 12731
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 12732
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12733
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 12734
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 12735
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12736
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12737
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_13.x)
   + 
    (v_98.xyz * tmpvar_13.y)
  ) + (v_99.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_101;
  tmpvar_101.w = 1.0;
  tmpvar_101.xyz = worldNormal_4;
  mediump vec4 normal_102;
  normal_102 = tmpvar_101;
  mediump vec3 x2_103;
  mediump vec4 tmpvar_104;
  tmpvar_104 = (normal_102.xyzz * normal_102.yzzx);
  x2_103.x = dot (unity_SHBr, tmpvar_104);
  x2_103.y = dot (unity_SHBg, tmpvar_104);
  x2_103.z = dot (unity_SHBb, tmpvar_104);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_103 + (unity_SHC.xyz * (
    (normal_102.x * normal_102.x)
   - 
    (normal_102.y * normal_102.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 12925
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12926
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 12927
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 12928
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 12929
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 12930
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 12931
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 12932
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 12933
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 12934
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 12935
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 12936
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12937
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 12938
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 12939
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 12940
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 12941
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 12942
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 12943
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 12944
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 12945
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 12946
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 12947
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 12948
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 12949
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 12950
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 12951
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 12952
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 12953
        //FRC
        t32.x = fract(t32.x);
        //Instruction 12954
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 12955
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 12956
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 12957
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 12958
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 12959
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 12960
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 12961
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 12962
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 12963
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 12964
        //IF
        if(tb48){
            //Instruction 12965
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 12966
            //FRC
            t5 = fract(t5);
            //Instruction 12967
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12968
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 12969
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 12970
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 12971
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 12972
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 12973
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 12974
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 12975
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12976
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 12977
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12978
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 12979
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 12980
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 12981
            //SQRT
            t49 = sqrt(t49);
            //Instruction 12982
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 12983
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 12984
            //MUL
            t51 = t51 * t52;
            //Instruction 12985
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 12986
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 12987
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 12988
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 12989
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 12990
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 12991
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 12992
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 12993
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 12994
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 12995
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 12996
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 12997
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 12998
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 12999
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 13000
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 13001
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 13002
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 13003
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 13004
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 13005
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 13006
            //SQRT
            t51 = sqrt(t51);
            //Instruction 13007
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 13008
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 13009
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 13010
            //MUL
            t6.x = t51 * t52;
            //Instruction 13011
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 13012
            //LT
            tb19 = t19<(-t19);
            //Instruction 13013
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 13014
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 13015
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 13016
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 13017
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 13018
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13019
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 13020
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13021
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 13022
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13023
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 13024
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 13025
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 13026
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 13027
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 13028
            //LOG
            t48 = log2(t48);
            //Instruction 13029
            //MUL
            t48 = t48 * t7.y;
            //Instruction 13030
            //EXP
            t48 = exp2(t48);
            //Instruction 13031
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 13032
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 13033
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 13034
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 13035
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 13036
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 13037
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 13038
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 13039
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 13040
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 13041
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 13042
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 13043
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 13044
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 13045
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 13046
            //MOV
            t11.z = t12.x;
            //Instruction 13047
            //MOV
            t11.w = t10.x;
            //Instruction 13048
            //MOV
            t13.z = t9.y;
            //Instruction 13049
            //MOV
            t13.w = t14.y;
            //Instruction 13050
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 13051
            //MOV
            t14.w = t13.y;
            //Instruction 13052
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 13053
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 13054
            //MOV
            t10.w = t11.y;
            //Instruction 13055
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 13056
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 13057
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 13058
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 13059
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 13060
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 13061
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 13062
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 13063
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 13064
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 13065
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 13066
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 13067
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 13068
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 13069
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 13070
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 13071
        //ELSE
        } else {
            //Instruction 13072
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 13073
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 13074
        //ENDIF
        }
        //Instruction 13075
    //ELSE
    } else {
        //Instruction 13076
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 13077
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 13078
    //ENDIF
    }
    //Instruction 13079
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 13080
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 13081
    //IF
    if(tb49){
        //Instruction 13082
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 13083
        //IF
        if(tb49){
            //Instruction 13084
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 13085
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 13086
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 13087
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 13088
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 13089
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 13090
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13091
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13092
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13093
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 13094
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 13095
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 13096
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13097
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 13098
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 13099
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 13100
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 13101
            //FRC
            t2 = fract(t2);
            //Instruction 13102
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 13103
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 13104
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 13105
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 13106
            //ADD
            t2 = t2 + t2;
            //Instruction 13107
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 13108
            //LT
            tb51 = t7.w<0.0;
            //Instruction 13109
            //MOV
            t7.y = (-t7.w);
            //Instruction 13110
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 13111
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 13112
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 13113
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 13114
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 13115
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 13116
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 13117
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13118
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13119
            //MUL
            t53 = t2.x * t53;
            //Instruction 13120
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 13121
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 13122
            //MUL
            t51 = t51 * t52;
            //Instruction 13123
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 13124
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13125
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13126
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 13127
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13128
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 13129
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 13130
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13131
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 13132
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13133
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 13134
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 13135
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 13136
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 13137
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 13138
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 13139
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 13140
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 13141
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 13142
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 13143
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 13144
        //ELSE
        } else {
            //Instruction 13145
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13146
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 13147
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13148
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 13149
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 13150
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 13151
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13152
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 13153
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 13154
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 13155
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13156
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13157
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 13158
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 13159
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 13160
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 13161
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 13162
            //LT
            tb0 = t2.w<0.0;
            //Instruction 13163
            //MOV
            t2.y = (-t2.w);
            //Instruction 13164
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 13165
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 13166
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 13167
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 13168
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 13169
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 13170
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 13171
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13172
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13173
            //MUL
            t51 = t51 * t6.x;
            //Instruction 13174
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 13175
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 13176
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13177
        //ENDIF
        }
        //Instruction 13178
    //ENDIF
    }
    //Instruction 13179
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 13180
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 13181
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 13182
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 13183
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 13184
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 13185
    //NE
    tb51 = t49!=0.0;
    //Instruction 13186
    //LOG
    t52 = log2(t49);
    //Instruction 13187
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 13188
    //EXP
    t52 = exp2(t52);
    //Instruction 13189
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 13190
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 13191
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 13192
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 13193
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 13194
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 13195
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 13196
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 13197
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 13198
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 13199
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 13200
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 13201
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 13202
    //MUL
    t49 = t49 * t51;
    //Instruction 13203
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 13204
    //MOV
    t5.y = t4.y;
    //Instruction 13205
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 13206
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 13207
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 13208
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 13209
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 13210
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 13211
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 13212
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 13213
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 13214
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 13215
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 13216
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 13217
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 13218
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 13219
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 13220
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 13221
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 13222
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 13223
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 13224
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 13225
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 13226
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 13227
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 13228
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 13229
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 13230
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 13231
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 13232
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 13233
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 13234
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 13235
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 13236
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 13237
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 13238
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 13239
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 13240
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 13241
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 13242
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 13243
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 13244
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 12897
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 12898
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12899
    //LT
    tb15 = t10_1<0.0;
    //Instruction 12900
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 12901
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 12902
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 12903
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 12904
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 12905
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 12906
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 12907
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 12908
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 12909
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 12910
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 12911
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 12912
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 12913
    //MOV
    t16_0.w = 1.0;
    //Instruction 12914
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 12915
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 12916
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 12917
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 12918
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 12919
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12920
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 12921
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 12922
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12923
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12924
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_14.x)
   + 
    (v_99.xyz * tmpvar_14.y)
  ) + (v_100.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_101;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_4;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_98;
  tmpvar_98 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_14.x)
   + 
    (v_100.xyz * tmpvar_14.y)
  ) + (v_101.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_102;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_103;
  tmpvar_103.w = 1.0;
  tmpvar_103.xyz = worldNormal_4;
  mediump vec4 normal_104;
  normal_104 = tmpvar_103;
  mediump vec3 x2_105;
  mediump vec4 tmpvar_106;
  tmpvar_106 = (normal_104.xyzz * normal_104.yzzx);
  x2_105.x = dot (unity_SHBr, tmpvar_106);
  x2_105.y = dot (unity_SHBg, tmpvar_106);
  x2_105.z = dot (unity_SHBb, tmpvar_106);
  highp vec3 lightColor0_107;
  lightColor0_107 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_108;
  lightColor1_108 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_109;
  lightColor2_109 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_110;
  lightColor3_110 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_111;
  lightAttenSq_111 = unity_4LightAtten0;
  highp vec3 normal_112;
  normal_112 = worldNormal_4;
  highp vec3 col_113;
  highp vec4 ndotl_114;
  highp vec4 lengthSq_115;
  highp vec4 tmpvar_116;
  tmpvar_116 = (unity_4LightPosX0 - tmpvar_98.x);
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosY0 - tmpvar_98.y);
  highp vec4 tmpvar_118;
  tmpvar_118 = (unity_4LightPosZ0 - tmpvar_98.z);
  lengthSq_115 = (tmpvar_116 * tmpvar_116);
  lengthSq_115 = (lengthSq_115 + (tmpvar_117 * tmpvar_117));
  lengthSq_115 = (lengthSq_115 + (tmpvar_118 * tmpvar_118));
  ndotl_114 = (tmpvar_116 * normal_112.x);
  ndotl_114 = (ndotl_114 + (tmpvar_117 * normal_112.y));
  ndotl_114 = (ndotl_114 + (tmpvar_118 * normal_112.z));
  highp vec4 tmpvar_119;
  tmpvar_119 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_114 * inversesqrt(lengthSq_115)));
  ndotl_114 = tmpvar_119;
  highp vec4 tmpvar_120;
  tmpvar_120 = (tmpvar_119 * (1.0/((1.0 + 
    (lengthSq_115 * lightAttenSq_111)
  ))));
  col_113 = (lightColor0_107 * tmpvar_120.x);
  col_113 = (col_113 + (lightColor1_108 * tmpvar_120.y));
  col_113 = (col_113 + (lightColor2_109 * tmpvar_120.z));
  col_113 = (col_113 + (lightColor3_110 * tmpvar_120.w));
  tmpvar_7 = ((x2_105 + (unity_SHC.xyz * 
    ((normal_104.x * normal_104.x) - (normal_104.y * normal_104.y))
  )) + col_113);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_98;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 13273
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 13274
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 13275
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 13276
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 13277
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 13278
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 13279
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 13280
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 13281
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 13282
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 13283
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 13284
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 13285
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 13286
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 13287
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 13288
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 13289
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 13290
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 13291
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 13292
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 13293
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 13294
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 13295
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 13296
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 13297
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 13298
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 13299
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 13300
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 13301
        //FRC
        t32.x = fract(t32.x);
        //Instruction 13302
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 13303
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 13304
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 13305
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 13306
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 13307
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 13308
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 13309
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 13310
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 13311
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 13312
        //IF
        if(tb48){
            //Instruction 13313
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 13314
            //FRC
            t5 = fract(t5);
            //Instruction 13315
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13316
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 13317
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 13318
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 13319
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 13320
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 13321
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13322
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 13323
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13324
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 13325
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13326
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 13327
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 13328
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 13329
            //SQRT
            t49 = sqrt(t49);
            //Instruction 13330
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 13331
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 13332
            //MUL
            t51 = t51 * t52;
            //Instruction 13333
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 13334
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 13335
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 13336
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 13337
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 13338
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 13339
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 13340
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 13341
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 13342
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 13343
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 13344
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 13345
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 13346
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 13347
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 13348
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 13349
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 13350
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 13351
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 13352
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 13353
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 13354
            //SQRT
            t51 = sqrt(t51);
            //Instruction 13355
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 13356
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 13357
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 13358
            //MUL
            t6.x = t51 * t52;
            //Instruction 13359
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 13360
            //LT
            tb19 = t19<(-t19);
            //Instruction 13361
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 13362
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 13363
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 13364
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 13365
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 13366
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13367
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 13368
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13369
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 13370
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13371
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 13372
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 13373
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 13374
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 13375
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 13376
            //LOG
            t48 = log2(t48);
            //Instruction 13377
            //MUL
            t48 = t48 * t7.y;
            //Instruction 13378
            //EXP
            t48 = exp2(t48);
            //Instruction 13379
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 13380
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 13381
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 13382
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 13383
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 13384
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 13385
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 13386
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 13387
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 13388
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 13389
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 13390
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 13391
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 13392
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 13393
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 13394
            //MOV
            t11.z = t12.x;
            //Instruction 13395
            //MOV
            t11.w = t10.x;
            //Instruction 13396
            //MOV
            t13.z = t9.y;
            //Instruction 13397
            //MOV
            t13.w = t14.y;
            //Instruction 13398
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 13399
            //MOV
            t14.w = t13.y;
            //Instruction 13400
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 13401
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 13402
            //MOV
            t10.w = t11.y;
            //Instruction 13403
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 13404
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 13405
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 13406
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 13407
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 13408
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 13409
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 13410
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 13411
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 13412
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 13413
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 13414
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 13415
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 13416
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 13417
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 13418
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 13419
        //ELSE
        } else {
            //Instruction 13420
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 13421
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 13422
        //ENDIF
        }
        //Instruction 13423
    //ELSE
    } else {
        //Instruction 13424
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 13425
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 13426
    //ENDIF
    }
    //Instruction 13427
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 13428
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 13429
    //IF
    if(tb49){
        //Instruction 13430
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 13431
        //IF
        if(tb49){
            //Instruction 13432
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 13433
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 13434
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 13435
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 13436
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 13437
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 13438
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13439
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13440
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13441
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 13442
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 13443
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 13444
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13445
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 13446
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 13447
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 13448
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 13449
            //FRC
            t2 = fract(t2);
            //Instruction 13450
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 13451
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 13452
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 13453
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 13454
            //ADD
            t2 = t2 + t2;
            //Instruction 13455
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 13456
            //LT
            tb51 = t7.w<0.0;
            //Instruction 13457
            //MOV
            t7.y = (-t7.w);
            //Instruction 13458
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 13459
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 13460
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 13461
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 13462
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 13463
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 13464
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 13465
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13466
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13467
            //MUL
            t53 = t2.x * t53;
            //Instruction 13468
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 13469
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 13470
            //MUL
            t51 = t51 * t52;
            //Instruction 13471
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 13472
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13473
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13474
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 13475
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13476
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 13477
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 13478
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13479
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 13480
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13481
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 13482
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 13483
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 13484
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 13485
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 13486
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 13487
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 13488
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 13489
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 13490
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 13491
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 13492
        //ELSE
        } else {
            //Instruction 13493
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13494
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 13495
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13496
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 13497
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 13498
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 13499
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13500
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 13501
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 13502
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 13503
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13504
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13505
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 13506
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 13507
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 13508
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 13509
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 13510
            //LT
            tb0 = t2.w<0.0;
            //Instruction 13511
            //MOV
            t2.y = (-t2.w);
            //Instruction 13512
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 13513
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 13514
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 13515
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 13516
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 13517
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 13518
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 13519
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13520
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13521
            //MUL
            t51 = t51 * t6.x;
            //Instruction 13522
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 13523
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 13524
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13525
        //ENDIF
        }
        //Instruction 13526
    //ENDIF
    }
    //Instruction 13527
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 13528
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 13529
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 13530
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 13531
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 13532
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 13533
    //NE
    tb51 = t49!=0.0;
    //Instruction 13534
    //LOG
    t52 = log2(t49);
    //Instruction 13535
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 13536
    //EXP
    t52 = exp2(t52);
    //Instruction 13537
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 13538
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 13539
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 13540
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 13541
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 13542
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 13543
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 13544
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 13545
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 13546
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 13547
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 13548
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 13549
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 13550
    //MUL
    t49 = t49 * t51;
    //Instruction 13551
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 13552
    //MOV
    t5.y = t4.y;
    //Instruction 13553
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 13554
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 13555
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 13556
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 13557
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 13558
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 13559
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 13560
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 13561
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 13562
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 13563
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 13564
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 13565
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 13566
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 13567
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 13568
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 13569
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 13570
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 13571
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 13572
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 13573
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 13574
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 13575
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 13576
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 13577
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 13578
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 13579
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 13580
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 13581
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 13582
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 13583
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 13584
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 13585
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 13586
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 13587
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 13588
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 13589
    //ADD
    t4 = (-t3.zzzz) + unity_4LightPosY0;
    //Instruction 13590
    //ADD
    t5 = (-t3.wwww) + unity_4LightPosZ0;
    //Instruction 13591
    //MUL
    t6 = t4 * t4;
    //Instruction 13592
    //MAD
    t6 = t2 * t2 + t6;
    //Instruction 13593
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 13594
    //MUL
    t4 = t0.yyyy * t4;
    //Instruction 13595
    //MAD
    t2 = t2 * t0.xxxx + t4;
    //Instruction 13596
    //MAD
    t2 = t5 * t0.zzzz + t2;
    //Instruction 13597
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 13598
    //MUL
    t2 = t2 * t4;
    //Instruction 13599
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 13600
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 13601
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 13602
    //MUL
    t2 = t2 * t4;
    //Instruction 13603
    //MUL
    t4.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 13604
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t2.xxx + t4.xyz;
    //Instruction 13605
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t2.zzz + t4.xyz;
    //Instruction 13606
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t2.www + t4.xyz;
    //Instruction 13607
    //ADD
    t4.xyz = t4.xyz + t16_15.xyz;
    //Instruction 13608
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 13609
    //MOV
    vs_TEXCOORD1.xyz = t3.xzw;
    //Instruction 13610
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 13611
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 13612
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 13613
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 13614
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 13245
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 13246
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 13247
    //LT
    tb15 = t10_1<0.0;
    //Instruction 13248
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 13249
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 13250
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 13251
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 13252
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 13253
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 13254
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 13255
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 13256
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 13257
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 13258
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 13259
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 13260
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 13261
    //MOV
    t16_0.w = 1.0;
    //Instruction 13262
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 13263
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 13264
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 13265
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 13266
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 13267
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 13268
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 13269
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 13270
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 13271
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 13272
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_15.x)
   + 
    (v_101.xyz * tmpvar_15.y)
  ) + (v_102.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_103;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_4;
  mediump vec4 normal_105;
  normal_105 = tmpvar_104;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  highp vec3 lightColor0_108;
  lightColor0_108 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_109;
  lightColor1_109 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_110;
  lightColor2_110 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_111;
  lightColor3_111 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_112;
  lightAttenSq_112 = unity_4LightAtten0;
  highp vec3 normal_113;
  normal_113 = worldNormal_4;
  highp vec3 col_114;
  highp vec4 ndotl_115;
  highp vec4 lengthSq_116;
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_118;
  tmpvar_118 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_119;
  tmpvar_119 = (unity_4LightPosZ0 - tmpvar_99.z);
  lengthSq_116 = (tmpvar_117 * tmpvar_117);
  lengthSq_116 = (lengthSq_116 + (tmpvar_118 * tmpvar_118));
  lengthSq_116 = (lengthSq_116 + (tmpvar_119 * tmpvar_119));
  ndotl_115 = (tmpvar_117 * normal_113.x);
  ndotl_115 = (ndotl_115 + (tmpvar_118 * normal_113.y));
  ndotl_115 = (ndotl_115 + (tmpvar_119 * normal_113.z));
  highp vec4 tmpvar_120;
  tmpvar_120 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_115 * inversesqrt(lengthSq_116)));
  ndotl_115 = tmpvar_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (tmpvar_120 * (1.0/((1.0 + 
    (lengthSq_116 * lightAttenSq_112)
  ))));
  col_114 = (lightColor0_108 * tmpvar_121.x);
  col_114 = (col_114 + (lightColor1_109 * tmpvar_121.y));
  col_114 = (col_114 + (lightColor2_110 * tmpvar_121.z));
  col_114 = (col_114 + (lightColor3_111 * tmpvar_121.w));
  tmpvar_7 = ((x2_106 + (unity_SHC.xyz * 
    ((normal_105.x * normal_105.x) - (normal_105.y * normal_105.y))
  )) + col_114);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_99;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_14.x)
   + 
    (v_99.xyz * tmpvar_14.y)
  ) + (v_100.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_101;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_4;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 13647
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 13648
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 13649
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 13650
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 13651
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 13652
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 13653
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 13654
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 13655
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 13656
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 13657
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 13658
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 13659
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 13660
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 13661
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 13662
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 13663
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 13664
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 13665
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 13666
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 13667
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 13668
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 13669
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 13670
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 13671
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 13672
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 13673
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 13674
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 13675
        //FRC
        t32.x = fract(t32.x);
        //Instruction 13676
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 13677
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 13678
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 13679
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 13680
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 13681
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 13682
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 13683
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 13684
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 13685
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 13686
        //IF
        if(tb48){
            //Instruction 13687
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 13688
            //FRC
            t5 = fract(t5);
            //Instruction 13689
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13690
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 13691
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 13692
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 13693
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 13694
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 13695
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13696
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 13697
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13698
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 13699
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13700
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 13701
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 13702
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 13703
            //SQRT
            t49 = sqrt(t49);
            //Instruction 13704
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 13705
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 13706
            //MUL
            t51 = t51 * t52;
            //Instruction 13707
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 13708
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 13709
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 13710
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 13711
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 13712
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 13713
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 13714
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 13715
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 13716
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 13717
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 13718
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 13719
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 13720
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 13721
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 13722
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 13723
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 13724
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 13725
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 13726
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 13727
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 13728
            //SQRT
            t51 = sqrt(t51);
            //Instruction 13729
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 13730
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 13731
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 13732
            //MUL
            t6.x = t51 * t52;
            //Instruction 13733
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 13734
            //LT
            tb19 = t19<(-t19);
            //Instruction 13735
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 13736
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 13737
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 13738
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 13739
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 13740
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13741
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 13742
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13743
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 13744
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13745
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 13746
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 13747
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 13748
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 13749
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 13750
            //LOG
            t48 = log2(t48);
            //Instruction 13751
            //MUL
            t48 = t48 * t7.y;
            //Instruction 13752
            //EXP
            t48 = exp2(t48);
            //Instruction 13753
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 13754
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 13755
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 13756
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 13757
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 13758
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 13759
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 13760
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 13761
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 13762
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 13763
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 13764
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 13765
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 13766
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 13767
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 13768
            //MOV
            t11.z = t12.x;
            //Instruction 13769
            //MOV
            t11.w = t10.x;
            //Instruction 13770
            //MOV
            t13.z = t9.y;
            //Instruction 13771
            //MOV
            t13.w = t14.y;
            //Instruction 13772
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 13773
            //MOV
            t14.w = t13.y;
            //Instruction 13774
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 13775
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 13776
            //MOV
            t10.w = t11.y;
            //Instruction 13777
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 13778
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 13779
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 13780
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 13781
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 13782
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 13783
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 13784
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 13785
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 13786
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 13787
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 13788
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 13789
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 13790
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 13791
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 13792
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 13793
        //ELSE
        } else {
            //Instruction 13794
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 13795
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 13796
        //ENDIF
        }
        //Instruction 13797
    //ELSE
    } else {
        //Instruction 13798
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 13799
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 13800
    //ENDIF
    }
    //Instruction 13801
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 13802
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 13803
    //IF
    if(tb49){
        //Instruction 13804
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 13805
        //IF
        if(tb49){
            //Instruction 13806
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 13807
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 13808
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 13809
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 13810
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 13811
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 13812
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13813
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13814
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13815
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 13816
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 13817
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 13818
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13819
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 13820
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 13821
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 13822
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 13823
            //FRC
            t2 = fract(t2);
            //Instruction 13824
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 13825
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 13826
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 13827
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 13828
            //ADD
            t2 = t2 + t2;
            //Instruction 13829
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 13830
            //LT
            tb51 = t7.w<0.0;
            //Instruction 13831
            //MOV
            t7.y = (-t7.w);
            //Instruction 13832
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 13833
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 13834
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 13835
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 13836
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 13837
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 13838
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 13839
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13840
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13841
            //MUL
            t53 = t2.x * t53;
            //Instruction 13842
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 13843
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 13844
            //MUL
            t51 = t51 * t52;
            //Instruction 13845
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 13846
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13847
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13848
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 13849
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13850
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 13851
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 13852
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13853
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 13854
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13855
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 13856
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 13857
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 13858
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 13859
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 13860
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 13861
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 13862
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 13863
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 13864
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 13865
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 13866
        //ELSE
        } else {
            //Instruction 13867
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13868
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 13869
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13870
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 13871
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 13872
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 13873
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13874
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 13875
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 13876
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 13877
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13878
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13879
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 13880
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 13881
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 13882
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 13883
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 13884
            //LT
            tb0 = t2.w<0.0;
            //Instruction 13885
            //MOV
            t2.y = (-t2.w);
            //Instruction 13886
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 13887
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 13888
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 13889
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 13890
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 13891
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 13892
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 13893
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13894
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13895
            //MUL
            t51 = t51 * t6.x;
            //Instruction 13896
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 13897
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 13898
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13899
        //ENDIF
        }
        //Instruction 13900
    //ENDIF
    }
    //Instruction 13901
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 13902
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 13903
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 13904
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 13905
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 13906
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 13907
    //NE
    tb51 = t49!=0.0;
    //Instruction 13908
    //LOG
    t52 = log2(t49);
    //Instruction 13909
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 13910
    //EXP
    t52 = exp2(t52);
    //Instruction 13911
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 13912
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 13913
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 13914
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 13915
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 13916
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 13917
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 13918
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 13919
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 13920
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 13921
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 13922
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 13923
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 13924
    //MUL
    t49 = t49 * t51;
    //Instruction 13925
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 13926
    //MOV
    t5.y = t4.y;
    //Instruction 13927
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 13928
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 13929
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 13930
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 13931
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 13932
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 13933
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 13934
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 13935
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 13936
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 13937
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 13938
    //MAD
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 13939
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 13940
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 13941
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 13942
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 13943
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 13944
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 13945
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 13946
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 13947
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 13948
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 13949
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 13950
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 13951
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 13952
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 13953
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 13954
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 13955
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 13956
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 13957
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 13958
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 13959
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 13960
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 13961
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 13962
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 13963
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 13964
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 13965
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 13966
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 13967
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 13968
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 13969
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 13970
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 13971
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 13972
    //MOV
    vs_TEXCOORD5 = t2;
    //Instruction 13973
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 13974
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 13975
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 13615
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 13616
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 13617
    //LT
    tb15 = t10_1<0.0;
    //Instruction 13618
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 13619
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 13620
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 13621
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 13622
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 13623
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 13624
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 13625
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 13626
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 13627
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 13628
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 13629
    //SAMPLE_C_LZ
    vec3 txVec46 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec46, 0.0);
    //Instruction 13630
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 13631
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 13632
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 13633
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 13634
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 13635
    //MOV
    t16_0.w = 1.0;
    //Instruction 13636
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 13637
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 13638
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 13639
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 13640
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 13641
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 13642
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 13643
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 13644
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 13645
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 13646
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_15.x)
   + 
    (v_101.xyz * tmpvar_15.y)
  ) + (v_102.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_103;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_4;
  mediump vec4 normal_105;
  normal_105 = tmpvar_104;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  highp vec3 lightColor0_108;
  lightColor0_108 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_109;
  lightColor1_109 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_110;
  lightColor2_110 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_111;
  lightColor3_111 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_112;
  lightAttenSq_112 = unity_4LightAtten0;
  highp vec3 normal_113;
  normal_113 = worldNormal_4;
  highp vec3 col_114;
  highp vec4 ndotl_115;
  highp vec4 lengthSq_116;
  highp vec4 tmpvar_117;
  tmpvar_117 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_118;
  tmpvar_118 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_119;
  tmpvar_119 = (unity_4LightPosZ0 - tmpvar_99.z);
  lengthSq_116 = (tmpvar_117 * tmpvar_117);
  lengthSq_116 = (lengthSq_116 + (tmpvar_118 * tmpvar_118));
  lengthSq_116 = (lengthSq_116 + (tmpvar_119 * tmpvar_119));
  ndotl_115 = (tmpvar_117 * normal_113.x);
  ndotl_115 = (ndotl_115 + (tmpvar_118 * normal_113.y));
  ndotl_115 = (ndotl_115 + (tmpvar_119 * normal_113.z));
  highp vec4 tmpvar_120;
  tmpvar_120 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_115 * inversesqrt(lengthSq_116)));
  ndotl_115 = tmpvar_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (tmpvar_120 * (1.0/((1.0 + 
    (lengthSq_116 * lightAttenSq_112)
  ))));
  col_114 = (lightColor0_108 * tmpvar_121.x);
  col_114 = (col_114 + (lightColor1_109 * tmpvar_121.y));
  col_114 = (col_114 + (lightColor2_110 * tmpvar_121.z));
  col_114 = (col_114 + (lightColor3_111 * tmpvar_121.w));
  tmpvar_7 = ((x2_106 + (unity_SHC.xyz * 
    ((normal_105.x * normal_105.x) - (normal_105.y * normal_105.y))
  )) + col_114);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_99;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 13328
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 13329
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 13330
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 13331
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 13332
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 13333
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 13334
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 13335
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 13336
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 13337
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 13338
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 13339
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 13340
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 13341
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 13342
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 13343
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 13344
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 13345
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 13346
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 13347
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 13348
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 13349
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 13350
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 13351
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 13352
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 13353
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 13354
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 13355
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 13356
        //FRC
        t32.x = fract(t32.x);
        //Instruction 13357
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 13358
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 13359
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 13360
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 13361
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 13362
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 13363
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 13364
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 13365
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 13366
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 13367
        //IF
        if(tb48){
            //Instruction 13368
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 13369
            //FRC
            t5 = fract(t5);
            //Instruction 13370
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13371
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 13372
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 13373
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 13374
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 13375
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 13376
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13377
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 13378
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13379
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 13380
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13381
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 13382
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 13383
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 13384
            //SQRT
            t49 = sqrt(t49);
            //Instruction 13385
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 13386
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 13387
            //MUL
            t51 = t51 * t52;
            //Instruction 13388
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 13389
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 13390
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 13391
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 13392
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 13393
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 13394
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 13395
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 13396
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 13397
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 13398
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 13399
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 13400
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 13401
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 13402
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 13403
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 13404
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 13405
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 13406
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 13407
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 13408
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 13409
            //SQRT
            t51 = sqrt(t51);
            //Instruction 13410
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 13411
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 13412
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 13413
            //MUL
            t6.x = t51 * t52;
            //Instruction 13414
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 13415
            //LT
            tb19 = t19<(-t19);
            //Instruction 13416
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 13417
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 13418
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 13419
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 13420
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 13421
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13422
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 13423
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13424
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 13425
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13426
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 13427
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 13428
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 13429
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 13430
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 13431
            //LOG
            t48 = log2(t48);
            //Instruction 13432
            //MUL
            t48 = t48 * t7.y;
            //Instruction 13433
            //EXP
            t48 = exp2(t48);
            //Instruction 13434
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 13435
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 13436
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 13437
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 13438
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 13439
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 13440
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 13441
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 13442
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 13443
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 13444
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 13445
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 13446
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 13447
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 13448
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 13449
            //MOV
            t11.z = t12.x;
            //Instruction 13450
            //MOV
            t11.w = t10.x;
            //Instruction 13451
            //MOV
            t13.z = t9.y;
            //Instruction 13452
            //MOV
            t13.w = t14.y;
            //Instruction 13453
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 13454
            //MOV
            t14.w = t13.y;
            //Instruction 13455
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 13456
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 13457
            //MOV
            t10.w = t11.y;
            //Instruction 13458
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 13459
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 13460
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 13461
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 13462
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 13463
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 13464
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 13465
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 13466
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 13467
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 13468
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 13469
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 13470
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 13471
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 13472
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 13473
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 13474
        //ELSE
        } else {
            //Instruction 13475
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 13476
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 13477
        //ENDIF
        }
        //Instruction 13478
    //ELSE
    } else {
        //Instruction 13479
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 13480
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 13481
    //ENDIF
    }
    //Instruction 13482
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 13483
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 13484
    //IF
    if(tb49){
        //Instruction 13485
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 13486
        //IF
        if(tb49){
            //Instruction 13487
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 13488
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 13489
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 13490
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 13491
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 13492
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 13493
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13494
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13495
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13496
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 13497
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 13498
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 13499
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13500
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 13501
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 13502
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 13503
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 13504
            //FRC
            t2 = fract(t2);
            //Instruction 13505
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 13506
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 13507
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 13508
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 13509
            //ADD
            t2 = t2 + t2;
            //Instruction 13510
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 13511
            //LT
            tb51 = t7.w<0.0;
            //Instruction 13512
            //MOV
            t7.y = (-t7.w);
            //Instruction 13513
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 13514
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 13515
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 13516
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 13517
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 13518
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 13519
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 13520
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13521
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13522
            //MUL
            t53 = t2.x * t53;
            //Instruction 13523
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 13524
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 13525
            //MUL
            t51 = t51 * t52;
            //Instruction 13526
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 13527
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13528
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13529
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 13530
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13531
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 13532
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 13533
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13534
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 13535
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13536
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 13537
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 13538
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 13539
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 13540
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 13541
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 13542
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 13543
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 13544
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 13545
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 13546
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 13547
        //ELSE
        } else {
            //Instruction 13548
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13549
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 13550
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13551
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 13552
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 13553
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 13554
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13555
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 13556
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 13557
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 13558
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13559
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13560
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 13561
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 13562
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 13563
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 13564
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 13565
            //LT
            tb0 = t2.w<0.0;
            //Instruction 13566
            //MOV
            t2.y = (-t2.w);
            //Instruction 13567
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 13568
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 13569
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 13570
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 13571
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 13572
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 13573
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 13574
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13575
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13576
            //MUL
            t51 = t51 * t6.x;
            //Instruction 13577
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 13578
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 13579
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13580
        //ENDIF
        }
        //Instruction 13581
    //ENDIF
    }
    //Instruction 13582
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 13583
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 13584
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 13585
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 13586
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 13587
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 13588
    //NE
    tb51 = t49!=0.0;
    //Instruction 13589
    //LOG
    t52 = log2(t49);
    //Instruction 13590
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 13591
    //EXP
    t52 = exp2(t52);
    //Instruction 13592
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 13593
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 13594
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 13595
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 13596
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 13597
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 13598
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 13599
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 13600
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 13601
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 13602
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 13603
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 13604
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 13605
    //MUL
    t49 = t49 * t51;
    //Instruction 13606
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 13607
    //MOV
    t5.y = t4.y;
    //Instruction 13608
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 13609
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 13610
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 13611
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 13612
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 13613
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 13614
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 13615
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 13616
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 13617
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 13618
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 13619
    //MAD
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 13620
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 13621
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 13622
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 13623
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 13624
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 13625
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 13626
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 13627
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 13628
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 13629
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 13630
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 13631
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 13632
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 13633
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 13634
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 13635
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 13636
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 13637
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 13638
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 13639
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 13640
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 13641
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 13642
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 13643
    //ADD
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 13644
    //ADD
    t5 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 13645
    //ADD
    t6 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 13646
    //MUL
    t7 = t5 * t5;
    //Instruction 13647
    //MAD
    t7 = t2 * t2 + t7;
    //Instruction 13648
    //MAD
    t7 = t6 * t6 + t7;
    //Instruction 13649
    //MUL
    t5 = t0.yyyy * t5;
    //Instruction 13650
    //MAD
    t2 = t2 * t0.xxxx + t5;
    //Instruction 13651
    //MAD
    t2 = t6 * t0.zzzz + t2;
    //Instruction 13652
    //RSQ
    t5 = inversesqrt(t7);
    //Instruction 13653
    //MUL
    t2 = t2 * t5;
    //Instruction 13654
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 13655
    //MAD
    t5 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 13656
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 13657
    //MUL
    t2 = t2 * t5;
    //Instruction 13658
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 13659
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 13660
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 13661
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 13662
    //ADD
    t5.xyz = t5.xyz + t16_15.xyz;
    //Instruction 13663
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 13664
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 13665
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 13666
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 13667
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 13668
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 13669
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 13670
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 13671
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 13672
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 13673
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 13674
    //MOV
    vs_TEXCOORD5 = t2;
    //Instruction 13675
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 13676
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 13677
    //MOV
    vs_TEXCOORD4.xyz = t5.xyz;
    //Instruction 13678
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 13296
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 13297
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 13298
    //LT
    tb15 = t10_1<0.0;
    //Instruction 13299
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 13300
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 13301
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 13302
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 13303
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 13304
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 13305
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 13306
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 13307
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 13308
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 13309
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 13310
    //SAMPLE_C_LZ
    vec3 txVec30 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec30, 0.0);
    //Instruction 13311
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 13312
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 13313
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 13314
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 13315
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 13316
    //MOV
    t16_0.w = 1.0;
    //Instruction 13317
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 13318
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 13319
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 13320
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 13321
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 13322
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 13323
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 13324
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 13325
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 13326
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 13327
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_98;
  tmpvar_98 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_14.x)
   + 
    (v_100.xyz * tmpvar_14.y)
  ) + (v_101.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_102;
  highp mat3 tmpvar_103;
  tmpvar_103[0] = _Object2World[0].xyz;
  tmpvar_103[1] = _Object2World[1].xyz;
  tmpvar_103[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_104;
  lowp vec3 tmpvar_105;
  tmpvar_105 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_105 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_106;
  highp vec4 tmpvar_107;
  tmpvar_107.x = worldTangent_5.x;
  tmpvar_107.y = worldBinormal_4.x;
  tmpvar_107.z = worldNormal_6.x;
  tmpvar_107.w = tmpvar_98.x;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_5.y;
  tmpvar_108.y = worldBinormal_4.y;
  tmpvar_108.z = worldNormal_6.y;
  tmpvar_108.w = tmpvar_98.y;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_5.z;
  tmpvar_109.y = worldBinormal_4.z;
  tmpvar_109.z = worldNormal_6.z;
  tmpvar_109.w = tmpvar_98.z;
  lowp vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = worldNormal_6;
  mediump vec4 normal_111;
  normal_111 = tmpvar_110;
  mediump vec3 x2_112;
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_111.xyzz * normal_111.yzzx);
  x2_112.x = dot (unity_SHBr, tmpvar_113);
  x2_112.y = dot (unity_SHBg, tmpvar_113);
  x2_112.z = dot (unity_SHBb, tmpvar_113);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_107;
  xlv_TEXCOORD1 = tmpvar_108;
  xlv_TEXCOORD2 = tmpvar_109;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_112 + (unity_SHC.xyz * (
    (normal_111.x * normal_111.x)
   - 
    (normal_111.y * normal_111.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 13113
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 13114
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 13115
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 13116
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 13117
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 13118
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 13119
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 13120
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 13121
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 13122
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 13123
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 13124
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 13125
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 13126
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 13127
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 13128
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 13129
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 13130
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 13131
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 13132
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 13133
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 13134
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 13135
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 13136
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 13137
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 13138
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 13139
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 13140
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 13141
        //FRC
        t34.x = fract(t34.x);
        //Instruction 13142
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 13143
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 13144
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 13145
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 13146
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 13147
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 13148
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 13149
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 13150
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 13151
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 13152
        //IF
        if(tb51){
            //Instruction 13153
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 13154
            //FRC
            t5 = fract(t5);
            //Instruction 13155
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13156
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 13157
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 13158
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 13159
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 13160
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 13161
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13162
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 13163
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13164
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 13165
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13166
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 13167
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 13168
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 13169
            //SQRT
            t52 = sqrt(t52);
            //Instruction 13170
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 13171
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 13172
            //MUL
            t54 = t54 * t55;
            //Instruction 13173
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 13174
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 13175
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 13176
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 13177
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 13178
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 13179
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 13180
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 13181
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 13182
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 13183
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 13184
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 13185
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 13186
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 13187
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 13188
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 13189
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 13190
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 13191
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 13192
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 13193
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 13194
            //SQRT
            t54 = sqrt(t54);
            //Instruction 13195
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 13196
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 13197
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 13198
            //MUL
            t6.x = t54 * t55;
            //Instruction 13199
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 13200
            //LT
            tb20 = t20<(-t20);
            //Instruction 13201
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 13202
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 13203
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 13204
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 13205
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 13206
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13207
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 13208
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13209
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 13210
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13211
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 13212
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 13213
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 13214
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 13215
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 13216
            //LOG
            t51 = log2(t51);
            //Instruction 13217
            //MUL
            t51 = t51 * t7.y;
            //Instruction 13218
            //EXP
            t51 = exp2(t51);
            //Instruction 13219
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 13220
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 13221
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 13222
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 13223
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 13224
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 13225
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 13226
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 13227
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 13228
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 13229
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 13230
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 13231
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 13232
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 13233
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 13234
            //MOV
            t11.z = t12.x;
            //Instruction 13235
            //MOV
            t11.w = t10.x;
            //Instruction 13236
            //MOV
            t13.z = t9.y;
            //Instruction 13237
            //MOV
            t13.w = t14.y;
            //Instruction 13238
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 13239
            //MOV
            t14.w = t13.y;
            //Instruction 13240
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 13241
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 13242
            //MOV
            t10.w = t11.y;
            //Instruction 13243
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 13244
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 13245
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 13246
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 13247
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 13248
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 13249
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 13250
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 13251
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 13252
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 13253
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 13254
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 13255
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 13256
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 13257
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 13258
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 13259
        //ELSE
        } else {
            //Instruction 13260
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 13261
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 13262
        //ENDIF
        }
        //Instruction 13263
    //ELSE
    } else {
        //Instruction 13264
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 13265
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 13266
    //ENDIF
    }
    //Instruction 13267
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 13268
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 13269
    //IF
    if(tb52){
        //Instruction 13270
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 13271
        //IF
        if(tb52){
            //Instruction 13272
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 13273
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 13274
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 13275
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 13276
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 13277
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 13278
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13279
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13280
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13281
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 13282
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 13283
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 13284
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13285
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 13286
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 13287
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 13288
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 13289
            //FRC
            t2 = fract(t2);
            //Instruction 13290
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 13291
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 13292
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 13293
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 13294
            //ADD
            t2 = t2 + t2;
            //Instruction 13295
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 13296
            //LT
            tb54 = t7.w<0.0;
            //Instruction 13297
            //MOV
            t7.y = (-t7.w);
            //Instruction 13298
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 13299
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 13300
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 13301
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 13302
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 13303
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 13304
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 13305
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13306
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13307
            //MUL
            t56 = t2.x * t56;
            //Instruction 13308
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 13309
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 13310
            //MUL
            t54 = t54 * t55;
            //Instruction 13311
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 13312
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13313
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13314
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 13315
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13316
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 13317
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 13318
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13319
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 13320
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13321
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 13322
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 13323
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 13324
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 13325
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 13326
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 13327
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 13328
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 13329
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 13330
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 13331
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 13332
        //ELSE
        } else {
            //Instruction 13333
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13334
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 13335
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13336
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 13337
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 13338
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 13339
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13340
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 13341
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 13342
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 13343
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13344
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13345
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 13346
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 13347
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 13348
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 13349
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 13350
            //LT
            tb0 = t2.w<0.0;
            //Instruction 13351
            //MOV
            t2.y = (-t2.w);
            //Instruction 13352
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 13353
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 13354
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 13355
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 13356
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 13357
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 13358
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 13359
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13360
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13361
            //MUL
            t54 = t54 * t6.x;
            //Instruction 13362
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 13363
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 13364
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13365
        //ENDIF
        }
        //Instruction 13366
    //ENDIF
    }
    //Instruction 13367
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 13368
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 13369
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 13370
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 13371
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 13372
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 13373
    //NE
    tb54 = t52!=0.0;
    //Instruction 13374
    //LOG
    t55 = log2(t52);
    //Instruction 13375
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 13376
    //EXP
    t55 = exp2(t55);
    //Instruction 13377
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 13378
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 13379
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 13380
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 13381
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 13382
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 13383
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 13384
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 13385
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 13386
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 13387
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 13388
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 13389
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 13390
    //MUL
    t52 = t52 * t54;
    //Instruction 13391
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 13392
    //MOV
    t5.y = t4.y;
    //Instruction 13393
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 13394
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 13395
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 13396
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 13397
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 13398
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 13399
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 13400
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 13401
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 13402
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 13403
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 13404
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 13405
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 13406
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 13407
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 13408
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 13409
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 13410
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 13411
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 13412
    //MUL
    t4 = t34.yyyy * t4;
    //Instruction 13413
    //MAD
    t0 = t2 * t34.xxxx + t4;
    //Instruction 13414
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 13415
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 13416
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 13417
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 13418
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 13419
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 13420
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 13421
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 13422
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 13423
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 13424
    //DP3
    t52 = dot(t4.xyz, t4.xyz);
    //Instruction 13425
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 13426
    //MUL
    t4.xyz = vec3(t52) * t4.xyz;
    //Instruction 13427
    //MUL
    t10_15.xyz = t0.wxy * t4.xyz;
    //Instruction 13428
    //MAD
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    //Instruction 13429
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 13430
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 13431
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 13432
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 13433
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 13434
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 13435
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 13436
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 13437
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 13438
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 13439
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 13440
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 13441
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 13442
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 13443
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 13444
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 13445
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 13446
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 13447
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 13448
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 13449
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 13450
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 13451
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 13452
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 13081
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 13082
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 13083
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 13084
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 13085
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 13086
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 13087
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 13088
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 13089
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 13090
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 13091
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 13092
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 13093
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 13094
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 13095
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 13096
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 13097
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 13098
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 13099
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 13100
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 13101
    //MOV
    t0.w = 1.0;
    //Instruction 13102
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 13103
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 13104
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 13105
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 13106
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 13107
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 13108
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 13109
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 13110
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 13111
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 13112
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_15.x)
   + 
    (v_101.xyz * tmpvar_15.y)
  ) + (v_102.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_5.x;
  tmpvar_108.y = worldBinormal_4.x;
  tmpvar_108.z = worldNormal_6.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_5.y;
  tmpvar_109.y = worldBinormal_4.y;
  tmpvar_109.z = worldNormal_6.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_5.z;
  tmpvar_110.y = worldBinormal_4.z;
  tmpvar_110.z = worldNormal_6.z;
  tmpvar_110.w = tmpvar_99.z;
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_6;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_15.x)
   + 
    (v_101.xyz * tmpvar_15.y)
  ) + (v_102.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_5.x;
  tmpvar_108.y = worldBinormal_4.x;
  tmpvar_108.z = worldNormal_6.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_5.y;
  tmpvar_109.y = worldBinormal_4.y;
  tmpvar_109.z = worldNormal_6.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_5.z;
  tmpvar_110.y = worldBinormal_4.z;
  tmpvar_110.z = worldNormal_6.z;
  tmpvar_110.w = tmpvar_99.z;
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_6;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  highp vec3 lightColor0_115;
  lightColor0_115 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_116;
  lightColor1_116 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_117;
  lightColor2_117 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_118;
  lightColor3_118 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_119;
  lightAttenSq_119 = unity_4LightAtten0;
  highp vec3 normal_120;
  normal_120 = worldNormal_6;
  highp vec3 col_121;
  highp vec4 ndotl_122;
  highp vec4 lengthSq_123;
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosX0 - tmpvar_99.x);
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosY0 - tmpvar_99.y);
  highp vec4 tmpvar_126;
  tmpvar_126 = (unity_4LightPosZ0 - tmpvar_99.z);
  lengthSq_123 = (tmpvar_124 * tmpvar_124);
  lengthSq_123 = (lengthSq_123 + (tmpvar_125 * tmpvar_125));
  lengthSq_123 = (lengthSq_123 + (tmpvar_126 * tmpvar_126));
  ndotl_122 = (tmpvar_124 * normal_120.x);
  ndotl_122 = (ndotl_122 + (tmpvar_125 * normal_120.y));
  ndotl_122 = (ndotl_122 + (tmpvar_126 * normal_120.z));
  highp vec4 tmpvar_127;
  tmpvar_127 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_122 * inversesqrt(lengthSq_123)));
  ndotl_122 = tmpvar_127;
  highp vec4 tmpvar_128;
  tmpvar_128 = (tmpvar_127 * (1.0/((1.0 + 
    (lengthSq_123 * lightAttenSq_119)
  ))));
  col_121 = (lightColor0_115 * tmpvar_128.x);
  col_121 = (col_121 + (lightColor1_116 * tmpvar_128.y));
  col_121 = (col_121 + (lightColor2_117 * tmpvar_128.z));
  col_121 = (col_121 + (lightColor3_118 * tmpvar_128.w));
  tmpvar_8 = ((x2_113 + (unity_SHC.xyz * 
    ((normal_112.x * normal_112.x) - (normal_112.y * normal_112.y))
  )) + col_121);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 13485
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 13486
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 13487
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 13488
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 13489
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 13490
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 13491
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 13492
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 13493
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 13494
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 13495
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 13496
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 13497
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 13498
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 13499
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 13500
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 13501
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 13502
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 13503
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 13504
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 13505
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 13506
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 13507
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 13508
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 13509
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 13510
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 13511
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 13512
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 13513
        //FRC
        t34.x = fract(t34.x);
        //Instruction 13514
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 13515
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 13516
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 13517
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 13518
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 13519
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 13520
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 13521
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 13522
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 13523
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 13524
        //IF
        if(tb51){
            //Instruction 13525
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 13526
            //FRC
            t5 = fract(t5);
            //Instruction 13527
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13528
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 13529
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 13530
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 13531
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 13532
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 13533
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13534
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 13535
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13536
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 13537
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13538
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 13539
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 13540
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 13541
            //SQRT
            t52 = sqrt(t52);
            //Instruction 13542
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 13543
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 13544
            //MUL
            t54 = t54 * t55;
            //Instruction 13545
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 13546
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 13547
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 13548
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 13549
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 13550
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 13551
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 13552
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 13553
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 13554
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 13555
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 13556
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 13557
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 13558
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 13559
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 13560
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 13561
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 13562
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 13563
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 13564
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 13565
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 13566
            //SQRT
            t54 = sqrt(t54);
            //Instruction 13567
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 13568
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 13569
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 13570
            //MUL
            t6.x = t54 * t55;
            //Instruction 13571
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 13572
            //LT
            tb20 = t20<(-t20);
            //Instruction 13573
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 13574
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 13575
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 13576
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 13577
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 13578
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13579
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 13580
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13581
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 13582
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13583
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 13584
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 13585
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 13586
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 13587
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 13588
            //LOG
            t51 = log2(t51);
            //Instruction 13589
            //MUL
            t51 = t51 * t7.y;
            //Instruction 13590
            //EXP
            t51 = exp2(t51);
            //Instruction 13591
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 13592
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 13593
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 13594
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 13595
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 13596
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 13597
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 13598
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 13599
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 13600
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 13601
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 13602
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 13603
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 13604
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 13605
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 13606
            //MOV
            t11.z = t12.x;
            //Instruction 13607
            //MOV
            t11.w = t10.x;
            //Instruction 13608
            //MOV
            t13.z = t9.y;
            //Instruction 13609
            //MOV
            t13.w = t14.y;
            //Instruction 13610
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 13611
            //MOV
            t14.w = t13.y;
            //Instruction 13612
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 13613
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 13614
            //MOV
            t10.w = t11.y;
            //Instruction 13615
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 13616
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 13617
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 13618
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 13619
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 13620
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 13621
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 13622
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 13623
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 13624
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 13625
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 13626
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 13627
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 13628
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 13629
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 13630
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 13631
        //ELSE
        } else {
            //Instruction 13632
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 13633
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 13634
        //ENDIF
        }
        //Instruction 13635
    //ELSE
    } else {
        //Instruction 13636
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 13637
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 13638
    //ENDIF
    }
    //Instruction 13639
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 13640
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 13641
    //IF
    if(tb52){
        //Instruction 13642
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 13643
        //IF
        if(tb52){
            //Instruction 13644
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 13645
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 13646
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 13647
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 13648
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 13649
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 13650
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13651
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13652
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13653
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 13654
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 13655
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 13656
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13657
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 13658
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 13659
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 13660
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 13661
            //FRC
            t2 = fract(t2);
            //Instruction 13662
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 13663
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 13664
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 13665
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 13666
            //ADD
            t2 = t2 + t2;
            //Instruction 13667
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 13668
            //LT
            tb54 = t7.w<0.0;
            //Instruction 13669
            //MOV
            t7.y = (-t7.w);
            //Instruction 13670
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 13671
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 13672
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 13673
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 13674
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 13675
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 13676
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 13677
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13678
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13679
            //MUL
            t56 = t2.x * t56;
            //Instruction 13680
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 13681
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 13682
            //MUL
            t54 = t54 * t55;
            //Instruction 13683
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 13684
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13685
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13686
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 13687
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13688
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 13689
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 13690
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13691
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 13692
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13693
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 13694
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 13695
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 13696
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 13697
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 13698
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 13699
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 13700
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 13701
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 13702
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 13703
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 13704
        //ELSE
        } else {
            //Instruction 13705
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13706
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 13707
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13708
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 13709
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 13710
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 13711
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13712
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 13713
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 13714
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 13715
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 13716
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13717
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 13718
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 13719
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 13720
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 13721
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 13722
            //LT
            tb0 = t2.w<0.0;
            //Instruction 13723
            //MOV
            t2.y = (-t2.w);
            //Instruction 13724
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 13725
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 13726
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 13727
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 13728
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 13729
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 13730
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 13731
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13732
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13733
            //MUL
            t54 = t54 * t6.x;
            //Instruction 13734
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 13735
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 13736
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 13737
        //ENDIF
        }
        //Instruction 13738
    //ENDIF
    }
    //Instruction 13739
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 13740
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 13741
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 13742
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 13743
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 13744
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 13745
    //NE
    tb54 = t52!=0.0;
    //Instruction 13746
    //LOG
    t55 = log2(t52);
    //Instruction 13747
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 13748
    //EXP
    t55 = exp2(t55);
    //Instruction 13749
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 13750
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 13751
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 13752
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 13753
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 13754
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 13755
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 13756
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 13757
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 13758
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 13759
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 13760
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 13761
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 13762
    //MUL
    t52 = t52 * t54;
    //Instruction 13763
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 13764
    //MOV
    t5.y = t4.y;
    //Instruction 13765
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 13766
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 13767
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 13768
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 13769
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 13770
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 13771
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 13772
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 13773
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 13774
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 13775
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 13776
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 13777
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 13778
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 13779
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 13780
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 13781
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 13782
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 13783
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 13784
    //MUL
    t4 = t34.yyyy * t4;
    //Instruction 13785
    //MAD
    t0 = t2 * t34.xxxx + t4;
    //Instruction 13786
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 13787
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 13788
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 13789
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 13790
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 13791
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 13792
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 13793
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 13794
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 13795
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 13796
    //DP3
    t52 = dot(t4.xyz, t4.xyz);
    //Instruction 13797
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 13798
    //MUL
    t4.xyz = vec3(t52) * t4.xyz;
    //Instruction 13799
    //MUL
    t10_15.xyz = t0.wxy * t4.xyz;
    //Instruction 13800
    //MAD
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    //Instruction 13801
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 13802
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 13803
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 13804
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 13805
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 13806
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 13807
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 13808
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 13809
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 13810
    //ADD
    t6 = (-t3.zzzz) + unity_4LightPosY0;
    //Instruction 13811
    //ADD
    t7 = (-t3.wwww) + unity_4LightPosZ0;
    //Instruction 13812
    //MUL
    t8 = t6 * t6;
    //Instruction 13813
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 13814
    //MAD
    t8 = t7 * t7 + t8;
    //Instruction 13815
    //MUL
    t6 = t0.yyyy * t6;
    //Instruction 13816
    //MAD
    t2 = t2 * t0.xxxx + t6;
    //Instruction 13817
    //MAD
    t2 = t7 * t0.wwww + t2;
    //Instruction 13818
    //RSQ
    t6 = inversesqrt(t8);
    //Instruction 13819
    //MUL
    t2 = t2 * t6;
    //Instruction 13820
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 13821
    //MAD
    t6 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 13822
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 13823
    //MUL
    t2 = t2 * t6;
    //Instruction 13824
    //MUL
    t6.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 13825
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t2.xxx + t6.xyz;
    //Instruction 13826
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t2.zzz + t6.xyz;
    //Instruction 13827
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t2.www + t6.xyz;
    //Instruction 13828
    //ADD
    t6.xyz = t6.xyz + t16_16.xyz;
    //Instruction 13829
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 13830
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 13831
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 13832
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 13833
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 13834
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 13835
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 13836
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 13837
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 13838
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 13839
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 13840
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 13841
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 13842
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 13843
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 13844
    //MOV
    vs_TEXCOORD5.xyz = t6.xyz;
    //Instruction 13845
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 13453
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 13454
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 13455
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 13456
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 13457
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 13458
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 13459
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 13460
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 13461
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 13462
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 13463
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 13464
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 13465
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 13466
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 13467
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 13468
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 13469
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 13470
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 13471
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 13472
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 13473
    //MOV
    t0.w = 1.0;
    //Instruction 13474
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 13475
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 13476
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 13477
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 13478
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 13479
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 13480
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 13481
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 13482
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 13483
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 13484
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_20 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_19;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (FinalPosition_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_18.zxy) - (tmpvar_33.zxy * vRotatedWindVector_18.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_18, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_16 = vDirection_27;
    FinalPosition_19 = vPos_26;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_19;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_19 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_17 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_19 = vPos_67;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_16.x)
   + 
    (v_102.xyz * tmpvar_16.y)
  ) + (v_103.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_104;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = _Object2World[0].xyz;
  tmpvar_105[1] = _Object2World[1].xyz;
  tmpvar_105[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize((tmpvar_105 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_106;
  lowp vec3 tmpvar_107;
  tmpvar_107 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_107 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_108;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_5.x;
  tmpvar_109.y = worldBinormal_4.x;
  tmpvar_109.z = worldNormal_6.x;
  tmpvar_109.w = tmpvar_100.x;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_5.y;
  tmpvar_110.y = worldBinormal_4.y;
  tmpvar_110.z = worldNormal_6.y;
  tmpvar_110.w = tmpvar_100.y;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_5.z;
  tmpvar_111.y = worldBinormal_4.z;
  tmpvar_111.z = worldNormal_6.z;
  tmpvar_111.w = tmpvar_100.z;
  lowp vec4 tmpvar_112;
  tmpvar_112.w = 1.0;
  tmpvar_112.xyz = worldNormal_6;
  mediump vec4 normal_113;
  normal_113 = tmpvar_112;
  mediump vec3 x2_114;
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_113.xyzz * normal_113.yzzx);
  x2_114.x = dot (unity_SHBr, tmpvar_115);
  x2_114.y = dot (unity_SHBg, tmpvar_115);
  x2_114.z = dot (unity_SHBb, tmpvar_115);
  highp vec3 lightColor0_116;
  lightColor0_116 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_117;
  lightColor1_117 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_118;
  lightColor2_118 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_119;
  lightColor3_119 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_120;
  lightAttenSq_120 = unity_4LightAtten0;
  highp vec3 normal_121;
  normal_121 = worldNormal_6;
  highp vec3 col_122;
  highp vec4 ndotl_123;
  highp vec4 lengthSq_124;
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosX0 - tmpvar_100.x);
  highp vec4 tmpvar_126;
  tmpvar_126 = (unity_4LightPosY0 - tmpvar_100.y);
  highp vec4 tmpvar_127;
  tmpvar_127 = (unity_4LightPosZ0 - tmpvar_100.z);
  lengthSq_124 = (tmpvar_125 * tmpvar_125);
  lengthSq_124 = (lengthSq_124 + (tmpvar_126 * tmpvar_126));
  lengthSq_124 = (lengthSq_124 + (tmpvar_127 * tmpvar_127));
  ndotl_123 = (tmpvar_125 * normal_121.x);
  ndotl_123 = (ndotl_123 + (tmpvar_126 * normal_121.y));
  ndotl_123 = (ndotl_123 + (tmpvar_127 * normal_121.z));
  highp vec4 tmpvar_128;
  tmpvar_128 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_123 * inversesqrt(lengthSq_124)));
  ndotl_123 = tmpvar_128;
  highp vec4 tmpvar_129;
  tmpvar_129 = (tmpvar_128 * (1.0/((1.0 + 
    (lengthSq_124 * lightAttenSq_120)
  ))));
  col_122 = (lightColor0_116 * tmpvar_129.x);
  col_122 = (col_122 + (lightColor1_117 * tmpvar_129.y));
  col_122 = (col_122 + (lightColor2_118 * tmpvar_129.z));
  col_122 = (col_122 + (lightColor3_119 * tmpvar_129.w));
  tmpvar_8 = ((x2_114 + (unity_SHC.xyz * 
    ((normal_113.x * normal_113.x) - (normal_113.y * normal_113.y))
  )) + col_122);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_109;
  xlv_TEXCOORD1 = tmpvar_110;
  xlv_TEXCOORD2 = tmpvar_111;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_15.x)
   + 
    (v_101.xyz * tmpvar_15.y)
  ) + (v_102.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_5.x;
  tmpvar_108.y = worldBinormal_4.x;
  tmpvar_108.z = worldNormal_6.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_5.y;
  tmpvar_109.y = worldBinormal_4.y;
  tmpvar_109.z = worldNormal_6.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_5.z;
  tmpvar_110.y = worldBinormal_4.z;
  tmpvar_110.z = worldNormal_6.z;
  tmpvar_110.w = tmpvar_99.z;
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_6;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 13882
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 13883
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 13884
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 13885
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 13886
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 13887
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 13888
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 13889
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 13890
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 13891
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 13892
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 13893
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 13894
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 13895
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 13896
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 13897
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 13898
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 13899
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 13900
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 13901
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 13902
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 13903
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 13904
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 13905
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 13906
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 13907
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 13908
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 13909
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 13910
        //FRC
        t34.x = fract(t34.x);
        //Instruction 13911
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 13912
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 13913
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 13914
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 13915
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 13916
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 13917
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 13918
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 13919
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 13920
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 13921
        //IF
        if(tb51){
            //Instruction 13922
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 13923
            //FRC
            t5 = fract(t5);
            //Instruction 13924
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13925
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 13926
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 13927
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 13928
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 13929
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 13930
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13931
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 13932
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13933
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 13934
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13935
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 13936
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 13937
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 13938
            //SQRT
            t52 = sqrt(t52);
            //Instruction 13939
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 13940
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 13941
            //MUL
            t54 = t54 * t55;
            //Instruction 13942
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 13943
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 13944
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 13945
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 13946
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 13947
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 13948
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 13949
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 13950
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 13951
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 13952
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 13953
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 13954
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 13955
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 13956
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 13957
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 13958
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 13959
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 13960
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 13961
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 13962
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 13963
            //SQRT
            t54 = sqrt(t54);
            //Instruction 13964
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 13965
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 13966
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 13967
            //MUL
            t6.x = t54 * t55;
            //Instruction 13968
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 13969
            //LT
            tb20 = t20<(-t20);
            //Instruction 13970
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 13971
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 13972
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 13973
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 13974
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 13975
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 13976
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 13977
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13978
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 13979
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13980
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 13981
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 13982
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 13983
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 13984
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 13985
            //LOG
            t51 = log2(t51);
            //Instruction 13986
            //MUL
            t51 = t51 * t7.y;
            //Instruction 13987
            //EXP
            t51 = exp2(t51);
            //Instruction 13988
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 13989
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 13990
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 13991
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 13992
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 13993
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 13994
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 13995
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 13996
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 13997
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 13998
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 13999
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 14000
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 14001
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 14002
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 14003
            //MOV
            t11.z = t12.x;
            //Instruction 14004
            //MOV
            t11.w = t10.x;
            //Instruction 14005
            //MOV
            t13.z = t9.y;
            //Instruction 14006
            //MOV
            t13.w = t14.y;
            //Instruction 14007
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 14008
            //MOV
            t14.w = t13.y;
            //Instruction 14009
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 14010
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 14011
            //MOV
            t10.w = t11.y;
            //Instruction 14012
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 14013
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 14014
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 14015
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 14016
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 14017
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 14018
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 14019
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 14020
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 14021
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 14022
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 14023
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 14024
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 14025
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 14026
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 14027
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 14028
        //ELSE
        } else {
            //Instruction 14029
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 14030
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 14031
        //ENDIF
        }
        //Instruction 14032
    //ELSE
    } else {
        //Instruction 14033
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 14034
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 14035
    //ENDIF
    }
    //Instruction 14036
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 14037
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 14038
    //IF
    if(tb52){
        //Instruction 14039
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 14040
        //IF
        if(tb52){
            //Instruction 14041
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14042
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 14043
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 14044
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 14045
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 14046
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 14047
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14048
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 14049
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14050
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 14051
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 14052
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 14053
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14054
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 14055
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 14056
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 14057
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14058
            //FRC
            t2 = fract(t2);
            //Instruction 14059
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14060
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 14061
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14062
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14063
            //ADD
            t2 = t2 + t2;
            //Instruction 14064
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 14065
            //LT
            tb54 = t7.w<0.0;
            //Instruction 14066
            //MOV
            t7.y = (-t7.w);
            //Instruction 14067
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 14068
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 14069
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 14070
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 14071
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 14072
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 14073
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 14074
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14075
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14076
            //MUL
            t56 = t2.x * t56;
            //Instruction 14077
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 14078
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14079
            //MUL
            t54 = t54 * t55;
            //Instruction 14080
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 14081
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 14082
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14083
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14084
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14085
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 14086
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 14087
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14088
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 14089
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14090
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 14091
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 14092
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 14093
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 14094
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14095
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 14096
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 14097
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 14098
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14099
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 14100
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 14101
        //ELSE
        } else {
            //Instruction 14102
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14103
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14104
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14105
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 14106
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 14107
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 14108
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14109
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 14110
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 14111
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14112
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 14113
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14114
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 14115
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14116
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14117
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 14118
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 14119
            //LT
            tb0 = t2.w<0.0;
            //Instruction 14120
            //MOV
            t2.y = (-t2.w);
            //Instruction 14121
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 14122
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 14123
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 14124
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 14125
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 14126
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 14127
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 14128
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14129
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14130
            //MUL
            t54 = t54 * t6.x;
            //Instruction 14131
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 14132
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 14133
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 14134
        //ENDIF
        }
        //Instruction 14135
    //ENDIF
    }
    //Instruction 14136
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 14137
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 14138
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14139
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 14140
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 14141
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 14142
    //NE
    tb54 = t52!=0.0;
    //Instruction 14143
    //LOG
    t55 = log2(t52);
    //Instruction 14144
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 14145
    //EXP
    t55 = exp2(t55);
    //Instruction 14146
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 14147
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14148
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14149
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 14150
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 14151
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14152
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 14153
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14154
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 14155
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 14156
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 14157
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14158
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 14159
    //MUL
    t52 = t52 * t54;
    //Instruction 14160
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 14161
    //MOV
    t5.y = t4.y;
    //Instruction 14162
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 14163
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 14164
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 14165
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 14166
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 14167
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 14168
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 14169
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 14170
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 14171
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 14172
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 14173
    //MAD
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 14174
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 14175
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 14176
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 14177
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 14178
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 14179
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 14180
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 14181
    //MUL
    t5 = t34.yyyy * t5;
    //Instruction 14182
    //MAD
    t0 = t2 * t34.xxxx + t5;
    //Instruction 14183
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 14184
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 14185
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 14186
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 14187
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 14188
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 14189
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 14190
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 14191
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 14192
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 14193
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 14194
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 14195
    //MUL
    t5.xyz = vec3(t52) * t5.xyz;
    //Instruction 14196
    //MUL
    t10_15.xyz = t0.wxy * t5.xyz;
    //Instruction 14197
    //MAD
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    //Instruction 14198
    //MUL
    t6.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 14199
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 14200
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 14201
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 14202
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 14203
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 14204
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 14205
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 14206
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 14207
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 14208
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 14209
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 14210
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 14211
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 14212
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 14213
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 14214
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 14215
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 14216
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 14217
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 14218
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 14219
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 14220
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 14221
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 14222
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 14223
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 14224
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 14225
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 14226
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 14227
    //MOV
    vs_TEXCOORD6 = t2;
    //Instruction 14228
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 14229
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 14230
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 13846
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 13847
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 13848
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 13849
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 13850
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 13851
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 13852
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 13853
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 13854
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 13855
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 13856
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 13857
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 13858
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 13859
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 13860
    //SAMPLE_C_LZ
    vec3 txVec35 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec35, 0.0);
    //Instruction 13861
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 13862
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 13863
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 13864
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 13865
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 13866
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 13867
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 13868
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 13869
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 13870
    //MOV
    t0.w = 1.0;
    //Instruction 13871
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 13872
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 13873
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 13874
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 13875
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 13876
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 13877
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 13878
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 13879
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 13880
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 13881
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_20 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_19;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (FinalPosition_19 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_18.zxy) - (tmpvar_33.zxy * vRotatedWindVector_18.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_18, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_16 = vDirection_27;
    FinalPosition_19 = vPos_26;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_19;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_19 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_17 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_19 = vPos_67;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_19;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_19 = vPos_92;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_16.x)
   + 
    (v_102.xyz * tmpvar_16.y)
  ) + (v_103.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_104;
  highp mat3 tmpvar_105;
  tmpvar_105[0] = _Object2World[0].xyz;
  tmpvar_105[1] = _Object2World[1].xyz;
  tmpvar_105[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize((tmpvar_105 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_106;
  lowp vec3 tmpvar_107;
  tmpvar_107 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_108;
  tmpvar_108 = (tmpvar_107 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_108;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_5.x;
  tmpvar_109.y = worldBinormal_4.x;
  tmpvar_109.z = worldNormal_6.x;
  tmpvar_109.w = tmpvar_100.x;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_5.y;
  tmpvar_110.y = worldBinormal_4.y;
  tmpvar_110.z = worldNormal_6.y;
  tmpvar_110.w = tmpvar_100.y;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_5.z;
  tmpvar_111.y = worldBinormal_4.z;
  tmpvar_111.z = worldNormal_6.z;
  tmpvar_111.w = tmpvar_100.z;
  lowp vec4 tmpvar_112;
  tmpvar_112.w = 1.0;
  tmpvar_112.xyz = worldNormal_6;
  mediump vec4 normal_113;
  normal_113 = tmpvar_112;
  mediump vec3 x2_114;
  mediump vec4 tmpvar_115;
  tmpvar_115 = (normal_113.xyzz * normal_113.yzzx);
  x2_114.x = dot (unity_SHBr, tmpvar_115);
  x2_114.y = dot (unity_SHBg, tmpvar_115);
  x2_114.z = dot (unity_SHBb, tmpvar_115);
  highp vec3 lightColor0_116;
  lightColor0_116 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_117;
  lightColor1_117 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_118;
  lightColor2_118 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_119;
  lightColor3_119 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_120;
  lightAttenSq_120 = unity_4LightAtten0;
  highp vec3 normal_121;
  normal_121 = worldNormal_6;
  highp vec3 col_122;
  highp vec4 ndotl_123;
  highp vec4 lengthSq_124;
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosX0 - tmpvar_100.x);
  highp vec4 tmpvar_126;
  tmpvar_126 = (unity_4LightPosY0 - tmpvar_100.y);
  highp vec4 tmpvar_127;
  tmpvar_127 = (unity_4LightPosZ0 - tmpvar_100.z);
  lengthSq_124 = (tmpvar_125 * tmpvar_125);
  lengthSq_124 = (lengthSq_124 + (tmpvar_126 * tmpvar_126));
  lengthSq_124 = (lengthSq_124 + (tmpvar_127 * tmpvar_127));
  ndotl_123 = (tmpvar_125 * normal_121.x);
  ndotl_123 = (ndotl_123 + (tmpvar_126 * normal_121.y));
  ndotl_123 = (ndotl_123 + (tmpvar_127 * normal_121.z));
  highp vec4 tmpvar_128;
  tmpvar_128 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_123 * inversesqrt(lengthSq_124)));
  ndotl_123 = tmpvar_128;
  highp vec4 tmpvar_129;
  tmpvar_129 = (tmpvar_128 * (1.0/((1.0 + 
    (lengthSq_124 * lightAttenSq_120)
  ))));
  col_122 = (lightColor0_116 * tmpvar_129.x);
  col_122 = (col_122 + (lightColor1_117 * tmpvar_129.y));
  col_122 = (col_122 + (lightColor2_118 * tmpvar_129.z));
  col_122 = (col_122 + (lightColor3_119 * tmpvar_129.w));
  tmpvar_8 = ((x2_114 + (unity_SHC.xyz * 
    ((normal_113.x * normal_113.x) - (normal_113.y * normal_113.y))
  )) + col_122);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_109;
  xlv_TEXCOORD1 = tmpvar_110;
  xlv_TEXCOORD2 = tmpvar_111;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 14012
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14013
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 14014
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 14015
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 14016
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 14017
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 14018
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 14019
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 14020
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 14021
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 14022
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 14023
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14024
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 14025
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 14026
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 14027
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 14028
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 14029
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 14030
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 14031
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 14032
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 14033
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 14034
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 14035
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 14036
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 14037
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 14038
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 14039
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 14040
        //FRC
        t34.x = fract(t34.x);
        //Instruction 14041
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 14042
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 14043
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 14044
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 14045
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 14046
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 14047
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 14048
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 14049
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 14050
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 14051
        //IF
        if(tb51){
            //Instruction 14052
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 14053
            //FRC
            t5 = fract(t5);
            //Instruction 14054
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14055
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 14056
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 14057
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 14058
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 14059
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 14060
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 14061
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 14062
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14063
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 14064
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14065
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 14066
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 14067
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 14068
            //SQRT
            t52 = sqrt(t52);
            //Instruction 14069
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 14070
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 14071
            //MUL
            t54 = t54 * t55;
            //Instruction 14072
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 14073
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 14074
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 14075
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 14076
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 14077
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 14078
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 14079
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 14080
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 14081
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 14082
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 14083
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 14084
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 14085
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 14086
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 14087
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 14088
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 14089
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 14090
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 14091
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 14092
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 14093
            //SQRT
            t54 = sqrt(t54);
            //Instruction 14094
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 14095
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 14096
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 14097
            //MUL
            t6.x = t54 * t55;
            //Instruction 14098
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 14099
            //LT
            tb20 = t20<(-t20);
            //Instruction 14100
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 14101
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 14102
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 14103
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 14104
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 14105
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 14106
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 14107
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14108
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 14109
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14110
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 14111
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 14112
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 14113
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 14114
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 14115
            //LOG
            t51 = log2(t51);
            //Instruction 14116
            //MUL
            t51 = t51 * t7.y;
            //Instruction 14117
            //EXP
            t51 = exp2(t51);
            //Instruction 14118
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 14119
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 14120
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 14121
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 14122
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 14123
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 14124
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 14125
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 14126
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 14127
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 14128
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 14129
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 14130
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 14131
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 14132
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 14133
            //MOV
            t11.z = t12.x;
            //Instruction 14134
            //MOV
            t11.w = t10.x;
            //Instruction 14135
            //MOV
            t13.z = t9.y;
            //Instruction 14136
            //MOV
            t13.w = t14.y;
            //Instruction 14137
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 14138
            //MOV
            t14.w = t13.y;
            //Instruction 14139
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 14140
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 14141
            //MOV
            t10.w = t11.y;
            //Instruction 14142
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 14143
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 14144
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 14145
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 14146
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 14147
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 14148
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 14149
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 14150
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 14151
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 14152
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 14153
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 14154
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 14155
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 14156
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 14157
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 14158
        //ELSE
        } else {
            //Instruction 14159
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 14160
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 14161
        //ENDIF
        }
        //Instruction 14162
    //ELSE
    } else {
        //Instruction 14163
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 14164
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 14165
    //ENDIF
    }
    //Instruction 14166
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 14167
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 14168
    //IF
    if(tb52){
        //Instruction 14169
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 14170
        //IF
        if(tb52){
            //Instruction 14171
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14172
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 14173
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 14174
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 14175
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 14176
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 14177
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14178
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 14179
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14180
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 14181
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 14182
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 14183
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14184
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 14185
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 14186
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 14187
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14188
            //FRC
            t2 = fract(t2);
            //Instruction 14189
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14190
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 14191
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14192
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14193
            //ADD
            t2 = t2 + t2;
            //Instruction 14194
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 14195
            //LT
            tb54 = t7.w<0.0;
            //Instruction 14196
            //MOV
            t7.y = (-t7.w);
            //Instruction 14197
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 14198
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 14199
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 14200
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 14201
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 14202
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 14203
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 14204
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14205
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14206
            //MUL
            t56 = t2.x * t56;
            //Instruction 14207
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 14208
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14209
            //MUL
            t54 = t54 * t55;
            //Instruction 14210
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 14211
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 14212
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14213
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14214
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14215
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 14216
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 14217
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14218
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 14219
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14220
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 14221
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 14222
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 14223
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 14224
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14225
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 14226
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 14227
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 14228
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14229
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 14230
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 14231
        //ELSE
        } else {
            //Instruction 14232
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14233
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14234
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14235
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 14236
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 14237
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 14238
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14239
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 14240
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 14241
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14242
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 14243
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14244
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 14245
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14246
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14247
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 14248
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 14249
            //LT
            tb0 = t2.w<0.0;
            //Instruction 14250
            //MOV
            t2.y = (-t2.w);
            //Instruction 14251
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 14252
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 14253
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 14254
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 14255
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 14256
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 14257
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 14258
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14259
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14260
            //MUL
            t54 = t54 * t6.x;
            //Instruction 14261
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 14262
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 14263
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 14264
        //ENDIF
        }
        //Instruction 14265
    //ENDIF
    }
    //Instruction 14266
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 14267
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 14268
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14269
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 14270
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 14271
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 14272
    //NE
    tb54 = t52!=0.0;
    //Instruction 14273
    //LOG
    t55 = log2(t52);
    //Instruction 14274
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 14275
    //EXP
    t55 = exp2(t55);
    //Instruction 14276
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 14277
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14278
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14279
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 14280
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 14281
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14282
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 14283
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14284
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 14285
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 14286
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 14287
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14288
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 14289
    //MUL
    t52 = t52 * t54;
    //Instruction 14290
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 14291
    //MOV
    t5.y = t4.y;
    //Instruction 14292
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 14293
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 14294
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 14295
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 14296
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 14297
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 14298
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 14299
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 14300
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 14301
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 14302
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 14303
    //MAD
    t4.xyz = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 14304
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 14305
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 14306
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 14307
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 14308
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 14309
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 14310
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 14311
    //MUL
    t5 = t34.yyyy * t5;
    //Instruction 14312
    //MAD
    t0 = t2 * t34.xxxx + t5;
    //Instruction 14313
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 14314
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 14315
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 14316
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 14317
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 14318
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 14319
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 14320
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 14321
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 14322
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 14323
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 14324
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 14325
    //MUL
    t5.xyz = vec3(t52) * t5.xyz;
    //Instruction 14326
    //MUL
    t10_15.xyz = t0.wxy * t5.xyz;
    //Instruction 14327
    //MAD
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    //Instruction 14328
    //MUL
    t6.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 14329
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 14330
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 14331
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 14332
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 14333
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 14334
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 14335
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 14336
    //ADD
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 14337
    //ADD
    t7 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 14338
    //ADD
    t8 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 14339
    //MUL
    t9 = t7 * t7;
    //Instruction 14340
    //MAD
    t9 = t2 * t2 + t9;
    //Instruction 14341
    //MAD
    t9 = t8 * t8 + t9;
    //Instruction 14342
    //MUL
    t7 = t0.yyyy * t7;
    //Instruction 14343
    //MAD
    t2 = t2 * t0.xxxx + t7;
    //Instruction 14344
    //MAD
    t2 = t8 * t0.wwww + t2;
    //Instruction 14345
    //RSQ
    t7 = inversesqrt(t9);
    //Instruction 14346
    //MUL
    t2 = t2 * t7;
    //Instruction 14347
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 14348
    //MAD
    t7 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 14349
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 14350
    //MUL
    t2 = t2 * t7;
    //Instruction 14351
    //MUL
    t7.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 14352
    //MAD
    t7.xyz = unity_LightColor[0].xyz * t2.xxx + t7.xyz;
    //Instruction 14353
    //MAD
    t7.xyz = unity_LightColor[2].xyz * t2.zzz + t7.xyz;
    //Instruction 14354
    //MAD
    t7.xyz = unity_LightColor[3].xyz * t2.www + t7.xyz;
    //Instruction 14355
    //ADD
    t7.xyz = t7.xyz + t16_16.xyz;
    //Instruction 14356
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 14357
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 14358
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 14359
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 14360
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 14361
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 14362
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 14363
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 14364
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 14365
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 14366
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 14367
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 14368
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 14369
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 14370
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 14371
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 14372
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 14373
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 14374
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 14375
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 14376
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 14377
    //MOV
    vs_TEXCOORD6 = t2;
    //Instruction 14378
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 14379
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 14380
    //MOV
    vs_TEXCOORD5.xyz = t7.xyz;
    //Instruction 14381
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 13976
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 13977
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 13978
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 13979
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 13980
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 13981
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 13982
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 13983
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 13984
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 13985
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 13986
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 13987
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 13988
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 13989
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 13990
    //SAMPLE_C_LZ
    vec3 txVec47 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec47, 0.0);
    //Instruction 13991
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 13992
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 13993
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 13994
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 13995
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 13996
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 13997
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 13998
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 13999
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 14000
    //MOV
    t0.w = 1.0;
    //Instruction 14001
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 14002
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 14003
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 14004
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14005
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 14006
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 14007
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 14008
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 14009
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 14010
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14011
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_54;
  tmpvar_54.w = 1.0;
  tmpvar_54.xyz = worldNormal_3;
  mediump vec4 normal_55;
  normal_55 = tmpvar_54;
  mediump vec3 x2_56;
  mediump vec4 tmpvar_57;
  tmpvar_57 = (normal_55.xyzz * normal_55.yzzx);
  x2_56.x = dot (unity_SHBr, tmpvar_57);
  x2_56.y = dot (unity_SHBg, tmpvar_57);
  x2_56.z = dot (unity_SHBb, tmpvar_57);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_56 + (unity_SHC.xyz * (
    (normal_55.x * normal_55.x)
   - 
    (normal_55.y * normal_55.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_4;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_12;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  tmpvar_13 = (xlv_TEXCOORD4 + x1_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_8 * tmpvar_13));
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 13695
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 13696
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 13697
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 13698
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 13699
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 13700
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 13701
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 13702
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 13703
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 13704
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 13705
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 13706
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 13707
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 13708
    //IF
    if(tb22){
        //Instruction 13709
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 13710
        //IF
        if(tb22){
            //Instruction 13711
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 13712
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 13713
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 13714
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 13715
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 13716
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 13717
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13718
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 13719
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13720
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 13721
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 13722
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 13723
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 13724
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13725
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 13726
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 13727
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 13728
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 13729
            //FRC
            t0 = fract(t0);
            //Instruction 13730
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 13731
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 13732
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 13733
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 13734
            //ADD
            t0 = t0 + t0;
            //Instruction 13735
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 13736
            //LT
            tb23 = t5.w<0.0;
            //Instruction 13737
            //MOV
            t5.y = (-t5.w);
            //Instruction 13738
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 13739
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 13740
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 13741
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 13742
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 13743
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 13744
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 13745
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13746
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13747
            //MUL
            t25 = t0.x * t25;
            //Instruction 13748
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 13749
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 13750
            //MUL
            t23 = t23 * t24;
            //Instruction 13751
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 13752
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 13753
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13754
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 13755
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13756
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 13757
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 13758
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13759
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 13760
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13761
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 13762
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 13763
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 13764
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 13765
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 13766
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 13767
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 13768
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 13769
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 13770
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 13771
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 13772
        //ELSE
        } else {
            //Instruction 13773
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13774
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 13775
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13776
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 13777
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 13778
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 13779
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 13780
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13781
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 13782
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 13783
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 13784
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 13785
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13786
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 13787
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 13788
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 13789
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 13790
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 13791
            //LT
            tb22 = t0.w<0.0;
            //Instruction 13792
            //MOV
            t0.y = (-t0.w);
            //Instruction 13793
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 13794
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 13795
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 13796
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 13797
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 13798
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 13799
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 13800
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13801
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13802
            //MUL
            t24 = t24 * t4.x;
            //Instruction 13803
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 13804
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 13805
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 13806
        //ENDIF
        }
        //Instruction 13807
    //ENDIF
    }
    //Instruction 13808
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 13809
    //SQRT
    t22 = sqrt(t22);
    //Instruction 13810
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 13811
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 13812
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 13813
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 13814
    //NE
    tb3 = t23!=0.0;
    //Instruction 13815
    //LOG
    t10 = log2(t23);
    //Instruction 13816
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 13817
    //EXP
    t10 = exp2(t10);
    //Instruction 13818
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 13819
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 13820
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 13821
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 13822
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 13823
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 13824
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 13825
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 13826
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 13827
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 13828
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 13829
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 13830
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 13831
    //MUL
    t23 = t23 * t3.x;
    //Instruction 13832
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 13833
    //MOV
    t3.y = t2.y;
    //Instruction 13834
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 13835
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 13836
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 13837
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 13838
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 13839
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 13840
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 13841
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 13842
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 13843
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 13844
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 13845
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 13846
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 13847
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 13848
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 13849
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 13850
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 13851
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 13852
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 13853
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 13854
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 13855
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 13856
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 13857
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 13858
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 13859
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 13860
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 13861
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 13862
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 13863
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 13864
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 13865
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 13866
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 13867
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 13868
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 13869
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 13870
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 13871
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 13872
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 13873
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump float t16_9;
void main()
{
    //Instruction 13679
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 13680
    //MOV
    t16_0.w = 1.0;
    //Instruction 13681
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 13682
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 13683
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 13684
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD4.xyz;
    //Instruction 13685
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 13686
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 13687
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 13688
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 13689
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 13690
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 13691
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_9) + t16_0.xyz;
    //Instruction 13692
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 13693
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 13694
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_3;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_9));
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_57 + (unity_SHC.xyz * (
    (normal_56.x * normal_56.x)
   - 
    (normal_56.y * normal_56.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_13 = tmpvar_14;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_13;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_51;
  tmpvar_51 = (_Object2World * tmpvar_9).xyz;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_56;
  tmpvar_56.w = 1.0;
  tmpvar_56.xyz = worldNormal_3;
  mediump vec4 normal_57;
  normal_57 = tmpvar_56;
  mediump vec3 x2_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_57.xyzz * normal_57.yzzx);
  x2_58.x = dot (unity_SHBr, tmpvar_59);
  x2_58.y = dot (unity_SHBg, tmpvar_59);
  x2_58.z = dot (unity_SHBb, tmpvar_59);
  highp vec3 lightColor0_60;
  lightColor0_60 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_61;
  lightColor1_61 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_62;
  lightColor2_62 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_63;
  lightColor3_63 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_64;
  lightAttenSq_64 = unity_4LightAtten0;
  highp vec3 normal_65;
  normal_65 = worldNormal_3;
  highp vec3 col_66;
  highp vec4 ndotl_67;
  highp vec4 lengthSq_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_4LightPosX0 - tmpvar_51.x);
  highp vec4 tmpvar_70;
  tmpvar_70 = (unity_4LightPosY0 - tmpvar_51.y);
  highp vec4 tmpvar_71;
  tmpvar_71 = (unity_4LightPosZ0 - tmpvar_51.z);
  lengthSq_68 = (tmpvar_69 * tmpvar_69);
  lengthSq_68 = (lengthSq_68 + (tmpvar_70 * tmpvar_70));
  lengthSq_68 = (lengthSq_68 + (tmpvar_71 * tmpvar_71));
  ndotl_67 = (tmpvar_69 * normal_65.x);
  ndotl_67 = (ndotl_67 + (tmpvar_70 * normal_65.y));
  ndotl_67 = (ndotl_67 + (tmpvar_71 * normal_65.z));
  highp vec4 tmpvar_72;
  tmpvar_72 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_67 * inversesqrt(lengthSq_68)));
  ndotl_67 = tmpvar_72;
  highp vec4 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * (1.0/((1.0 + 
    (lengthSq_68 * lightAttenSq_64)
  ))));
  col_66 = (lightColor0_60 * tmpvar_73.x);
  col_66 = (col_66 + (lightColor1_61 * tmpvar_73.y));
  col_66 = (col_66 + (lightColor2_62 * tmpvar_73.z));
  col_66 = (col_66 + (lightColor3_63 * tmpvar_73.w));
  tmpvar_6 = ((x2_58 + (unity_SHC.xyz * 
    ((normal_57.x * normal_57.x) - (normal_57.y * normal_57.y))
  )) + col_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_51;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_4;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_12;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  tmpvar_13 = (xlv_TEXCOORD4 + x1_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_8 * tmpvar_13));
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 13890
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 13891
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 13892
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 13893
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 13894
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 13895
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 13896
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 13897
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 13898
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 13899
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 13900
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 13901
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 13902
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 13903
    //IF
    if(tb22){
        //Instruction 13904
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 13905
        //IF
        if(tb22){
            //Instruction 13906
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 13907
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 13908
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 13909
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 13910
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 13911
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 13912
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13913
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 13914
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13915
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 13916
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 13917
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 13918
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 13919
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13920
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 13921
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 13922
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 13923
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 13924
            //FRC
            t0 = fract(t0);
            //Instruction 13925
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 13926
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 13927
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 13928
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 13929
            //ADD
            t0 = t0 + t0;
            //Instruction 13930
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 13931
            //LT
            tb23 = t5.w<0.0;
            //Instruction 13932
            //MOV
            t5.y = (-t5.w);
            //Instruction 13933
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 13934
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 13935
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 13936
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 13937
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 13938
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 13939
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 13940
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13941
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13942
            //MUL
            t25 = t0.x * t25;
            //Instruction 13943
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 13944
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 13945
            //MUL
            t23 = t23 * t24;
            //Instruction 13946
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 13947
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 13948
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13949
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 13950
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 13951
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 13952
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 13953
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 13954
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 13955
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 13956
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 13957
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 13958
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 13959
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 13960
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 13961
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 13962
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 13963
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 13964
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 13965
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 13966
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 13967
        //ELSE
        } else {
            //Instruction 13968
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 13969
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 13970
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13971
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 13972
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 13973
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 13974
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 13975
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 13976
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 13977
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 13978
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 13979
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 13980
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 13981
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 13982
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 13983
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 13984
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 13985
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 13986
            //LT
            tb22 = t0.w<0.0;
            //Instruction 13987
            //MOV
            t0.y = (-t0.w);
            //Instruction 13988
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 13989
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 13990
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 13991
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 13992
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 13993
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 13994
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 13995
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 13996
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 13997
            //MUL
            t24 = t24 * t4.x;
            //Instruction 13998
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 13999
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14000
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 14001
        //ENDIF
        }
        //Instruction 14002
    //ENDIF
    }
    //Instruction 14003
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 14004
    //SQRT
    t22 = sqrt(t22);
    //Instruction 14005
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14006
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 14007
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 14008
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 14009
    //NE
    tb3 = t23!=0.0;
    //Instruction 14010
    //LOG
    t10 = log2(t23);
    //Instruction 14011
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 14012
    //EXP
    t10 = exp2(t10);
    //Instruction 14013
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 14014
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14015
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14016
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 14017
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 14018
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14019
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 14020
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14021
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 14022
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 14023
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 14024
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14025
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 14026
    //MUL
    t23 = t23 * t3.x;
    //Instruction 14027
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 14028
    //MOV
    t3.y = t2.y;
    //Instruction 14029
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 14030
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 14031
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 14032
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 14033
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 14034
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 14035
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 14036
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 14037
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 14038
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 14039
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 14040
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 14041
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 14042
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 14043
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 14044
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 14045
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 14046
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 14047
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 14048
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 14049
    //MAD
    t2.xyz = t2.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 14050
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 14051
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 14052
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 14053
    //MAD
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    //Instruction 14054
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 14055
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 14056
    //MUL
    t2.xyz = vec3(t22) * t2.xyz;
    //Instruction 14057
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 14058
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 14059
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 14060
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 14061
    //MUL
    t16_27 = t2.y * t2.y;
    //Instruction 14062
    //MAD
    t16_27 = t2.x * t2.x + (-t16_27);
    //Instruction 14063
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 14064
    //ADD
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 14065
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 14066
    //ADD
    t4 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 14067
    //MUL
    t5 = t3 * t3;
    //Instruction 14068
    //MAD
    t5 = t0 * t0 + t5;
    //Instruction 14069
    //MAD
    t5 = t4 * t4 + t5;
    //Instruction 14070
    //MUL
    t3 = t2.yyyy * t3;
    //Instruction 14071
    //MAD
    t0 = t0 * t2.xxxx + t3;
    //Instruction 14072
    //MAD
    t0 = t4 * t2.zzzz + t0;
    //Instruction 14073
    //RSQ
    t3 = inversesqrt(t5);
    //Instruction 14074
    //MUL
    t0 = t0 * t3;
    //Instruction 14075
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 14076
    //MAD
    t3 = t5 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 14077
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 14078
    //MUL
    t0 = t0 * t3;
    //Instruction 14079
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 14080
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 14081
    //MAD
    t3.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 14082
    //MAD
    t3.xyz = unity_LightColor[3].xyz * t0.www + t3.xyz;
    //Instruction