(1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 30743
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 30744
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 30745
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 30746
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 30747
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 30748
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 30749
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 30750
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 30751
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 30752
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 30753
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 30754
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 30755
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 30756
    //LT
    tb20 = in_TEXCOORD0.x<0.500000;
    //Instruction 30757
    //AND
    t20 = tb20 ? 0.750000 : float(0.0);
    //Instruction 30758
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 30759
    //MAD
    t20 = t3.x * _ST_WindFrondRipple.z + t20;
    //Instruction 30760
    //ADD
    t20 = t20 + 0.500000;
    //Instruction 30761
    //FRC
    t20 = fract(t20);
    //Instruction 30762
    //MAD
    t20 = t20 * 2.000000 + -1.0;
    //Instruction 30763
    //MUL
    t3.x = abs(t20) * abs(t20);
    //Instruction 30764
    //MAD
    t20 = -abs(t20) * 2.000000 + 3.000000;
    //Instruction 30765
    //MAD
    t20 = t3.x * t20 + -0.500000;
    //Instruction 30766
    //MUL
    t20 = t20 * in_TEXCOORD2.y;
    //Instruction 30767
    //DP2
    t20 = dot(_ST_WindFrondRipple.yy, vec2(t20));
    //Instruction 30768
    //MAD
    t3.xyz = vec3(t20) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 30769
    //MOVC
    t2.xyz = (bool(tb19)) ? t3.xyz : t2.xyz;
    //Instruction 30770
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 30771
    //IF
    if(tb20){
        //Instruction 30772
        //IF
        if(tb19){
            //Instruction 30773
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 30774
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 30775
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 30776
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 30777
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 30778
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 30779
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30780
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 30781
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30782
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 30783
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 30784
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 30785
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 30786
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30787
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 30788
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 30789
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 30790
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 30791
            //FRC
            t0 = fract(t0);
            //Instruction 30792
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 30793
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 30794
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 30795
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 30796
            //ADD
            t0 = t0 + t0;
            //Instruction 30797
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 30798
            //LT
            tb20 = t5.w<0.0;
            //Instruction 30799
            //MOV
            t5.y = (-t5.w);
            //Instruction 30800
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 30801
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 30802
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 30803
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 30804
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 30805
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 30806
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 30807
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30808
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30809
            //MUL
            t22 = t0.x * t22;
            //Instruction 30810
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 30811
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 30812
            //MUL
            t20 = t20 * t21;
            //Instruction 30813
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 30814
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 30815
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30816
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 30817
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30818
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 30819
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 30820
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 30821
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 30822
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 30823
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 30824
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 30825
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 30826
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 30827
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 30828
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 30829
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 30830
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 30831
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 30832
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 30833
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 30834
        //ELSE
        } else {
            //Instruction 30835
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30836
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 30837
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30838
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 30839
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 30840
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 30841
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 30842
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30843
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 30844
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 30845
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 30846
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 30847
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30848
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 30849
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 30850
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 30851
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 30852
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 30853
            //LT
            tb19 = t0.w<0.0;
            //Instruction 30854
            //MOV
            t0.y = (-t0.w);
            //Instruction 30855
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 30856
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 30857
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 30858
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 30859
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 30860
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 30861
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 30862
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30863
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30864
            //MUL
            t21 = t21 * t4.x;
            //Instruction 30865
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 30866
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 30867
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 30868
        //ENDIF
        }
        //Instruction 30869
    //ENDIF
    }
    //Instruction 30870
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 30871
    //SQRT
    t19 = sqrt(t19);
    //Instruction 30872
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 30873
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 30874
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 30875
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 30876
    //NE
    tb3 = t20!=0.0;
    //Instruction 30877
    //LOG
    t9 = log2(t20);
    //Instruction 30878
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 30879
    //EXP
    t9 = exp2(t9);
    //Instruction 30880
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 30881
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 30882
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 30883
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 30884
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 30885
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 30886
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 30887
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 30888
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 30889
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 30890
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 30891
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 30892
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 30893
    //MUL
    t20 = t20 * t3.x;
    //Instruction 30894
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 30895
    //MOV
    t3.y = t2.y;
    //Instruction 30896
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 30897
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 30898
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 30899
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 30900
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 30901
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 30902
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 30903
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 30904
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 30905
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 30906
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 30907
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 30908
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 30909
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 30910
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 30911
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 30912
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 30913
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 30914
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 30915
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 30916
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 30917
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 30918
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 30919
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 30920
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 30921
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 30922
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 30923
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 30924
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 30925
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 30926
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 30927
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 30928
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 30725
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 30726
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 30727
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 30728
    //LT
    tb0 = t10_1<0.0;
    //Instruction 30729
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 30730
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 30731
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 30732
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 30733
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 30734
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 30735
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 30736
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 30737
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 30738
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 30739
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 30740
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 30741
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 30742
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_20 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 30253
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 30254
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 30255
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 30256
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 30257
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 30258
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 30259
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 30260
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 30261
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 30262
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 30263
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 30264
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 30265
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 30266
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 30267
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 30268
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 30269
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 30270
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 30271
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 30272
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 30273
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 30274
    //LT
    tb24 = in_TEXCOORD0.x<0.500000;
    //Instruction 30275
    //AND
    t24 = tb24 ? 0.750000 : float(0.0);
    //Instruction 30276
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 30277
    //MAD
    t24 = t4.x * _ST_WindFrondRipple.z + t24;
    //Instruction 30278
    //ADD
    t24 = t24 + 0.500000;
    //Instruction 30279
    //FRC
    t24 = fract(t24);
    //Instruction 30280
    //MAD
    t24 = t24 * 2.000000 + -1.0;
    //Instruction 30281
    //MUL
    t4.x = abs(t24) * abs(t24);
    //Instruction 30282
    //MAD
    t24 = -abs(t24) * 2.000000 + 3.000000;
    //Instruction 30283
    //MAD
    t24 = t4.x * t24 + -0.500000;
    //Instruction 30284
    //MUL
    t24 = t24 * in_TEXCOORD2.y;
    //Instruction 30285
    //DP2
    t24 = dot(_ST_WindFrondRipple.yy, vec2(t24));
    //Instruction 30286
    //MAD
    t4.xyz = vec3(t24) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 30287
    //MOVC
    t3.xyz = (bool(tb22)) ? t4.xyz : t3.xyz;
    //Instruction 30288
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 30289
    //IF
    if(tb24){
        //Instruction 30290
        //IF
        if(tb22){
            //Instruction 30291
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 30292
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 30293
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 30294
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 30295
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 30296
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 30297
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30298
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30299
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30300
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 30301
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 30302
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 30303
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30304
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 30305
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 30306
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 30307
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 30308
            //FRC
            t2 = fract(t2);
            //Instruction 30309
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 30310
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 30311
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 30312
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 30313
            //ADD
            t2 = t2 + t2;
            //Instruction 30314
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 30315
            //LT
            tb24 = t6.w<0.0;
            //Instruction 30316
            //MOV
            t6.y = (-t6.w);
            //Instruction 30317
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 30318
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 30319
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 30320
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 30321
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 30322
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 30323
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 30324
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30325
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30326
            //MUL
            t26 = t2.x * t26;
            //Instruction 30327
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 30328
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 30329
            //MUL
            t24 = t24 * t25;
            //Instruction 30330
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 30331
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30332
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30333
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 30334
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30335
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 30336
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 30337
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 30338
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 30339
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 30340
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 30341
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 30342
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 30343
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 30344
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 30345
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 30346
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 30347
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 30348
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 30349
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 30350
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 30351
        //ELSE
        } else {
            //Instruction 30352
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30353
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 30354
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30355
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 30356
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 30357
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 30358
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30359
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 30360
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 30361
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 30362
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30363
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30364
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 30365
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 30366
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 30367
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 30368
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 30369
            //LT
            tb0 = t2.w<0.0;
            //Instruction 30370
            //MOV
            t2.y = (-t2.w);
            //Instruction 30371
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 30372
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 30373
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 30374
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 30375
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 30376
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 30377
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 30378
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30379
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30380
            //MUL
            t24 = t24 * t5.x;
            //Instruction 30381
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 30382
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 30383
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30384
        //ENDIF
        }
        //Instruction 30385
    //ENDIF
    }
    //Instruction 30386
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 30387
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 30388
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 30389
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 30390
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 30391
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 30392
    //NE
    tb24 = t22!=0.0;
    //Instruction 30393
    //LOG
    t4.x = log2(t22);
    //Instruction 30394
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 30395
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 30396
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 30397
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 30398
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 30399
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 30400
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 30401
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 30402
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 30403
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 30404
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 30405
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 30406
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 30407
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 30408
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 30409
    //MUL
    t22 = t22 * t24;
    //Instruction 30410
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 30411
    //MOV
    t4.y = t3.y;
    //Instruction 30412
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 30413
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 30414
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 30415
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 30416
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 30417
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 30418
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 30419
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 30420
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 30421
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 30422
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 30423
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 30424
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 30425
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 30426
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 30427
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 30428
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 30429
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 30430
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 30431
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 30432
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 30433
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 30434
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 30435
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 30436
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 30437
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 30438
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 30439
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 30440
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 30441
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 30442
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 30443
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 30444
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 30221
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 30222
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 30223
    //LT
    tb12 = t10_1<0.0;
    //Instruction 30224
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 30225
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 30226
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 30227
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 30228
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 30229
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 30230
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 30231
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 30232
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 30233
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 30234
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 30235
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 30236
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 30237
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 30238
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 30239
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 30240
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 30241
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 30242
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 30243
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 30244
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 30245
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 30246
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 30247
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 30248
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 30249
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 30250
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 30251
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 30252
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_20 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 30390
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 30391
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 30392
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 30393
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 30394
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 30395
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 30396
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 30397
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 30398
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 30399
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 30400
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 30401
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 30402
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 30403
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 30404
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 30405
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 30406
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 30407
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 30408
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 30409
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 30410
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 30411
    //LT
    tb24 = in_TEXCOORD0.x<0.500000;
    //Instruction 30412
    //AND
    t24 = tb24 ? 0.750000 : float(0.0);
    //Instruction 30413
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 30414
    //MAD
    t24 = t4.x * _ST_WindFrondRipple.z + t24;
    //Instruction 30415
    //ADD
    t24 = t24 + 0.500000;
    //Instruction 30416
    //FRC
    t24 = fract(t24);
    //Instruction 30417
    //MAD
    t24 = t24 * 2.000000 + -1.0;
    //Instruction 30418
    //MUL
    t4.x = abs(t24) * abs(t24);
    //Instruction 30419
    //MAD
    t24 = -abs(t24) * 2.000000 + 3.000000;
    //Instruction 30420
    //MAD
    t24 = t4.x * t24 + -0.500000;
    //Instruction 30421
    //MUL
    t24 = t24 * in_TEXCOORD2.y;
    //Instruction 30422
    //DP2
    t24 = dot(_ST_WindFrondRipple.yy, vec2(t24));
    //Instruction 30423
    //MAD
    t4.xyz = vec3(t24) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 30424
    //MOVC
    t3.xyz = (bool(tb22)) ? t4.xyz : t3.xyz;
    //Instruction 30425
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 30426
    //IF
    if(tb24){
        //Instruction 30427
        //IF
        if(tb22){
            //Instruction 30428
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 30429
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 30430
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 30431
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 30432
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 30433
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 30434
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30435
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30436
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30437
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 30438
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 30439
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 30440
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30441
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 30442
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 30443
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 30444
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 30445
            //FRC
            t2 = fract(t2);
            //Instruction 30446
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 30447
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 30448
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 30449
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 30450
            //ADD
            t2 = t2 + t2;
            //Instruction 30451
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 30452
            //LT
            tb24 = t6.w<0.0;
            //Instruction 30453
            //MOV
            t6.y = (-t6.w);
            //Instruction 30454
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 30455
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 30456
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 30457
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 30458
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 30459
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 30460
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 30461
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30462
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30463
            //MUL
            t26 = t2.x * t26;
            //Instruction 30464
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 30465
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 30466
            //MUL
            t24 = t24 * t25;
            //Instruction 30467
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 30468
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30469
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30470
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 30471
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30472
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 30473
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 30474
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 30475
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 30476
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 30477
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 30478
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 30479
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 30480
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 30481
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 30482
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 30483
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 30484
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 30485
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 30486
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 30487
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 30488
        //ELSE
        } else {
            //Instruction 30489
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30490
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 30491
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30492
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 30493
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 30494
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 30495
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30496
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 30497
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 30498
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 30499
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30500
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30501
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 30502
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 30503
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 30504
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 30505
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 30506
            //LT
            tb0 = t2.w<0.0;
            //Instruction 30507
            //MOV
            t2.y = (-t2.w);
            //Instruction 30508
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 30509
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 30510
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 30511
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 30512
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 30513
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 30514
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 30515
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30516
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30517
            //MUL
            t24 = t24 * t5.x;
            //Instruction 30518
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 30519
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 30520
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30521
        //ENDIF
        }
        //Instruction 30522
    //ENDIF
    }
    //Instruction 30523
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 30524
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 30525
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 30526
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 30527
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 30528
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 30529
    //NE
    tb24 = t22!=0.0;
    //Instruction 30530
    //LOG
    t4.x = log2(t22);
    //Instruction 30531
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 30532
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 30533
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 30534
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 30535
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 30536
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 30537
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 30538
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 30539
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 30540
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 30541
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 30542
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 30543
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 30544
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 30545
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 30546
    //MUL
    t22 = t22 * t24;
    //Instruction 30547
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 30548
    //MOV
    t4.y = t3.y;
    //Instruction 30549
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 30550
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 30551
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 30552
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 30553
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 30554
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 30555
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 30556
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 30557
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 30558
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 30559
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 30560
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 30561
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 30562
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 30563
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 30564
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 30565
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 30566
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 30567
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 30568
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 30569
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 30570
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 30571
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 30572
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 30573
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 30574
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 30575
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 30576
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 30577
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 30578
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 30579
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 30580
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 30581
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 30369
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 30370
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 30371
    //LT
    tb12 = t10_1<0.0;
    //Instruction 30372
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 30373
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 30374
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 30375
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 30376
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 30377
    //MAX
    t16_3 = max(t16_6.z, t16_6.y);
    //Instruction 30378
    //MAX
    t16_3 = max(t16_6.x, t16_3);
    //Instruction 30379
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 30380
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 30381
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 30382
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 30383
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 30384
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 30385
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 30386
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 30387
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 30388
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 30389
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_20 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_5.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 30968
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 30969
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 30970
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 30971
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 30972
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 30973
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 30974
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 30975
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 30976
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 30977
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 30978
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 30979
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 30980
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 30981
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 30982
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 30983
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 30984
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 30985
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 30986
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 30987
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 30988
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 30989
    //LT
    tb24 = in_TEXCOORD0.x<0.500000;
    //Instruction 30990
    //AND
    t24 = tb24 ? 0.750000 : float(0.0);
    //Instruction 30991
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 30992
    //MAD
    t24 = t4.x * _ST_WindFrondRipple.z + t24;
    //Instruction 30993
    //ADD
    t24 = t24 + 0.500000;
    //Instruction 30994
    //FRC
    t24 = fract(t24);
    //Instruction 30995
    //MAD
    t24 = t24 * 2.000000 + -1.0;
    //Instruction 30996
    //MUL
    t4.x = abs(t24) * abs(t24);
    //Instruction 30997
    //MAD
    t24 = -abs(t24) * 2.000000 + 3.000000;
    //Instruction 30998
    //MAD
    t24 = t4.x * t24 + -0.500000;
    //Instruction 30999
    //MUL
    t24 = t24 * in_TEXCOORD2.y;
    //Instruction 31000
    //DP2
    t24 = dot(_ST_WindFrondRipple.yy, vec2(t24));
    //Instruction 31001
    //MAD
    t4.xyz = vec3(t24) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 31002
    //MOVC
    t3.xyz = (bool(tb22)) ? t4.xyz : t3.xyz;
    //Instruction 31003
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 31004
    //IF
    if(tb24){
        //Instruction 31005
        //IF
        if(tb22){
            //Instruction 31006
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 31007
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 31008
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 31009
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 31010
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 31011
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 31012
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31013
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31014
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31015
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 31016
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 31017
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 31018
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31019
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 31020
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 31021
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 31022
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 31023
            //FRC
            t2 = fract(t2);
            //Instruction 31024
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 31025
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 31026
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 31027
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31028
            //ADD
            t2 = t2 + t2;
            //Instruction 31029
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 31030
            //LT
            tb24 = t6.w<0.0;
            //Instruction 31031
            //MOV
            t6.y = (-t6.w);
            //Instruction 31032
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 31033
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 31034
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 31035
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 31036
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 31037
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 31038
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 31039
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31040
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31041
            //MUL
            t26 = t2.x * t26;
            //Instruction 31042
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 31043
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31044
            //MUL
            t24 = t24 * t25;
            //Instruction 31045
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 31046
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31047
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31048
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31049
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31050
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31051
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 31052
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31053
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 31054
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31055
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 31056
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 31057
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 31058
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 31059
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31060
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 31061
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 31062
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 31063
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31064
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 31065
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 31066
        //ELSE
        } else {
            //Instruction 31067
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31068
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 31069
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31070
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 31071
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 31072
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 31073
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31074
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 31075
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 31076
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31077
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31078
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31079
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 31080
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31081
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31082
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 31083
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 31084
            //LT
            tb0 = t2.w<0.0;
            //Instruction 31085
            //MOV
            t2.y = (-t2.w);
            //Instruction 31086
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 31087
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 31088
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 31089
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 31090
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 31091
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 31092
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 31093
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31094
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31095
            //MUL
            t24 = t24 * t5.x;
            //Instruction 31096
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 31097
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 31098
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31099
        //ENDIF
        }
        //Instruction 31100
    //ENDIF
    }
    //Instruction 31101
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 31102
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 31103
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 31104
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 31105
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 31106
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 31107
    //NE
    tb24 = t22!=0.0;
    //Instruction 31108
    //LOG
    t4.x = log2(t22);
    //Instruction 31109
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 31110
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 31111
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 31112
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 31113
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 31114
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 31115
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 31116
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 31117
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 31118
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 31119
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 31120
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 31121
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 31122
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31123
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 31124
    //MUL
    t22 = t22 * t24;
    //Instruction 31125
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 31126
    //MOV
    t4.y = t3.y;
    //Instruction 31127
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 31128
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 31129
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 31130
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 31131
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 31132
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 31133
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 31134
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 31135
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 31136
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 31137
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 31138
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 31139
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 31140
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 31141
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 31142
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 31143
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 31144
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 31145
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 31146
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 31147
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 31148
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 31149
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 31150
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 31151
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 31152
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 31153
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 31154
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 31155
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 31156
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 31157
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 31158
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 31159
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
mediump vec3 t16_7;
bool tb9;
mediump float t16_14;
lowp float t10_14;
bool tb15;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 30929
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 30930
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 30931
    //LT
    tb15 = t10_1<0.0;
    //Instruction 30932
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 30933
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 30934
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 30935
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 30936
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 30937
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 30938
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 30939
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 30940
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 30941
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 30942
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 30943
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 30944
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 30945
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 30946
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 30947
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 30948
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 30949
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 30950
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 30951
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 30952
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 30953
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 30954
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 30955
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 30956
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 30957
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 30958
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 30959
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 30960
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 30961
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 30962
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 30963
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 30964
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 30965
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 30966
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 30967
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_20 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 30479
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 30480
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 30481
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 30482
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 30483
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 30484
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 30485
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 30486
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 30487
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 30488
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 30489
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 30490
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 30491
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 30492
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 30493
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 30494
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 30495
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 30496
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 30497
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 30498
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 30499
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 30500
    //LT
    tb24 = in_TEXCOORD0.x<0.500000;
    //Instruction 30501
    //AND
    t24 = tb24 ? 0.750000 : float(0.0);
    //Instruction 30502
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 30503
    //MAD
    t24 = t4.x * _ST_WindFrondRipple.z + t24;
    //Instruction 30504
    //ADD
    t24 = t24 + 0.500000;
    //Instruction 30505
    //FRC
    t24 = fract(t24);
    //Instruction 30506
    //MAD
    t24 = t24 * 2.000000 + -1.0;
    //Instruction 30507
    //MUL
    t4.x = abs(t24) * abs(t24);
    //Instruction 30508
    //MAD
    t24 = -abs(t24) * 2.000000 + 3.000000;
    //Instruction 30509
    //MAD
    t24 = t4.x * t24 + -0.500000;
    //Instruction 30510
    //MUL
    t24 = t24 * in_TEXCOORD2.y;
    //Instruction 30511
    //DP2
    t24 = dot(_ST_WindFrondRipple.yy, vec2(t24));
    //Instruction 30512
    //MAD
    t4.xyz = vec3(t24) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 30513
    //MOVC
    t3.xyz = (bool(tb22)) ? t4.xyz : t3.xyz;
    //Instruction 30514
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 30515
    //IF
    if(tb24){
        //Instruction 30516
        //IF
        if(tb22){
            //Instruction 30517
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 30518
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 30519
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 30520
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 30521
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 30522
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 30523
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30524
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30525
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30526
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 30527
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 30528
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 30529
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30530
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 30531
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 30532
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 30533
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 30534
            //FRC
            t2 = fract(t2);
            //Instruction 30535
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 30536
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 30537
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 30538
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 30539
            //ADD
            t2 = t2 + t2;
            //Instruction 30540
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 30541
            //LT
            tb24 = t6.w<0.0;
            //Instruction 30542
            //MOV
            t6.y = (-t6.w);
            //Instruction 30543
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 30544
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 30545
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 30546
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 30547
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 30548
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 30549
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 30550
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30551
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30552
            //MUL
            t26 = t2.x * t26;
            //Instruction 30553
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 30554
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 30555
            //MUL
            t24 = t24 * t25;
            //Instruction 30556
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 30557
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30558
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30559
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 30560
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30561
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 30562
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 30563
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 30564
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 30565
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 30566
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 30567
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 30568
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 30569
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 30570
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 30571
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 30572
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 30573
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 30574
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 30575
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 30576
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 30577
        //ELSE
        } else {
            //Instruction 30578
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30579
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 30580
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30581
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 30582
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 30583
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 30584
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30585
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 30586
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 30587
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 30588
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30589
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30590
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 30591
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 30592
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 30593
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 30594
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 30595
            //LT
            tb0 = t2.w<0.0;
            //Instruction 30596
            //MOV
            t2.y = (-t2.w);
            //Instruction 30597
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 30598
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 30599
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 30600
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 30601
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 30602
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 30603
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 30604
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30605
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30606
            //MUL
            t24 = t24 * t5.x;
            //Instruction 30607
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 30608
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 30609
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30610
        //ENDIF
        }
        //Instruction 30611
    //ENDIF
    }
    //Instruction 30612
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 30613
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 30614
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 30615
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 30616
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 30617
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 30618
    //NE
    tb24 = t22!=0.0;
    //Instruction 30619
    //LOG
    t4.x = log2(t22);
    //Instruction 30620
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 30621
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 30622
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 30623
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 30624
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 30625
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 30626
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 30627
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 30628
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 30629
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 30630
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 30631
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 30632
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 30633
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 30634
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 30635
    //MUL
    t22 = t22 * t24;
    //Instruction 30636
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 30637
    //MOV
    t4.y = t3.y;
    //Instruction 30638
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 30639
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 30640
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 30641
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 30642
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 30643
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 30644
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 30645
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 30646
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 30647
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 30648
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 30649
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 30650
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 30651
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 30652
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 30653
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 30654
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 30655
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 30656
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 30657
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 30658
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 30659
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 30660
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 30661
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 30662
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 30663
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 30664
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 30665
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 30666
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 30667
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 30668
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 30669
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 30670
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 30445
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 30446
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 30447
    //LT
    tb12 = t10_1<0.0;
    //Instruction 30448
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 30449
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 30450
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 30451
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 30452
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 30453
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 30454
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 30455
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 30456
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 30457
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 30458
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 30459
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 30460
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 30461
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 30462
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 30463
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 30464
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 30465
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 30466
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 30467
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 30468
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 30469
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 30470
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 30471
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 30472
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 30473
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 30474
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 30475
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 30476
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 30477
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 30478
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_20 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 30609
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 30610
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 30611
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 30612
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 30613
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 30614
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 30615
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 30616
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 30617
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 30618
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 30619
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 30620
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 30621
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 30622
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 30623
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 30624
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 30625
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 30626
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 30627
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 30628
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 30629
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 30630
    //LT
    tb24 = in_TEXCOORD0.x<0.500000;
    //Instruction 30631
    //AND
    t24 = tb24 ? 0.750000 : float(0.0);
    //Instruction 30632
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 30633
    //MAD
    t24 = t4.x * _ST_WindFrondRipple.z + t24;
    //Instruction 30634
    //ADD
    t24 = t24 + 0.500000;
    //Instruction 30635
    //FRC
    t24 = fract(t24);
    //Instruction 30636
    //MAD
    t24 = t24 * 2.000000 + -1.0;
    //Instruction 30637
    //MUL
    t4.x = abs(t24) * abs(t24);
    //Instruction 30638
    //MAD
    t24 = -abs(t24) * 2.000000 + 3.000000;
    //Instruction 30639
    //MAD
    t24 = t4.x * t24 + -0.500000;
    //Instruction 30640
    //MUL
    t24 = t24 * in_TEXCOORD2.y;
    //Instruction 30641
    //DP2
    t24 = dot(_ST_WindFrondRipple.yy, vec2(t24));
    //Instruction 30642
    //MAD
    t4.xyz = vec3(t24) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 30643
    //MOVC
    t3.xyz = (bool(tb22)) ? t4.xyz : t3.xyz;
    //Instruction 30644
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 30645
    //IF
    if(tb24){
        //Instruction 30646
        //IF
        if(tb22){
            //Instruction 30647
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 30648
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 30649
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 30650
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 30651
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 30652
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 30653
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30654
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30655
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30656
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 30657
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 30658
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 30659
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30660
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 30661
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 30662
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 30663
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 30664
            //FRC
            t2 = fract(t2);
            //Instruction 30665
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 30666
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 30667
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 30668
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 30669
            //ADD
            t2 = t2 + t2;
            //Instruction 30670
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 30671
            //LT
            tb24 = t6.w<0.0;
            //Instruction 30672
            //MOV
            t6.y = (-t6.w);
            //Instruction 30673
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 30674
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 30675
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 30676
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 30677
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 30678
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 30679
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 30680
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30681
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30682
            //MUL
            t26 = t2.x * t26;
            //Instruction 30683
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 30684
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 30685
            //MUL
            t24 = t24 * t25;
            //Instruction 30686
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 30687
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30688
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30689
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 30690
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30691
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 30692
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 30693
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 30694
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 30695
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 30696
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 30697
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 30698
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 30699
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 30700
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 30701
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 30702
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 30703
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 30704
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 30705
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 30706
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 30707
        //ELSE
        } else {
            //Instruction 30708
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30709
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 30710
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30711
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 30712
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 30713
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 30714
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30715
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 30716
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 30717
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 30718
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30719
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30720
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 30721
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 30722
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 30723
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 30724
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 30725
            //LT
            tb0 = t2.w<0.0;
            //Instruction 30726
            //MOV
            t2.y = (-t2.w);
            //Instruction 30727
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 30728
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 30729
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 30730
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 30731
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 30732
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 30733
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 30734
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30735
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30736
            //MUL
            t24 = t24 * t5.x;
            //Instruction 30737
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 30738
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 30739
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30740
        //ENDIF
        }
        //Instruction 30741
    //ENDIF
    }
    //Instruction 30742
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 30743
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 30744
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 30745
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 30746
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 30747
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 30748
    //NE
    tb24 = t22!=0.0;
    //Instruction 30749
    //LOG
    t4.x = log2(t22);
    //Instruction 30750
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 30751
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 30752
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 30753
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 30754
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 30755
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 30756
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 30757
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 30758
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 30759
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 30760
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 30761
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 30762
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 30763
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 30764
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 30765
    //MUL
    t22 = t22 * t24;
    //Instruction 30766
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 30767
    //MOV
    t4.y = t3.y;
    //Instruction 30768
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 30769
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 30770
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 30771
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 30772
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 30773
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 30774
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 30775
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 30776
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 30777
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 30778
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 30779
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 30780
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 30781
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 30782
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 30783
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 30784
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 30785
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 30786
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 30787
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 30788
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 30789
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 30790
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 30791
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 30792
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 30793
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 30794
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 30795
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 30796
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 30797
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 30798
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 30799
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 30800
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 30582
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 30583
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 30584
    //LT
    tb12 = t10_1<0.0;
    //Instruction 30585
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 30586
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 30587
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 30588
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 30589
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 30590
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 30591
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 30592
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 30593
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 30594
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 30595
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 30596
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 30597
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 30598
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 30599
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 30600
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 30601
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 30602
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 30603
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 30604
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 30605
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 30606
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 30607
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 30608
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 31197
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31198
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 31199
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 31200
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 31201
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 31202
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 31203
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 31204
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 31205
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 31206
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 31207
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 31208
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 31209
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 31210
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 31211
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 31212
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 31213
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 31214
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 31215
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 31216
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 31217
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 31218
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 31219
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 31220
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 31221
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 31222
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 31223
    //FRC
    t27 = fract(t27);
    //Instruction 31224
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 31225
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 31226
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 31227
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 31228
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 31229
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 31230
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 31231
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 31232
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 31233
    //IF
    if(tb27){
        //Instruction 31234
        //IF
        if(tb25){
            //Instruction 31235
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 31236
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 31237
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 31238
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 31239
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 31240
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 31241
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31242
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31243
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31244
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 31245
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 31246
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 31247
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31248
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 31249
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 31250
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 31251
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 31252
            //FRC
            t2 = fract(t2);
            //Instruction 31253
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 31254
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 31255
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 31256
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31257
            //ADD
            t2 = t2 + t2;
            //Instruction 31258
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 31259
            //LT
            tb27 = t6.w<0.0;
            //Instruction 31260
            //MOV
            t6.y = (-t6.w);
            //Instruction 31261
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 31262
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 31263
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 31264
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 31265
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 31266
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 31267
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 31268
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31269
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31270
            //MUL
            t29 = t2.x * t29;
            //Instruction 31271
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 31272
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31273
            //MUL
            t27 = t27 * t28;
            //Instruction 31274
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 31275
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31276
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31277
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31278
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31279
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31280
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 31281
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31282
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 31283
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31284
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 31285
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 31286
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 31287
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 31288
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31289
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 31290
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 31291
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 31292
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31293
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 31294
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 31295
        //ELSE
        } else {
            //Instruction 31296
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31297
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 31298
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31299
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 31300
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 31301
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 31302
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31303
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 31304
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 31305
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31306
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31307
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31308
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 31309
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31310
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31311
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 31312
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 31313
            //LT
            tb0 = t2.w<0.0;
            //Instruction 31314
            //MOV
            t2.y = (-t2.w);
            //Instruction 31315
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 31316
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 31317
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 31318
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 31319
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 31320
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 31321
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 31322
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31323
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31324
            //MUL
            t27 = t27 * t5.x;
            //Instruction 31325
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 31326
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 31327
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31328
        //ENDIF
        }
        //Instruction 31329
    //ENDIF
    }
    //Instruction 31330
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 31331
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 31332
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 31333
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 31334
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 31335
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 31336
    //NE
    tb27 = t25!=0.0;
    //Instruction 31337
    //LOG
    t4.x = log2(t25);
    //Instruction 31338
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 31339
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 31340
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 31341
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 31342
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 31343
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 31344
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 31345
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 31346
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 31347
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 31348
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 31349
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 31350
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 31351
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31352
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 31353
    //MUL
    t25 = t25 * t27;
    //Instruction 31354
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 31355
    //MOV
    t4.y = t3.y;
    //Instruction 31356
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 31357
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 31358
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 31359
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 31360
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 31361
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 31362
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 31363
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 31364
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 31365
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 31366
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 31367
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 31368
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 31369
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 31370
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 31371
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 31372
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 31373
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 31374
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 31375
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 31376
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 31377
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 31378
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 31379
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 31380
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 31381
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 31382
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 31383
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 31384
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 31385
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 31386
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 31387
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 31388
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 31389
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 31390
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 31391
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 31392
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 31393
    //MOV
    t5.x = t3.z;
    //Instruction 31394
    //MOV
    t5.y = t4.x;
    //Instruction 31395
    //MOV
    t5.z = t0.x;
    //Instruction 31396
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 31397
    //MOV
    t5.x = t3.x;
    //Instruction 31398
    //MOV
    t5.y = t4.y;
    //Instruction 31399
    //MOV
    t5.z = t0.y;
    //Instruction 31400
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 31401
    //MOV
    t0.x = t3.y;
    //Instruction 31402
    //MOV
    t0.y = t4.z;
    //Instruction 31403
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 31404
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 31405
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 31406
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 31407
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 31160
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 31161
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31162
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 31163
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 31164
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 31165
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 31166
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 31167
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 31168
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 31169
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 31170
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 31171
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 31172
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 31173
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 31174
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 31175
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 31176
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 31177
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 31178
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 31179
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 31180
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 31181
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 31182
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 31183
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 31184
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 31185
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 31186
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 31187
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 31188
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 31189
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 31190
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 31191
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 31192
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 31193
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 31194
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31195
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31196
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 30697
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 30698
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 30699
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 30700
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 30701
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 30702
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 30703
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 30704
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 30705
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 30706
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 30707
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 30708
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 30709
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 30710
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 30711
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 30712
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 30713
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 30714
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 30715
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 30716
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 30717
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 30718
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 30719
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 30720
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 30721
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 30722
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 30723
    //FRC
    t27 = fract(t27);
    //Instruction 30724
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 30725
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 30726
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 30727
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 30728
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 30729
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 30730
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 30731
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 30732
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 30733
    //IF
    if(tb27){
        //Instruction 30734
        //IF
        if(tb25){
            //Instruction 30735
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 30736
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 30737
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 30738
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 30739
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 30740
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 30741
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30742
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30743
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30744
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 30745
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 30746
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 30747
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30748
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 30749
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 30750
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 30751
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 30752
            //FRC
            t2 = fract(t2);
            //Instruction 30753
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 30754
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 30755
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 30756
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 30757
            //ADD
            t2 = t2 + t2;
            //Instruction 30758
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 30759
            //LT
            tb27 = t6.w<0.0;
            //Instruction 30760
            //MOV
            t6.y = (-t6.w);
            //Instruction 30761
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 30762
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 30763
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 30764
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 30765
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 30766
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 30767
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 30768
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30769
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30770
            //MUL
            t29 = t2.x * t29;
            //Instruction 30771
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 30772
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 30773
            //MUL
            t27 = t27 * t28;
            //Instruction 30774
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 30775
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30776
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30777
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 30778
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30779
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 30780
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 30781
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 30782
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 30783
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 30784
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 30785
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 30786
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 30787
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 30788
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 30789
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 30790
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 30791
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 30792
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 30793
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 30794
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 30795
        //ELSE
        } else {
            //Instruction 30796
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30797
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 30798
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30799
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 30800
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 30801
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 30802
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30803
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 30804
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 30805
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 30806
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30807
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30808
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 30809
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 30810
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 30811
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 30812
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 30813
            //LT
            tb0 = t2.w<0.0;
            //Instruction 30814
            //MOV
            t2.y = (-t2.w);
            //Instruction 30815
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 30816
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 30817
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 30818
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 30819
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 30820
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 30821
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 30822
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30823
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30824
            //MUL
            t27 = t27 * t5.x;
            //Instruction 30825
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 30826
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 30827
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30828
        //ENDIF
        }
        //Instruction 30829
    //ENDIF
    }
    //Instruction 30830
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 30831
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 30832
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 30833
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 30834
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 30835
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 30836
    //NE
    tb27 = t25!=0.0;
    //Instruction 30837
    //LOG
    t4.x = log2(t25);
    //Instruction 30838
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 30839
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 30840
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 30841
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 30842
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 30843
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 30844
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 30845
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 30846
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 30847
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 30848
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 30849
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 30850
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 30851
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 30852
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 30853
    //MUL
    t25 = t25 * t27;
    //Instruction 30854
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 30855
    //MOV
    t4.y = t3.y;
    //Instruction 30856
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 30857
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 30858
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 30859
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 30860
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 30861
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 30862
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 30863
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 30864
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 30865
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 30866
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 30867
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 30868
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 30869
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 30870
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 30871
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 30872
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 30873
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 30874
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 30875
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 30876
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 30877
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 30878
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 30879
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 30880
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 30881
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 30882
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 30883
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 30884
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 30885
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 30886
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 30887
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 30888
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 30889
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 30890
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 30891
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 30892
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 30893
    //MOV
    t5.x = t3.z;
    //Instruction 30894
    //MOV
    t5.y = t4.x;
    //Instruction 30895
    //MOV
    t5.z = t0.x;
    //Instruction 30896
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 30897
    //MOV
    t5.x = t3.x;
    //Instruction 30898
    //MOV
    t5.y = t4.y;
    //Instruction 30899
    //MOV
    t5.z = t0.y;
    //Instruction 30900
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 30901
    //MOV
    t0.x = t3.y;
    //Instruction 30902
    //MOV
    t0.y = t4.z;
    //Instruction 30903
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 30904
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 30905
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 30906
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 30907
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 30671
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 30672
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 30673
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 30674
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 30675
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 30676
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 30677
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 30678
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 30679
    //MAX
    t16_3 = max(t16_7.z, t16_7.y);
    //Instruction 30680
    //MAX
    t16_3 = max(t16_7.x, t16_3);
    //Instruction 30681
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 30682
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 30683
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 30684
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 30685
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 30686
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 30687
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 30688
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 30689
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 30690
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 30691
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 30692
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 30693
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 30694
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 30695
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 30696
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_6.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 30845
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 30846
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 30847
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 30848
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 30849
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 30850
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 30851
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 30852
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 30853
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 30854
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 30855
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 30856
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 30857
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 30858
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 30859
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 30860
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 30861
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 30862
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 30863
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 30864
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 30865
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 30866
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 30867
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 30868
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 30869
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 30870
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 30871
    //FRC
    t27 = fract(t27);
    //Instruction 30872
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 30873
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 30874
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 30875
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 30876
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 30877
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 30878
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 30879
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 30880
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 30881
    //IF
    if(tb27){
        //Instruction 30882
        //IF
        if(tb25){
            //Instruction 30883
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 30884
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 30885
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 30886
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 30887
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 30888
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 30889
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30890
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30891
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30892
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 30893
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 30894
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 30895
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30896
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 30897
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 30898
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 30899
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 30900
            //FRC
            t2 = fract(t2);
            //Instruction 30901
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 30902
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 30903
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 30904
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 30905
            //ADD
            t2 = t2 + t2;
            //Instruction 30906
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 30907
            //LT
            tb27 = t6.w<0.0;
            //Instruction 30908
            //MOV
            t6.y = (-t6.w);
            //Instruction 30909
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 30910
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 30911
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 30912
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 30913
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 30914
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 30915
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 30916
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30917
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30918
            //MUL
            t29 = t2.x * t29;
            //Instruction 30919
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 30920
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 30921
            //MUL
            t27 = t27 * t28;
            //Instruction 30922
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 30923
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30924
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30925
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 30926
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 30927
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 30928
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 30929
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 30930
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 30931
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 30932
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 30933
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 30934
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 30935
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 30936
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 30937
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 30938
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 30939
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 30940
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 30941
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 30942
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 30943
        //ELSE
        } else {
            //Instruction 30944
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30945
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 30946
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30947
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 30948
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 30949
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 30950
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30951
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 30952
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 30953
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 30954
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30955
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30956
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 30957
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 30958
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 30959
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 30960
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 30961
            //LT
            tb0 = t2.w<0.0;
            //Instruction 30962
            //MOV
            t2.y = (-t2.w);
            //Instruction 30963
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 30964
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 30965
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 30966
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 30967
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 30968
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 30969
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 30970
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 30971
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 30972
            //MUL
            t27 = t27 * t5.x;
            //Instruction 30973
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 30974
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 30975
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 30976
        //ENDIF
        }
        //Instruction 30977
    //ENDIF
    }
    //Instruction 30978
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 30979
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 30980
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 30981
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 30982
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 30983
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 30984
    //NE
    tb27 = t25!=0.0;
    //Instruction 30985
    //LOG
    t4.x = log2(t25);
    //Instruction 30986
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 30987
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 30988
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 30989
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 30990
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 30991
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 30992
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 30993
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 30994
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 30995
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 30996
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 30997
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 30998
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 30999
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31000
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 31001
    //MUL
    t25 = t25 * t27;
    //Instruction 31002
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 31003
    //MOV
    t4.y = t3.y;
    //Instruction 31004
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 31005
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 31006
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 31007
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 31008
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 31009
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 31010
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 31011
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 31012
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 31013
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 31014
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 31015
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 31016
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 31017
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 31018
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 31019
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 31020
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 31021
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 31022
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 31023
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 31024
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 31025
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 31026
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 31027
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 31028
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 31029
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 31030
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 31031
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 31032
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 31033
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 31034
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 31035
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 31036
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 31037
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 31038
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 31039
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 31040
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 31041
    //MOV
    t5.x = t3.z;
    //Instruction 31042
    //MOV
    t5.y = t4.x;
    //Instruction 31043
    //MOV
    t5.z = t0.x;
    //Instruction 31044
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 31045
    //MOV
    t5.x = t3.x;
    //Instruction 31046
    //MOV
    t5.y = t4.y;
    //Instruction 31047
    //MOV
    t5.z = t0.y;
    //Instruction 31048
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 31049
    //MOV
    t0.x = t3.y;
    //Instruction 31050
    //MOV
    t0.y = t4.z;
    //Instruction 31051
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 31052
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 31053
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 31054
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 31055
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_9;
bool tb11;
mediump float t16_18;
lowp float t10_18;
bool tb21;
mediump float t16_23;
highp float t25;
void main()
{
    //Instruction 30801
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 30802
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 30803
    //LT
    tb21 = t10_1.x<0.0;
    //Instruction 30804
    //DISCARD
    if((int(tb21))!=0){discard;}
    //Instruction 30805
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 30806
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 30807
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 30808
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 30809
    //MAX
    t16_3.x = max(t16_9.z, t16_9.y);
    //Instruction 30810
    //MAX
    t16_3.x = max(t16_9.x, t16_3.x);
    //Instruction 30811
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 30812
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 30813
    //MUL
    t16_2.xyz = t16_0.xxx * t16_9.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 30814
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 30815
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 30816
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 30817
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 30818
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 30819
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 30820
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 30821
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 30822
    //LT
    tb11 = 0.0<t16_0.z;
    //Instruction 30823
    //DP3
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 30824
    //SAMPLE
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    //Instruction 30825
    //MOVC
    t10_1.x = (tb11) ? 1.0 : 0.0;
    //Instruction 30826
    //MUL
    t10_1.x = t10_4 * t10_1.x;
    //Instruction 30827
    //MUL
    t10_1.x = t10_18 * t10_1.x;
    //Instruction 30828
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 30829
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 30830
    //ADD
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 30831
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 30832
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 30833
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 30834
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 30835
    //MAD
    t10_1.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 30836
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 30837
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 30838
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 30839
    //DP3
    t16_23 = dot(t10_6.xyz, t4.xyz);
    //Instruction 30840
    //MAX
    t16_23 = max(t16_23, 0.0);
    //Instruction 30841
    //MUL
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    //Instruction 30842
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 30843
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 30844
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 31447
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31448
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 31449
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 31450
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 31451
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 31452
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 31453
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 31454
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 31455
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 31456
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 31457
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 31458
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 31459
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 31460
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 31461
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 31462
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 31463
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 31464
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 31465
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 31466
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 31467
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 31468
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 31469
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 31470
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 31471
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 31472
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 31473
    //FRC
    t27 = fract(t27);
    //Instruction 31474
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 31475
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 31476
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 31477
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 31478
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 31479
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 31480
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 31481
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 31482
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 31483
    //IF
    if(tb27){
        //Instruction 31484
        //IF
        if(tb25){
            //Instruction 31485
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 31486
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 31487
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 31488
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 31489
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 31490
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 31491
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31492
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31493
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31494
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 31495
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 31496
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 31497
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31498
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 31499
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 31500
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 31501
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 31502
            //FRC
            t2 = fract(t2);
            //Instruction 31503
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 31504
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 31505
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 31506
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31507
            //ADD
            t2 = t2 + t2;
            //Instruction 31508
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 31509
            //LT
            tb27 = t6.w<0.0;
            //Instruction 31510
            //MOV
            t6.y = (-t6.w);
            //Instruction 31511
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 31512
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 31513
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 31514
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 31515
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 31516
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 31517
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 31518
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31519
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31520
            //MUL
            t29 = t2.x * t29;
            //Instruction 31521
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 31522
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31523
            //MUL
            t27 = t27 * t28;
            //Instruction 31524
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 31525
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31526
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31527
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31528
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31529
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31530
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 31531
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31532
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 31533
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31534
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 31535
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 31536
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 31537
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 31538
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31539
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 31540
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 31541
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 31542
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31543
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 31544
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 31545
        //ELSE
        } else {
            //Instruction 31546
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31547
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 31548
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31549
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 31550
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 31551
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 31552
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31553
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 31554
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 31555
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31556
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31557
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31558
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 31559
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31560
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31561
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 31562
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 31563
            //LT
            tb0 = t2.w<0.0;
            //Instruction 31564
            //MOV
            t2.y = (-t2.w);
            //Instruction 31565
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 31566
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 31567
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 31568
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 31569
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 31570
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 31571
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 31572
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31573
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31574
            //MUL
            t27 = t27 * t5.x;
            //Instruction 31575
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 31576
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 31577
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31578
        //ENDIF
        }
        //Instruction 31579
    //ENDIF
    }
    //Instruction 31580
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 31581
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 31582
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 31583
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 31584
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 31585
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 31586
    //NE
    tb27 = t25!=0.0;
    //Instruction 31587
    //LOG
    t4.x = log2(t25);
    //Instruction 31588
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 31589
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 31590
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 31591
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 31592
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 31593
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 31594
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 31595
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 31596
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 31597
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 31598
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 31599
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 31600
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 31601
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31602
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 31603
    //MUL
    t25 = t25 * t27;
    //Instruction 31604
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 31605
    //MOV
    t4.y = t3.y;
    //Instruction 31606
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 31607
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 31608
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 31609
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 31610
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 31611
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 31612
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 31613
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 31614
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 31615
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 31616
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 31617
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 31618
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 31619
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 31620
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 31621
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 31622
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 31623
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 31624
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 31625
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 31626
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 31627
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 31628
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 31629
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 31630
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 31631
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 31632
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 31633
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 31634
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 31635
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 31636
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 31637
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 31638
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 31639
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 31640
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 31641
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 31642
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 31643
    //MOV
    t5.x = t3.z;
    //Instruction 31644
    //MOV
    t5.y = t4.x;
    //Instruction 31645
    //MOV
    t5.z = t0.x;
    //Instruction 31646
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 31647
    //MOV
    t5.x = t3.x;
    //Instruction 31648
    //MOV
    t5.y = t4.y;
    //Instruction 31649
    //MOV
    t5.z = t0.y;
    //Instruction 31650
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 31651
    //MOV
    t0.x = t3.y;
    //Instruction 31652
    //MOV
    t0.y = t4.z;
    //Instruction 31653
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 31654
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 31655
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 31656
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 31657
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 31408
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 31409
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31410
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 31411
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 31412
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 31413
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 31414
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 31415
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 31416
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 31417
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 31418
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 31419
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 31420
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 31421
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 31422
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 31423
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 31424
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 31425
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 31426
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 31427
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 31428
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 31429
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 31430
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 31431
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 31432
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 31433
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 31434
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 31435
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 31436
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 31437
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 31438
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 31439
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 31440
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 31441
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 31442
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 31443
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 31444
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31445
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31446
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_5.x;
  tmpvar_67.y = worldBinormal_4.x;
  tmpvar_67.z = worldNormal_6.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_5.y;
  tmpvar_68.y = worldBinormal_4.y;
  tmpvar_68.z = worldNormal_6.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_5.z;
  tmpvar_69.y = worldBinormal_4.z;
  tmpvar_69.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 30940
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 30941
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 30942
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 30943
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 30944
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 30945
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 30946
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 30947
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 30948
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 30949
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 30950
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 30951
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 30952
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 30953
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 30954
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 30955
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 30956
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 30957
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 30958
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 30959
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 30960
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 30961
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 30962
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 30963
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 30964
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 30965
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 30966
    //FRC
    t27 = fract(t27);
    //Instruction 30967
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 30968
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 30969
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 30970
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 30971
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 30972
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 30973
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 30974
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 30975
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 30976
    //IF
    if(tb27){
        //Instruction 30977
        //IF
        if(tb25){
            //Instruction 30978
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 30979
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 30980
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 30981
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 30982
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 30983
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 30984
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 30985
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 30986
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 30987
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 30988
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 30989
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 30990
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 30991
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 30992
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 30993
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 30994
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 30995
            //FRC
            t2 = fract(t2);
            //Instruction 30996
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 30997
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 30998
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 30999
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31000
            //ADD
            t2 = t2 + t2;
            //Instruction 31001
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 31002
            //LT
            tb27 = t6.w<0.0;
            //Instruction 31003
            //MOV
            t6.y = (-t6.w);
            //Instruction 31004
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 31005
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 31006
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 31007
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 31008
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 31009
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 31010
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 31011
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31012
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31013
            //MUL
            t29 = t2.x * t29;
            //Instruction 31014
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 31015
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31016
            //MUL
            t27 = t27 * t28;
            //Instruction 31017
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 31018
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31019
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31020
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31021
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31022
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31023
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 31024
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31025
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 31026
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31027
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 31028
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 31029
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 31030
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 31031
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31032
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 31033
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 31034
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 31035
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31036
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 31037
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 31038
        //ELSE
        } else {
            //Instruction 31039
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31040
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 31041
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31042
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 31043
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 31044
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 31045
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31046
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 31047
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 31048
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31049
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31050
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31051
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 31052
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31053
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31054
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 31055
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 31056
            //LT
            tb0 = t2.w<0.0;
            //Instruction 31057
            //MOV
            t2.y = (-t2.w);
            //Instruction 31058
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 31059
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 31060
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 31061
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 31062
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 31063
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 31064
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 31065
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31066
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31067
            //MUL
            t27 = t27 * t5.x;
            //Instruction 31068
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 31069
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 31070
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31071
        //ENDIF
        }
        //Instruction 31072
    //ENDIF
    }
    //Instruction 31073
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 31074
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 31075
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 31076
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 31077
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 31078
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 31079
    //NE
    tb27 = t25!=0.0;
    //Instruction 31080
    //LOG
    t4.x = log2(t25);
    //Instruction 31081
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 31082
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 31083
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 31084
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 31085
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 31086
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 31087
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 31088
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 31089
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 31090
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 31091
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 31092
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 31093
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 31094
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31095
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 31096
    //MUL
    t25 = t25 * t27;
    //Instruction 31097
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 31098
    //MOV
    t4.y = t3.y;
    //Instruction 31099
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 31100
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 31101
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 31102
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 31103
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 31104
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 31105
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 31106
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 31107
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 31108
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 31109
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 31110
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 31111
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 31112
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 31113
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 31114
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 31115
    //MOV
    t3.y = _World2Object[0].y;
    //Instruction 31116
    //MOV
    t3.z = _World2Object[1].y;
    //Instruction 31117
    //MOV
    t3.x = _World2Object[2].y;
    //Instruction 31118
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 31119
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 31120
    //MOV
    t3.y = _World2Object[0].z;
    //Instruction 31121
    //MOV
    t3.z = _World2Object[1].z;
    //Instruction 31122
    //MOV
    t3.x = _World2Object[2].z;
    //Instruction 31123
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 31124
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 31125
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 31126
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 31127
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 31128
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 31129
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 31130
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 31131
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 31132
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 31133
    //MUL
    t10_7.xyz = t0.zxy * t3.xyz;
    //Instruction 31134
    //MAD
    t10_7.xyz = t0.yzx * t3.yzx + (-t10_7.xyz);
    //Instruction 31135
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 31136
    //MOV
    t5.x = t3.z;
    //Instruction 31137
    //MOV
    t5.y = t4.x;
    //Instruction 31138
    //MOV
    t5.z = t0.x;
    //Instruction 31139
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 31140
    //MOV
    t5.x = t3.x;
    //Instruction 31141
    //MOV
    t5.y = t4.y;
    //Instruction 31142
    //MOV
    t5.z = t0.y;
    //Instruction 31143
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 31144
    //MOV
    t0.x = t3.y;
    //Instruction 31145
    //MOV
    t0.y = t4.z;
    //Instruction 31146
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 31147
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 31148
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 31149
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 31150
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 30908
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 30909
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 30910
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 30911
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 30912
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 30913
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 30914
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 30915
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 30916
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 30917
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 30918
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 30919
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 30920
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 30921
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 30922
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 30923
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 30924
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 30925
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 30926
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 30927
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 30928
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 30929
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 30930
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 30931
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 30932
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 30933
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 30934
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 30935
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 30936
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 30937
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 30938
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 30939
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20.x = tmpvar_4.w;
  tmpvar_20.y = tmpvar_5.x;
  tmpvar_20.z = tmpvar_5.y;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (FinalPosition_15, tmpvar_20, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_12.x)
   + 
    (v_100.xyz * tmpvar_12.y)
  ) + (v_101.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_102;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 31079
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31080
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 31081
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 31082
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 31083
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 31084
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 31085
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 31086
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 31087
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 31088
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 31089
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 31090
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 31091
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 31092
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 31093
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 31094
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 31095
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 31096
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 31097
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 31098
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 31099
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 31100
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 31101
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 31102
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 31103
        //FRC
        t15.x = fract(t15.x);
        //Instruction 31104
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 31105
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 31106
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 31107
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 31108
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 31109
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 31110
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 31111
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 31112
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 31113
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 31114
        //IF
        if(tb29){
            //Instruction 31115
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 31116
            //FRC
            t4 = fract(t4);
            //Instruction 31117
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31118
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 31119
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 31120
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 31121
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 31122
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 31123
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31124
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 31125
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31126
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 31127
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31128
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 31129
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 31130
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 31131
            //SQRT
            t44 = sqrt(t44);
            //Instruction 31132
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 31133
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 31134
            //MUL
            t45 = t45 * t5.x;
            //Instruction 31135
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 31136
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 31137
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 31138
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 31139
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 31140
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 31141
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 31142
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 31143
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 31144
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 31145
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 31146
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 31147
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 31148
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 31149
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 31150
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 31151
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 31152
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 31153
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 31154
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 31155
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 31156
            //SQRT
            t45 = sqrt(t45);
            //Instruction 31157
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 31158
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 31159
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 31160
            //MUL
            t33 = t45 * t5.x;
            //Instruction 31161
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 31162
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 31163
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 31164
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 31165
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 31166
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 31167
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 31168
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31169
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 31170
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31171
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 31172
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31173
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 31174
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 31175
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 31176
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 31177
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 31178
            //LOG
            t43 = log2(t43);
            //Instruction 31179
            //MUL
            t29 = t43 * t15.y;
            //Instruction 31180
            //EXP
            t29 = exp2(t29);
            //Instruction 31181
            //MUL
            t43 = t5.y * t45;
            //Instruction 31182
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 31183
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 31184
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 31185
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 31186
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 31187
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 31188
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 31189
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 31190
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 31191
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 31192
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 31193
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 31194
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 31195
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 31196
            //MOV
            t10.z = t11.x;
            //Instruction 31197
            //MOV
            t10.w = t9.x;
            //Instruction 31198
            //MOV
            t12.z = t8.y;
            //Instruction 31199
            //MOV
            t12.w = t13.y;
            //Instruction 31200
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 31201
            //MOV
            t13.w = t12.y;
            //Instruction 31202
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 31203
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 31204
            //MOV
            t9.w = t10.y;
            //Instruction 31205
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 31206
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 31207
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 31208
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 31209
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 31210
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 31211
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 31212
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 31213
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 31214
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 31215
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 31216
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 31217
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 31218
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 31219
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31220
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 31221
        //ELSE
        } else {
            //Instruction 31222
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 31223
        //ENDIF
        }
        //Instruction 31224
    //ELSE
    } else {
        //Instruction 31225
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 31226
    //ENDIF
    }
    //Instruction 31227
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 31228
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 31229
    //IF
    if(tb16){
        //Instruction 31230
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 31231
        //IF
        if(tb16){
            //Instruction 31232
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 31233
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 31234
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 31235
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 31236
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 31237
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31238
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31239
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31240
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31241
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 31242
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 31243
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 31244
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 31245
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31246
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 31247
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 31248
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 31249
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 31250
            //FRC
            t0 = fract(t0);
            //Instruction 31251
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 31252
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 31253
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 31254
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31255
            //ADD
            t0 = t0 + t0;
            //Instruction 31256
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 31257
            //LT
            tb44 = t6.w<0.0;
            //Instruction 31258
            //MOV
            t6.y = (-t6.w);
            //Instruction 31259
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 31260
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 31261
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 31262
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 31263
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 31264
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 31265
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 31266
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31267
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31268
            //MUL
            t46 = t0.x * t46;
            //Instruction 31269
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 31270
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31271
            //MUL
            t44 = t44 * t45;
            //Instruction 31272
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 31273
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31274
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31275
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31276
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31277
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31278
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 31279
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31280
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 31281
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31282
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 31283
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 31284
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 31285
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 31286
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31287
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 31288
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 31289
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 31290
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31291
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31292
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 31293
        //ELSE
        } else {
            //Instruction 31294
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31295
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 31296
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31297
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 31298
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 31299
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 31300
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 31301
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31302
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 31303
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 31304
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31305
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31306
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31307
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 31308
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31309
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31310
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 31311
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 31312
            //LT
            tb16 = t0.w<0.0;
            //Instruction 31313
            //MOV
            t0.y = (-t0.w);
            //Instruction 31314
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 31315
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 31316
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 31317
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 31318
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 31319
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 31320
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 31321
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31322
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31323
            //MUL
            t45 = t45 * t5.x;
            //Instruction 31324
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 31325
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31326
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31327
        //ENDIF
        }
        //Instruction 31328
    //ENDIF
    }
    //Instruction 31329
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 31330
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 31331
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 31332
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 31333
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 31334
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 31335
    //NE
    tb45 = t44!=0.0;
    //Instruction 31336
    //LOG
    t4.x = log2(t44);
    //Instruction 31337
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 31338
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 31339
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 31340
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 31341
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 31342
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 31343
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 31344
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 31345
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 31346
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 31347
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 31348
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 31349
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 31350
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31351
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 31352
    //MUL
    t44 = t44 * t45;
    //Instruction 31353
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 31354
    //MOV
    t4.y = t3.y;
    //Instruction 31355
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 31356
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 31357
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 31358
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 31359
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 31360
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 31361
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 31362
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 31363
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 31364
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 31365
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 31366
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 31367
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 31368
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 31369
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 31370
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 31371
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 31372
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 31373
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 31374
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 31375
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 31376
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 31377
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 31378
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 31379
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 31380
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 31381
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 31382
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 31383
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 31384
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 31385
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 31386
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 31387
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 31056
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 31057
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31058
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 31059
    //LT
    tb0 = t10_1<0.0;
    //Instruction 31060
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 31061
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 31062
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 31063
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 31064
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 31065
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 31066
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 31067
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 31068
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 31069
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 31070
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 31071
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 31072
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 31073
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 31074
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 31075
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 31076
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31077
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31078
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20.x = tmpvar_4.w;
  tmpvar_20.y = tmpvar_5.x;
  tmpvar_20.z = tmpvar_5.y;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (FinalPosition_15, tmpvar_20, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_12.x)
   + 
    (v_100.xyz * tmpvar_12.y)
  ) + (v_101.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_102;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 31670
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31671
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 31672
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 31673
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 31674
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 31675
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 31676
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 31677
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 31678
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 31679
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 31680
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 31681
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 31682
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 31683
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 31684
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 31685
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 31686
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 31687
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 31688
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 31689
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 31690
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 31691
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 31692
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 31693
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 31694
        //FRC
        t15.x = fract(t15.x);
        //Instruction 31695
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 31696
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 31697
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 31698
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 31699
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 31700
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 31701
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 31702
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 31703
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 31704
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 31705
        //IF
        if(tb29){
            //Instruction 31706
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 31707
            //FRC
            t4 = fract(t4);
            //Instruction 31708
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31709
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 31710
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 31711
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 31712
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 31713
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 31714
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31715
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 31716
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31717
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 31718
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31719
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 31720
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 31721
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 31722
            //SQRT
            t44 = sqrt(t44);
            //Instruction 31723
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 31724
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 31725
            //MUL
            t45 = t45 * t5.x;
            //Instruction 31726
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 31727
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 31728
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 31729
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 31730
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 31731
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 31732
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 31733
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 31734
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 31735
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 31736
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 31737
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 31738
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 31739
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 31740
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 31741
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 31742
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 31743
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 31744
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 31745
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 31746
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 31747
            //SQRT
            t45 = sqrt(t45);
            //Instruction 31748
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 31749
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 31750
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 31751
            //MUL
            t33 = t45 * t5.x;
            //Instruction 31752
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 31753
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 31754
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 31755
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 31756
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 31757
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 31758
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 31759
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31760
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 31761
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31762
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 31763
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31764
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 31765
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 31766
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 31767
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 31768
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 31769
            //LOG
            t43 = log2(t43);
            //Instruction 31770
            //MUL
            t29 = t43 * t15.y;
            //Instruction 31771
            //EXP
            t29 = exp2(t29);
            //Instruction 31772
            //MUL
            t43 = t5.y * t45;
            //Instruction 31773
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 31774
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 31775
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 31776
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 31777
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 31778
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 31779
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 31780
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 31781
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 31782
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 31783
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 31784
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 31785
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 31786
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 31787
            //MOV
            t10.z = t11.x;
            //Instruction 31788
            //MOV
            t10.w = t9.x;
            //Instruction 31789
            //MOV
            t12.z = t8.y;
            //Instruction 31790
            //MOV
            t12.w = t13.y;
            //Instruction 31791
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 31792
            //MOV
            t13.w = t12.y;
            //Instruction 31793
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 31794
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 31795
            //MOV
            t9.w = t10.y;
            //Instruction 31796
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 31797
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 31798
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 31799
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 31800
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 31801
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 31802
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 31803
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 31804
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 31805
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 31806
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 31807
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 31808
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 31809
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 31810
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31811
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 31812
        //ELSE
        } else {
            //Instruction 31813
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 31814
        //ENDIF
        }
        //Instruction 31815
    //ELSE
    } else {
        //Instruction 31816
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 31817
    //ENDIF
    }
    //Instruction 31818
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 31819
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 31820
    //IF
    if(tb16){
        //Instruction 31821
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 31822
        //IF
        if(tb16){
            //Instruction 31823
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 31824
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 31825
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 31826
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 31827
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 31828
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31829
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31830
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31831
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31832
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 31833
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 31834
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 31835
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 31836
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31837
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 31838
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 31839
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 31840
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 31841
            //FRC
            t0 = fract(t0);
            //Instruction 31842
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 31843
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 31844
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 31845
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31846
            //ADD
            t0 = t0 + t0;
            //Instruction 31847
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 31848
            //LT
            tb44 = t6.w<0.0;
            //Instruction 31849
            //MOV
            t6.y = (-t6.w);
            //Instruction 31850
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 31851
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 31852
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 31853
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 31854
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 31855
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 31856
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 31857
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31858
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31859
            //MUL
            t46 = t0.x * t46;
            //Instruction 31860
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 31861
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31862
            //MUL
            t44 = t44 * t45;
            //Instruction 31863
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 31864
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31865
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31866
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31867
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31868
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31869
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 31870
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31871
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 31872
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31873
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 31874
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 31875
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 31876
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 31877
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31878
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 31879
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 31880
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 31881
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31882
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31883
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 31884
        //ELSE
        } else {
            //Instruction 31885
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31886
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 31887
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31888
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 31889
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 31890
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 31891
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 31892
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31893
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 31894
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 31895
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31896
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31897
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31898
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 31899
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31900
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31901
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 31902
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 31903
            //LT
            tb16 = t0.w<0.0;
            //Instruction 31904
            //MOV
            t0.y = (-t0.w);
            //Instruction 31905
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 31906
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 31907
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 31908
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 31909
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 31910
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 31911
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 31912
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31913
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31914
            //MUL
            t45 = t45 * t5.x;
            //Instruction 31915
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 31916
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31917
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31918
        //ENDIF
        }
        //Instruction 31919
    //ENDIF
    }
    //Instruction 31920
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 31921
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 31922
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 31923
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 31924
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 31925
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 31926
    //NE
    tb45 = t44!=0.0;
    //Instruction 31927
    //LOG
    t4.x = log2(t44);
    //Instruction 31928
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 31929
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 31930
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 31931
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 31932
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 31933
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 31934
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 31935
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 31936
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 31937
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 31938
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 31939
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 31940
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 31941
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31942
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 31943
    //MUL
    t44 = t44 * t45;
    //Instruction 31944
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 31945
    //MOV
    t4.y = t3.y;
    //Instruction 31946
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 31947
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 31948
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 31949
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 31950
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 31951
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 31952
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 31953
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 31954
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 31955
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 31956
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 31957
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 31958
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 31959
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 31960
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 31961
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 31962
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 31963
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 31964
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 31965
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 31966
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 31967
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 31968
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 31969
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 31970
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 31971
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 31972
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 31973
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 31974
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 31975
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 31976
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 31977
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 31978
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    //Instruction 31658
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 31659
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31660
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 31661
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 31662
    //LT
    tb0 = t10_1<0.0;
    //Instruction 31663
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 31664
    //DP3
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 31665
    //MAX
    t16_11 = max(t16_11, 0.0);
    //Instruction 31666
    //MUL
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    //Instruction 31667
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31668
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31669
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20.x = tmpvar_4.w;
  tmpvar_20.y = tmpvar_5.x;
  tmpvar_20.z = tmpvar_5.y;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (FinalPosition_15, tmpvar_20, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_12.x)
   + 
    (v_100.xyz * tmpvar_12.y)
  ) + (v_101.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_102;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 31181
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31182
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 31183
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 31184
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 31185
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 31186
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 31187
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 31188
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 31189
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 31190
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 31191
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 31192
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 31193
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 31194
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 31195
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 31196
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 31197
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 31198
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 31199
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 31200
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 31201
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 31202
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 31203
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 31204
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 31205
        //FRC
        t15.x = fract(t15.x);
        //Instruction 31206
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 31207
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 31208
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 31209
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 31210
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 31211
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 31212
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 31213
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 31214
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 31215
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 31216
        //IF
        if(tb29){
            //Instruction 31217
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 31218
            //FRC
            t4 = fract(t4);
            //Instruction 31219
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31220
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 31221
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 31222
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 31223
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 31224
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 31225
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31226
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 31227
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31228
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 31229
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31230
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 31231
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 31232
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 31233
            //SQRT
            t44 = sqrt(t44);
            //Instruction 31234
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 31235
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 31236
            //MUL
            t45 = t45 * t5.x;
            //Instruction 31237
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 31238
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 31239
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 31240
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 31241
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 31242
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 31243
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 31244
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 31245
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 31246
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 31247
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 31248
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 31249
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 31250
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 31251
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 31252
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 31253
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 31254
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 31255
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 31256
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 31257
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 31258
            //SQRT
            t45 = sqrt(t45);
            //Instruction 31259
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 31260
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 31261
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 31262
            //MUL
            t33 = t45 * t5.x;
            //Instruction 31263
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 31264
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 31265
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 31266
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 31267
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 31268
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 31269
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 31270
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31271
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 31272
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31273
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 31274
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31275
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 31276
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 31277
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 31278
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 31279
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 31280
            //LOG
            t43 = log2(t43);
            //Instruction 31281
            //MUL
            t29 = t43 * t15.y;
            //Instruction 31282
            //EXP
            t29 = exp2(t29);
            //Instruction 31283
            //MUL
            t43 = t5.y * t45;
            //Instruction 31284
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 31285
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 31286
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 31287
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 31288
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 31289
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 31290
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 31291
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 31292
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 31293
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 31294
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 31295
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 31296
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 31297
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 31298
            //MOV
            t10.z = t11.x;
            //Instruction 31299
            //MOV
            t10.w = t9.x;
            //Instruction 31300
            //MOV
            t12.z = t8.y;
            //Instruction 31301
            //MOV
            t12.w = t13.y;
            //Instruction 31302
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 31303
            //MOV
            t13.w = t12.y;
            //Instruction 31304
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 31305
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 31306
            //MOV
            t9.w = t10.y;
            //Instruction 31307
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 31308
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 31309
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 31310
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 31311
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 31312
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 31313
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 31314
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 31315
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 31316
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 31317
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 31318
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 31319
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 31320
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 31321
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31322
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 31323
        //ELSE
        } else {
            //Instruction 31324
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 31325
        //ENDIF
        }
        //Instruction 31326
    //ELSE
    } else {
        //Instruction 31327
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 31328
    //ENDIF
    }
    //Instruction 31329
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 31330
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 31331
    //IF
    if(tb16){
        //Instruction 31332
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 31333
        //IF
        if(tb16){
            //Instruction 31334
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 31335
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 31336
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 31337
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 31338
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 31339
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31340
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31341
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31342
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31343
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 31344
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 31345
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 31346
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 31347
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31348
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 31349
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 31350
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 31351
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 31352
            //FRC
            t0 = fract(t0);
            //Instruction 31353
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 31354
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 31355
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 31356
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31357
            //ADD
            t0 = t0 + t0;
            //Instruction 31358
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 31359
            //LT
            tb44 = t6.w<0.0;
            //Instruction 31360
            //MOV
            t6.y = (-t6.w);
            //Instruction 31361
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 31362
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 31363
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 31364
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 31365
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 31366
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 31367
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 31368
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31369
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31370
            //MUL
            t46 = t0.x * t46;
            //Instruction 31371
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 31372
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31373
            //MUL
            t44 = t44 * t45;
            //Instruction 31374
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 31375
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31376
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31377
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31378
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31379
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31380
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 31381
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31382
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 31383
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31384
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 31385
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 31386
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 31387
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 31388
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31389
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 31390
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 31391
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 31392
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31393
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31394
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 31395
        //ELSE
        } else {
            //Instruction 31396
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31397
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 31398
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31399
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 31400
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 31401
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 31402
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 31403
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31404
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 31405
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 31406
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31407
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31408
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31409
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 31410
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31411
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31412
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 31413
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 31414
            //LT
            tb16 = t0.w<0.0;
            //Instruction 31415
            //MOV
            t0.y = (-t0.w);
            //Instruction 31416
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 31417
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 31418
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 31419
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 31420
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 31421
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 31422
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 31423
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31424
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31425
            //MUL
            t45 = t45 * t5.x;
            //Instruction 31426
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 31427
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31428
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31429
        //ENDIF
        }
        //Instruction 31430
    //ENDIF
    }
    //Instruction 31431
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 31432
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 31433
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 31434
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 31435
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 31436
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 31437
    //NE
    tb45 = t44!=0.0;
    //Instruction 31438
    //LOG
    t4.x = log2(t44);
    //Instruction 31439
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 31440
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 31441
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 31442
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 31443
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 31444
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 31445
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 31446
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 31447
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 31448
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 31449
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 31450
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 31451
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 31452
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31453
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 31454
    //MUL
    t44 = t44 * t45;
    //Instruction 31455
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 31456
    //MOV
    t4.y = t3.y;
    //Instruction 31457
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 31458
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 31459
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 31460
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 31461
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 31462
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 31463
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 31464
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 31465
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 31466
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 31467
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 31468
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 31469
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 31470
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 31471
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 31472
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 31473
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 31474
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 31475
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 31476
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 31477
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 31478
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 31479
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 31480
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 31481
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 31482
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 31483
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 31484
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 31485
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 31486
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 31487
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 31488
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 31489
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
bool tb9;
mediump float t16_14;
lowp float t10_14;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 31151
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 31152
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31153
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 31154
    //LT
    tb0 = t10_1<0.0;
    //Instruction 31155
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 31156
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 31157
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 31158
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 31159
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 31160
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 31161
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 31162
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 31163
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 31164
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 31165
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 31166
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 31167
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 31168
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 31169
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 31170
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 31171
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 31172
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 31173
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 31174
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 31175
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 31176
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 31177
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 31178
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31179
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31180
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20.x = tmpvar_4.w;
  tmpvar_20.y = tmpvar_5.x;
  tmpvar_20.z = tmpvar_5.y;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (FinalPosition_15, tmpvar_20, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_12.x)
   + 
    (v_100.xyz * tmpvar_12.y)
  ) + (v_101.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_102;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, tmpvar_14).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 31413
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31414
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 31415
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 31416
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 31417
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 31418
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 31419
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 31420
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 31421
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 31422
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 31423
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 31424
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 31425
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 31426
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 31427
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 31428
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 31429
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 31430
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 31431
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 31432
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 31433
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 31434
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 31435
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 31436
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 31437
        //FRC
        t15.x = fract(t15.x);
        //Instruction 31438
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 31439
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 31440
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 31441
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 31442
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 31443
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 31444
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 31445
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 31446
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 31447
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 31448
        //IF
        if(tb29){
            //Instruction 31449
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 31450
            //FRC
            t4 = fract(t4);
            //Instruction 31451
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31452
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 31453
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 31454
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 31455
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 31456
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 31457
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31458
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 31459
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31460
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 31461
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31462
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 31463
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 31464
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 31465
            //SQRT
            t44 = sqrt(t44);
            //Instruction 31466
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 31467
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 31468
            //MUL
            t45 = t45 * t5.x;
            //Instruction 31469
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 31470
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 31471
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 31472
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 31473
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 31474
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 31475
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 31476
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 31477
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 31478
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 31479
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 31480
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 31481
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 31482
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 31483
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 31484
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 31485
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 31486
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 31487
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 31488
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 31489
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 31490
            //SQRT
            t45 = sqrt(t45);
            //Instruction 31491
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 31492
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 31493
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 31494
            //MUL
            t33 = t45 * t5.x;
            //Instruction 31495
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 31496
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 31497
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 31498
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 31499
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 31500
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 31501
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 31502
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31503
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 31504
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31505
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 31506
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31507
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 31508
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 31509
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 31510
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 31511
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 31512
            //LOG
            t43 = log2(t43);
            //Instruction 31513
            //MUL
            t29 = t43 * t15.y;
            //Instruction 31514
            //EXP
            t29 = exp2(t29);
            //Instruction 31515
            //MUL
            t43 = t5.y * t45;
            //Instruction 31516
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 31517
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 31518
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 31519
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 31520
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 31521
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 31522
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 31523
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 31524
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 31525
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 31526
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 31527
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 31528
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 31529
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 31530
            //MOV
            t10.z = t11.x;
            //Instruction 31531
            //MOV
            t10.w = t9.x;
            //Instruction 31532
            //MOV
            t12.z = t8.y;
            //Instruction 31533
            //MOV
            t12.w = t13.y;
            //Instruction 31534
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 31535
            //MOV
            t13.w = t12.y;
            //Instruction 31536
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 31537
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 31538
            //MOV
            t9.w = t10.y;
            //Instruction 31539
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 31540
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 31541
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 31542
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 31543
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 31544
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 31545
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 31546
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 31547
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 31548
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 31549
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 31550
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 31551
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 31552
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 31553
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31554
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 31555
        //ELSE
        } else {
            //Instruction 31556
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 31557
        //ENDIF
        }
        //Instruction 31558
    //ELSE
    } else {
        //Instruction 31559
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 31560
    //ENDIF
    }
    //Instruction 31561
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 31562
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 31563
    //IF
    if(tb16){
        //Instruction 31564
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 31565
        //IF
        if(tb16){
            //Instruction 31566
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 31567
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 31568
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 31569
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 31570
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 31571
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31572
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31573
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31574
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31575
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 31576
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 31577
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 31578
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 31579
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31580
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 31581
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 31582
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 31583
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 31584
            //FRC
            t0 = fract(t0);
            //Instruction 31585
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 31586
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 31587
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 31588
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31589
            //ADD
            t0 = t0 + t0;
            //Instruction 31590
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 31591
            //LT
            tb44 = t6.w<0.0;
            //Instruction 31592
            //MOV
            t6.y = (-t6.w);
            //Instruction 31593
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 31594
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 31595
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 31596
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 31597
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 31598
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 31599
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 31600
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31601
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31602
            //MUL
            t46 = t0.x * t46;
            //Instruction 31603
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 31604
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31605
            //MUL
            t44 = t44 * t45;
            //Instruction 31606
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 31607
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31608
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31609
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31610
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31611
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 31612
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 31613
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31614
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 31615
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31616
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 31617
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 31618
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 31619
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 31620
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31621
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 31622
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 31623
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 31624
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31625
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31626
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 31627
        //ELSE
        } else {
            //Instruction 31628
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31629
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 31630
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31631
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 31632
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 31633
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 31634
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 31635
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31636
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 31637
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 31638
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31639
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31640
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31641
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 31642
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31643
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31644
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 31645
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 31646
            //LT
            tb16 = t0.w<0.0;
            //Instruction 31647
            //MOV
            t0.y = (-t0.w);
            //Instruction 31648
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 31649
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 31650
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 31651
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 31652
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 31653
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 31654
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 31655
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31656
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31657
            //MUL
            t45 = t45 * t5.x;
            //Instruction 31658
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 31659
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 31660
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 31661
        //ENDIF
        }
        //Instruction 31662
    //ENDIF
    }
    //Instruction 31663
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 31664
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 31665
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 31666
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 31667
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 31668
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 31669
    //NE
    tb45 = t44!=0.0;
    //Instruction 31670
    //LOG
    t4.x = log2(t44);
    //Instruction 31671
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 31672
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 31673
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 31674
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 31675
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 31676
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 31677
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 31678
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 31679
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 31680
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 31681
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 31682
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 31683
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 31684
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31685
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 31686
    //MUL
    t44 = t44 * t45;
    //Instruction 31687
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 31688
    //MOV
    t4.y = t3.y;
    //Instruction 31689
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 31690
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 31691
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 31692
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 31693
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 31694
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 31695
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 31696
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 31697
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 31698
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 31699
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 31700
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 31701
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 31702
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 31703
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 31704
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 31705
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 31706
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 31707
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 31708
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 31709
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 31710
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 31711
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 31712
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 31713
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 31714
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 31715
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 31716
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 31717
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 31718
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 31719
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 31720
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 31721
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 31388
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 31389
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31390
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 31391
    //LT
    tb0 = t10_1<0.0;
    //Instruction 31392
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 31393
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 31394
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 31395
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 31396
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 31397
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 31398
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 31399
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 31400
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 31401
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 31402
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 31403
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 31404
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 31405
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 31406
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 31407
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 31408
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 31409
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 31410
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31411
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31412
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20.x = tmpvar_4.w;
  tmpvar_20.y = tmpvar_5.x;
  tmpvar_20.z = tmpvar_5.y;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (FinalPosition_15, tmpvar_20, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_12.x)
   + 
    (v_100.xyz * tmpvar_12.y)
  ) + (v_101.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_102;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 31997
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31998
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 31999
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 32000
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 32001
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 32002
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 32003
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 32004
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 32005
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 32006
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 32007
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 32008
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 32009
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 32010
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 32011
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 32012
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 32013
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 32014
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 32015
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 32016
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 32017
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 32018
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 32019
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 32020
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 32021
        //FRC
        t15.x = fract(t15.x);
        //Instruction 32022
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 32023
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 32024
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 32025
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 32026
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 32027
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 32028
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 32029
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 32030
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 32031
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 32032
        //IF
        if(tb29){
            //Instruction 32033
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 32034
            //FRC
            t4 = fract(t4);
            //Instruction 32035
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32036
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 32037
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 32038
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 32039
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 32040
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 32041
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 32042
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 32043
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32044
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 32045
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32046
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 32047
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 32048
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 32049
            //SQRT
            t44 = sqrt(t44);
            //Instruction 32050
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 32051
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 32052
            //MUL
            t45 = t45 * t5.x;
            //Instruction 32053
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 32054
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 32055
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 32056
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 32057
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 32058
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 32059
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 32060
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 32061
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 32062
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 32063
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 32064
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 32065
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 32066
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 32067
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 32068
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 32069
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 32070
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 32071
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 32072
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 32073
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 32074
            //SQRT
            t45 = sqrt(t45);
            //Instruction 32075
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 32076
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 32077
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 32078
            //MUL
            t33 = t45 * t5.x;
            //Instruction 32079
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 32080
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 32081
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 32082
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 32083
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 32084
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 32085
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 32086
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 32087
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 32088
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32089
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 32090
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32091
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 32092
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 32093
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 32094
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 32095
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 32096
            //LOG
            t43 = log2(t43);
            //Instruction 32097
            //MUL
            t29 = t43 * t15.y;
            //Instruction 32098
            //EXP
            t29 = exp2(t29);
            //Instruction 32099
            //MUL
            t43 = t5.y * t45;
            //Instruction 32100
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 32101
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 32102
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 32103
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 32104
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 32105
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 32106
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 32107
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 32108
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 32109
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 32110
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 32111
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 32112
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 32113
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 32114
            //MOV
            t10.z = t11.x;
            //Instruction 32115
            //MOV
            t10.w = t9.x;
            //Instruction 32116
            //MOV
            t12.z = t8.y;
            //Instruction 32117
            //MOV
            t12.w = t13.y;
            //Instruction 32118
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 32119
            //MOV
            t13.w = t12.y;
            //Instruction 32120
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 32121
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 32122
            //MOV
            t9.w = t10.y;
            //Instruction 32123
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 32124
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 32125
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 32126
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 32127
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 32128
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 32129
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 32130
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 32131
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 32132
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 32133
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 32134
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 32135
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 32136
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 32137
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 32138
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 32139
        //ELSE
        } else {
            //Instruction 32140
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 32141
        //ENDIF
        }
        //Instruction 32142
    //ELSE
    } else {
        //Instruction 32143
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 32144
    //ENDIF
    }
    //Instruction 32145
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 32146
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 32147
    //IF
    if(tb16){
        //Instruction 32148
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 32149
        //IF
        if(tb16){
            //Instruction 32150
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32151
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 32152
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 32153
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 32154
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 32155
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 32156
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32157
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 32158
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32159
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 32160
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 32161
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 32162
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 32163
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32164
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 32165
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 32166
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 32167
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32168
            //FRC
            t0 = fract(t0);
            //Instruction 32169
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32170
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 32171
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32172
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32173
            //ADD
            t0 = t0 + t0;
            //Instruction 32174
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 32175
            //LT
            tb44 = t6.w<0.0;
            //Instruction 32176
            //MOV
            t6.y = (-t6.w);
            //Instruction 32177
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 32178
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 32179
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 32180
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 32181
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 32182
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 32183
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 32184
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32185
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32186
            //MUL
            t46 = t0.x * t46;
            //Instruction 32187
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 32188
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 32189
            //MUL
            t44 = t44 * t45;
            //Instruction 32190
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 32191
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 32192
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32193
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 32194
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32195
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 32196
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 32197
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32198
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 32199
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32200
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 32201
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 32202
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 32203
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 32204
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 32205
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 32206
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 32207
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 32208
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 32209
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 32210
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 32211
        //ELSE
        } else {
            //Instruction 32212
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32213
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 32214
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32215
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 32216
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 32217
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 32218
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 32219
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32220
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 32221
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 32222
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 32223
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 32224
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32225
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 32226
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 32227
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 32228
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 32229
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 32230
            //LT
            tb16 = t0.w<0.0;
            //Instruction 32231
            //MOV
            t0.y = (-t0.w);
            //Instruction 32232
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 32233
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 32234
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 32235
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 32236
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 32237
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 32238
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 32239
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32240
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32241
            //MUL
            t45 = t45 * t5.x;
            //Instruction 32242
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 32243
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 32244
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 32245
        //ENDIF
        }
        //Instruction 32246
    //ENDIF
    }
    //Instruction 32247
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 32248
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 32249
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32250
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 32251
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 32252
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 32253
    //NE
    tb45 = t44!=0.0;
    //Instruction 32254
    //LOG
    t4.x = log2(t44);
    //Instruction 32255
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 32256
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 32257
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 32258
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32259
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32260
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 32261
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 32262
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32263
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 32264
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32265
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 32266
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 32267
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 32268
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32269
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 32270
    //MUL
    t44 = t44 * t45;
    //Instruction 32271
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 32272
    //MOV
    t4.y = t3.y;
    //Instruction 32273
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 32274
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 32275
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 32276
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 32277
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 32278
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 32279
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 32280
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 32281
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 32282
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 32283
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 32284
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 32285
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 32286
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 32287
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 32288
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 32289
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 32290
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 32291
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 32292
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 32293
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 32294
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 32295
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 32296
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 32297
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 32298
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 32299
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 32300
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 32301
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 32302
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 32303
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 32304
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 32305
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 31979
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 31980
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31981
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 31982
    //LT
    tb0 = t10_1<0.0;
    //Instruction 31983
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 31984
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 31985
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 31986
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 31987
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 31988
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 31989
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 31990
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 31991
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 31992
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 31993
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 31994
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31995
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31996
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_4.w;
  tmpvar_22.y = tmpvar_5.x;
  tmpvar_22.z = tmpvar_5.y;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (FinalPosition_18, tmpvar_22, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_23;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_19 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * vRotatedWindVector_17.zxy) - (tmpvar_34.zxy * vRotatedWindVector_17.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_17, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_15 = vDirection_28;
    FinalPosition_18 = vPos_27;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = FinalPosition_18;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (FinalPosition_18 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_16 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_18 = vPos_68;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_104;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 31522
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31523
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 31524
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 31525
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 31526
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 31527
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 31528
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 31529
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 31530
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 31531
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 31532
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 31533
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 31534
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 31535
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 31536
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 31537
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 31538
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 31539
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 31540
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 31541
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 31542
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 31543
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 31544
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 31545
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 31546
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 31547
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 31548
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 31549
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 31550
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 31551
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 31552
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 31553
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 31554
        //FRC
        t30.x = fract(t30.x);
        //Instruction 31555
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 31556
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 31557
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 31558
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 31559
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 31560
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 31561
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 31562
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 31563
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 31564
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 31565
        //IF
        if(tb45){
            //Instruction 31566
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 31567
            //FRC
            t5 = fract(t5);
            //Instruction 31568
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31569
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 31570
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 31571
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 31572
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 31573
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 31574
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 31575
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 31576
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31577
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 31578
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31579
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 31580
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 31581
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 31582
            //SQRT
            t46 = sqrt(t46);
            //Instruction 31583
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 31584
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 31585
            //MUL
            t48 = t48 * t49;
            //Instruction 31586
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 31587
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 31588
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 31589
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 31590
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 31591
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 31592
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 31593
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 31594
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 31595
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 31596
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 31597
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 31598
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 31599
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 31600
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 31601
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 31602
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 31603
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 31604
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 31605
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 31606
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 31607
            //SQRT
            t48 = sqrt(t48);
            //Instruction 31608
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 31609
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 31610
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 31611
            //MUL
            t6.x = t48 * t49;
            //Instruction 31612
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 31613
            //LT
            tb18 = t18<(-t18);
            //Instruction 31614
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 31615
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 31616
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 31617
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 31618
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 31619
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 31620
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 31621
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31622
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 31623
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31624
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 31625
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 31626
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 31627
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 31628
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 31629
            //LOG
            t45 = log2(t45);
            //Instruction 31630
            //MUL
            t45 = t45 * t7.y;
            //Instruction 31631
            //EXP
            t45 = exp2(t45);
            //Instruction 31632
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 31633
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 31634
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 31635
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 31636
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 31637
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 31638
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 31639
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 31640
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 31641
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 31642
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 31643
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 31644
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 31645
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 31646
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 31647
            //MOV
            t11.z = t12.x;
            //Instruction 31648
            //MOV
            t11.w = t10.x;
            //Instruction 31649
            //MOV
            t13.z = t9.y;
            //Instruction 31650
            //MOV
            t13.w = t14.y;
            //Instruction 31651
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 31652
            //MOV
            t14.w = t13.y;
            //Instruction 31653
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 31654
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 31655
            //MOV
            t10.w = t11.y;
            //Instruction 31656
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 31657
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 31658
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 31659
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 31660
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 31661
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 31662
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 31663
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 31664
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 31665
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 31666
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 31667
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 31668
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 31669
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 31670
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 31671
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 31672
        //ELSE
        } else {
            //Instruction 31673
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 31674
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 31675
        //ENDIF
        }
        //Instruction 31676
    //ELSE
    } else {
        //Instruction 31677
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 31678
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 31679
    //ENDIF
    }
    //Instruction 31680
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 31681
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 31682
    //IF
    if(tb46){
        //Instruction 31683
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 31684
        //IF
        if(tb46){
            //Instruction 31685
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 31686
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 31687
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 31688
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 31689
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 31690
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 31691
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31692
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 31693
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31694
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 31695
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 31696
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 31697
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31698
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 31699
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 31700
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 31701
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 31702
            //FRC
            t2 = fract(t2);
            //Instruction 31703
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 31704
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 31705
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 31706
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31707
            //ADD
            t2 = t2 + t2;
            //Instruction 31708
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 31709
            //LT
            tb48 = t7.w<0.0;
            //Instruction 31710
            //MOV
            t7.y = (-t7.w);
            //Instruction 31711
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 31712
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 31713
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 31714
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 31715
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 31716
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 31717
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 31718
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31719
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31720
            //MUL
            t50 = t2.x * t50;
            //Instruction 31721
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 31722
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31723
            //MUL
            t48 = t48 * t49;
            //Instruction 31724
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 31725
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 31726
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31727
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31728
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31729
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 31730
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 31731
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31732
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 31733
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31734
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 31735
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 31736
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 31737
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 31738
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31739
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 31740
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 31741
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 31742
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31743
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 31744
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 31745
        //ELSE
        } else {
            //Instruction 31746
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31747
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31748
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31749
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 31750
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 31751
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 31752
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31753
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 31754
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 31755
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31756
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 31757
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31758
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 31759
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31760
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31761
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 31762
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 31763
            //LT
            tb0 = t2.w<0.0;
            //Instruction 31764
            //MOV
            t2.y = (-t2.w);
            //Instruction 31765
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 31766
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 31767
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 31768
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 31769
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 31770
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 31771
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 31772
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31773
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31774
            //MUL
            t48 = t48 * t6.x;
            //Instruction 31775
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 31776
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 31777
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 31778
        //ENDIF
        }
        //Instruction 31779
    //ENDIF
    }
    //Instruction 31780
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 31781
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 31782
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 31783
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 31784
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 31785
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 31786
    //NE
    tb48 = t46!=0.0;
    //Instruction 31787
    //LOG
    t49 = log2(t46);
    //Instruction 31788
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 31789
    //EXP
    t49 = exp2(t49);
    //Instruction 31790
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 31791
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 31792
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 31793
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 31794
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 31795
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 31796
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 31797
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 31798
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 31799
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 31800
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 31801
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 31802
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 31803
    //MUL
    t46 = t46 * t48;
    //Instruction 31804
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 31805
    //MOV
    t5.y = t4.y;
    //Instruction 31806
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 31807
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 31808
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 31809
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 31810
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 31811
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 31812
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 31813
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 31814
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 31815
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 31816
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 31817
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 31818
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 31819
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 31820
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 31821
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 31822
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 31823
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 31824
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 31825
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 31826
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 31827
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 31828
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 31829
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 31830
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 31831
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 31832
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 31833
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 31834
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 31835
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 31836
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 31837
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 31838
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 31490
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 31491
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31492
    //LT
    tb12 = t10_1<0.0;
    //Instruction 31493
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 31494
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 31495
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 31496
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 31497
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 31498
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 31499
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 31500
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 31501
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 31502
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 31503
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 31504
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 31505
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 31506
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 31507
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 31508
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 31509
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 31510
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 31511
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 31512
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 31513
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 31514
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 31515
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 31516
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 31517
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 31518
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 31519
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31520
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31521
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_4.w;
  tmpvar_22.y = tmpvar_5.x;
  tmpvar_22.z = tmpvar_5.y;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (FinalPosition_18, tmpvar_22, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_23;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_19 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * vRotatedWindVector_17.zxy) - (tmpvar_34.zxy * vRotatedWindVector_17.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_17, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_15 = vDirection_28;
    FinalPosition_18 = vPos_27;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = FinalPosition_18;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (FinalPosition_18 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_16 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_18 = vPos_68;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_104;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 31743
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31744
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 31745
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 31746
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 31747
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 31748
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 31749
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 31750
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 31751
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 31752
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 31753
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 31754
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 31755
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 31756
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 31757
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 31758
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 31759
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 31760
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 31761
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 31762
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 31763
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 31764
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 31765
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 31766
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 31767
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 31768
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 31769
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 31770
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 31771
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 31772
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 31773
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 31774
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 31775
        //FRC
        t30.x = fract(t30.x);
        //Instruction 31776
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 31777
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 31778
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 31779
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 31780
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 31781
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 31782
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 31783
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 31784
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 31785
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 31786
        //IF
        if(tb45){
            //Instruction 31787
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 31788
            //FRC
            t5 = fract(t5);
            //Instruction 31789
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31790
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 31791
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 31792
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 31793
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 31794
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 31795
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 31796
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 31797
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31798
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 31799
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31800
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 31801
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 31802
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 31803
            //SQRT
            t46 = sqrt(t46);
            //Instruction 31804
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 31805
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 31806
            //MUL
            t48 = t48 * t49;
            //Instruction 31807
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 31808
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 31809
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 31810
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 31811
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 31812
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 31813
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 31814
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 31815
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 31816
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 31817
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 31818
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 31819
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 31820
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 31821
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 31822
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 31823
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 31824
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 31825
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 31826
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 31827
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 31828
            //SQRT
            t48 = sqrt(t48);
            //Instruction 31829
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 31830
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 31831
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 31832
            //MUL
            t6.x = t48 * t49;
            //Instruction 31833
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 31834
            //LT
            tb18 = t18<(-t18);
            //Instruction 31835
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 31836
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 31837
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 31838
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 31839
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 31840
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 31841
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 31842
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31843
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 31844
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31845
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 31846
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 31847
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 31848
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 31849
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 31850
            //LOG
            t45 = log2(t45);
            //Instruction 31851
            //MUL
            t45 = t45 * t7.y;
            //Instruction 31852
            //EXP
            t45 = exp2(t45);
            //Instruction 31853
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 31854
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 31855
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 31856
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 31857
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 31858
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 31859
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 31860
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 31861
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 31862
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 31863
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 31864
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 31865
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 31866
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 31867
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 31868
            //MOV
            t11.z = t12.x;
            //Instruction 31869
            //MOV
            t11.w = t10.x;
            //Instruction 31870
            //MOV
            t13.z = t9.y;
            //Instruction 31871
            //MOV
            t13.w = t14.y;
            //Instruction 31872
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 31873
            //MOV
            t14.w = t13.y;
            //Instruction 31874
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 31875
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 31876
            //MOV
            t10.w = t11.y;
            //Instruction 31877
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 31878
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 31879
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 31880
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 31881
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 31882
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 31883
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 31884
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 31885
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 31886
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 31887
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 31888
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 31889
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 31890
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 31891
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 31892
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 31893
        //ELSE
        } else {
            //Instruction 31894
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 31895
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 31896
        //ENDIF
        }
        //Instruction 31897
    //ELSE
    } else {
        //Instruction 31898
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 31899
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 31900
    //ENDIF
    }
    //Instruction 31901
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 31902
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 31903
    //IF
    if(tb46){
        //Instruction 31904
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 31905
        //IF
        if(tb46){
            //Instruction 31906
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 31907
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 31908
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 31909
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 31910
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 31911
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 31912
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31913
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 31914
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31915
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 31916
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 31917
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 31918
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31919
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 31920
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 31921
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 31922
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 31923
            //FRC
            t2 = fract(t2);
            //Instruction 31924
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 31925
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 31926
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 31927
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 31928
            //ADD
            t2 = t2 + t2;
            //Instruction 31929
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 31930
            //LT
            tb48 = t7.w<0.0;
            //Instruction 31931
            //MOV
            t7.y = (-t7.w);
            //Instruction 31932
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 31933
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 31934
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 31935
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 31936
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 31937
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 31938
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 31939
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31940
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31941
            //MUL
            t50 = t2.x * t50;
            //Instruction 31942
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 31943
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 31944
            //MUL
            t48 = t48 * t49;
            //Instruction 31945
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 31946
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 31947
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31948
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 31949
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 31950
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 31951
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 31952
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31953
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 31954
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31955
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 31956
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 31957
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 31958
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 31959
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 31960
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 31961
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 31962
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 31963
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 31964
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 31965
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 31966
        //ELSE
        } else {
            //Instruction 31967
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 31968
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 31969
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31970
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 31971
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 31972
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 31973
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 31974
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 31975
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 31976
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 31977
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 31978
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31979
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 31980
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 31981
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 31982
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 31983
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 31984
            //LT
            tb0 = t2.w<0.0;
            //Instruction 31985
            //MOV
            t2.y = (-t2.w);
            //Instruction 31986
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 31987
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 31988
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 31989
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 31990
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 31991
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 31992
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 31993
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 31994
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 31995
            //MUL
            t48 = t48 * t6.x;
            //Instruction 31996
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 31997
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 31998
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 31999
        //ENDIF
        }
        //Instruction 32000
    //ENDIF
    }
    //Instruction 32001
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 32002
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 32003
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32004
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 32005
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 32006
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 32007
    //NE
    tb48 = t46!=0.0;
    //Instruction 32008
    //LOG
    t49 = log2(t46);
    //Instruction 32009
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 32010
    //EXP
    t49 = exp2(t49);
    //Instruction 32011
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 32012
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32013
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32014
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 32015
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 32016
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32017
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 32018
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32019
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 32020
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 32021
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 32022
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32023
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 32024
    //MUL
    t46 = t46 * t48;
    //Instruction 32025
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 32026
    //MOV
    t5.y = t4.y;
    //Instruction 32027
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 32028
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 32029
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 32030
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 32031
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 32032
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 32033
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 32034
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 32035
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 32036
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 32037
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 32038
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 32039
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 32040
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 32041
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 32042
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 32043
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 32044
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 32045
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 32046
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 32047
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 32048
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 32049
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 32050
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 32051
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 32052
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 32053
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 32054
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 32055
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 32056
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 32057
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 32058
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 32059
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 31722
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 31723
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31724
    //LT
    tb12 = t10_1<0.0;
    //Instruction 31725
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 31726
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 31727
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 31728
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 31729
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 31730
    //MAX
    t16_3 = max(t16_6.z, t16_6.y);
    //Instruction 31731
    //MAX
    t16_3 = max(t16_6.x, t16_3);
    //Instruction 31732
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 31733
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 31734
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 31735
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 31736
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 31737
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 31738
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 31739
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 31740
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31741
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31742
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_4.w;
  tmpvar_22.y = tmpvar_5.x;
  tmpvar_22.z = tmpvar_5.y;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (FinalPosition_18, tmpvar_22, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_23;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_19 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * vRotatedWindVector_17.zxy) - (tmpvar_34.zxy * vRotatedWindVector_17.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_17, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_15 = vDirection_28;
    FinalPosition_18 = vPos_27;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = FinalPosition_18;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (FinalPosition_18 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_16 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_18 = vPos_68;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_104;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_5.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 32345
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 32346
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 32347
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 32348
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 32349
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 32350
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 32351
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 32352
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 32353
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 32354
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 32355
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 32356
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 32357
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 32358
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 32359
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 32360
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 32361
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 32362
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 32363
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 32364
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 32365
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 32366
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 32367
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 32368
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 32369
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 32370
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 32371
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 32372
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 32373
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 32374
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 32375
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 32376
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 32377
        //FRC
        t30.x = fract(t30.x);
        //Instruction 32378
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 32379
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 32380
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 32381
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 32382
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 32383
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 32384
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 32385
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 32386
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 32387
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 32388
        //IF
        if(tb45){
            //Instruction 32389
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 32390
            //FRC
            t5 = fract(t5);
            //Instruction 32391
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32392
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 32393
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 32394
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 32395
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 32396
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 32397
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32398
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 32399
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32400
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 32401
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32402
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 32403
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 32404
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 32405
            //SQRT
            t46 = sqrt(t46);
            //Instruction 32406
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 32407
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 32408
            //MUL
            t48 = t48 * t49;
            //Instruction 32409
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 32410
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 32411
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 32412
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 32413
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 32414
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 32415
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 32416
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 32417
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 32418
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 32419
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 32420
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 32421
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 32422
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 32423
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 32424
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 32425
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 32426
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 32427
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 32428
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 32429
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 32430
            //SQRT
            t48 = sqrt(t48);
            //Instruction 32431
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 32432
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 32433
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 32434
            //MUL
            t6.x = t48 * t49;
            //Instruction 32435
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 32436
            //LT
            tb18 = t18<(-t18);
            //Instruction 32437
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 32438
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 32439
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 32440
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 32441
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 32442
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32443
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 32444
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32445
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 32446
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32447
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 32448
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 32449
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 32450
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 32451
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 32452
            //LOG
            t45 = log2(t45);
            //Instruction 32453
            //MUL
            t45 = t45 * t7.y;
            //Instruction 32454
            //EXP
            t45 = exp2(t45);
            //Instruction 32455
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 32456
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 32457
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 32458
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 32459
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 32460
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 32461
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 32462
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 32463
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 32464
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 32465
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 32466
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 32467
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 32468
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 32469
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 32470
            //MOV
            t11.z = t12.x;
            //Instruction 32471
            //MOV
            t11.w = t10.x;
            //Instruction 32472
            //MOV
            t13.z = t9.y;
            //Instruction 32473
            //MOV
            t13.w = t14.y;
            //Instruction 32474
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 32475
            //MOV
            t14.w = t13.y;
            //Instruction 32476
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 32477
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 32478
            //MOV
            t10.w = t11.y;
            //Instruction 32479
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 32480
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 32481
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 32482
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 32483
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 32484
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 32485
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 32486
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 32487
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 32488
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 32489
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 32490
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 32491
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 32492
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 32493
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 32494
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 32495
        //ELSE
        } else {
            //Instruction 32496
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 32497
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 32498
        //ENDIF
        }
        //Instruction 32499
    //ELSE
    } else {
        //Instruction 32500
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 32501
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 32502
    //ENDIF
    }
    //Instruction 32503
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 32504
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 32505
    //IF
    if(tb46){
        //Instruction 32506
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 32507
        //IF
        if(tb46){
            //Instruction 32508
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32509
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 32510
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 32511
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 32512
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 32513
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 32514
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32515
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32516
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32517
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 32518
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 32519
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 32520
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32521
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 32522
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 32523
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 32524
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32525
            //FRC
            t2 = fract(t2);
            //Instruction 32526
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32527
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 32528
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32529
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32530
            //ADD
            t2 = t2 + t2;
            //Instruction 32531
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 32532
            //LT
            tb48 = t7.w<0.0;
            //Instruction 32533
            //MOV
            t7.y = (-t7.w);
            //Instruction 32534
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 32535
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 32536
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 32537
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 32538
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 32539
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 32540
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 32541
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32542
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32543
            //MUL
            t50 = t2.x * t50;
            //Instruction 32544
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 32545
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 32546
            //MUL
            t48 = t48 * t49;
            //Instruction 32547
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 32548
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32549
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32550
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 32551
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32552
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 32553
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 32554
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32555
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 32556
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32557
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 32558
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 32559
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 32560
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 32561
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 32562
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 32563
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 32564
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 32565
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 32566
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 32567
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 32568
        //ELSE
        } else {
            //Instruction 32569
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32570
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 32571
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32572
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 32573
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 32574
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 32575
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32576
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 32577
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 32578
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 32579
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32580
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32581
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 32582
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 32583
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 32584
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 32585
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 32586
            //LT
            tb0 = t2.w<0.0;
            //Instruction 32587
            //MOV
            t2.y = (-t2.w);
            //Instruction 32588
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 32589
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 32590
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 32591
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 32592
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 32593
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 32594
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 32595
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32596
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32597
            //MUL
            t48 = t48 * t6.x;
            //Instruction 32598
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 32599
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 32600
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32601
        //ENDIF
        }
        //Instruction 32602
    //ENDIF
    }
    //Instruction 32603
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 32604
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 32605
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32606
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 32607
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 32608
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 32609
    //NE
    tb48 = t46!=0.0;
    //Instruction 32610
    //LOG
    t49 = log2(t46);
    //Instruction 32611
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 32612
    //EXP
    t49 = exp2(t49);
    //Instruction 32613
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 32614
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32615
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32616
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 32617
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 32618
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32619
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 32620
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32621
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 32622
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 32623
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 32624
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32625
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 32626
    //MUL
    t46 = t46 * t48;
    //Instruction 32627
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 32628
    //MOV
    t5.y = t4.y;
    //Instruction 32629
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 32630
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 32631
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 32632
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 32633
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 32634
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 32635
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 32636
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 32637
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 32638
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 32639
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 32640
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 32641
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 32642
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 32643
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 32644
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 32645
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 32646
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 32647
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 32648
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 32649
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 32650
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 32651
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 32652
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 32653
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 32654
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 32655
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 32656
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 32657
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 32658
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 32659
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 32660
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 32661
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
mediump vec3 t16_7;
bool tb9;
mediump float t16_14;
lowp float t10_14;
bool tb15;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 32306
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 32307
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 32308
    //LT
    tb15 = t10_1<0.0;
    //Instruction 32309
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 32310
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 32311
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 32312
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 32313
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 32314
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 32315
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 32316
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 32317
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 32318
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 32319
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 32320
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 32321
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 32322
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 32323
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 32324
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 32325
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 32326
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 32327
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 32328
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 32329
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 32330
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 32331
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 32332
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 32333
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 32334
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 32335
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 32336
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 32337
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 32338
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 32339
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 32340
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 32341
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 32342
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 32343
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 32344
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_4.w;
  tmpvar_22.y = tmpvar_5.x;
  tmpvar_22.z = tmpvar_5.y;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (FinalPosition_18, tmpvar_22, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_23;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_19 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * vRotatedWindVector_17.zxy) - (tmpvar_34.zxy * vRotatedWindVector_17.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_17, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_15 = vDirection_28;
    FinalPosition_18 = vPos_27;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = FinalPosition_18;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (FinalPosition_18 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_16 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_18 = vPos_68;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_104;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 31873
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 31874
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 31875
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 31876
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 31877
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 31878
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 31879
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 31880
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 31881
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 31882
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 31883
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 31884
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 31885
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 31886
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 31887
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 31888
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 31889
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 31890
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 31891
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 31892
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 31893
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 31894
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 31895
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 31896
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 31897
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 31898
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 31899
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 31900
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 31901
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 31902
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 31903
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 31904
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 31905
        //FRC
        t30.x = fract(t30.x);
        //Instruction 31906
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 31907
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 31908
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 31909
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 31910
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 31911
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 31912
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 31913
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 31914
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 31915
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 31916
        //IF
        if(tb45){
            //Instruction 31917
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 31918
            //FRC
            t5 = fract(t5);
            //Instruction 31919
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 31920
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 31921
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 31922
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 31923
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 31924
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 31925
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 31926
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 31927
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31928
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 31929
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31930
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 31931
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 31932
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 31933
            //SQRT
            t46 = sqrt(t46);
            //Instruction 31934
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 31935
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 31936
            //MUL
            t48 = t48 * t49;
            //Instruction 31937
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 31938
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 31939
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 31940
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 31941
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 31942
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 31943
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 31944
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 31945
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 31946
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 31947
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 31948
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 31949
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 31950
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 31951
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 31952
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 31953
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 31954
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 31955
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 31956
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 31957
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 31958
            //SQRT
            t48 = sqrt(t48);
            //Instruction 31959
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 31960
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 31961
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 31962
            //MUL
            t6.x = t48 * t49;
            //Instruction 31963
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 31964
            //LT
            tb18 = t18<(-t18);
            //Instruction 31965
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 31966
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 31967
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 31968
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 31969
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 31970
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 31971
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 31972
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 31973
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 31974
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 31975
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 31976
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 31977
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 31978
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 31979
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 31980
            //LOG
            t45 = log2(t45);
            //Instruction 31981
            //MUL
            t45 = t45 * t7.y;
            //Instruction 31982
            //EXP
            t45 = exp2(t45);
            //Instruction 31983
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 31984
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 31985
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 31986
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 31987
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 31988
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 31989
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 31990
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 31991
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 31992
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 31993
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 31994
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 31995
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 31996
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 31997
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 31998
            //MOV
            t11.z = t12.x;
            //Instruction 31999
            //MOV
            t11.w = t10.x;
            //Instruction 32000
            //MOV
            t13.z = t9.y;
            //Instruction 32001
            //MOV
            t13.w = t14.y;
            //Instruction 32002
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 32003
            //MOV
            t14.w = t13.y;
            //Instruction 32004
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 32005
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 32006
            //MOV
            t10.w = t11.y;
            //Instruction 32007
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 32008
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 32009
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 32010
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 32011
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 32012
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 32013
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 32014
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 32015
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 32016
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 32017
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 32018
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 32019
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 32020
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 32021
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 32022
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 32023
        //ELSE
        } else {
            //Instruction 32024
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 32025
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 32026
        //ENDIF
        }
        //Instruction 32027
    //ELSE
    } else {
        //Instruction 32028
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 32029
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 32030
    //ENDIF
    }
    //Instruction 32031
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 32032
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 32033
    //IF
    if(tb46){
        //Instruction 32034
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 32035
        //IF
        if(tb46){
            //Instruction 32036
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32037
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 32038
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 32039
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 32040
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 32041
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 32042
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32043
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32044
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32045
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 32046
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 32047
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 32048
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32049
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 32050
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 32051
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 32052
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32053
            //FRC
            t2 = fract(t2);
            //Instruction 32054
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32055
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 32056
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32057
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32058
            //ADD
            t2 = t2 + t2;
            //Instruction 32059
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 32060
            //LT
            tb48 = t7.w<0.0;
            //Instruction 32061
            //MOV
            t7.y = (-t7.w);
            //Instruction 32062
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 32063
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 32064
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 32065
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 32066
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 32067
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 32068
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 32069
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32070
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32071
            //MUL
            t50 = t2.x * t50;
            //Instruction 32072
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 32073
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 32074
            //MUL
            t48 = t48 * t49;
            //Instruction 32075
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 32076
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32077
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32078
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 32079
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32080
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 32081
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 32082
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32083
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 32084
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32085
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 32086
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 32087
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 32088
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 32089
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 32090
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 32091
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 32092
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 32093
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 32094
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 32095
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 32096
        //ELSE
        } else {
            //Instruction 32097
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32098
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 32099
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32100
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 32101
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 32102
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 32103
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32104
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 32105
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 32106
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 32107
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32108
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32109
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 32110
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 32111
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 32112
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 32113
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 32114
            //LT
            tb0 = t2.w<0.0;
            //Instruction 32115
            //MOV
            t2.y = (-t2.w);
            //Instruction 32116
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 32117
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 32118
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 32119
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 32120
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 32121
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 32122
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 32123
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32124
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32125
            //MUL
            t48 = t48 * t6.x;
            //Instruction 32126
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 32127
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 32128
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32129
        //ENDIF
        }
        //Instruction 32130
    //ENDIF
    }
    //Instruction 32131
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 32132
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 32133
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32134
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 32135
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 32136
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 32137
    //NE
    tb48 = t46!=0.0;
    //Instruction 32138
    //LOG
    t49 = log2(t46);
    //Instruction 32139
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 32140
    //EXP
    t49 = exp2(t49);
    //Instruction 32141
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 32142
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32143
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32144
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 32145
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 32146
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32147
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 32148
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32149
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 32150
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 32151
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 32152
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32153
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 32154
    //MUL
    t46 = t46 * t48;
    //Instruction 32155
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 32156
    //MOV
    t5.y = t4.y;
    //Instruction 32157
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 32158
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 32159
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 32160
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 32161
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 32162
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 32163
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 32164
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 32165
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 32166
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 32167
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 32168
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 32169
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 32170
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 32171
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 32172
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 32173
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 32174
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 32175
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 32176
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 32177
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 32178
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 32179
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 32180
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 32181
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 32182
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 32183
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 32184
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 32185
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 32186
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 32187
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 32188
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 32189
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_6;
highp float t12;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 31839
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 31840
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 31841
    //LT
    tb12 = t10_1<0.0;
    //Instruction 31842
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 31843
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 31844
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 31845
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 31846
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 31847
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 31848
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 31849
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 31850
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 31851
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 31852
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 31853
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 31854
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 31855
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 31856
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 31857
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 31858
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 31859
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 31860
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 31861
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 31862
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 31863
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 31864
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 31865
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 31866
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 31867
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 31868
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 31869
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 31870
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 31871
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 31872
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_4.w;
  tmpvar_22.y = tmpvar_5.x;
  tmpvar_22.z = tmpvar_5.y;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (FinalPosition_18, tmpvar_22, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_23;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_19 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * vRotatedWindVector_17.zxy) - (tmpvar_34.zxy * vRotatedWindVector_17.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_17, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_15 = vDirection_28;
    FinalPosition_18 = vPos_27;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = FinalPosition_18;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (FinalPosition_18 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_16 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_18 = vPos_68;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_104;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 32087
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 32088
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 32089
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 32090
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 32091
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 32092
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 32093
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 32094
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 32095
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 32096
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 32097
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 32098
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 32099
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 32100
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 32101
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 32102
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 32103
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 32104
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 32105
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 32106
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 32107
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 32108
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 32109
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 32110
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 32111
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 32112
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 32113
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 32114
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 32115
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 32116
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 32117
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 32118
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 32119
        //FRC
        t30.x = fract(t30.x);
        //Instruction 32120
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 32121
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 32122
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 32123
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 32124
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 32125
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 32126
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 32127
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 32128
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 32129
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 32130
        //IF
        if(tb45){
            //Instruction 32131
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 32132
            //FRC
            t5 = fract(t5);
            //Instruction 32133
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32134
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 32135
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 32136
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 32137
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 32138
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 32139
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32140
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 32141
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32142
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 32143
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32144
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 32145
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 32146
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 32147
            //SQRT
            t46 = sqrt(t46);
            //Instruction 32148
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 32149
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 32150
            //MUL
            t48 = t48 * t49;
            //Instruction 32151
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 32152
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 32153
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 32154
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 32155
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 32156
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 32157
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 32158
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 32159
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 32160
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 32161
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 32162
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 32163
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 32164
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 32165
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 32166
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 32167
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 32168
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 32169
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 32170
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 32171
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 32172
            //SQRT
            t48 = sqrt(t48);
            //Instruction 32173
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 32174
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 32175
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 32176
            //MUL
            t6.x = t48 * t49;
            //Instruction 32177
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 32178
            //LT
            tb18 = t18<(-t18);
            //Instruction 32179
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 32180
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 32181
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 32182
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 32183
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 32184
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32185
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 32186
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32187
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 32188
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32189
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 32190
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 32191
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 32192
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 32193
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 32194
            //LOG
            t45 = log2(t45);
            //Instruction 32195
            //MUL
            t45 = t45 * t7.y;
            //Instruction 32196
            //EXP
            t45 = exp2(t45);
            //Instruction 32197
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 32198
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 32199
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 32200
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 32201
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 32202
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 32203
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 32204
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 32205
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 32206
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 32207
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 32208
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 32209
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 32210
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 32211
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 32212
            //MOV
            t11.z = t12.x;
            //Instruction 32213
            //MOV
            t11.w = t10.x;
            //Instruction 32214
            //MOV
            t13.z = t9.y;
            //Instruction 32215
            //MOV
            t13.w = t14.y;
            //Instruction 32216
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 32217
            //MOV
            t14.w = t13.y;
            //Instruction 32218
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 32219
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 32220
            //MOV
            t10.w = t11.y;
            //Instruction 32221
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 32222
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 32223
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 32224
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 32225
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 32226
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 32227
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 32228
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 32229
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 32230
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 32231
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 32232
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 32233
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 32234
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 32235
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 32236
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 32237
        //ELSE
        } else {
            //Instruction 32238
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 32239
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 32240
        //ENDIF
        }
        //Instruction 32241
    //ELSE
    } else {
        //Instruction 32242
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 32243
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 32244
    //ENDIF
    }
    //Instruction 32245
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 32246
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 32247
    //IF
    if(tb46){
        //Instruction 32248
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 32249
        //IF
        if(tb46){
            //Instruction 32250
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32251
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 32252
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 32253
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 32254
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 32255
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 32256
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32257
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32258
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32259
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 32260
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 32261
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 32262
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32263
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 32264
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 32265
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 32266
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32267
            //FRC
            t2 = fract(t2);
            //Instruction 32268
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32269
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 32270
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32271
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32272
            //ADD
            t2 = t2 + t2;
            //Instruction 32273
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 32274
            //LT
            tb48 = t7.w<0.0;
            //Instruction 32275
            //MOV
            t7.y = (-t7.w);
            //Instruction 32276
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 32277
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 32278
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 32279
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 32280
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 32281
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 32282
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 32283
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32284
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32285
            //MUL
            t50 = t2.x * t50;
            //Instruction 32286
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 32287
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 32288
            //MUL
            t48 = t48 * t49;
            //Instruction 32289
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 32290
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32291
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32292
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 32293
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32294
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 32295
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 32296
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32297
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 32298
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32299
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 32300
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 32301
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 32302
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 32303
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 32304
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 32305
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 32306
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 32307
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 32308
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 32309
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 32310
        //ELSE
        } else {
            //Instruction 32311
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32312
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 32313
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32314
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 32315
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 32316
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 32317
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32318
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 32319
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 32320
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 32321
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32322
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32323
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 32324
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 32325
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 32326
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 32327
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 32328
            //LT
            tb0 = t2.w<0.0;
            //Instruction 32329
            //MOV
            t2.y = (-t2.w);
            //Instruction 32330
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 32331
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 32332
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 32333
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 32334
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 32335
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 32336
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 32337
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32338
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32339
            //MUL
            t48 = t48 * t6.x;
            //Instruction 32340
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 32341
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 32342
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32343
        //ENDIF
        }
        //Instruction 32344
    //ENDIF
    }
    //Instruction 32345
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 32346
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 32347
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32348
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 32349
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 32350
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 32351
    //NE
    tb48 = t46!=0.0;
    //Instruction 32352
    //LOG
    t49 = log2(t46);
    //Instruction 32353
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 32354
    //EXP
    t49 = exp2(t49);
    //Instruction 32355
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 32356
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32357
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32358
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 32359
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 32360
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32361
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 32362
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32363
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 32364
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 32365
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 32366
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32367
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 32368
    //MUL
    t46 = t46 * t48;
    //Instruction 32369
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 32370
    //MOV
    t5.y = t4.y;
    //Instruction 32371
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 32372
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 32373
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 32374
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 32375
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 32376
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 32377
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 32378
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 32379
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 32380
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 32381
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 32382
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 32383
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 32384
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 32385
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 32386
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 32387
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 32388
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 32389
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 32390
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 32391
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 32392
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 32393
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 32394
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 32395
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 32396
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 32397
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 32398
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 32399
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 32400
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 32401
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 32402
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 32403
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
mediump float t16_14;
void main()
{
    //Instruction 32060
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 32061
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 32062
    //LT
    tb12 = t10_1<0.0;
    //Instruction 32063
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 32064
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 32065
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 32066
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 32067
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 32068
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 32069
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 32070
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 32071
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 32072
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 32073
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 32074
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 32075
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 32076
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 32077
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 32078
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 32079
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 32080
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 32081
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 32082
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 32083
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 32084
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 32085
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 32086
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_9 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_8 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110.x = worldTangent_7.x;
  tmpvar_110.y = worldBinormal_6.x;
  tmpvar_110.z = worldNormal_8.x;
  lowp vec3 tmpvar_111;
  tmpvar_111.x = worldTangent_7.y;
  tmpvar_111.y = worldBinormal_6.y;
  tmpvar_111.z = worldNormal_8.y;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_7.z;
  tmpvar_112.y = worldBinormal_6.z;
  tmpvar_112.z = worldNormal_8.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
unif