orm 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 32699
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 32700
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 32701
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 32702
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 32703
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 32704
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 32705
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 32706
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 32707
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 32708
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 32709
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 32710
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 32711
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 32712
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 32713
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 32714
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32715
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 32716
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 32717
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 32718
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 32719
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 32720
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 32721
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 32722
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 32723
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 32724
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 32725
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 32726
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 32727
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 32728
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 32729
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 32730
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 32731
        //FRC
        t32.x = fract(t32.x);
        //Instruction 32732
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 32733
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 32734
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 32735
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 32736
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 32737
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 32738
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 32739
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 32740
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 32741
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 32742
        //IF
        if(tb48){
            //Instruction 32743
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 32744
            //FRC
            t5 = fract(t5);
            //Instruction 32745
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32746
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 32747
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 32748
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 32749
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 32750
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 32751
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32752
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 32753
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32754
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 32755
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32756
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 32757
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 32758
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 32759
            //SQRT
            t49 = sqrt(t49);
            //Instruction 32760
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 32761
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 32762
            //MUL
            t51 = t51 * t52;
            //Instruction 32763
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 32764
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 32765
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 32766
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 32767
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 32768
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 32769
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 32770
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 32771
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 32772
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 32773
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 32774
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 32775
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 32776
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 32777
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 32778
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 32779
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 32780
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 32781
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 32782
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 32783
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 32784
            //SQRT
            t51 = sqrt(t51);
            //Instruction 32785
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 32786
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 32787
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 32788
            //MUL
            t6.x = t51 * t52;
            //Instruction 32789
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 32790
            //LT
            tb19 = t19<(-t19);
            //Instruction 32791
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 32792
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 32793
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 32794
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 32795
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 32796
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32797
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 32798
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32799
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 32800
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32801
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 32802
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 32803
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 32804
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 32805
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 32806
            //LOG
            t48 = log2(t48);
            //Instruction 32807
            //MUL
            t48 = t48 * t7.y;
            //Instruction 32808
            //EXP
            t48 = exp2(t48);
            //Instruction 32809
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 32810
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 32811
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 32812
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 32813
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 32814
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 32815
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 32816
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 32817
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 32818
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 32819
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 32820
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 32821
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 32822
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 32823
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 32824
            //MOV
            t11.z = t12.x;
            //Instruction 32825
            //MOV
            t11.w = t10.x;
            //Instruction 32826
            //MOV
            t13.z = t9.y;
            //Instruction 32827
            //MOV
            t13.w = t14.y;
            //Instruction 32828
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 32829
            //MOV
            t14.w = t13.y;
            //Instruction 32830
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 32831
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 32832
            //MOV
            t10.w = t11.y;
            //Instruction 32833
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 32834
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 32835
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 32836
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 32837
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 32838
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 32839
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 32840
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 32841
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 32842
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 32843
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 32844
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 32845
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 32846
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 32847
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 32848
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 32849
        //ELSE
        } else {
            //Instruction 32850
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 32851
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 32852
        //ENDIF
        }
        //Instruction 32853
    //ELSE
    } else {
        //Instruction 32854
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 32855
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 32856
    //ENDIF
    }
    //Instruction 32857
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 32858
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 32859
    //IF
    if(tb49){
        //Instruction 32860
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 32861
        //IF
        if(tb49){
            //Instruction 32862
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32863
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 32864
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 32865
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 32866
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 32867
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 32868
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32869
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32870
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32871
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 32872
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 32873
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 32874
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32875
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 32876
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 32877
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 32878
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32879
            //FRC
            t2 = fract(t2);
            //Instruction 32880
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32881
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 32882
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32883
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32884
            //ADD
            t2 = t2 + t2;
            //Instruction 32885
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 32886
            //LT
            tb51 = t7.w<0.0;
            //Instruction 32887
            //MOV
            t7.y = (-t7.w);
            //Instruction 32888
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 32889
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 32890
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 32891
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 32892
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 32893
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 32894
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 32895
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32896
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32897
            //MUL
            t53 = t2.x * t53;
            //Instruction 32898
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 32899
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 32900
            //MUL
            t51 = t51 * t52;
            //Instruction 32901
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 32902
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32903
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32904
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 32905
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32906
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 32907
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 32908
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32909
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 32910
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32911
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 32912
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 32913
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 32914
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 32915
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 32916
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 32917
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 32918
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 32919
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 32920
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 32921
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 32922
        //ELSE
        } else {
            //Instruction 32923
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32924
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 32925
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32926
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 32927
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 32928
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 32929
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32930
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 32931
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 32932
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 32933
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32934
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32935
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 32936
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 32937
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 32938
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 32939
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 32940
            //LT
            tb0 = t2.w<0.0;
            //Instruction 32941
            //MOV
            t2.y = (-t2.w);
            //Instruction 32942
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 32943
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 32944
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 32945
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 32946
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 32947
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 32948
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 32949
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32950
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32951
            //MUL
            t51 = t51 * t6.x;
            //Instruction 32952
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 32953
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 32954
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32955
        //ENDIF
        }
        //Instruction 32956
    //ENDIF
    }
    //Instruction 32957
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 32958
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 32959
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32960
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 32961
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 32962
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 32963
    //NE
    tb51 = t49!=0.0;
    //Instruction 32964
    //LOG
    t52 = log2(t49);
    //Instruction 32965
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 32966
    //EXP
    t52 = exp2(t52);
    //Instruction 32967
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 32968
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32969
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32970
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 32971
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 32972
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32973
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 32974
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32975
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 32976
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 32977
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 32978
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32979
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 32980
    //MUL
    t49 = t49 * t51;
    //Instruction 32981
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 32982
    //MOV
    t5.y = t4.y;
    //Instruction 32983
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 32984
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 32985
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 32986
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 32987
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 32988
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 32989
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 32990
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 32991
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 32992
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 32993
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 32994
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 32995
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 32996
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 32997
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 32998
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 32999
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 33000
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 33001
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 33002
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 33003
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 33004
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 33005
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 33006
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 33007
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 33008
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 33009
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 33010
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 33011
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 33012
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 33013
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 33014
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 33015
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 33016
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 33017
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 33018
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 33019
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 33020
    //MOV
    t5.x = t3.z;
    //Instruction 33021
    //MOV
    t5.y = t4.x;
    //Instruction 33022
    //MOV
    t5.z = t0.x;
    //Instruction 33023
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 33024
    //MOV
    t5.x = t3.x;
    //Instruction 33025
    //MOV
    t5.y = t4.y;
    //Instruction 33026
    //MOV
    t5.z = t0.y;
    //Instruction 33027
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 33028
    //MOV
    t0.x = t3.y;
    //Instruction 33029
    //MOV
    t0.y = t4.z;
    //Instruction 33030
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 33031
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 33032
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 33033
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 33034
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 32662
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 32663
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 32664
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 32665
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 32666
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 32667
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 32668
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 32669
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 32670
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 32671
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 32672
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 32673
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 32674
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 32675
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 32676
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 32677
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 32678
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 32679
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 32680
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 32681
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 32682
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 32683
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 32684
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 32685
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 32686
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 32687
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 32688
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 32689
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 32690
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 32691
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 32692
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 32693
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 32694
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 32695
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 32696
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 32697
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 32698
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_9 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_8 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110.x = worldTangent_7.x;
  tmpvar_110.y = worldBinormal_6.x;
  tmpvar_110.z = worldNormal_8.x;
  lowp vec3 tmpvar_111;
  tmpvar_111.x = worldTangent_7.y;
  tmpvar_111.y = worldBinormal_6.y;
  tmpvar_111.z = worldNormal_8.y;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_7.z;
  tmpvar_112.y = worldBinormal_6.z;
  tmpvar_112.z = worldNormal_8.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 32216
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 32217
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 32218
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 32219
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 32220
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 32221
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 32222
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 32223
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 32224
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 32225
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 32226
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 32227
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 32228
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 32229
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 32230
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 32231
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32232
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 32233
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 32234
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 32235
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 32236
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 32237
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 32238
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 32239
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 32240
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 32241
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 32242
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 32243
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 32244
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 32245
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 32246
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 32247
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 32248
        //FRC
        t32.x = fract(t32.x);
        //Instruction 32249
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 32250
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 32251
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 32252
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 32253
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 32254
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 32255
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 32256
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 32257
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 32258
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 32259
        //IF
        if(tb48){
            //Instruction 32260
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 32261
            //FRC
            t5 = fract(t5);
            //Instruction 32262
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32263
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 32264
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 32265
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 32266
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 32267
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 32268
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32269
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 32270
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32271
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 32272
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32273
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 32274
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 32275
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 32276
            //SQRT
            t49 = sqrt(t49);
            //Instruction 32277
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 32278
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 32279
            //MUL
            t51 = t51 * t52;
            //Instruction 32280
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 32281
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 32282
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 32283
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 32284
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 32285
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 32286
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 32287
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 32288
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 32289
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 32290
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 32291
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 32292
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 32293
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 32294
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 32295
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 32296
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 32297
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 32298
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 32299
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 32300
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 32301
            //SQRT
            t51 = sqrt(t51);
            //Instruction 32302
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 32303
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 32304
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 32305
            //MUL
            t6.x = t51 * t52;
            //Instruction 32306
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 32307
            //LT
            tb19 = t19<(-t19);
            //Instruction 32308
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 32309
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 32310
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 32311
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 32312
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 32313
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32314
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 32315
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32316
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 32317
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32318
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 32319
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 32320
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 32321
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 32322
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 32323
            //LOG
            t48 = log2(t48);
            //Instruction 32324
            //MUL
            t48 = t48 * t7.y;
            //Instruction 32325
            //EXP
            t48 = exp2(t48);
            //Instruction 32326
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 32327
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 32328
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 32329
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 32330
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 32331
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 32332
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 32333
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 32334
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 32335
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 32336
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 32337
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 32338
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 32339
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 32340
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 32341
            //MOV
            t11.z = t12.x;
            //Instruction 32342
            //MOV
            t11.w = t10.x;
            //Instruction 32343
            //MOV
            t13.z = t9.y;
            //Instruction 32344
            //MOV
            t13.w = t14.y;
            //Instruction 32345
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 32346
            //MOV
            t14.w = t13.y;
            //Instruction 32347
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 32348
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 32349
            //MOV
            t10.w = t11.y;
            //Instruction 32350
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 32351
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 32352
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 32353
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 32354
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 32355
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 32356
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 32357
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 32358
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 32359
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 32360
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 32361
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 32362
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 32363
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 32364
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 32365
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 32366
        //ELSE
        } else {
            //Instruction 32367
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 32368
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 32369
        //ENDIF
        }
        //Instruction 32370
    //ELSE
    } else {
        //Instruction 32371
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 32372
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 32373
    //ENDIF
    }
    //Instruction 32374
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 32375
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 32376
    //IF
    if(tb49){
        //Instruction 32377
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 32378
        //IF
        if(tb49){
            //Instruction 32379
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32380
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 32381
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 32382
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 32383
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 32384
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 32385
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32386
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32387
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32388
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 32389
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 32390
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 32391
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32392
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 32393
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 32394
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 32395
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32396
            //FRC
            t2 = fract(t2);
            //Instruction 32397
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32398
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 32399
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32400
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32401
            //ADD
            t2 = t2 + t2;
            //Instruction 32402
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 32403
            //LT
            tb51 = t7.w<0.0;
            //Instruction 32404
            //MOV
            t7.y = (-t7.w);
            //Instruction 32405
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 32406
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 32407
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 32408
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 32409
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 32410
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 32411
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 32412
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32413
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32414
            //MUL
            t53 = t2.x * t53;
            //Instruction 32415
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 32416
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 32417
            //MUL
            t51 = t51 * t52;
            //Instruction 32418
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 32419
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32420
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32421
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 32422
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32423
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 32424
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 32425
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32426
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 32427
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32428
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 32429
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 32430
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 32431
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 32432
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 32433
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 32434
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 32435
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 32436
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 32437
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 32438
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 32439
        //ELSE
        } else {
            //Instruction 32440
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32441
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 32442
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32443
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 32444
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 32445
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 32446
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32447
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 32448
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 32449
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 32450
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32451
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32452
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 32453
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 32454
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 32455
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 32456
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 32457
            //LT
            tb0 = t2.w<0.0;
            //Instruction 32458
            //MOV
            t2.y = (-t2.w);
            //Instruction 32459
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 32460
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 32461
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 32462
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 32463
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 32464
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 32465
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 32466
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32467
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32468
            //MUL
            t51 = t51 * t6.x;
            //Instruction 32469
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 32470
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 32471
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32472
        //ENDIF
        }
        //Instruction 32473
    //ENDIF
    }
    //Instruction 32474
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 32475
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 32476
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32477
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 32478
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 32479
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 32480
    //NE
    tb51 = t49!=0.0;
    //Instruction 32481
    //LOG
    t52 = log2(t49);
    //Instruction 32482
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 32483
    //EXP
    t52 = exp2(t52);
    //Instruction 32484
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 32485
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32486
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32487
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 32488
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 32489
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32490
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 32491
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32492
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 32493
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 32494
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 32495
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32496
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 32497
    //MUL
    t49 = t49 * t51;
    //Instruction 32498
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 32499
    //MOV
    t5.y = t4.y;
    //Instruction 32500
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 32501
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 32502
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 32503
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 32504
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 32505
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 32506
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 32507
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 32508
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 32509
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 32510
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 32511
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 32512
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 32513
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 32514
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 32515
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 32516
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 32517
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 32518
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 32519
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 32520
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 32521
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 32522
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 32523
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 32524
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 32525
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 32526
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32527
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 32528
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 32529
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 32530
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 32531
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 32532
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32533
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 32534
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 32535
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 32536
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 32537
    //MOV
    t5.x = t3.z;
    //Instruction 32538
    //MOV
    t5.y = t4.x;
    //Instruction 32539
    //MOV
    t5.z = t0.x;
    //Instruction 32540
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 32541
    //MOV
    t5.x = t3.x;
    //Instruction 32542
    //MOV
    t5.y = t4.y;
    //Instruction 32543
    //MOV
    t5.z = t0.y;
    //Instruction 32544
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 32545
    //MOV
    t0.x = t3.y;
    //Instruction 32546
    //MOV
    t0.y = t4.z;
    //Instruction 32547
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 32548
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 32549
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 32550
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 32551
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump float t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 32190
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 32191
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 32192
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 32193
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 32194
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 32195
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 32196
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 32197
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 32198
    //MAX
    t16_3 = max(t16_7.z, t16_7.y);
    //Instruction 32199
    //MAX
    t16_3 = max(t16_7.x, t16_3);
    //Instruction 32200
    //DIV
    t16_2.x = t16_2.x / t16_3;
    //Instruction 32201
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 32202
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 32203
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 32204
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 32205
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 32206
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 32207
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 32208
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 32209
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 32210
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 32211
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 32212
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 32213
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 32214
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 32215
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_9 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_8 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110.x = worldTangent_7.x;
  tmpvar_110.y = worldBinormal_6.x;
  tmpvar_110.z = worldNormal_8.x;
  lowp vec3 tmpvar_111;
  tmpvar_111.x = worldTangent_7.y;
  tmpvar_111.y = worldBinormal_6.y;
  tmpvar_111.z = worldNormal_8.y;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_7.z;
  tmpvar_112.y = worldBinormal_6.z;
  tmpvar_112.z = worldNormal_8.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_11 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_6 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_6.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_5 = tmpvar_25;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 32448
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 32449
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 32450
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 32451
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 32452
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 32453
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 32454
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 32455
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 32456
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 32457
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 32458
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 32459
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 32460
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 32461
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 32462
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 32463
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32464
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 32465
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 32466
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 32467
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 32468
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 32469
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 32470
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 32471
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 32472
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 32473
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 32474
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 32475
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 32476
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 32477
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 32478
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 32479
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 32480
        //FRC
        t32.x = fract(t32.x);
        //Instruction 32481
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 32482
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 32483
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 32484
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 32485
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 32486
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 32487
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 32488
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 32489
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 32490
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 32491
        //IF
        if(tb48){
            //Instruction 32492
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 32493
            //FRC
            t5 = fract(t5);
            //Instruction 32494
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32495
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 32496
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 32497
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 32498
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 32499
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 32500
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32501
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 32502
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32503
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 32504
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32505
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 32506
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 32507
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 32508
            //SQRT
            t49 = sqrt(t49);
            //Instruction 32509
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 32510
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 32511
            //MUL
            t51 = t51 * t52;
            //Instruction 32512
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 32513
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 32514
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 32515
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 32516
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 32517
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 32518
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 32519
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 32520
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 32521
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 32522
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 32523
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 32524
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 32525
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 32526
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 32527
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 32528
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 32529
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 32530
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 32531
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 32532
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 32533
            //SQRT
            t51 = sqrt(t51);
            //Instruction 32534
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 32535
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 32536
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 32537
            //MUL
            t6.x = t51 * t52;
            //Instruction 32538
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 32539
            //LT
            tb19 = t19<(-t19);
            //Instruction 32540
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 32541
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 32542
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 32543
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 32544
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 32545
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32546
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 32547
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32548
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 32549
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32550
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 32551
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 32552
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 32553
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 32554
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 32555
            //LOG
            t48 = log2(t48);
            //Instruction 32556
            //MUL
            t48 = t48 * t7.y;
            //Instruction 32557
            //EXP
            t48 = exp2(t48);
            //Instruction 32558
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 32559
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 32560
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 32561
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 32562
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 32563
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 32564
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 32565
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 32566
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 32567
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 32568
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 32569
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 32570
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 32571
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 32572
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 32573
            //MOV
            t11.z = t12.x;
            //Instruction 32574
            //MOV
            t11.w = t10.x;
            //Instruction 32575
            //MOV
            t13.z = t9.y;
            //Instruction 32576
            //MOV
            t13.w = t14.y;
            //Instruction 32577
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 32578
            //MOV
            t14.w = t13.y;
            //Instruction 32579
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 32580
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 32581
            //MOV
            t10.w = t11.y;
            //Instruction 32582
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 32583
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 32584
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 32585
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 32586
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 32587
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 32588
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 32589
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 32590
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 32591
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 32592
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 32593
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 32594
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 32595
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 32596
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 32597
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 32598
        //ELSE
        } else {
            //Instruction 32599
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 32600
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 32601
        //ENDIF
        }
        //Instruction 32602
    //ELSE
    } else {
        //Instruction 32603
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 32604
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 32605
    //ENDIF
    }
    //Instruction 32606
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 32607
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 32608
    //IF
    if(tb49){
        //Instruction 32609
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 32610
        //IF
        if(tb49){
            //Instruction 32611
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32612
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 32613
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 32614
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 32615
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 32616
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 32617
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32618
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32619
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32620
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 32621
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 32622
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 32623
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32624
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 32625
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 32626
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 32627
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32628
            //FRC
            t2 = fract(t2);
            //Instruction 32629
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32630
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 32631
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32632
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32633
            //ADD
            t2 = t2 + t2;
            //Instruction 32634
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 32635
            //LT
            tb51 = t7.w<0.0;
            //Instruction 32636
            //MOV
            t7.y = (-t7.w);
            //Instruction 32637
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 32638
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 32639
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 32640
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 32641
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 32642
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 32643
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 32644
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32645
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32646
            //MUL
            t53 = t2.x * t53;
            //Instruction 32647
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 32648
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 32649
            //MUL
            t51 = t51 * t52;
            //Instruction 32650
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 32651
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32652
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32653
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 32654
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32655
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 32656
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 32657
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32658
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 32659
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32660
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 32661
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 32662
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 32663
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 32664
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 32665
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 32666
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 32667
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 32668
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 32669
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 32670
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 32671
        //ELSE
        } else {
            //Instruction 32672
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32673
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 32674
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32675
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 32676
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 32677
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 32678
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32679
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 32680
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 32681
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 32682
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32683
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32684
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 32685
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 32686
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 32687
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 32688
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 32689
            //LT
            tb0 = t2.w<0.0;
            //Instruction 32690
            //MOV
            t2.y = (-t2.w);
            //Instruction 32691
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 32692
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 32693
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 32694
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 32695
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 32696
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 32697
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 32698
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32699
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32700
            //MUL
            t51 = t51 * t6.x;
            //Instruction 32701
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 32702
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 32703
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32704
        //ENDIF
        }
        //Instruction 32705
    //ENDIF
    }
    //Instruction 32706
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 32707
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 32708
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32709
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 32710
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 32711
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 32712
    //NE
    tb51 = t49!=0.0;
    //Instruction 32713
    //LOG
    t52 = log2(t49);
    //Instruction 32714
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 32715
    //EXP
    t52 = exp2(t52);
    //Instruction 32716
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 32717
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32718
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32719
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 32720
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 32721
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32722
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 32723
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32724
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 32725
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 32726
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 32727
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32728
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 32729
    //MUL
    t49 = t49 * t51;
    //Instruction 32730
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 32731
    //MOV
    t5.y = t4.y;
    //Instruction 32732
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 32733
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 32734
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 32735
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 32736
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 32737
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 32738
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 32739
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 32740
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 32741
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 32742
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 32743
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 32744
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 32745
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 32746
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 32747
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 32748
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 32749
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 32750
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 32751
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 32752
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 32753
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 32754
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 32755
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 32756
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 32757
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 32758
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32759
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 32760
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 32761
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 32762
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 32763
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 32764
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32765
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 32766
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 32767
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 32768
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 32769
    //MOV
    t5.x = t3.z;
    //Instruction 32770
    //MOV
    t5.y = t4.x;
    //Instruction 32771
    //MOV
    t5.z = t0.x;
    //Instruction 32772
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 32773
    //MOV
    t5.x = t3.x;
    //Instruction 32774
    //MOV
    t5.y = t4.y;
    //Instruction 32775
    //MOV
    t5.z = t0.y;
    //Instruction 32776
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 32777
    //MOV
    t0.x = t3.y;
    //Instruction 32778
    //MOV
    t0.y = t4.z;
    //Instruction 32779
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 32780
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 32781
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 32782
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 32783
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_9;
bool tb11;
mediump float t16_18;
lowp float t10_18;
bool tb21;
mediump float t16_23;
highp float t25;
void main()
{
    //Instruction 32404
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 32405
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 32406
    //LT
    tb21 = t10_1.x<0.0;
    //Instruction 32407
    //DISCARD
    if((int(tb21))!=0){discard;}
    //Instruction 32408
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 32409
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 32410
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 32411
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 32412
    //MAX
    t16_3.x = max(t16_9.z, t16_9.y);
    //Instruction 32413
    //MAX
    t16_3.x = max(t16_9.x, t16_3.x);
    //Instruction 32414
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 32415
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 32416
    //MUL
    t16_2.xyz = t16_0.xxx * t16_9.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 32417
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 32418
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 32419
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 32420
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 32421
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 32422
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 32423
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 32424
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 32425
    //LT
    tb11 = 0.0<t16_0.z;
    //Instruction 32426
    //DP3
    t16_18 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 32427
    //SAMPLE
    t10_18 = texture(_LightTextureB0, vec2(t16_18)).w;
    //Instruction 32428
    //MOVC
    t10_1.x = (tb11) ? 1.0 : 0.0;
    //Instruction 32429
    //MUL
    t10_1.x = t10_4 * t10_1.x;
    //Instruction 32430
    //MUL
    t10_1.x = t10_18 * t10_1.x;
    //Instruction 32431
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 32432
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 32433
    //ADD
    t4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 32434
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 32435
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 32436
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 32437
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 32438
    //MAD
    t10_1.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 32439
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 32440
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 32441
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 32442
    //DP3
    t16_23 = dot(t10_6.xyz, t4.xyz);
    //Instruction 32443
    //MAX
    t16_23 = max(t16_23, 0.0);
    //Instruction 32444
    //MUL
    t16_2.xyz = vec3(t16_23) * t16_2.xyz;
    //Instruction 32445
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 32446
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 32447
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_9 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_8 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110.x = worldTangent_7.x;
  tmpvar_110.y = worldBinormal_6.x;
  tmpvar_110.z = worldNormal_8.x;
  lowp vec3 tmpvar_111;
  tmpvar_111.x = worldTangent_7.y;
  tmpvar_111.y = worldBinormal_6.y;
  tmpvar_111.z = worldNormal_8.y;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_7.z;
  tmpvar_112.y = worldBinormal_6.z;
  tmpvar_112.z = worldNormal_8.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 33074
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33075
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 33076
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 33077
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 33078
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 33079
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 33080
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 33081
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 33082
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 33083
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 33084
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 33085
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33086
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 33087
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 33088
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 33089
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 33090
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 33091
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 33092
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 33093
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 33094
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 33095
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 33096
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 33097
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 33098
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 33099
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 33100
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 33101
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 33102
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 33103
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 33104
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 33105
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 33106
        //FRC
        t32.x = fract(t32.x);
        //Instruction 33107
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 33108
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 33109
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 33110
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 33111
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 33112
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 33113
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 33114
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 33115
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 33116
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 33117
        //IF
        if(tb48){
            //Instruction 33118
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 33119
            //FRC
            t5 = fract(t5);
            //Instruction 33120
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33121
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 33122
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 33123
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 33124
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 33125
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 33126
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 33127
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 33128
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33129
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 33130
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33131
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 33132
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 33133
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 33134
            //SQRT
            t49 = sqrt(t49);
            //Instruction 33135
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 33136
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 33137
            //MUL
            t51 = t51 * t52;
            //Instruction 33138
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 33139
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 33140
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 33141
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 33142
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 33143
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 33144
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 33145
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 33146
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 33147
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 33148
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 33149
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 33150
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 33151
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 33152
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 33153
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 33154
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 33155
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 33156
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 33157
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 33158
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 33159
            //SQRT
            t51 = sqrt(t51);
            //Instruction 33160
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 33161
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 33162
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 33163
            //MUL
            t6.x = t51 * t52;
            //Instruction 33164
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 33165
            //LT
            tb19 = t19<(-t19);
            //Instruction 33166
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 33167
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 33168
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 33169
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 33170
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 33171
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 33172
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 33173
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33174
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 33175
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33176
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 33177
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 33178
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 33179
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 33180
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 33181
            //LOG
            t48 = log2(t48);
            //Instruction 33182
            //MUL
            t48 = t48 * t7.y;
            //Instruction 33183
            //EXP
            t48 = exp2(t48);
            //Instruction 33184
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 33185
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 33186
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 33187
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 33188
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 33189
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 33190
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 33191
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 33192
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 33193
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 33194
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 33195
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 33196
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 33197
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 33198
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 33199
            //MOV
            t11.z = t12.x;
            //Instruction 33200
            //MOV
            t11.w = t10.x;
            //Instruction 33201
            //MOV
            t13.z = t9.y;
            //Instruction 33202
            //MOV
            t13.w = t14.y;
            //Instruction 33203
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 33204
            //MOV
            t14.w = t13.y;
            //Instruction 33205
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 33206
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 33207
            //MOV
            t10.w = t11.y;
            //Instruction 33208
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 33209
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 33210
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 33211
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 33212
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 33213
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 33214
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 33215
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 33216
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 33217
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 33218
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 33219
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 33220
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 33221
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 33222
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 33223
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 33224
        //ELSE
        } else {
            //Instruction 33225
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 33226
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 33227
        //ENDIF
        }
        //Instruction 33228
    //ELSE
    } else {
        //Instruction 33229
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 33230
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 33231
    //ENDIF
    }
    //Instruction 33232
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 33233
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 33234
    //IF
    if(tb49){
        //Instruction 33235
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 33236
        //IF
        if(tb49){
            //Instruction 33237
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33238
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 33239
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 33240
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 33241
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 33242
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 33243
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33244
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 33245
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33246
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 33247
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 33248
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 33249
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33250
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 33251
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 33252
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 33253
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33254
            //FRC
            t2 = fract(t2);
            //Instruction 33255
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33256
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 33257
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33258
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33259
            //ADD
            t2 = t2 + t2;
            //Instruction 33260
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 33261
            //LT
            tb51 = t7.w<0.0;
            //Instruction 33262
            //MOV
            t7.y = (-t7.w);
            //Instruction 33263
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 33264
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 33265
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 33266
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 33267
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 33268
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 33269
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 33270
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33271
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33272
            //MUL
            t53 = t2.x * t53;
            //Instruction 33273
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 33274
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33275
            //MUL
            t51 = t51 * t52;
            //Instruction 33276
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 33277
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 33278
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33279
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33280
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33281
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 33282
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 33283
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33284
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 33285
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33286
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 33287
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 33288
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 33289
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 33290
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33291
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 33292
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 33293
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 33294
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33295
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 33296
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 33297
        //ELSE
        } else {
            //Instruction 33298
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33299
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 33300
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33301
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 33302
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 33303
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 33304
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33305
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 33306
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 33307
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33308
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 33309
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33310
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 33311
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33312
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33313
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 33314
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 33315
            //LT
            tb0 = t2.w<0.0;
            //Instruction 33316
            //MOV
            t2.y = (-t2.w);
            //Instruction 33317
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 33318
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 33319
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 33320
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 33321
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 33322
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 33323
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 33324
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33325
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33326
            //MUL
            t51 = t51 * t6.x;
            //Instruction 33327
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 33328
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 33329
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 33330
        //ENDIF
        }
        //Instruction 33331
    //ENDIF
    }
    //Instruction 33332
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 33333
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 33334
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33335
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 33336
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 33337
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 33338
    //NE
    tb51 = t49!=0.0;
    //Instruction 33339
    //LOG
    t52 = log2(t49);
    //Instruction 33340
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 33341
    //EXP
    t52 = exp2(t52);
    //Instruction 33342
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 33343
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33344
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33345
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 33346
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 33347
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33348
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 33349
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33350
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 33351
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 33352
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 33353
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33354
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 33355
    //MUL
    t49 = t49 * t51;
    //Instruction 33356
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 33357
    //MOV
    t5.y = t4.y;
    //Instruction 33358
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 33359
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 33360
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 33361
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 33362
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 33363
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 33364
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 33365
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 33366
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 33367
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 33368
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 33369
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 33370
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 33371
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 33372
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 33373
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 33374
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 33375
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 33376
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 33377
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 33378
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 33379
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 33380
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 33381
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 33382
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 33383
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 33384
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 33385
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 33386
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 33387
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 33388
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 33389
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 33390
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 33391
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 33392
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 33393
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 33394
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 33395
    //MOV
    t5.x = t3.z;
    //Instruction 33396
    //MOV
    t5.y = t4.x;
    //Instruction 33397
    //MOV
    t5.z = t0.x;
    //Instruction 33398
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 33399
    //MOV
    t5.x = t3.x;
    //Instruction 33400
    //MOV
    t5.y = t4.y;
    //Instruction 33401
    //MOV
    t5.z = t0.y;
    //Instruction 33402
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 33403
    //MOV
    t0.x = t3.y;
    //Instruction 33404
    //MOV
    t0.y = t4.z;
    //Instruction 33405
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 33406
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 33407
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 33408
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 33409
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 33035
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 33036
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 33037
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 33038
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 33039
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 33040
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 33041
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 33042
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 33043
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 33044
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 33045
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 33046
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 33047
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 33048
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 33049
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 33050
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 33051
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 33052
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 33053
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 33054
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 33055
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 33056
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 33057
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 33058
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 33059
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 33060
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 33061
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 33062
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 33063
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 33064
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 33065
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 33066
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 33067
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 33068
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 33069
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 33070
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 33071
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 33072
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33073
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_9 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_8 = tmpvar_105;
  highp mat3 tmpvar_106;
  tmpvar_106[0] = _Object2World[0].xyz;
  tmpvar_106[1] = _Object2World[1].xyz;
  tmpvar_106[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize((tmpvar_106 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_107;
  lowp vec3 tmpvar_108;
  tmpvar_108 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_109;
  tmpvar_109 = (tmpvar_108 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110.x = worldTangent_7.x;
  tmpvar_110.y = worldBinormal_6.x;
  tmpvar_110.z = worldNormal_8.x;
  lowp vec3 tmpvar_111;
  tmpvar_111.x = worldTangent_7.y;
  tmpvar_111.y = worldBinormal_6.y;
  tmpvar_111.z = worldNormal_8.y;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_7.z;
  tmpvar_112.y = worldBinormal_6.z;
  tmpvar_112.z = worldNormal_8.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_110;
  xlv_TEXCOORD1 = tmpvar_111;
  xlv_TEXCOORD2 = tmpvar_112;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 32584
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 32585
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 32586
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 32587
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 32588
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 32589
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 32590
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 32591
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 32592
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 32593
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 32594
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 32595
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 32596
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 32597
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 32598
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 32599
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32600
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 32601
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 32602
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 32603
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 32604
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 32605
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 32606
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 32607
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 32608
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 32609
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 32610
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 32611
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 32612
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 32613
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 32614
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 32615
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 32616
        //FRC
        t32.x = fract(t32.x);
        //Instruction 32617
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 32618
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 32619
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 32620
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 32621
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 32622
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 32623
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 32624
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 32625
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 32626
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 32627
        //IF
        if(tb48){
            //Instruction 32628
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 32629
            //FRC
            t5 = fract(t5);
            //Instruction 32630
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32631
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 32632
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 32633
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 32634
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 32635
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 32636
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32637
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 32638
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32639
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 32640
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32641
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 32642
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 32643
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 32644
            //SQRT
            t49 = sqrt(t49);
            //Instruction 32645
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 32646
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 32647
            //MUL
            t51 = t51 * t52;
            //Instruction 32648
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 32649
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 32650
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 32651
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 32652
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 32653
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 32654
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 32655
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 32656
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 32657
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 32658
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 32659
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 32660
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 32661
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 32662
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 32663
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 32664
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 32665
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 32666
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 32667
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 32668
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 32669
            //SQRT
            t51 = sqrt(t51);
            //Instruction 32670
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 32671
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 32672
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 32673
            //MUL
            t6.x = t51 * t52;
            //Instruction 32674
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 32675
            //LT
            tb19 = t19<(-t19);
            //Instruction 32676
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 32677
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 32678
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 32679
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 32680
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 32681
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 32682
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 32683
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32684
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 32685
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32686
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 32687
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 32688
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 32689
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 32690
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 32691
            //LOG
            t48 = log2(t48);
            //Instruction 32692
            //MUL
            t48 = t48 * t7.y;
            //Instruction 32693
            //EXP
            t48 = exp2(t48);
            //Instruction 32694
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 32695
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 32696
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 32697
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 32698
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 32699
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 32700
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 32701
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 32702
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 32703
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 32704
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 32705
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 32706
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 32707
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 32708
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 32709
            //MOV
            t11.z = t12.x;
            //Instruction 32710
            //MOV
            t11.w = t10.x;
            //Instruction 32711
            //MOV
            t13.z = t9.y;
            //Instruction 32712
            //MOV
            t13.w = t14.y;
            //Instruction 32713
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 32714
            //MOV
            t14.w = t13.y;
            //Instruction 32715
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 32716
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 32717
            //MOV
            t10.w = t11.y;
            //Instruction 32718
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 32719
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 32720
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 32721
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 32722
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 32723
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 32724
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 32725
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 32726
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 32727
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 32728
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 32729
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 32730
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 32731
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 32732
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 32733
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 32734
        //ELSE
        } else {
            //Instruction 32735
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 32736
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 32737
        //ENDIF
        }
        //Instruction 32738
    //ELSE
    } else {
        //Instruction 32739
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 32740
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 32741
    //ENDIF
    }
    //Instruction 32742
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 32743
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 32744
    //IF
    if(tb49){
        //Instruction 32745
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 32746
        //IF
        if(tb49){
            //Instruction 32747
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32748
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 32749
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 32750
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 32751
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 32752
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 32753
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32754
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32755
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32756
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 32757
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 32758
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 32759
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32760
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 32761
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 32762
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 32763
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32764
            //FRC
            t2 = fract(t2);
            //Instruction 32765
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32766
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 32767
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32768
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32769
            //ADD
            t2 = t2 + t2;
            //Instruction 32770
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 32771
            //LT
            tb51 = t7.w<0.0;
            //Instruction 32772
            //MOV
            t7.y = (-t7.w);
            //Instruction 32773
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 32774
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 32775
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 32776
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 32777
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 32778
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 32779
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 32780
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32781
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32782
            //MUL
            t53 = t2.x * t53;
            //Instruction 32783
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 32784
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 32785
            //MUL
            t51 = t51 * t52;
            //Instruction 32786
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 32787
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32788
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32789
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 32790
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32791
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 32792
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 32793
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32794
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 32795
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32796
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 32797
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 32798
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 32799
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 32800
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 32801
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 32802
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 32803
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 32804
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 32805
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 32806
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 32807
        //ELSE
        } else {
            //Instruction 32808
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32809
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 32810
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32811
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 32812
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 32813
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 32814
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32815
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 32816
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 32817
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 32818
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 32819
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32820
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 32821
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 32822
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 32823
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 32824
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 32825
            //LT
            tb0 = t2.w<0.0;
            //Instruction 32826
            //MOV
            t2.y = (-t2.w);
            //Instruction 32827
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 32828
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 32829
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 32830
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 32831
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 32832
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 32833
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 32834
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32835
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32836
            //MUL
            t51 = t51 * t6.x;
            //Instruction 32837
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 32838
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 32839
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 32840
        //ENDIF
        }
        //Instruction 32841
    //ENDIF
    }
    //Instruction 32842
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 32843
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 32844
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32845
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 32846
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 32847
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 32848
    //NE
    tb51 = t49!=0.0;
    //Instruction 32849
    //LOG
    t52 = log2(t49);
    //Instruction 32850
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 32851
    //EXP
    t52 = exp2(t52);
    //Instruction 32852
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 32853
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32854
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32855
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 32856
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 32857
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32858
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 32859
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32860
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 32861
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 32862
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 32863
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32864
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 32865
    //MUL
    t49 = t49 * t51;
    //Instruction 32866
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 32867
    //MOV
    t5.y = t4.y;
    //Instruction 32868
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 32869
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 32870
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 32871
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 32872
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 32873
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 32874
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 32875
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 32876
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 32877
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 32878
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 32879
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 32880
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 32881
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 32882
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 32883
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 32884
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 32885
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 32886
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 32887
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 32888
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 32889
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 32890
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 32891
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 32892
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 32893
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 32894
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32895
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 32896
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 32897
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 32898
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 32899
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 32900
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 32901
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 32902
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 32903
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 32904
    //MUL
    t4.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 32905
    //MOV
    t5.x = t3.z;
    //Instruction 32906
    //MOV
    t5.y = t4.x;
    //Instruction 32907
    //MOV
    t5.z = t0.x;
    //Instruction 32908
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 32909
    //MOV
    t5.x = t3.x;
    //Instruction 32910
    //MOV
    t5.y = t4.y;
    //Instruction 32911
    //MOV
    t5.z = t0.y;
    //Instruction 32912
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 32913
    //MOV
    t0.x = t3.y;
    //Instruction 32914
    //MOV
    t0.y = t4.z;
    //Instruction 32915
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 32916
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 32917
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 32918
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 32919
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 32552
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 32553
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 32554
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 32555
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 32556
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 32557
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 32558
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 32559
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 32560
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 32561
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 32562
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 32563
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 32564
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 32565
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 32566
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 32567
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 32568
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 32569
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 32570
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 32571
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 32572
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 32573
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 32574
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 32575
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 32576
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 32577
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 32578
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 32579
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 32580
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 32581
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 32582
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 32583
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, vec2(tmpvar_17)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 32948
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 32949
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 32950
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 32951
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 32952
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 32953
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 32954
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 32955
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 32956
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 32957
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 32958
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 32959
    //IF
    if(tb19){
        //Instruction 32960
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 32961
        //IF
        if(tb19){
            //Instruction 32962
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32963
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 32964
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 32965
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 32966
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 32967
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 32968
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32969
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 32970
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32971
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 32972
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 32973
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 32974
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 32975
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32976
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 32977
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 32978
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 32979
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32980
            //FRC
            t0 = fract(t0);
            //Instruction 32981
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32982
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 32983
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32984
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32985
            //ADD
            t0 = t0 + t0;
            //Instruction 32986
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 32987
            //LT
            tb20 = t4.w<0.0;
            //Instruction 32988
            //MOV
            t4.y = (-t4.w);
            //Instruction 32989
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 32990
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 32991
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 32992
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 32993
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 32994
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 32995
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 32996
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32997
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32998
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 32999
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 33000
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33001
            //MUL
            t20 = t20 * t21;
            //Instruction 33002
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 33003
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33004
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33005
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33006
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33007
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 33008
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 33009
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33010
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 33011
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33012
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 33013
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 33014
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 33015
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 33016
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33017
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 33018
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 33019
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 33020
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33021
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 33022
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 33023
        //ELSE
        } else {
            //Instruction 33024
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33025
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 33026
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33027
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 33028
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 33029
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 33030
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 33031
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33032
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 33033
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 33034
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33035
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33036
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33037
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 33038
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33039
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33040
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 33041
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 33042
            //LT
            tb19 = t0.w<0.0;
            //Instruction 33043
            //MOV
            t0.y = (-t0.w);
            //Instruction 33044
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 33045
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 33046
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 33047
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 33048
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 33049
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 33050
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 33051
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33052
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33053
            //MUL
            t21 = t21 * t4.x;
            //Instruction 33054
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 33055
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 33056
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33057
        //ENDIF
        }
        //Instruction 33058
    //ELSE
    } else {
        //Instruction 33059
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 33060
    //ENDIF
    }
    //Instruction 33061
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 33062
    //SQRT
    t19 = sqrt(t19);
    //Instruction 33063
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33064
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 33065
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 33066
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 33067
    //NE
    tb3 = t20!=0.0;
    //Instruction 33068
    //LOG
    t9 = log2(t20);
    //Instruction 33069
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 33070
    //EXP
    t9 = exp2(t9);
    //Instruction 33071
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 33072
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33073
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33074
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 33075
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 33076
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33077
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 33078
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33079
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 33080
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 33081
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 33082
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33083
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 33084
    //MUL
    t20 = t20 * t3.x;
    //Instruction 33085
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 33086
    //MOV
    t3.y = t2.y;
    //Instruction 33087
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 33088
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 33089
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 33090
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 33091
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 33092
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33093
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 33094
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 33095
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 33096
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 33097
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 33098
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 33099
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 33100
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 33101
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 33102
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 33103
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 33104
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 33105
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 33106
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 33107
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 33108
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 33109
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 33110
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 33111
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 33112
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 33113
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 33114
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 33115
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 33116
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 33117
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 33118
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 33119
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 33120
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 33121
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 33122
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 33123
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 33124
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 33125
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 33126
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 33127
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 33128
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 33129
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 33130
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 32920
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 32921
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 32922
    //MOV
    t1.x = t16_0.x;
    //Instruction 32923
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 32924
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 32925
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 32926
    //LT
    tb1 = t16_1<0.0;
    //Instruction 32927
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 32928
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 32929
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 32930
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 32931
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 32932
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 32933
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 32934
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 32935
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 32936
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 32937
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 32938
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 32939
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 32940
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 32941
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 32942
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 32943
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 32944
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 32945
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 32946
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 32947
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8 * tmpvar_1) * diff_17);
  c_16.w = tmpvar_9;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  c_3.xyz = c_15.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 33427
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33428
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 33429
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 33430
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33431
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 33432
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 33433
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 33434
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 33435
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 33436
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 33437
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 33438
    //IF
    if(tb19){
        //Instruction 33439
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 33440
        //IF
        if(tb19){
            //Instruction 33441
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33442
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 33443
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 33444
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 33445
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 33446
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 33447
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33448
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 33449
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33450
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 33451
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 33452
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 33453
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 33454
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33455
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 33456
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 33457
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 33458
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33459
            //FRC
            t0 = fract(t0);
            //Instruction 33460
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33461
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 33462
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33463
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33464
            //ADD
            t0 = t0 + t0;
            //Instruction 33465
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 33466
            //LT
            tb20 = t4.w<0.0;
            //Instruction 33467
            //MOV
            t4.y = (-t4.w);
            //Instruction 33468
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 33469
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 33470
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 33471
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 33472
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 33473
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 33474
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 33475
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33476
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33477
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 33478
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 33479
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33480
            //MUL
            t20 = t20 * t21;
            //Instruction 33481
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 33482
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33483
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33484
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33485
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33486
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 33487
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 33488
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33489
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 33490
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33491
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 33492
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 33493
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 33494
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 33495
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33496
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 33497
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 33498
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 33499
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33500
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 33501
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 33502
        //ELSE
        } else {
            //Instruction 33503
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33504
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 33505
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33506
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 33507
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 33508
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 33509
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 33510
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33511
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 33512
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 33513
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33514
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33515
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33516
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 33517
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33518
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33519
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 33520
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 33521
            //LT
            tb19 = t0.w<0.0;
            //Instruction 33522
            //MOV
            t0.y = (-t0.w);
            //Instruction 33523
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 33524
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 33525
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 33526
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 33527
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 33528
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 33529
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 33530
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33531
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33532
            //MUL
            t21 = t21 * t4.x;
            //Instruction 33533
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 33534
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 33535
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33536
        //ENDIF
        }
        //Instruction 33537
    //ELSE
    } else {
        //Instruction 33538
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 33539
    //ENDIF
    }
    //Instruction 33540
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 33541
    //SQRT
    t19 = sqrt(t19);
    //Instruction 33542
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33543
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 33544
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 33545
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 33546
    //NE
    tb3 = t20!=0.0;
    //Instruction 33547
    //LOG
    t9 = log2(t20);
    //Instruction 33548
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 33549
    //EXP
    t9 = exp2(t9);
    //Instruction 33550
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 33551
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33552
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33553
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 33554
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 33555
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33556
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 33557
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33558
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 33559
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 33560
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 33561
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33562
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 33563
    //MUL
    t20 = t20 * t3.x;
    //Instruction 33564
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 33565
    //MOV
    t3.y = t2.y;
    //Instruction 33566
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 33567
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 33568
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 33569
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 33570
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 33571
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33572
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 33573
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 33574
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 33575
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 33576
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 33577
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 33578
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 33579
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 33580
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 33581
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 33582
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 33583
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 33584
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 33585
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 33586
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 33587
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 33588
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 33589
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 33590
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 33591
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 33592
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 33593
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 33594
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 33595
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 33596
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 33597
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 33598
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 33599
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 33600
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 33601
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 33602
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 33603
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 33604
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 33605
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 33606
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 33607
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 33608
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 33609
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump float t16_2;
mediump float t16_6;
void main()
{
    //Instruction 33410
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 33411
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 33412
    //MOV
    t1.x = t16_0.x;
    //Instruction 33413
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 33414
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33415
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33416
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33417
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33418
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 33419
    //MUL
    t16_0.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 33420
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 33421
    //DP3
    t16_6 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 33422
    //MAX
    t16_6 = max(t16_6, 0.0);
    //Instruction 33423
    //MUL
    t16_0.xyz = vec3(t16_6) * t16_0.xyz;
    //Instruction 33424
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33425
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33426
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17);
  lightCoord_5 = tmpvar_18;
  lowp vec4 tmpvar_19;
  mediump vec2 P_20;
  P_20 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_19 = texture2D (_LightTexture0, P_20);
  highp vec3 LightCoord_21;
  LightCoord_21 = lightCoord_5.xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (LightCoord_21, LightCoord_21);
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(tmpvar_22));
  mediump float tmpvar_24;
  tmpvar_24 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_19.w) * tmpvar_23.w);
  atten_4 = tmpvar_24;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_10 * tmpvar_1) * diff_27);
  c_26.w = tmpvar_11;
  c_25.w = c_26.w;
  c_25.xyz = c_26.xyz;
  c_3.xyz = c_25.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 32819
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 32820
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 32821
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 32822
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 32823
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 32824
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 32825
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 32826
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 32827
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 32828
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 32829
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 32830
    //IF
    if(tb19){
        //Instruction 32831
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 32832
        //IF
        if(tb19){
            //Instruction 32833
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 32834
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 32835
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 32836
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 32837
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 32838
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 32839
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32840
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 32841
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32842
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 32843
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 32844
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 32845
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 32846
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32847
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 32848
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 32849
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 32850
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 32851
            //FRC
            t0 = fract(t0);
            //Instruction 32852
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 32853
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 32854
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 32855
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 32856
            //ADD
            t0 = t0 + t0;
            //Instruction 32857
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 32858
            //LT
            tb20 = t4.w<0.0;
            //Instruction 32859
            //MOV
            t4.y = (-t4.w);
            //Instruction 32860
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 32861
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 32862
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 32863
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 32864
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 32865
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 32866
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 32867
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32868
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32869
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 32870
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 32871
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 32872
            //MUL
            t20 = t20 * t21;
            //Instruction 32873
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 32874
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 32875
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32876
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 32877
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 32878
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 32879
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 32880
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 32881
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 32882
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 32883
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 32884
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 32885
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 32886
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 32887
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 32888
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 32889
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 32890
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 32891
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 32892
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 32893
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 32894
        //ELSE
        } else {
            //Instruction 32895
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 32896
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 32897
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32898
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 32899
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 32900
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 32901
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 32902
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 32903
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 32904
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 32905
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 32906
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 32907
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 32908
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 32909
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 32910
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 32911
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 32912
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 32913
            //LT
            tb19 = t0.w<0.0;
            //Instruction 32914
            //MOV
            t0.y = (-t0.w);
            //Instruction 32915
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 32916
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 32917
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 32918
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 32919
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 32920
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 32921
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 32922
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 32923
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 32924
            //MUL
            t21 = t21 * t4.x;
            //Instruction 32925
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 32926
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 32927
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 32928
        //ENDIF
        }
        //Instruction 32929
    //ELSE
    } else {
        //Instruction 32930
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 32931
    //ENDIF
    }
    //Instruction 32932
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 32933
    //SQRT
    t19 = sqrt(t19);
    //Instruction 32934
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 32935
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 32936
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 32937
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 32938
    //NE
    tb3 = t20!=0.0;
    //Instruction 32939
    //LOG
    t9 = log2(t20);
    //Instruction 32940
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 32941
    //EXP
    t9 = exp2(t9);
    //Instruction 32942
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 32943
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 32944
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 32945
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 32946
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 32947
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 32948
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 32949
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 32950
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 32951
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 32952
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 32953
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 32954
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 32955
    //MUL
    t20 = t20 * t3.x;
    //Instruction 32956
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 32957
    //MOV
    t3.y = t2.y;
    //Instruction 32958
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 32959
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 32960
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 32961
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 32962
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 32963
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 32964
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 32965
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 32966
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 32967
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 32968
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 32969
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 32970
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 32971
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 32972
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 32973
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 32974
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 32975
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 32976
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 32977
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 32978
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 32979
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 32980
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 32981
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 32982
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 32983
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 32984
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 32985
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 32986
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 32987
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 32988
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 32989
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 32990
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 32991
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 32992
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 32993
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 32994
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 32995
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 32996
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 32997
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 32998
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 32999
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 33000
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 33001
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp float t10_3;
mediump float t16_4;
bool tb5;
mediump float t16_9;
lowp float t10_9;
mediump float t16_12;
highp float t13;
void main()
{
    //Instruction 32784
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 32785
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 32786
    //MOV
    t1.x = t16_0.x;
    //Instruction 32787
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 32788
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 32789
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 32790
    //LT
    tb1 = t16_1<0.0;
    //Instruction 32791
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 32792
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 32793
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 32794
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 32795
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 32796
    //DIV
    t16_2.xy = t16_0.xy / t16_0.ww;
    //Instruction 32797
    //ADD
    t16_2.xy = t16_2.xy + vec2(0.500000, 0.500000);
    //Instruction 32798
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 32799
    //LT
    tb5 = 0.0<t16_0.z;
    //Instruction 32800
    //DP3
    t16_9 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 32801
    //SAMPLE
    t10_9 = texture(_LightTextureB0, vec2(t16_9)).w;
    //Instruction 32802
    //MOVC
    t10_3 = (tb5) ? 1.0 : 0.0;
    //Instruction 32803
    //MUL
    t10_3 = t10_1.x * t10_3;
    //Instruction 32804
    //MUL
    t10_3 = t10_9 * t10_3;
    //Instruction 32805
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 32806
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 32807
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 32808
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 32809
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 32810
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 32811
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 32812
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 32813
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 32814
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 32815
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 32816
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 32817
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 32818
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xyz;
  highp float tmpvar_17;
  tmpvar_17 = dot (tmpvar_16, tmpvar_16);
  lowp float tmpvar_18;
  tmpvar_18 = (texture2D (_LightTextureB0, vec2(tmpvar_17)).w * textureCube (_LightTexture0, tmpvar_16).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 33161
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33162
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 33163
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 33164
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33165
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 33166
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 33167
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 33168
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 33169
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 33170
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 33171
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 33172
    //IF
    if(tb19){
        //Instruction 33173
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 33174
        //IF
        if(tb19){
            //Instruction 33175
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33176
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 33177
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 33178
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 33179
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 33180
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 33181
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33182
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 33183
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33184
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 33185
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 33186
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 33187
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 33188
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33189
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 33190
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 33191
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 33192
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33193
            //FRC
            t0 = fract(t0);
            //Instruction 33194
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33195
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 33196
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33197
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33198
            //ADD
            t0 = t0 + t0;
            //Instruction 33199
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 33200
            //LT
            tb20 = t4.w<0.0;
            //Instruction 33201
            //MOV
            t4.y = (-t4.w);
            //Instruction 33202
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 33203
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 33204
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 33205
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 33206
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 33207
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 33208
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 33209
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33210
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33211
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 33212
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 33213
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33214
            //MUL
            t20 = t20 * t21;
            //Instruction 33215
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 33216
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33217
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33218
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33219
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33220
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 33221
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 33222
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33223
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 33224
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33225
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 33226
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 33227
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 33228
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 33229
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33230
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 33231
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 33232
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 33233
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33234
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 33235
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 33236
        //ELSE
        } else {
            //Instruction 33237
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33238
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 33239
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33240
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 33241
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 33242
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 33243
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 33244
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33245
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 33246
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 33247
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33248
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33249
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33250
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 33251
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33252
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33253
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 33254
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 33255
            //LT
            tb19 = t0.w<0.0;
            //Instruction 33256
            //MOV
            t0.y = (-t0.w);
            //Instruction 33257
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 33258
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 33259
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 33260
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 33261
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 33262
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 33263
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 33264
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33265
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33266
            //MUL
            t21 = t21 * t4.x;
            //Instruction 33267
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 33268
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 33269
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33270
        //ENDIF
        }
        //Instruction 33271
    //ELSE
    } else {
        //Instruction 33272
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 33273
    //ENDIF
    }
    //Instruction 33274
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 33275
    //SQRT
    t19 = sqrt(t19);
    //Instruction 33276
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33277
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 33278
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 33279
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 33280
    //NE
    tb3 = t20!=0.0;
    //Instruction 33281
    //LOG
    t9 = log2(t20);
    //Instruction 33282
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 33283
    //EXP
    t9 = exp2(t9);
    //Instruction 33284
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 33285
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33286
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33287
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 33288
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 33289
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33290
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 33291
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33292
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 33293
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 33294
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 33295
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33296
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 33297
    //MUL
    t20 = t20 * t3.x;
    //Instruction 33298
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 33299
    //MOV
    t3.y = t2.y;
    //Instruction 33300
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 33301
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 33302
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 33303
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 33304
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 33305
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33306
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 33307
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 33308
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 33309
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 33310
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 33311
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 33312
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 33313
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 33314
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 33315
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 33316
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 33317
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 33318
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 33319
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 33320
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 33321
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 33322
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 33323
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 33324
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 33325
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 33326
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 33327
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 33328
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 33329
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 33330
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 33331
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 33332
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 33333
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 33334
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 33335
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 33336
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 33337
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 33338
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 33339
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 33340
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 33341
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 33342
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 33343
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_4;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 33131
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 33132
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 33133
    //MOV
    t1.x = t16_0.x;
    //Instruction 33134
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 33135
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33136
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33137
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33138
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33139
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 33140
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 33141
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 33142
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 33143
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 33144
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_0.xyz).w;
    //Instruction 33145
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 33146
    //MUL
    t16_1 = t10_4 * t10_1.x;
    //Instruction 33147
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 33148
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 33149
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 33150
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 33151
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 33152
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 33153
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 33154
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 33155
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 33156
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 33157
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 33158
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33159
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33160
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15).xy;
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, tmpvar_16).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 33633
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33634
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 33635
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 33636
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33637
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 33638
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 33639
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 33640
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 33641
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 33642
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 33643
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 33644
    //IF
    if(tb19){
        //Instruction 33645
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 33646
        //IF
        if(tb19){
            //Instruction 33647
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33648
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 33649
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 33650
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 33651
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 33652
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 33653
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33654
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 33655
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33656
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 33657
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 33658
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 33659
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 33660
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33661
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 33662
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 33663
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 33664
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33665
            //FRC
            t0 = fract(t0);
            //Instruction 33666
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33667
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 33668
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33669
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33670
            //ADD
            t0 = t0 + t0;
            //Instruction 33671
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 33672
            //LT
            tb20 = t4.w<0.0;
            //Instruction 33673
            //MOV
            t4.y = (-t4.w);
            //Instruction 33674
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 33675
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 33676
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 33677
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 33678
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 33679
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 33680
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 33681
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33682
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33683
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 33684
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 33685
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33686
            //MUL
            t20 = t20 * t21;
            //Instruction 33687
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 33688
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33689
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33690
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33691
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33692
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 33693
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 33694
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33695
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 33696
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33697
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 33698
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 33699
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 33700
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 33701
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33702
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 33703
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 33704
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 33705
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33706
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 33707
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 33708
        //ELSE
        } else {
            //Instruction 33709
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33710
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 33711
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33712
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 33713
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 33714
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 33715
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 33716
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33717
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 33718
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 33719
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33720
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33721
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33722
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 33723
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33724
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33725
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 33726
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 33727
            //LT
            tb19 = t0.w<0.0;
            //Instruction 33728
            //MOV
            t0.y = (-t0.w);
            //Instruction 33729
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 33730
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 33731
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 33732
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 33733
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 33734
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 33735
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 33736
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33737
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33738
            //MUL
            t21 = t21 * t4.x;
            //Instruction 33739
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 33740
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 33741
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33742
        //ENDIF
        }
        //Instruction 33743
    //ELSE
    } else {
        //Instruction 33744
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 33745
    //ENDIF
    }
    //Instruction 33746
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 33747
    //SQRT
    t19 = sqrt(t19);
    //Instruction 33748
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33749
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 33750
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 33751
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 33752
    //NE
    tb3 = t20!=0.0;
    //Instruction 33753
    //LOG
    t9 = log2(t20);
    //Instruction 33754
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 33755
    //EXP
    t9 = exp2(t9);
    //Instruction 33756
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 33757
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33758
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33759
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 33760
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 33761
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33762
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 33763
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33764
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 33765
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 33766
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 33767
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33768
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 33769
    //MUL
    t20 = t20 * t3.x;
    //Instruction 33770
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 33771
    //MOV
    t3.y = t2.y;
    //Instruction 33772
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 33773
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 33774
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 33775
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 33776
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 33777
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33778
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 33779
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 33780
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 33781
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 33782
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 33783
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 33784
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 33785
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 33786
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 33787
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 33788
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 33789
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 33790
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 33791
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 33792
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 33793
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 33794
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 33795
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 33796
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 33797
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 33798
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 33799
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 33800
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 33801
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 33802
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 33803
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 33804
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 33805
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 33806
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 33807
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 33808
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 33809
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 33810
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 33811
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 33812
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 33813
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 33814
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 33815
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 33610
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 33611
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 33612
    //MOV
    t1.x = t16_0.x;
    //Instruction 33613
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 33614
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33615
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33616
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33617
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33618
    //MUL
    t16_0.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 33619
    //MAD
    t16_0.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_0.xy;
    //Instruction 33620
    //MAD
    t16_0.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_0.xy;
    //Instruction 33621
    //ADD
    t16_0.xy = t16_0.xy + _LightMatrix0[3].xy;
    //Instruction 33622
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_0.xy).w;
    //Instruction 33623
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 33624
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 33625
    //MUL
    t16_2.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 33626
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 33627
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 33628
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 33629
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 33630
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33631
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33632
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(tmpvar_19)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 33039
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33040
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 33041
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 33042
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 33043
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 33044
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 33045
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 33046
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 33047
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 33048
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 33049
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 33050
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33051
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 33052
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 33053
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 33054
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 33055
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 33056
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 33057
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 33058
    //IF
    if(tb22){
        //Instruction 33059
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 33060
        //IF
        if(tb22){
            //Instruction 33061
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33062
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 33063
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 33064
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 33065
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 33066
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33067
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33068
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33069
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33070
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33071
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 33072
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 33073
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33074
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 33075
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 33076
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 33077
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33078
            //FRC
            t2 = fract(t2);
            //Instruction 33079
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33080
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 33081
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33082
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33083
            //ADD
            t2 = t2 + t2;
            //Instruction 33084
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 33085
            //LT
            tb24 = t5.w<0.0;
            //Instruction 33086
            //MOV
            t5.y = (-t5.w);
            //Instruction 33087
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 33088
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 33089
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 33090
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 33091
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 33092
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 33093
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 33094
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33095
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33096
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 33097
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 33098
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33099
            //MUL
            t24 = t24 * t25;
            //Instruction 33100
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 33101
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33102
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33103
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33104
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33105
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 33106
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 33107
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33108
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 33109
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33110
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 33111
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 33112
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 33113
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 33114
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33115
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 33116
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 33117
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 33118
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33119
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33120
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 33121
        //ELSE
        } else {
            //Instruction 33122
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33123
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33124
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33125
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33126
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 33127
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 33128
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33129
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 33130
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 33131
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33132
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 33133
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33134
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 33135
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33136
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33137
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 33138
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 33139
            //LT
            tb0 = t2.w<0.0;
            //Instruction 33140
            //MOV
            t2.y = (-t2.w);
            //Instruction 33141
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 33142
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 33143
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 33144
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 33145
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 33146
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 33147
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 33148
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33149
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33150
            //MUL
            t24 = t24 * t5.x;
            //Instruction 33151
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 33152
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 33153
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33154
        //ENDIF
        }
        //Instruction 33155
    //ELSE
    } else {
        //Instruction 33156
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 33157
    //ENDIF
    }
    //Instruction 33158
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 33159
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 33160
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33161
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 33162
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 33163
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 33164
    //NE
    tb24 = t22!=0.0;
    //Instruction 33165
    //LOG
    t4.x = log2(t22);
    //Instruction 33166
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 33167
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 33168
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 33169
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33170
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33171
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 33172
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 33173
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33174
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 33175
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33176
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 33177
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 33178
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 33179
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33180
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 33181
    //MUL
    t22 = t22 * t24;
    //Instruction 33182
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 33183
    //MOV
    t4.y = t3.y;
    //Instruction 33184
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 33185
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 33186
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 33187
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 33188
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 33189
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33190
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 33191
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 33192
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 33193
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 33194
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 33195
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 33196
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 33197
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 33198
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 33199
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 33200
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 33201
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 33202
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 33203
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 33204
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 33205
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 33206
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 33207
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 33208
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 33209
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 33210
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 33211
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 33212
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 33213
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 33214
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 33215
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 33216
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 33217
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 33218
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 33219
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 33220
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 33221
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 33222
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 33223
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 33224
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 33225
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 33226
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 33227
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 33002
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 33003
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 33004
    //MOV
    t1.x = t16_0.x;
    //Instruction 33005
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 33006
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33007
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33008
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33009
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33010
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 33011
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 33012
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 33013
    //MAX
    t16_9 = max(t16_0.z, t16_0.y);
    //Instruction 33014
    //MAX
    t16_9 = max(t16_9, t16_0.x);
    //Instruction 33015
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 33016
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 33017
    //DIV
    t16_9 = t16_2.x / t16_9;
    //Instruction 33018
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 33019
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 33020
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 33021
    //MUL
    t16_2.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 33022
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_2.xyz;
    //Instruction 33023
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_2.xyz;
    //Instruction 33024
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 33025
    //DP3
    t16_1 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 33026
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 33027
    //MUL
    t16_2.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 33028
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 33029
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 33030
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 33031
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 33032
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 33033
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 33034
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 33035
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 33036
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33037
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33038
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 33254
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33255
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 33256
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 33257
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 33258
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 33259
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 33260
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 33261
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 33262
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 33263
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 33264
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 33265
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33266
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 33267
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 33268
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 33269
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 33270
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 33271
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 33272
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 33273
    //IF
    if(tb22){
        //Instruction 33274
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 33275
        //IF
        if(tb22){
            //Instruction 33276
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33277
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 33278
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 33279
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 33280
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 33281
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33282
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33283
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33284
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33285
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33286
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 33287
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 33288
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33289
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 33290
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 33291
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 33292
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33293
            //FRC
            t2 = fract(t2);
            //Instruction 33294
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33295
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 33296
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33297
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33298
            //ADD
            t2 = t2 + t2;
            //Instruction 33299
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 33300
            //LT
            tb24 = t5.w<0.0;
            //Instruction 33301
            //MOV
            t5.y = (-t5.w);
            //Instruction 33302
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 33303
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 33304
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 33305
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 33306
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 33307
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 33308
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 33309
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33310
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33311
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 33312
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 33313
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33314
            //MUL
            t24 = t24 * t25;
            //Instruction 33315
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 33316
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33317
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33318
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33319
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33320
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 33321
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 33322
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33323
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 33324
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33325
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 33326
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 33327
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 33328
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 33329
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33330
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 33331
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 33332
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 33333
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33334
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33335
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 33336
        //ELSE
        } else {
            //Instruction 33337
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33338
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33339
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33340
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33341
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 33342
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 33343
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33344
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 33345
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 33346
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33347
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 33348
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33349
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 33350
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33351
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33352
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 33353
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 33354
            //LT
            tb0 = t2.w<0.0;
            //Instruction 33355
            //MOV
            t2.y = (-t2.w);
            //Instruction 33356
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 33357
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 33358
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 33359
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 33360
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 33361
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 33362
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 33363
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33364
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33365
            //MUL
            t24 = t24 * t5.x;
            //Instruction 33366
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 33367
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 33368
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33369
        //ENDIF
        }
        //Instruction 33370
    //ELSE
    } else {
        //Instruction 33371
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 33372
    //ENDIF
    }
    //Instruction 33373
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 33374
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 33375
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33376
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 33377
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 33378
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 33379
    //NE
    tb24 = t22!=0.0;
    //Instruction 33380
    //LOG
    t4.x = log2(t22);
    //Instruction 33381
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 33382
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 33383
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 33384
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33385
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33386
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 33387
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 33388
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33389
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 33390
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33391
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 33392
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 33393
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 33394
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33395
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 33396
    //MUL
    t22 = t22 * t24;
    //Instruction 33397
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 33398
    //MOV
    t4.y = t3.y;
    //Instruction 33399
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 33400
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 33401
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 33402
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 33403
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 33404
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33405
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 33406
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 33407
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 33408
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 33409
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 33410
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 33411
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 33412
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 33413
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 33414
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 33415
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 33416
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 33417
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 33418
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 33419
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 33420
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 33421
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 33422
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 33423
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 33424
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 33425
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 33426
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 33427
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 33428
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 33429
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 33430
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 33431
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 33432
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 33433
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 33434
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 33435
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 33436
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 33437
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 33438
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 33439
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 33440
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 33441
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 33442
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump float t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 33228
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 33229
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 33230
    //MOV
    t1.x = t16_0.x;
    //Instruction 33231
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 33232
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33233
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33234
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33235
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33236
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 33237
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 33238
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 33239
    //MAX
    t16_9 = max(t16_0.z, t16_0.y);
    //Instruction 33240
    //MAX
    t16_9 = max(t16_9, t16_0.x);
    //Instruction 33241
    //MAX
    t16_2 = max(t10_1.z, t10_1.y);
    //Instruction 33242
    //MAX
    t16_2 = max(t10_1.x, t16_2);
    //Instruction 33243
    //DIV
    t16_9 = t16_2 / t16_9;
    //Instruction 33244
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 33245
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 33246
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 33247
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 33248
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 33249
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 33250
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 33251
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33252
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33253
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_18 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_5 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_21 = texture2D (_LightTexture0, P_22);
  highp vec3 LightCoord_23;
  LightCoord_23 = lightCoord_5.xyz;
  highp float tmpvar_24;
  tmpvar_24 = dot (LightCoord_23, LightCoord_23);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(tmpvar_24));
  mediump float tmpvar_26;
  tmpvar_26 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_25.w);
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 33860
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33861
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 33862
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 33863
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 33864
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 33865
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 33866
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 33867
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 33868
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 33869
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 33870
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 33871
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33872
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 33873
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 33874
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 33875
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 33876
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 33877
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 33878
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 33879
    //IF
    if(tb22){
        //Instruction 33880
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 33881
        //IF
        if(tb22){
            //Instruction 33882
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33883
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 33884
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 33885
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 33886
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 33887
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33888
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33889
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33890
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33891
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33892
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 33893
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 33894
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33895
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 33896
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 33897
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 33898
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33899
            //FRC
            t2 = fract(t2);
            //Instruction 33900
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33901
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 33902
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33903
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33904
            //ADD
            t2 = t2 + t2;
            //Instruction 33905
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 33906
            //LT
            tb24 = t5.w<0.0;
            //Instruction 33907
            //MOV
            t5.y = (-t5.w);
            //Instruction 33908
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 33909
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 33910
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 33911
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 33912
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 33913
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 33914
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 33915
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33916
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33917
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 33918
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 33919
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33920
            //MUL
            t24 = t24 * t25;
            //Instruction 33921
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 33922
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33923
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33924
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33925
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33926
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 33927
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 33928
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33929
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 33930
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33931
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 33932
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 33933
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 33934
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 33935
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33936
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 33937
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 33938
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 33939
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33940
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33941
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 33942
        //ELSE
        } else {
            //Instruction 33943
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33944
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33945
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33946
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33947
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 33948
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 33949
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33950
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 33951
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 33952
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33953
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 33954
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33955
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 33956
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33957
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33958
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 33959
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 33960
            //LT
            tb0 = t2.w<0.0;
            //Instruction 33961
            //MOV
            t2.y = (-t2.w);
            //Instruction 33962
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 33963
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 33964
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 33965
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 33966
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 33967
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 33968
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 33969
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33970
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33971
            //MUL
            t24 = t24 * t5.x;
            //Instruction 33972
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 33973
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 33974
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33975
        //ENDIF
        }
        //Instruction 33976
    //ELSE
    } else {
        //Instruction 33977
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 33978
    //ENDIF
    }
    //Instruction 33979
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 33980
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 33981
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33982
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 33983
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 33984
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 33985
    //NE
    tb24 = t22!=0.0;
    //Instruction 33986
    //LOG
    t4.x = log2(t22);
    //Instruction 33987
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 33988
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 33989
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 33990
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33991
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33992
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 33993
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 33994
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33995
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 33996
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33997
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 33998
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 33999
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 34000
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34001
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 34002
    //MUL
    t22 = t22 * t24;
    //Instruction 34003
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 34004
    //MOV
    t4.y = t3.y;
    //Instruction 34005
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 34006
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 34007
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 34008
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 34009
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 34010
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34011
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 34012
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 34013
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 34014
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 34015
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 34016
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 34017
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 34018
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 34019
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 34020
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 34021
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 34022
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 34023
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 34024
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 34025
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 34026
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 34027
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 34028
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 34029
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 34030
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 34031
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 34032
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 34033
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 34034
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 34035
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 34036
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 34037
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 34038
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 34039
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 34040
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 34041
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 34042
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 34043
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 34044
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 34045
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 34046
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 34047
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 34048
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp float t10_3;
mediump float t16_4;
bool tb5;
mediump float t16_9;
lowp float t10_9;
mediump float t16_12;
highp float t13;
mediump float t16_14;
void main()
{
    //Instruction 33816
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 33817
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 33818
    //MOV
    t1.x = t16_0.x;
    //Instruction 33819
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 33820
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33821
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33822
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33823
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33824
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 33825
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 33826
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 33827
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 33828
    //DIV
    t16_2.xy = t16_0.xy / t16_0.ww;
    //Instruction 33829
    //ADD
    t16_2.xy = t16_2.xy + vec2(0.500000, 0.500000);
    //Instruction 33830
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 33831
    //LT
    tb5 = 0.0<t16_0.z;
    //Instruction 33832
    //DP3
    t16_9 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 33833
    //SAMPLE
    t10_9 = texture(_LightTextureB0, vec2(t16_9)).w;
    //Instruction 33834
    //MOVC
    t10_3 = (tb5) ? 1.0 : 0.0;
    //Instruction 33835
    //MUL
    t10_3 = t10_1.x * t10_3;
    //Instruction 33836
    //MUL
    t10_3 = t10_9 * t10_3;
    //Instruction 33837
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 33838
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 33839
    //ADD
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 33840
    //MAD
    t16_2.xyz = vs_TEXCOORD3.zzz * t16_2.xyz + t10_1.xyz;
    //Instruction 33841
    //MAX
    t16_12 = max(t16_2.z, t16_2.y);
    //Instruction 33842
    //MAX
    t16_12 = max(t16_12, t16_2.x);
    //Instruction 33843
    //MAX
    t16_14 = max(t10_1.z, t10_1.y);
    //Instruction 33844
    //MAX
    t16_14 = max(t10_1.x, t16_14);
    //Instruction 33845
    //DIV
    t16_12 = t16_14 / t16_12;
    //Instruction 33846
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 33847
    //MUL
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 33848
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 33849
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 33850
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 33851
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 33852
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 33853
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 33854
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 33855
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 33856
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 33857
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33858
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33859
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(tmpvar_19)).w * textureCube (_LightTexture0, tmpvar_18).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 33383
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33384
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 33385
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 33386
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 33387
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 33388
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 33389
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 33390
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 33391
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 33392
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 33393
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 33394
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33395
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 33396
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 33397
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 33398
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 33399
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 33400
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 33401
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 33402
    //IF
    if(tb22){
        //Instruction 33403
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 33404
        //IF
        if(tb22){
            //Instruction 33405
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33406
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 33407
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 33408
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 33409
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 33410
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33411
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33412
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33413
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33414
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33415
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 33416
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 33417
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33418
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 33419
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 33420
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 33421
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33422
            //FRC
            t2 = fract(t2);
            //Instruction 33423
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33424
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 33425
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33426
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33427
            //ADD
            t2 = t2 + t2;
            //Instruction 33428
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 33429
            //LT
            tb24 = t5.w<0.0;
            //Instruction 33430
            //MOV
            t5.y = (-t5.w);
            //Instruction 33431
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 33432
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 33433
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 33434
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 33435
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 33436
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 33437
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 33438
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33439
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33440
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 33441
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 33442
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33443
            //MUL
            t24 = t24 * t25;
            //Instruction 33444
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 33445
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33446
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33447
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33448
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33449
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 33450
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 33451
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33452
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 33453
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33454
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 33455
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 33456
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 33457
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 33458
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33459
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 33460
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 33461
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 33462
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33463
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33464
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 33465
        //ELSE
        } else {
            //Instruction 33466
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33467
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33468
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33469
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33470
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 33471
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 33472
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33473
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 33474
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 33475
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33476
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 33477
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33478
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 33479
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33480
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33481
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 33482
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 33483
            //LT
            tb0 = t2.w<0.0;
            //Instruction 33484
            //MOV
            t2.y = (-t2.w);
            //Instruction 33485
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 33486
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 33487
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 33488
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 33489
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 33490
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 33491
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 33492
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33493
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33494
            //MUL
            t24 = t24 * t5.x;
            //Instruction 33495
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 33496
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 33497
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33498
        //ENDIF
        }
        //Instruction 33499
    //ELSE
    } else {
        //Instruction 33500
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 33501
    //ENDIF
    }
    //Instruction 33502
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 33503
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 33504
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33505
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 33506
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 33507
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 33508
    //NE
    tb24 = t22!=0.0;
    //Instruction 33509
    //LOG
    t4.x = log2(t22);
    //Instruction 33510
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 33511
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 33512
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 33513
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33514
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33515
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 33516
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 33517
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33518
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 33519
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33520
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 33521
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 33522
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 33523
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33524
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 33525
    //MUL
    t22 = t22 * t24;
    //Instruction 33526
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 33527
    //MOV
    t4.y = t3.y;
    //Instruction 33528
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 33529
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 33530
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 33531
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 33532
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 33533
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33534
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 33535
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 33536
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 33537
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 33538
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 33539
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 33540
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 33541
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 33542
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 33543
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 33544
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 33545
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 33546
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 33547
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 33548
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 33549
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 33550
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 33551
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 33552
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 33553
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 33554
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 33555
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 33556
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 33557
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 33558
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 33559
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 33560
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 33561
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 33562
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 33563
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 33564
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 33565
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 33566
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 33567
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 33568
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 33569
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 33570
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 33571
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
lowp float t10_4;
mediump float t16_9;
highp float t10;
void main()
{
    //Instruction 33344
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 33345
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 33346
    //MOV
    t1.x = t16_0.x;
    //Instruction 33347
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 33348
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33349
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33350
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33351
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33352
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 33353
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 33354
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 33355
    //MAX
    t16_9 = max(t16_0.z, t16_0.y);
    //Instruction 33356
    //MAX
    t16_9 = max(t16_9, t16_0.x);
    //Instruction 33357
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 33358
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 33359
    //DIV
    t16_9 = t16_2.x / t16_9;
    //Instruction 33360
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 33361
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 33362
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 33363
    //MUL
    t16_2.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 33364
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_2.xyz;
    //Instruction 33365
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_2.xyz;
    //Instruction 33366
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 33367
    //DP3
    t16_1 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 33368
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_2.xyz).w;
    //Instruction 33369
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 33370
    //MUL
    t16_1 = t10_4 * t10_1.x;
    //Instruction 33371
    //MUL
    t16_2.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 33372
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 33373
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 33374
    //DP3
    t10 = dot(t1.xyz, t1.xyz);
    //Instruction 33375
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 33376
    //MUL
    t1.xyz = vec3(t10) * t1.xyz;
    //Instruction 33377
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 33378
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 33379
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 33380
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33381
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33382
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, tmpvar_18).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 33475
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33476
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 33477
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 33478
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 33479
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 33480
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 33481
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 33482
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 33483
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 33484
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 33485
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 33486
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33487
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 33488
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 33489
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 33490
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 33491
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 33492
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 33493
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 33494
    //IF
    if(tb22){
        //Instruction 33495
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 33496
        //IF
        if(tb22){
            //Instruction 33497
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33498
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 33499
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 33500
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 33501
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 33502
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33503
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33504
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33505
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33506
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33507
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 33508
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 33509
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33510
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 33511
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 33512
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 33513
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33514
            //FRC
            t2 = fract(t2);
            //Instruction 33515
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33516
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 33517
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33518
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33519
            //ADD
            t2 = t2 + t2;
            //Instruction 33520
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 33521
            //LT
            tb24 = t5.w<0.0;
            //Instruction 33522
            //MOV
            t5.y = (-t5.w);
            //Instruction 33523
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 33524
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 33525
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 33526
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 33527
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 33528
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 33529
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 33530
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33531
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33532
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 33533
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 33534
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33535
            //MUL
            t24 = t24 * t25;
            //Instruction 33536
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 33537
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33538
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33539
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33540
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33541
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 33542
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 33543
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33544
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 33545
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33546
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 33547
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 33548
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 33549
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 33550
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33551
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 33552
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 33553
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 33554
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33555
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 33556
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 33557
        //ELSE
        } else {
            //Instruction 33558
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33559
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33560
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33561
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33562
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 33563
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 33564
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33565
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 33566
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 33567
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33568
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 33569
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33570
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 33571
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33572
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33573
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 33574
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 33575
            //LT
            tb0 = t2.w<0.0;
            //Instruction 33576
            //MOV
            t2.y = (-t2.w);
            //Instruction 33577
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 33578
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 33579
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 33580
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 33581
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 33582
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 33583
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 33584
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33585
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33586
            //MUL
            t24 = t24 * t5.x;
            //Instruction 33587
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 33588
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 33589
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33590
        //ENDIF
        }
        //Instruction 33591
    //ELSE
    } else {
        //Instruction 33592
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 33593
    //ENDIF
    }
    //Instruction 33594
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 33595
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 33596
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33597
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 33598
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 33599
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 33600
    //NE
    tb24 = t22!=0.0;
    //Instruction 33601
    //LOG
    t4.x = log2(t22);
    //Instruction 33602
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 33603
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 33604
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 33605
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33606
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33607
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 33608
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 33609
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33610
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 33611
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33612
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 33613
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 33614
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 33615
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33616
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 33617
    //MUL
    t22 = t22 * t24;
    //Instruction 33618
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 33619
    //MOV
    t4.y = t3.y;
    //Instruction 33620
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 33621
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 33622
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 33623
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 33624
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 33625
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33626
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 33627
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 33628
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 33629
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 33630
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 33631
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 33632
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 33633
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 33634
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 33635
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 33636
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 33637
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 33638
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 33639
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 33640
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 33641
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 33642
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 33643
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 33644
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 33645
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 33646
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 33647
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 33648
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 33649
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 33650
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 33651
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 33652
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 33653
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 33654
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 33655
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 33656
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 33657
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 33658
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 33659
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 33660
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 33661
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 33662
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 33663
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
mediump float t16_3;
mediump float t16_9;
void main()
{
    //Instruction 33443
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 33444
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 33445
    //MOV
    t1.x = t16_0.x;
    //Instruction 33446
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 33447
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33448
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33449
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33450
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33451
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 33452
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 33453
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 33454
    //MAX
    t16_9 = max(t16_0.z, t16_0.y);
    //Instruction 33455
    //MAX
    t16_9 = max(t16_9, t16_0.x);
    //Instruction 33456
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 33457
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 33458
    //DIV
    t16_9 = t16_2.x / t16_9;
    //Instruction 33459
    //MAD
    t16_1 = t16_9 * 0.500000 + 0.500000;
    //Instruction 33460
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 33461
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 33462
    //MUL
    t16_2.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 33463
    //MAD
    t16_2.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_2.xy;
    //Instruction 33464
    //MAD
    t16_2.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_2.xy;
    //Instruction 33465
    //ADD
    t16_2.xy = t16_2.xy + _LightMatrix0[3].xy;
    //Instruction 33466
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 33467
    //MUL
    t16_2.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 33468
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 33469
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 33470
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 33471
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 33472
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33473
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33474
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.x;
  tmpvar_67.y = worldBinormal_3.x;
  tmpvar_67.z = worldNormal_5.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.y;
  tmpvar_68.y = worldBinormal_3.y;
  tmpvar_68.z = worldNormal_5.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.z;
  tmpvar_69.y = worldBinormal_3.z;
  tmpvar_69.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = screenPos_54;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, vec2(tmpvar_20)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 34091
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34092
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 34093
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 34094
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 34095
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 34096
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 34097
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 34098
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 34099
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 34100
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 34101
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 34102
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34103
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 34104
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 34105
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 34106
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 34107
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 34108
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 34109
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 34110
    //IF
    if(tb25){
        //Instruction 34111
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 34112
        //IF
        if(tb25){
            //Instruction 34113
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34114
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 34115
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 34116
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 34117
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 34118
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34119
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34120
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34121
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34122
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34123
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 34124
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 34125
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34126
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 34127
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 34128
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 34129
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34130
            //FRC
            t2 = fract(t2);
            //Instruction 34131
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34132
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 34133
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34134
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34135
            //ADD
            t2 = t2 + t2;
            //Instruction 34136
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 34137
            //LT
            tb27 = t5.w<0.0;
            //Instruction 34138
            //MOV
            t5.y = (-t5.w);
            //Instruction 34139
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 34140
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 34141
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 34142
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 34143
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 34144
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 34145
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 34146
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34147
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34148
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 34149
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 34150
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34151
            //MUL
            t27 = t27 * t28;
            //Instruction 34152
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 34153
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34154
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34155
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34156
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34157
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 34158
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 34159
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34160
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 34161
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34162
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 34163
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 34164
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 34165
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 34166
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34167
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 34168
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 34169
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 34170
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34171
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34172
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 34173
        //ELSE
        } else {
            //Instruction 34174
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34175
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34176
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34177
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34178
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 34179
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 34180
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34181
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 34182
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 34183
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34184
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 34185
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34186
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 34187
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34188
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34189
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 34190
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 34191
            //LT
            tb0 = t2.w<0.0;
            //Instruction 34192
            //MOV
            t2.y = (-t2.w);
            //Instruction 34193
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 34194
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 34195
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 34196
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 34197
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 34198
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 34199
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 34200
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34201
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34202
            //MUL
            t27 = t27 * t5.x;
            //Instruction 34203
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 34204
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 34205
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34206
        //ENDIF
        }
        //Instruction 34207
    //ELSE
    } else {
        //Instruction 34208
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 34209
    //ENDIF
    }
    //Instruction 34210
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 34211
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 34212
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34213
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 34214
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 34215
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 34216
    //NE
    tb27 = t25!=0.0;
    //Instruction 34217
    //LOG
    t4.x = log2(t25);
    //Instruction 34218
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 34219
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 34220
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 34221
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34222
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34223
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 34224
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 34225
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34226
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 34227
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34228
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 34229
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 34230
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 34231
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34232
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 34233
    //MUL
    t25 = t25 * t27;
    //Instruction 34234
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 34235
    //MOV
    t4.y = t3.y;
    //Instruction 34236
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 34237
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 34238
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 34239
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 34240
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 34241
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34242
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 34243
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 34244
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 34245
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 34246
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 34247
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 34248
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 34249
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 34250
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 34251
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 34252
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 34253
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 34254
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 34255
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 34256
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 34257
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 34258
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 34259
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 34260
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 34261
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 34262
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 34263
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 34264
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 34265
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 34266
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 34267
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 34268
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 34269
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 34270
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 34271
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 34272
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 34273
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 34274
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 34275
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 34276
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 34277
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 34278
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 34279
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 34280
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 34281
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 34282
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 34283
    //MOV
    t6.x = t4.z;
    //Instruction 34284
    //MOV
    t6.y = t5.x;
    //Instruction 34285
    //MOV
    t6.z = t0.x;
    //Instruction 34286
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 34287
    //MOV
    t6.x = t4.x;
    //Instruction 34288
    //MOV
    t6.y = t5.y;
    //Instruction 34289
    //MOV
    t6.z = t0.y;
    //Instruction 34290
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 34291
    //MOV
    t0.x = t4.y;
    //Instruction 34292
    //MOV
    t0.y = t5.z;
    //Instruction 34293
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 34294
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 34295
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 34296
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 34297
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 34298
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump float t16_18;
highp float t19;
void main()
{
    //Instruction 34049
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 34050
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 34051
    //MOV
    t1.x = t16_0.x;
    //Instruction 34052
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 34053
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34054
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34055
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34056
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34057
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 34058
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 34059
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 34060
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 34061
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 34062
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 34063
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 34064
    //DIV
    t16_18 = t16_2.x / t16_18;
    //Instruction 34065
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 34066
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 34067
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 34068
    //MUL
    t16_2.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 34069
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_2.xyz;
    //Instruction 34070
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_2.xyz;
    //Instruction 34071
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 34072
    //DP3
    t16_1 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 34073
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 34074
    //MUL
    t16_2.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 34075
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 34076
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 34077
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 34078
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 34079
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 34080
    //SAMPLE
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 34081
    //MAD
    t10_4.xyz = t10_3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 34082
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 34083
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 34084
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 34085
    //DP3
    t16_18 = dot(t10_5.xyz, t1.xyz);
    //Instruction 34086
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 34087
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 34088
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34089
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34090
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.x;
  tmpvar_67.y = worldBinormal_3.x;
  tmpvar_67.z = worldNormal_5.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.y;
  tmpvar_68.y = worldBinormal_3.y;
  tmpvar_68.z = worldNormal_5.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.z;
  tmpvar_69.y = worldBinormal_3.z;
  tmpvar_69.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = screenPos_54;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 33603
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33604
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 33605
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 33606
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 33607
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 33608
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 33609
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 33610
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 33611
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 33612
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 33613
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 33614
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33615
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 33616
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 33617
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 33618
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 33619
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 33620
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 33621
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 33622
    //IF
    if(tb25){
        //Instruction 33623
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 33624
        //IF
        if(tb25){
            //Instruction 33625
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33626
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 33627
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 33628
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 33629
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 33630
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 33631
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33632
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33633
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33634
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33635
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 33636
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 33637
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33638
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 33639
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 33640
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 33641
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33642
            //FRC
            t2 = fract(t2);
            //Instruction 33643
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33644
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 33645
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33646
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33647
            //ADD
            t2 = t2 + t2;
            //Instruction 33648
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 33649
            //LT
            tb27 = t5.w<0.0;
            //Instruction 33650
            //MOV
            t5.y = (-t5.w);
            //Instruction 33651
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 33652
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 33653
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 33654
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 33655
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 33656
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 33657
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 33658
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33659
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33660
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 33661
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 33662
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33663
            //MUL
            t27 = t27 * t28;
            //Instruction 33664
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 33665
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33666
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33667
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33668
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33669
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 33670
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 33671
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33672
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 33673
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33674
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 33675
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 33676
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 33677
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 33678
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33679
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 33680
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 33681
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 33682
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33683
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 33684
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 33685
        //ELSE
        } else {
            //Instruction 33686
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33687
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33688
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33689
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33690
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 33691
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 33692
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33693
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 33694
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 33695
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33696
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 33697
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33698
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 33699
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33700
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33701
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 33702
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 33703
            //LT
            tb0 = t2.w<0.0;
            //Instruction 33704
            //MOV
            t2.y = (-t2.w);
            //Instruction 33705
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 33706
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 33707
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 33708
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 33709
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 33710
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 33711
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 33712
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33713
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33714
            //MUL
            t27 = t27 * t5.x;
            //Instruction 33715
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 33716
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 33717
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33718
        //ENDIF
        }
        //Instruction 33719
    //ELSE
    } else {
        //Instruction 33720
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 33721
    //ENDIF
    }
    //Instruction 33722
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 33723
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 33724
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33725
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 33726
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 33727
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 33728
    //NE
    tb27 = t25!=0.0;
    //Instruction 33729
    //LOG
    t4.x = log2(t25);
    //Instruction 33730
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 33731
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 33732
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 33733
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33734
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33735
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 33736
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 33737
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33738
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 33739
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33740
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 33741
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 33742
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 33743
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33744
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 33745
    //MUL
    t25 = t25 * t27;
    //Instruction 33746
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 33747
    //MOV
    t4.y = t3.y;
    //Instruction 33748
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 33749
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 33750
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 33751
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 33752
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 33753
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33754
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 33755
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 33756
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 33757
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 33758
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 33759
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 33760
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 33761
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 33762
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 33763
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 33764
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 33765
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 33766
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 33767
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 33768
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 33769
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 33770
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 33771
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 33772
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 33773
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 33774
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 33775
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 33776
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 33777
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 33778
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 33779
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 33780
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 33781
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 33782
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 33783
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 33784
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 33785
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 33786
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 33787
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 33788
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 33789
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 33790
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 33791
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 33792
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 33793
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 33794
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 33795
    //MOV
    t6.x = t4.z;
    //Instruction 33796
    //MOV
    t6.y = t5.x;
    //Instruction 33797
    //MOV
    t6.z = t0.x;
    //Instruction 33798
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 33799
    //MOV
    t6.x = t4.x;
    //Instruction 33800
    //MOV
    t6.y = t5.y;
    //Instruction 33801
    //MOV
    t6.z = t0.y;
    //Instruction 33802
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 33803
    //MOV
    t0.x = t4.y;
    //Instruction 33804
    //MOV
    t0.y = t5.z;
    //Instruction 33805
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 33806
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 33807
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 33808
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 33809
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 33810
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump float t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 33572
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 33573
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 33574
    //MOV
    t1.x = t16_0.x;
    //Instruction 33575
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 33576
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33577
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33578
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33579
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33580
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 33581
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 33582
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 33583
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 33584
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 33585
    //MAX
    t16_2 = max(t10_1.z, t10_1.y);
    //Instruction 33586
    //MAX
    t16_2 = max(t10_1.x, t16_2);
    //Instruction 33587
    //DIV
    t16_15 = t16_2 / t16_15;
    //Instruction 33588
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 33589
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 33590
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 33591
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 33592
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 33593
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 33594
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 33595
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 33596
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 33597
    //DP3
    t16_15 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 33598
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 33599
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 33600
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33601
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33602
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.x;
  tmpvar_67.y = worldBinormal_3.x;
  tmpvar_67.z = worldNormal_5.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.y;
  tmpvar_68.y = worldBinormal_3.y;
  tmpvar_68.z = worldNormal_5.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.z;
  tmpvar_69.y = worldBinormal_3.z;
  tmpvar_69.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = screenPos_54;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_18 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20);
  lightCoord_6 = tmpvar_21;
  lowp vec4 tmpvar_22;
  mediump vec2 P_23;
  P_23 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_22 = texture2D (_LightTexture0, P_23);
  highp vec3 LightCoord_24;
  LightCoord_24 = lightCoord_6.xyz;
  highp float tmpvar_25;
  tmpvar_25 = dot (LightCoord_24, LightCoord_24);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(tmpvar_25));
  mediump float tmpvar_27;
  tmpvar_27 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_22.w) * tmpvar_26.w);
  atten_5 = tmpvar_27;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_19);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_19);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_19);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = c_29.xyz;
  c_4.xyz = c_28.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 33713
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33714
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 33715
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 33716
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 33717
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 33718
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 33719
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 33720
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 33721
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 33722
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 33723
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 33724
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33725
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 33726
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 33727
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 33728
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 33729
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 33730
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 33731
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 33732
    //IF
    if(tb25){
        //Instruction 33733
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 33734
        //IF
        if(tb25){
            //Instruction 33735
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33736
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 33737
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 33738
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 33739
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 33740
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 33741
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33742
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33743
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33744
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33745
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 33746
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 33747
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33748
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 33749
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 33750
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 33751
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33752
            //FRC
            t2 = fract(t2);
            //Instruction 33753
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33754
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 33755
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33756
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33757
            //ADD
            t2 = t2 + t2;
            //Instruction 33758
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 33759
            //LT
            tb27 = t5.w<0.0;
            //Instruction 33760
            //MOV
            t5.y = (-t5.w);
            //Instruction 33761
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 33762
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 33763
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 33764
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 33765
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 33766
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 33767
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 33768
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33769
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33770
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 33771
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 33772
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33773
            //MUL
            t27 = t27 * t28;
            //Instruction 33774
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 33775
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33776
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33777
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33778
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33779
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 33780
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 33781
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33782
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 33783
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33784
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 33785
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 33786
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 33787
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 33788
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33789
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 33790
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 33791
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 33792
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33793
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 33794
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 33795
        //ELSE
        } else {
            //Instruction 33796
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33797
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33798
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33799
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33800
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 33801
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 33802
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33803
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 33804
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 33805
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33806
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 33807
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33808
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 33809
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33810
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33811
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 33812
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 33813
            //LT
            tb0 = t2.w<0.0;
            //Instruction 33814
            //MOV
            t2.y = (-t2.w);
            //Instruction 33815
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 33816
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 33817
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 33818
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 33819
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 33820
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 33821
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 33822
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33823
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33824
            //MUL
            t27 = t27 * t5.x;
            //Instruction 33825
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 33826
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 33827
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33828
        //ENDIF
        }
        //Instruction 33829
    //ELSE
    } else {
        //Instruction 33830
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 33831
    //ENDIF
    }
    //Instruction 33832
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 33833
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 33834
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33835
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 33836
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 33837
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 33838
    //NE
    tb27 = t25!=0.0;
    //Instruction 33839
    //LOG
    t4.x = log2(t25);
    //Instruction 33840
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 33841
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 33842
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 33843
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33844
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33845
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 33846
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 33847
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33848
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 33849
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33850
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 33851
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 33852
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 33853
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33854
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 33855
    //MUL
    t25 = t25 * t27;
    //Instruction 33856
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 33857
    //MOV
    t4.y = t3.y;
    //Instruction 33858
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 33859
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 33860
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 33861
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 33862
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 33863
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33864
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 33865
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 33866
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 33867
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 33868
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 33869
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 33870
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 33871
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 33872
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 33873
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 33874
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 33875
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 33876
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 33877
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 33878
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 33879
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 33880
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 33881
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 33882
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 33883
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 33884
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 33885
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 33886
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 33887
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 33888
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 33889
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 33890
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 33891
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 33892
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 33893
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 33894
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 33895
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 33896
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 33897
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 33898
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 33899
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 33900
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 33901
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 33902
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 33903
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 33904
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 33905
    //MOV
    t6.x = t4.z;
    //Instruction 33906
    //MOV
    t6.y = t5.x;
    //Instruction 33907
    //MOV
    t6.z = t0.x;
    //Instruction 33908
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 33909
    //MOV
    t6.x = t4.x;
    //Instruction 33910
    //MOV
    t6.y = t5.y;
    //Instruction 33911
    //MOV
    t6.z = t0.y;
    //Instruction 33912
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 33913
    //MOV
    t0.x = t4.y;
    //Instruction 33914
    //MOV
    t0.y = t5.z;
    //Instruction 33915
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 33916
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 33917
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 33918
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 33919
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 33920
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump float t16_6;
bool tb7;
mediump float t16_13;
lowp float t10_13;
mediump float t16_18;
highp float t19;
mediump float t16_20;
void main()
{
    //Instruction 33664
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 33665
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 33666
    //MOV
    t1.x = t16_0.x;
    //Instruction 33667
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 33668
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33669
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33670
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33671
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33672
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 33673
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 33674
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 33675
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 33676
    //DIV
    t16_2.xy = t16_0.xy / t16_0.ww;
    //Instruction 33677
    //ADD
    t16_2.xy = t16_2.xy + vec2(0.500000, 0.500000);
    //Instruction 33678
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 33679
    //LT
    tb7 = 0.0<t16_0.z;
    //Instruction 33680
    //DP3
    t16_13 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 33681
    //SAMPLE
    t10_13 = texture(_LightTextureB0, vec2(t16_13)).w;
    //Instruction 33682
    //MOVC
    t10_3.x = (tb7) ? 1.0 : 0.0;
    //Instruction 33683
    //MUL
    t10_3.x = t10_1.x * t10_3.x;
    //Instruction 33684
    //MUL
    t10_3.x = t10_13 * t10_3.x;
    //Instruction 33685
    //MUL
    t16_0.xyz = t10_3.xxx * _LightColor0.xyz;
    //Instruction 33686
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 33687
    //ADD
    t16_2.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 33688
    //MAD
    t16_2.xyz = vs_TEXCOORD5.zzz * t16_2.xyz + t10_1.xyz;
    //Instruction 33689
    //MAX
    t16_18 = max(t16_2.z, t16_2.y);
    //Instruction 33690
    //MAX
    t16_18 = max(t16_18, t16_2.x);
    //Instruction 33691
    //MAX
    t16_20 = max(t10_1.z, t10_1.y);
    //Instruction 33692
    //MAX
    t16_20 = max(t10_1.x, t16_20);
    //Instruction 33693
    //DIV
    t16_18 = t16_20 / t16_18;
    //Instruction 33694
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 33695
    //MUL
    t16_2.xyz = vec3(t16_1) * t16_2.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 33696
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 33697
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 33698
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 33699
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 33700
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 33701
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 33702
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 33703
    //MAD
    t10_3.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 33704
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 33705
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 33706
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 33707
    //DP3
    t16_18 = dot(t10_5.xyz, t1.xyz);
    //Instruction 33708
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 33709
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 33710
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33711
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33712
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.x;
  tmpvar_67.y = worldBinormal_3.x;
  tmpvar_67.z = worldNormal_5.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.y;
  tmpvar_68.y = worldBinormal_3.y;
  tmpvar_68.z = worldNormal_5.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.z;
  tmpvar_69.y = worldBinormal_3.z;
  tmpvar_69.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = screenPos_54;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTextureB0, vec2(tmpvar_20)).w * textureCube (_LightTexture0, tmpvar_19).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 34343
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34344
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 34345
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 34346
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 34347
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 34348
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 34349
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 34350
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 34351
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 34352
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 34353
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 34354
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34355
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 34356
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 34357
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 34358
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 34359
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 34360
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 34361
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 34362
    //IF
    if(tb25){
        //Instruction 34363
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 34364
        //IF
        if(tb25){
            //Instruction 34365
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34366
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 34367
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 34368
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 34369
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 34370
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34371
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34372
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34373
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34374
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34375
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 34376
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 34377
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34378
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 34379
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 34380
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 34381
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34382
            //FRC
            t2 = fract(t2);
            //Instruction 34383
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34384
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 34385
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34386
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34387
            //ADD
            t2 = t2 + t2;
            //Instruction 34388
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 34389
            //LT
            tb27 = t5.w<0.0;
            //Instruction 34390
            //MOV
            t5.y = (-t5.w);
            //Instruction 34391
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 34392
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 34393
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 34394
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 34395
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 34396
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 34397
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 34398
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34399
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34400
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 34401
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 34402
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34403
            //MUL
            t27 = t27 * t28;
            //Instruction 34404
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 34405
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34406
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34407
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34408
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34409
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 34410
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 34411
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34412
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 34413
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34414
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 34415
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 34416
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 34417
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 34418
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34419
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 34420
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 34421
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 34422
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34423
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34424
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 34425
        //ELSE
        } else {
            //Instruction 34426
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34427
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34428
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34429
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34430
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 34431
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 34432
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34433
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 34434
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 34435
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34436
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 34437
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34438
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 34439
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34440
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34441
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 34442
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 34443
            //LT
            tb0 = t2.w<0.0;
            //Instruction 34444
            //MOV
            t2.y = (-t2.w);
            //Instruction 34445
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 34446
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 34447
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 34448
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 34449
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 34450
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 34451
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 34452
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34453
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34454
            //MUL
            t27 = t27 * t5.x;
            //Instruction 34455
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 34456
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 34457
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34458
        //ENDIF
        }
        //Instruction 34459
    //ELSE
    } else {
        //Instruction 34460
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 34461
    //ENDIF
    }
    //Instruction 34462
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 34463
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 34464
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34465
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 34466
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 34467
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 34468
    //NE
    tb27 = t25!=0.0;
    //Instruction 34469
    //LOG
    t4.x = log2(t25);
    //Instruction 34470
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 34471
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 34472
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 34473
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34474
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34475
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 34476
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 34477
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34478
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 34479
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34480
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 34481
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 34482
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 34483
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34484
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 34485
    //MUL
    t25 = t25 * t27;
    //Instruction 34486
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 34487
    //MOV
    t4.y = t3.y;
    //Instruction 34488
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 34489
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 34490
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 34491
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 34492
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 34493
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34494
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 34495
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 34496
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 34497
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 34498
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 34499
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 34500
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 34501
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 34502
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 34503
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 34504
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 34505
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 34506
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 34507
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 34508
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 34509
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 34510
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 34511
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 34512
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 34513
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 34514
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 34515
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 34516
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 34517
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 34518
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 34519
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 34520
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 34521
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 34522
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 34523
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 34524
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 34525
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 34526
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 34527
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 34528
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 34529
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 34530
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 34531
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 34532
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 34533
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 34534
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 34535
    //MOV
    t6.x = t4.z;
    //Instruction 34536
    //MOV
    t6.y = t5.x;
    //Instruction 34537
    //MOV
    t6.z = t0.x;
    //Instruction 34538
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 34539
    //MOV
    t6.x = t4.x;
    //Instruction 34540
    //MOV
    t6.y = t5.y;
    //Instruction 34541
    //MOV
    t6.z = t0.y;
    //Instruction 34542
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 34543
    //MOV
    t0.x = t4.y;
    //Instruction 34544
    //MOV
    t0.y = t5.z;
    //Instruction 34545
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 34546
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 34547
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 34548
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 34549
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 34550
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump float t16_6;
lowp float t10_7;
mediump float t16_18;
highp float t19;
void main()
{
    //Instruction 34299
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 34300
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 34301
    //MOV
    t1.x = t16_0.x;
    //Instruction 34302
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 34303
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34304
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34305
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34306
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34307
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 34308
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 34309
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 34310
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 34311
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 34312
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 34313
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 34314
    //DIV
    t16_18 = t16_2.x / t16_18;
    //Instruction 34315
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 34316
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 34317
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 34318
    //MUL
    t16_2.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 34319
    //MAD
    t16_2.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_2.xyz;
    //Instruction 34320
    //MAD
    t16_2.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_2.xyz;
    //Instruction 34321
    //ADD
    t16_2.xyz = t16_2.xyz + _LightMatrix0[3].xyz;
    //Instruction 34322
    //DP3
    t16_1 = dot(t16_2.xyz, t16_2.xyz);
    //Instruction 34323
    //SAMPLE
    t10_7 = texture(_LightTexture0, t16_2.xyz).w;
    //Instruction 34324
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 34325
    //MUL
    t16_1 = t10_7 * t10_1.x;
    //Instruction 34326
    //MUL
    t16_2.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 34327
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 34328
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 34329
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 34330
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 34331
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 34332
    //SAMPLE
    t10_3.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 34333
    //MAD
    t10_4.xyz = t10_3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 34334
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 34335
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 34336
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 34337
    //DP3
    t16_18 = dot(t10_5.xyz, t1.xyz);
    //Instruction 34338
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 34339
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 34340
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34341
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34342
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_62;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = _Object2World[0].xyz;
  tmpvar_63[1] = _Object2World[1].xyz;
  tmpvar_63[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_64;
  lowp vec3 tmpvar_65;
  tmpvar_65 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67.x = worldTangent_4.x;
  tmpvar_67.y = worldBinormal_3.x;
  tmpvar_67.z = worldNormal_5.x;
  lowp vec3 tmpvar_68;
  tmpvar_68.x = worldTangent_4.y;
  tmpvar_68.y = worldBinormal_3.y;
  tmpvar_68.z = worldNormal_5.y;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.z;
  tmpvar_69.y = worldBinormal_3.z;
  tmpvar_69.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_67;
  xlv_TEXCOORD1 = tmpvar_68;
  xlv_TEXCOORD2 = tmpvar_69;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = screenPos_54;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_16 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, tmpvar_19).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_17);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_17);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_17);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 33848
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33849
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 33850
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 33851
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 33852
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 33853
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 33854
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 33855
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 33856
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 33857
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 33858
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 33859
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33860
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 33861
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 33862
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 33863
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 33864
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 33865
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 33866
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 33867
    //IF
    if(tb25){
        //Instruction 33868
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 33869
        //IF
        if(tb25){
            //Instruction 33870
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33871
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 33872
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 33873
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 33874
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 33875
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 33876
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33877
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33878
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33879
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33880
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 33881
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 33882
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33883
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 33884
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 33885
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 33886
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33887
            //FRC
            t2 = fract(t2);
            //Instruction 33888
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33889
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 33890
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33891
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33892
            //ADD
            t2 = t2 + t2;
            //Instruction 33893
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 33894
            //LT
            tb27 = t5.w<0.0;
            //Instruction 33895
            //MOV
            t5.y = (-t5.w);
            //Instruction 33896
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 33897
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 33898
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 33899
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 33900
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 33901
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 33902
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 33903
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33904
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33905
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 33906
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 33907
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 33908
            //MUL
            t27 = t27 * t28;
            //Instruction 33909
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 33910
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33911
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33912
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 33913
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 33914
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 33915
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 33916
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 33917
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 33918
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 33919
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 33920
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 33921
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 33922
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 33923
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 33924
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 33925
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 33926
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 33927
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 33928
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 33929
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 33930
        //ELSE
        } else {
            //Instruction 33931
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33932
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 33933
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33934
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 33935
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 33936
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 33937
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33938
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 33939
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 33940
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 33941
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 33942
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33943
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 33944
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 33945
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 33946
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 33947
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 33948
            //LT
            tb0 = t2.w<0.0;
            //Instruction 33949
            //MOV
            t2.y = (-t2.w);
            //Instruction 33950
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 33951
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 33952
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 33953
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 33954
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 33955
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 33956
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 33957
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 33958
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 33959
            //MUL
            t27 = t27 * t5.x;
            //Instruction 33960
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 33961
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 33962
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 33963
        //ENDIF
        }
        //Instruction 33964
    //ELSE
    } else {
        //Instruction 33965
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 33966
    //ENDIF
    }
    //Instruction 33967
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 33968
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 33969
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 33970
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 33971
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 33972
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 33973
    //NE
    tb27 = t25!=0.0;
    //Instruction 33974
    //LOG
    t4.x = log2(t25);
    //Instruction 33975
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 33976
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 33977
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 33978
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 33979
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 33980
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 33981
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 33982
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 33983
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 33984
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 33985
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 33986
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 33987
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 33988
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 33989
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 33990
    //MUL
    t25 = t25 * t27;
    //Instruction 33991
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 33992
    //MOV
    t4.y = t3.y;
    //Instruction 33993
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 33994
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 33995
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 33996
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 33997
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 33998
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 33999
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 34000
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 34001
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 34002
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 34003
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 34004
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 34005
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 34006
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 34007
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 34008
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 34009
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 34010
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 34011
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 34012
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 34013
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 34014
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 34015
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 34016
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 34017
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 34018
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 34019
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 34020
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 34021
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 34022
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 34023
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 34024
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 34025
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 34026
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 34027
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 34028
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 34029
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 34030
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 34031
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 34032
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 34033
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 34034
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 34035
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 34036
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 34037
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 34038
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 34039
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 34040
    //MOV
    t6.x = t4.z;
    //Instruction 34041
    //MOV
    t6.y = t5.x;
    //Instruction 34042
    //MOV
    t6.z = t0.x;
    //Instruction 34043
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 34044
    //MOV
    t6.x = t4.x;
    //Instruction 34045
    //MOV
    t6.y = t5.y;
    //Instruction 34046
    //MOV
    t6.z = t0.y;
    //Instruction 34047
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 34048
    //MOV
    t0.x = t4.y;
    //Instruction 34049
    //MOV
    t0.y = t5.z;
    //Instruction 34050
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 34051
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 34052
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 34053
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 34054
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 34055
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 33811
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 33812
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 33813
    //MOV
    t1.x = t16_0.x;
    //Instruction 33814
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 33815
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33816
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33817
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33818
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33819
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 33820
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 33821
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 33822
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 33823
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 33824
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 33825
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 33826
    //DIV
    t16_15 = t16_2.x / t16_15;
    //Instruction 33827
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 33828
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 33829
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 33830
    //MUL
    t16_2.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 33831
    //MAD
    t16_2.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_2.xy;
    //Instruction 33832
    //MAD
    t16_2.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_2.xy;
    //Instruction 33833
    //ADD
    t16_2.xy = t16_2.xy + _LightMatrix0[3].xy;
    //Instruction 33834
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 33835
    //MUL
    t16_2.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 33836
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 33837
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 33838
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 33839
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 33840
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 33841
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 33842
    //DP3
    t16_15 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 33843
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 33844
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 33845
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33846
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33847
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_16;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(tmpvar_19)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 33953
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 33954
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 33955
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 33956
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 33957
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 33958
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 33959
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 33960
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 33961
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 33962
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 33963
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 33964
    //IF
    if(tb19){
        //Instruction 33965
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 33966
        //IF
        if(tb19){
            //Instruction 33967
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 33968
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 33969
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 33970
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 33971
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 33972
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 33973
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 33974
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 33975
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 33976
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 33977
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 33978
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 33979
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 33980
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 33981
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 33982
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 33983
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 33984
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 33985
            //FRC
            t0 = fract(t0);
            //Instruction 33986
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 33987
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 33988
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 33989
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 33990
            //ADD
            t0 = t0 + t0;
            //Instruction 33991
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 33992
            //LT
            tb20 = t4.w<0.0;
            //Instruction 33993
            //MOV
            t4.y = (-t4.w);
            //Instruction 33994
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 33995
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 33996
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 33997
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 33998
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 33999
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 34000
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 34001
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34002
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34003
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 34004
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 34005
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34006
            //MUL
            t20 = t20 * t21;
            //Instruction 34007
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 34008
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34009
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34010
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34011
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34012
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 34013
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 34014
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34015
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 34016
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34017
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 34018
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 34019
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 34020
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 34021
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34022
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 34023
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 34024
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 34025
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34026
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 34027
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 34028
        //ELSE
        } else {
            //Instruction 34029
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34030
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 34031
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34032
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 34033
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 34034
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 34035
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 34036
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34037
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 34038
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 34039
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34040
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34041
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34042
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 34043
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34044
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34045
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 34046
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 34047
            //LT
            tb19 = t0.w<0.0;
            //Instruction 34048
            //MOV
            t0.y = (-t0.w);
            //Instruction 34049
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 34050
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 34051
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 34052
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 34053
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 34054
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 34055
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 34056
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34057
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34058
            //MUL
            t21 = t21 * t4.x;
            //Instruction 34059
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 34060
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 34061
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34062
        //ENDIF
        }
        //Instruction 34063
    //ELSE
    } else {
        //Instruction 34064
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 34065
    //ENDIF
    }
    //Instruction 34066
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 34067
    //SQRT
    t19 = sqrt(t19);
    //Instruction 34068
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34069
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 34070
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 34071
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 34072
    //NE
    tb3 = t20!=0.0;
    //Instruction 34073
    //LOG
    t9 = log2(t20);
    //Instruction 34074
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 34075
    //EXP
    t9 = exp2(t9);
    //Instruction 34076
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 34077
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34078
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34079
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 34080
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 34081
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34082
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 34083
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34084
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 34085
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 34086
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 34087
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34088
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 34089
    //MUL
    t20 = t20 * t3.x;
    //Instruction 34090
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 34091
    //MOV
    t3.y = t2.y;
    //Instruction 34092
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 34093
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 34094
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 34095
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 34096
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 34097
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34098
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 34099
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 34100
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 34101
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 34102
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 34103
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 34104
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 34105
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 34106
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 34107
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 34108
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 34109
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 34110
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 34111
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 34112
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 34113
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 34114
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 34115
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 34116
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 34117
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 34118
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 34119
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 34120
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 34121
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 34122
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 34123
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 34124
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 34125
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 34126
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 34127
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 34128
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 34129
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 34130
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 34131
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 34132
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 34133
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 34134
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 34135
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 34136
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 34137
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 34138
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_12;
highp float t13;
void main()
{
    //Instruction 33921
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 33922
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 33923
    //MOV
    t1.x = t16_0.x;
    //Instruction 33924
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 33925
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 33926
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 33927
    //LT
    tb1 = t16_1<0.0;
    //Instruction 33928
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 33929
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 33930
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 33931
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 33932
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 33933
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 33934
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 33935
    //MUL
    t16_0.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 33936
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 33937
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 33938
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 33939
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 33940
    //MAD
    t16_3.xyz = vec3(t16_12) * t16_3.xyz + t10_2.xyz;
    //Instruction 33941
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 33942
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 33943
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 33944
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 33945
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 33946
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 33947
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 33948
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 33949
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 33950
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 33951
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 33952
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_16;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 34572
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34573
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 34574
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 34575
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34576
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 34577
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 34578
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 34579
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 34580
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 34581
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 34582
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 34583
    //IF
    if(tb19){
        //Instruction 34584
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 34585
        //IF
        if(tb19){
            //Instruction 34586
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34587
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 34588
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 34589
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 34590
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 34591
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 34592
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34593
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 34594
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34595
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 34596
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 34597
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 34598
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 34599
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34600
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 34601
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 34602
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 34603
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34604
            //FRC
            t0 = fract(t0);
            //Instruction 34605
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34606
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 34607
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34608
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34609
            //ADD
            t0 = t0 + t0;
            //Instruction 34610
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 34611
            //LT
            tb20 = t4.w<0.0;
            //Instruction 34612
            //MOV
            t4.y = (-t4.w);
            //Instruction 34613
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 34614
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 34615
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 34616
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 34617
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 34618
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 34619
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 34620
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34621
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34622
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 34623
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 34624
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34625
            //MUL
            t20 = t20 * t21;
            //Instruction 34626
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 34627
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34628
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34629
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34630
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34631
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 34632
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 34633
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34634
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 34635
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34636
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 34637
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 34638
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 34639
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 34640
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34641
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 34642
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 34643
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 34644
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34645
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 34646
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 34647
        //ELSE
        } else {
            //Instruction 34648
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34649
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 34650
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34651
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 34652
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 34653
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 34654
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 34655
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34656
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 34657
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 34658
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34659
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34660
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34661
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 34662
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34663
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34664
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 34665
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 34666
            //LT
            tb19 = t0.w<0.0;
            //Instruction 34667
            //MOV
            t0.y = (-t0.w);
            //Instruction 34668
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 34669
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 34670
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 34671
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 34672
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 34673
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 34674
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 34675
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34676
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34677
            //MUL
            t21 = t21 * t4.x;
            //Instruction 34678
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 34679
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 34680
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34681
        //ENDIF
        }
        //Instruction 34682
    //ELSE
    } else {
        //Instruction 34683
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 34684
    //ENDIF
    }
    //Instruction 34685
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 34686
    //SQRT
    t19 = sqrt(t19);
    //Instruction 34687
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34688
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 34689
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 34690
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 34691
    //NE
    tb3 = t20!=0.0;
    //Instruction 34692
    //LOG
    t9 = log2(t20);
    //Instruction 34693
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 34694
    //EXP
    t9 = exp2(t9);
    //Instruction 34695
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 34696
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34697
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34698
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 34699
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 34700
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34701
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 34702
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34703
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 34704
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 34705
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 34706
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34707
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 34708
    //MUL
    t20 = t20 * t3.x;
    //Instruction 34709
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 34710
    //MOV
    t3.y = t2.y;
    //Instruction 34711
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 34712
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 34713
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 34714
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 34715
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 34716
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34717
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 34718
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 34719
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 34720
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 34721
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 34722
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 34723
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 34724
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 34725
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 34726
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 34727
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 34728
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 34729
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 34730
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 34731
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 34732
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 34733
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 34734
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 34735
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 34736
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 34737
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 34738
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 34739
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 34740
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 34741
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 34742
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 34743
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 34744
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 34745
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 34746
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 34747
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 34748
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 34749
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 34750
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 34751
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 34752
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 34753
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 34754
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 34755
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 34756
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 34757
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_9;
void main()
{
    //Instruction 34551
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 34552
    //FRC
    t16_3.x = fract(t16_0.y);
    //Instruction 34553
    //MOV
    t1.x = t16_0.x;
    //Instruction 34554
    //MAD
    t1.y = t16_3.x * 0.062500 + unity_LODFade.y;
    //Instruction 34555
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34556
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34557
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34558
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34559
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 34560
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 34561
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 34562
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34563
    //MAD
    t16_0.xyz = t16_0.xxx * t16_3.xyz + t10_2.xyz;
    //Instruction 34564
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 34565
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 34566
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 34567
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 34568
    //MUL
    t16_0.xyz = vec3(t16_9) * t16_0.xyz;
    //Instruction 34569
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34570
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34571
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_18;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_5 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_21 = texture2D (_LightTexture0, P_22);
  highp vec3 LightCoord_23;
  LightCoord_23 = lightCoord_5.xyz;
  highp float tmpvar_24;
  tmpvar_24 = dot (LightCoord_23, LightCoord_23);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(tmpvar_24));
  mediump float tmpvar_26;
  tmpvar_26 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_25.w);
  atten_4 = tmpvar_26;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_3.xyz = c_27.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 34095
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34096
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 34097
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 34098
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34099
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 34100
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 34101
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 34102
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 34103
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 34104
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 34105
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 34106
    //IF
    if(tb19){
        //Instruction 34107
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 34108
        //IF
        if(tb19){
            //Instruction 34109
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34110
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 34111
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 34112
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 34113
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 34114
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 34115
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34116
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 34117
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34118
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 34119
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 34120
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 34121
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 34122
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34123
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 34124
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 34125
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 34126
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34127
            //FRC
            t0 = fract(t0);
            //Instruction 34128
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34129
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 34130
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34131
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34132
            //ADD
            t0 = t0 + t0;
            //Instruction 34133
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 34134
            //LT
            tb20 = t4.w<0.0;
            //Instruction 34135
            //MOV
            t4.y = (-t4.w);
            //Instruction 34136
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 34137
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 34138
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 34139
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 34140
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 34141
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 34142
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 34143
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34144
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34145
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 34146
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 34147
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34148
            //MUL
            t20 = t20 * t21;
            //Instruction 34149
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 34150
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34151
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34152
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34153
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34154
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 34155
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 34156
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34157
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 34158
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34159
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 34160
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 34161
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 34162
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 34163
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34164
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 34165
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 34166
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 34167
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34168
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 34169
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 34170
        //ELSE
        } else {
            //Instruction 34171
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34172
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 34173
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34174
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 34175
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 34176
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 34177
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 34178
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34179
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 34180
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 34181
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34182
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34183
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34184
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 34185
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34186
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34187
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 34188
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 34189
            //LT
            tb19 = t0.w<0.0;
            //Instruction 34190
            //MOV
            t0.y = (-t0.w);
            //Instruction 34191
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 34192
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 34193
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 34194
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 34195
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 34196
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 34197
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 34198
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34199
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34200
            //MUL
            t21 = t21 * t4.x;
            //Instruction 34201
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 34202
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 34203
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34204
        //ENDIF
        }
        //Instruction 34205
    //ELSE
    } else {
        //Instruction 34206
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 34207
    //ENDIF
    }
    //Instruction 34208
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 34209
    //SQRT
    t19 = sqrt(t19);
    //Instruction 34210
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34211
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 34212
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 34213
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 34214
    //NE
    tb3 = t20!=0.0;
    //Instruction 34215
    //LOG
    t9 = log2(t20);
    //Instruction 34216
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 34217
    //EXP
    t9 = exp2(t9);
    //Instruction 34218
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 34219
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34220
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34221
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 34222
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 34223
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34224
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 34225
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34226
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 34227
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 34228
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 34229
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34230
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 34231
    //MUL
    t20 = t20 * t3.x;
    //Instruction 34232
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 34233
    //MOV
    t3.y = t2.y;
    //Instruction 34234
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 34235
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 34236
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 34237
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 34238
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 34239
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34240
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 34241
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 34242
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 34243
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 34244
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 34245
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 34246
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 34247
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 34248
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 34249
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 34250
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 34251
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 34252
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 34253
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 34254
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 34255
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 34256
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 34257
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 34258
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 34259
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 34260
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 34261
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 34262
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 34263
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 34264
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 34265
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 34266
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 34267
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 34268
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 34269
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 34270
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 34271
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 34272
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 34273
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 34274
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 34275
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 34276
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 34277
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 34278
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 34279
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 34280
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp float t10_3;
lowp vec3 t10_4;
mediump float t16_5;
bool tb6;
mediump float t16_11;
lowp float t10_11;
mediump float t16_15;
highp float t16;
void main()
{
    //Instruction 34056
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 34057
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 34058
    //MOV
    t1.x = t16_0.x;
    //Instruction 34059
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 34060
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34061
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34062
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34063
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34064
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 34065
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 34066
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 34067
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 34068
    //DIV
    t16_2.xy = t16_0.xy / t16_0.ww;
    //Instruction 34069
    //ADD
    t16_2.xy = t16_2.xy + vec2(0.500000, 0.500000);
    //Instruction 34070
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_2.xy).w;
    //Instruction 34071
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 34072
    //DP3
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 34073
    //SAMPLE
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    //Instruction 34074
    //MOVC
    t10_3 = (tb6) ? 1.0 : 0.0;
    //Instruction 34075
    //MUL
    t10_3 = t10_1.x * t10_3;
    //Instruction 34076
    //MUL
    t10_3 = t10_11 * t10_3;
    //Instruction 34077
    //MUL
    t16_0.xyz = vec3(t10_3) * _LightColor0.xyz;
    //Instruction 34078
    //MOV
    t16_15 = vs_TEXCOORD4.z;
    t16_15 = clamp(t16_15, 0.0, 1.0);
    //Instruction 34079
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 34080
    //SAMPLE
    t10_4.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 34081
    //ADD
    t16_2.xyz = t10_1.xyz + (-t10_4.xyz);
    //Instruction 34082
    //MAD
    t16_2.xyz = vec3(t16_15) * t16_2.xyz + t10_4.xyz;
    //Instruction 34083
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 34084
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 34085
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 34086
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 34087
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 34088
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 34089
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 34090
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 34091
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 34092
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34093
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34094
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_16;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(tmpvar_19)).w * textureCube (_LightTexture0, tmpvar_18).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 34173
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34174
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 34175
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 34176
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34177
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 34178
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 34179
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 34180
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 34181
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 34182
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 34183
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 34184
    //IF
    if(tb19){
        //Instruction 34185
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 34186
        //IF
        if(tb19){
            //Instruction 34187
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34188
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 34189
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 34190
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 34191
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 34192
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 34193
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34194
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 34195
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34196
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 34197
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 34198
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 34199
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 34200
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34201
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 34202
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 34203
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 34204
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34205
            //FRC
            t0 = fract(t0);
            //Instruction 34206
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34207
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 34208
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34209
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34210
            //ADD
            t0 = t0 + t0;
            //Instruction 34211
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 34212
            //LT
            tb20 = t4.w<0.0;
            //Instruction 34213
            //MOV
            t4.y = (-t4.w);
            //Instruction 34214
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 34215
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 34216
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 34217
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 34218
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 34219
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 34220
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 34221
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34222
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34223
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 34224
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 34225
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34226
            //MUL
            t20 = t20 * t21;
            //Instruction 34227
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 34228
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34229
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34230
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34231
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34232
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 34233
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 34234
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34235
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 34236
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34237
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 34238
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 34239
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 34240
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 34241
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34242
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 34243
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 34244
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 34245
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34246
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 34247
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 34248
        //ELSE
        } else {
            //Instruction 34249
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34250
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 34251
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34252
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 34253
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 34254
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 34255
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 34256
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34257
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 34258
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 34259
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34260
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34261
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34262
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 34263
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34264
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34265
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 34266
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 34267
            //LT
            tb19 = t0.w<0.0;
            //Instruction 34268
            //MOV
            t0.y = (-t0.w);
            //Instruction 34269
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 34270
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 34271
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 34272
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 34273
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 34274
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 34275
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 34276
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34277
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34278
            //MUL
            t21 = t21 * t4.x;
            //Instruction 34279
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 34280
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 34281
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34282
        //ENDIF
        }
        //Instruction 34283
    //ELSE
    } else {
        //Instruction 34284
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 34285
    //ENDIF
    }
    //Instruction 34286
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 34287
    //SQRT
    t19 = sqrt(t19);
    //Instruction 34288
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34289
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 34290
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 34291
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 34292
    //NE
    tb3 = t20!=0.0;
    //Instruction 34293
    //LOG
    t9 = log2(t20);
    //Instruction 34294
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 34295
    //EXP
    t9 = exp2(t9);
    //Instruction 34296
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 34297
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34298
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34299
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 34300
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 34301
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34302
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 34303
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34304
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 34305
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 34306
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 34307
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34308
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 34309
    //MUL
    t20 = t20 * t3.x;
    //Instruction 34310
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 34311
    //MOV
    t3.y = t2.y;
    //Instruction 34312
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 34313
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 34314
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 34315
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 34316
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 34317
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34318
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 34319
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 34320
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 34321
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 34322
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 34323
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 34324
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 34325
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 34326
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 34327
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 34328
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 34329
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 34330
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 34331
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 34332
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 34333
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 34334
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 34335
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 34336
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 34337
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 34338
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 34339
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 34340
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 34341
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 34342
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 34343
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 34344
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 34345
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 34346
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 34347
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 34348
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 34349
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 34350
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 34351
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 34352
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 34353
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 34354
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 34355
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 34356
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 34357
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 34358
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp float t10_5;
mediump float t16_12;
highp float t13;
void main()
{
    //Instruction 34139
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 34140
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 34141
    //MOV
    t1.x = t16_0.x;
    //Instruction 34142
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 34143
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34144
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34145
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34146
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34147
    //MUL
    t16_0.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 34148
    //MAD
    t16_0.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_0.xyz;
    //Instruction 34149
    //MAD
    t16_0.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_0.xyz;
    //Instruction 34150
    //ADD
    t16_0.xyz = t16_0.xyz + _LightMatrix0[3].xyz;
    //Instruction 34151
    //DP3
    t16_1 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 34152
    //SAMPLE
    t10_5 = texture(_LightTexture0, t16_0.xyz).w;
    //Instruction 34153
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 34154
    //MUL
    t16_1 = t10_5 * t10_1.x;
    //Instruction 34155
    //MUL
    t16_0.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 34156
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 34157
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 34158
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 34159
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34160
    //MAD
    t16_3.xyz = vec3(t16_12) * t16_3.xyz + t10_2.xyz;
    //Instruction 34161
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 34162
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 34163
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 34164
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 34165
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 34166
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 34167
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 34168
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 34169
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 34170
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34171
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34172
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _S