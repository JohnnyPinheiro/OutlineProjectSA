tion 54004
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 54005
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 54006
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 54007
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 54008
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 54009
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 54010
            //DP3
            t15.x = dot(t4.xyz, t4.xyz);
            //Instruction 54011
            //RSQ
            t15.x = inversesqrt(t15.x);
            //Instruction 54012
            //MUL
            t15.xyz = t15.xxx * t4.xyz;
            //Instruction 54013
            //MUL
            t3.xyz = vec3(t44) * t15.xyz;
            //Instruction 54014
        //ENDIF
        }
        //Instruction 54015
    //ENDIF
    }
    //Instruction 54016
    //ADD
    t15.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 54017
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 54018
    //IF
    if(tb16){
        //Instruction 54019
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 54020
        //IF
        if(tb16){
            //Instruction 54021
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54022
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 54023
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 54024
            //DP3
            t16.x = dot(t3.xyz, t3.xyz);
            //Instruction 54025
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 54026
            //MUL
            t3.xyz = t16.xxx * t3.xyz;
            //Instruction 54027
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54028
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54029
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54030
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54031
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54032
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 54033
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 54034
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54035
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54036
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 54037
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54038
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54039
            //FRC
            t0 = fract(t0);
            //Instruction 54040
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54041
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 54042
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54043
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54044
            //ADD
            t0 = t0 + t0;
            //Instruction 54045
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 54046
            //LT
            tb44 = t5.w<0.0;
            //Instruction 54047
            //MOV
            t5.y = (-t5.w);
            //Instruction 54048
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 54049
            //MOVC
            t5.xy = (bool(tb44)) ? t5.xy : t5.zw;
            //Instruction 54050
            //MAD
            t44 = (-t0.y) * t0.z + t5.x;
            //Instruction 54051
            //MAD
            t44 = t5.y * t44 + t5.w;
            //Instruction 54052
            //ADD
            t45 = (-t44) + t5.x;
            //Instruction 54053
            //MAD
            t44 = t5.y * t45 + t44;
            //Instruction 54054
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 54055
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54056
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54057
            //MUL
            t46 = t0.x * t46;
            //Instruction 54058
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 54059
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54060
            //MUL
            t44 = t44 * t45;
            //Instruction 54061
            //MUL
            t4.xyz = vec3(t44) * t4.xyz;
            //Instruction 54062
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t15.xyz;
            //Instruction 54063
            //MAD
            t5.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54064
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54065
            //MAD
            t5.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54066
            //ADD
            t16.xz = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 54067
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 54068
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54069
            //MUL
            t5.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 54070
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54071
            //MAD
            t16.xz = t5.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 54072
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 54073
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 54074
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 54075
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54076
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 54077
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 54078
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 54079
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54080
            //MUL
            t3.xyz = t16.xxx * t3.xyz;
            //Instruction 54081
            //MAD
            t15.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 54082
        //ELSE
        } else {
            //Instruction 54083
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54084
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54085
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54086
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54087
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54088
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 54089
            //ADD
            t4.x = t16.x + in_TEXCOORD0.w;
            //Instruction 54090
            //MAD
            t4.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54091
            //MUL
            t16.x = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54092
            //MUL
            t4.z = t16.x * 0.500000;
            //Instruction 54093
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54094
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54095
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54096
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54097
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54098
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54099
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54100
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54101
            //LT
            tb16 = t0.w<0.0;
            //Instruction 54102
            //MOV
            t0.y = (-t0.w);
            //Instruction 54103
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54104
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 54105
            //MAD
            t45 = (-t4.y) * t4.z + t16.x;
            //Instruction 54106
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 54107
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 54108
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 54109
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 54110
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54111
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54112
            //MUL
            t45 = t45 * t4.x;
            //Instruction 54113
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 54114
            //MUL
            t3.xyz = t16.xxx * t3.xyz;
            //Instruction 54115
            //MAD
            t15.xyz = t3.xyz * _ST_WindBranch.yyy + t15.xyz;
            //Instruction 54116
        //ENDIF
        }
        //Instruction 54117
    //ENDIF
    }
    //Instruction 54118
    //DP3
    t16.x = dot(t15.xyz, t15.xyz);
    //Instruction 54119
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 54120
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54121
    //MAD
    t44 = (-t44) * 0.250000 + t15.y;
    //Instruction 54122
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 54123
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 54124
    //NE
    tb3 = t44!=0.0;
    //Instruction 54125
    //LOG
    t17 = log2(t44);
    //Instruction 54126
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 54127
    //EXP
    t17 = exp2(t17);
    //Instruction 54128
    //MOVC
    t44 = (tb3) ? t17 : t44;
    //Instruction 54129
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54130
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54131
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54132
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54133
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54134
    //MUL
    t31.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54135
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54136
    //MAD
    t3.xy = t31.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54137
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54138
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54139
    //DIV
    t17 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54140
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t17;
    //Instruction 54141
    //MUL
    t44 = t44 * t3.x;
    //Instruction 54142
    //MAD
    t3.xz = t2.xz * vec2(t44) + t15.xz;
    //Instruction 54143
    //MOV
    t3.y = t15.y;
    //Instruction 54144
    //DP3
    t2.x = dot(t3.xyz, t3.xyz);
    //Instruction 54145
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 54146
    //MUL
    t2.xzw = t2.xxx * t3.xyz;
    //Instruction 54147
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 54148
    //MOVC
    t1.xyz = (tb1.x) ? t2.xyz : t15.xyz;
    //Instruction 54149
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54150
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54151
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54152
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 54153
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 54154
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54155
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 54156
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 54157
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 54158
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 54159
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    //Instruction 53868
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 53869
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 53870
    //LT
    tb0 = t16_0<0.0;
    //Instruction 53871
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 53872
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 53873
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 53874
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 53875
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 53876
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 53877
    //FRC
    t0 = fract(t0);
    //Instruction 53878
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 53879
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_55;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 53950
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 53951
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 53952
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53953
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 53954
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 53955
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 53956
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 53957
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 53958
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 53959
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 53960
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 53961
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 53962
    //IF
    if(tb19){
        //Instruction 53963
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 53964
        //IF
        if(tb19){
            //Instruction 53965
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53966
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 53967
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 53968
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 53969
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 53970
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 53971
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53972
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53973
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53974
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 53975
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53976
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53977
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 53978
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53979
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 53980
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 53981
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 53982
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53983
            //FRC
            t0 = fract(t0);
            //Instruction 53984
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53985
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 53986
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53987
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53988
            //ADD
            t0 = t0 + t0;
            //Instruction 53989
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 53990
            //LT
            tb20 = t5.w<0.0;
            //Instruction 53991
            //MOV
            t5.y = (-t5.w);
            //Instruction 53992
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 53993
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 53994
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 53995
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 53996
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 53997
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 53998
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 53999
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54000
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54001
            //MUL
            t22 = t0.x * t22;
            //Instruction 54002
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 54003
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54004
            //MUL
            t20 = t20 * t21;
            //Instruction 54005
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 54006
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54007
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54008
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54009
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54010
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 54011
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 54012
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54013
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 54014
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54015
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 54016
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 54017
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 54018
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 54019
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54020
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54021
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54022
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 54023
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54024
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54025
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 54026
        //ELSE
        } else {
            //Instruction 54027
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54028
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54029
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54030
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54031
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54032
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54033
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54034
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54035
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54036
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54037
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54038
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54039
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54040
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54041
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54042
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54043
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54044
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54045
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54046
            //MOV
            t0.y = (-t0.w);
            //Instruction 54047
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54048
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54049
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54050
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54051
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54052
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54053
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54054
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54055
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54056
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54057
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54058
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54059
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54060
        //ENDIF
        }
        //Instruction 54061
    //ENDIF
    }
    //Instruction 54062
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54063
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54064
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54065
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54066
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54067
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54068
    //NE
    tb3 = t20!=0.0;
    //Instruction 54069
    //LOG
    t9 = log2(t20);
    //Instruction 54070
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54071
    //EXP
    t9 = exp2(t9);
    //Instruction 54072
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54073
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54074
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54075
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54076
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54077
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54078
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54079
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54080
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54081
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54082
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54083
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54084
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54085
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54086
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54087
    //MOV
    t3.y = t2.y;
    //Instruction 54088
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54089
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54090
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54091
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54092
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54093
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 54094
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54095
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54096
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54097
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 54098
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 54099
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 54100
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 54101
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 54102
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 54103
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 54104
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 54105
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 54106
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 54107
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 54108
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 54109
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 54110
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 54111
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54112
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 54113
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 54114
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 54115
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54116
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 54117
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 54118
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 54119
    //SQRT
    t20 = sqrt(t20);
    //Instruction 54120
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 54121
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 54122
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 54123
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 54124
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 54125
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 54126
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54127
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 54128
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 54129
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 54130
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 54131
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 54132
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 54133
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 54134
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 54135
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 54136
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 54137
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
layout(location = 0) out highp vec4 SV_Target0;
void main()
{
    //Instruction 53948
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53949
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 54146
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54147
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54148
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54149
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 54150
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 54151
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 54152
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 54153
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 54154
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 54155
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 54156
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 54157
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 54158
    //IF
    if(tb19){
        //Instruction 54159
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 54160
        //IF
        if(tb19){
            //Instruction 54161
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54162
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 54163
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 54164
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 54165
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 54166
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54167
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54168
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54169
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54170
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54171
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54172
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54173
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 54174
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54175
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54176
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 54177
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54178
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54179
            //FRC
            t0 = fract(t0);
            //Instruction 54180
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54181
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 54182
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54183
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54184
            //ADD
            t0 = t0 + t0;
            //Instruction 54185
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 54186
            //LT
            tb20 = t5.w<0.0;
            //Instruction 54187
            //MOV
            t5.y = (-t5.w);
            //Instruction 54188
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 54189
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 54190
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 54191
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 54192
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 54193
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 54194
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 54195
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54196
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54197
            //MUL
            t22 = t0.x * t22;
            //Instruction 54198
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 54199
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54200
            //MUL
            t20 = t20 * t21;
            //Instruction 54201
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 54202
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54203
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54204
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54205
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54206
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 54207
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 54208
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54209
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 54210
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54211
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 54212
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 54213
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 54214
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 54215
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54216
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54217
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54218
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 54219
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54220
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54221
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 54222
        //ELSE
        } else {
            //Instruction 54223
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54224
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54225
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54226
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54227
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54228
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54229
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54230
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54231
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54232
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54233
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54234
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54235
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54236
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54237
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54238
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54239
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54240
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54241
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54242
            //MOV
            t0.y = (-t0.w);
            //Instruction 54243
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54244
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54245
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54246
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54247
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54248
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54249
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54250
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54251
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54252
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54253
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54254
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54255
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54256
        //ENDIF
        }
        //Instruction 54257
    //ENDIF
    }
    //Instruction 54258
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54259
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54260
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54261
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54262
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54263
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54264
    //NE
    tb3 = t20!=0.0;
    //Instruction 54265
    //LOG
    t9 = log2(t20);
    //Instruction 54266
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54267
    //EXP
    t9 = exp2(t9);
    //Instruction 54268
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54269
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54270
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54271
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54272
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54273
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54274
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54275
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54276
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54277
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54278
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54279
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54280
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54281
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54282
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54283
    //MOV
    t3.y = t2.y;
    //Instruction 54284
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54285
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54286
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54287
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54288
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54289
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54290
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54291
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54292
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 54293
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 54294
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54295
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 54296
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 54297
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 54298
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 54138
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 54139
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 54140
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 54141
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 54142
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 54143
    //FRC
    t0 = fract(t0);
    //Instruction 54144
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 54145
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_55;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 54631
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54632
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54633
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54634
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 54635
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 54636
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 54637
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 54638
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 54639
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 54640
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 54641
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 54642
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 54643
    //IF
    if(tb19){
        //Instruction 54644
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 54645
        //IF
        if(tb19){
            //Instruction 54646
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54647
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 54648
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 54649
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 54650
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 54651
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54652
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54653
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54654
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54655
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54656
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54657
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54658
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 54659
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54660
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54661
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 54662
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54663
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54664
            //FRC
            t0 = fract(t0);
            //Instruction 54665
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54666
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 54667
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54668
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54669
            //ADD
            t0 = t0 + t0;
            //Instruction 54670
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 54671
            //LT
            tb20 = t5.w<0.0;
            //Instruction 54672
            //MOV
            t5.y = (-t5.w);
            //Instruction 54673
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 54674
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 54675
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 54676
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 54677
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 54678
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 54679
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 54680
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54681
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54682
            //MUL
            t22 = t0.x * t22;
            //Instruction 54683
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 54684
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54685
            //MUL
            t20 = t20 * t21;
            //Instruction 54686
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 54687
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54688
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54689
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54690
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54691
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 54692
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 54693
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54694
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 54695
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54696
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 54697
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 54698
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 54699
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 54700
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54701
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54702
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54703
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 54704
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54705
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54706
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 54707
        //ELSE
        } else {
            //Instruction 54708
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54709
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54710
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54711
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54712
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54713
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54714
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54715
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54716
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54717
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54718
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54719
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54720
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54721
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54722
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54723
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54724
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54725
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54726
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54727
            //MOV
            t0.y = (-t0.w);
            //Instruction 54728
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54729
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54730
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54731
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54732
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54733
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54734
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54735
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54736
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54737
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54738
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54739
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54740
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54741
        //ENDIF
        }
        //Instruction 54742
    //ENDIF
    }
    //Instruction 54743
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54744
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54745
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54746
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54747
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54748
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54749
    //NE
    tb3 = t20!=0.0;
    //Instruction 54750
    //LOG
    t9 = log2(t20);
    //Instruction 54751
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54752
    //EXP
    t9 = exp2(t9);
    //Instruction 54753
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54754
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54755
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54756
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54757
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54758
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54759
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54760
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54761
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54762
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54763
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54764
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54765
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54766
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54767
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54768
    //MOV
    t3.y = t2.y;
    //Instruction 54769
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54770
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54771
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54772
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54773
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54774
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 54775
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54776
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54777
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54778
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 54779
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 54780
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 54781
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 54782
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 54783
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 54784
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 54785
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 54786
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 54787
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 54788
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 54789
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 54790
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 54791
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 54792
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54793
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 54794
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 54795
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 54796
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54797
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 54798
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 54799
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 54800
    //SQRT
    t20 = sqrt(t20);
    //Instruction 54801
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 54802
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 54803
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 54804
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 54805
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 54806
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 54807
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54808
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 54809
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 54810
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 54811
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 54812
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 54813
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 54814
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 54815
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 54816
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 54817
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 54818
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
layout(location = 0) out highp vec4 SV_Target0;
void main()
{
    //Instruction 54629
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 54630
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  FinalPosition_5 = tmpvar_1.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6.x = _Object2World[3].x;
  tmpvar_6.y = _Object2World[3].y;
  tmpvar_6.z = _Object2World[3].z;
  mediump float tmpvar_7;
  tmpvar_7 = (_WindQuality * _WindEnabled);
  if ((tmpvar_7 > 0.0)) {
    highp mat3 tmpvar_8;
    tmpvar_8[0] = _World2Object[0].xyz;
    tmpvar_8[1] = _World2Object[1].xyz;
    tmpvar_8[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_8 * _ST_WindVector.xyz));
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_9 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_5 = tmpvar_10;
  if ((tmpvar_7 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_10;
    if ((tmpvar_7 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_10;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (tmpvar_10 + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_6.x + tmpvar_6.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_7 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_6.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_6.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 54168
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54169
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54170
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54171
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 54172
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 54173
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 54174
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 54175
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 54176
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 54177
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 54178
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 54179
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 54180
    //IF
    if(tb19){
        //Instruction 54181
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 54182
        //IF
        if(tb19){
            //Instruction 54183
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54184
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 54185
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 54186
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 54187
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 54188
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54189
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54190
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54191
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54192
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54193
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54194
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54195
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 54196
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54197
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54198
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 54199
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54200
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54201
            //FRC
            t0 = fract(t0);
            //Instruction 54202
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54203
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 54204
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54205
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54206
            //ADD
            t0 = t0 + t0;
            //Instruction 54207
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 54208
            //LT
            tb20 = t5.w<0.0;
            //Instruction 54209
            //MOV
            t5.y = (-t5.w);
            //Instruction 54210
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 54211
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 54212
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 54213
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 54214
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 54215
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 54216
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 54217
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54218
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54219
            //MUL
            t22 = t0.x * t22;
            //Instruction 54220
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 54221
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54222
            //MUL
            t20 = t20 * t21;
            //Instruction 54223
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 54224
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54225
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54226
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54227
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54228
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 54229
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 54230
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54231
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 54232
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54233
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 54234
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 54235
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 54236
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 54237
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54238
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54239
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54240
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 54241
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54242
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54243
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 54244
        //ELSE
        } else {
            //Instruction 54245
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54246
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54247
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54248
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54249
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54250
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54251
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54252
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54253
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54254
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54255
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54256
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54257
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54258
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54259
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54260
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54261
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54262
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54263
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54264
            //MOV
            t0.y = (-t0.w);
            //Instruction 54265
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54266
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54267
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54268
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54269
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54270
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54271
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54272
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54273
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54274
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54275
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54276
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54277
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54278
        //ENDIF
        }
        //Instruction 54279
    //ENDIF
    }
    //Instruction 54280
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54281
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54282
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54283
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54284
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54285
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54286
    //NE
    tb3 = t20!=0.0;
    //Instruction 54287
    //LOG
    t9 = log2(t20);
    //Instruction 54288
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54289
    //EXP
    t9 = exp2(t9);
    //Instruction 54290
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54291
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54292
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54293
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54294
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54295
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54296
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54297
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54298
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54299
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54300
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54301
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54302
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54303
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54304
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54305
    //MOV
    t3.y = t2.y;
    //Instruction 54306
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54307
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54308
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54309
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54310
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54311
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54312
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54313
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54314
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 54315
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 54316
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54317
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 54318
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 54319
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 54320
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 54160
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 54161
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 54162
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 54163
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 54164
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 54165
    //FRC
    t0 = fract(t0);
    //Instruction 54166
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 54167
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_9 = tmpvar_14;
  if ((tmpvar_11 == 5.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_14;
    highp float fOffset_16;
    fOffset_16 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_16 = 0.75;
    };
    highp vec4 tmpvar_17;
    tmpvar_17.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_17.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_16);
    highp vec4 tmpvar_18;
    tmpvar_18 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    vPos_15 = (tmpvar_14 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_18 * tmpvar_18)
       * 
        (3.0 - (2.0 * tmpvar_18))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = FinalPosition_9;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = FinalPosition_9;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (FinalPosition_9 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_9 = vPos_19;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_9;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_9 = vPos_44;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_52;
  vertex_52 = tmpvar_5.xyz;
  highp vec4 clipPos_53;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_52;
    highp vec3 tmpvar_55;
    tmpvar_55 = (_Object2World * tmpvar_54).xyz;
    highp vec4 v_56;
    v_56.x = _World2Object[0].x;
    v_56.y = _World2Object[1].x;
    v_56.z = _World2Object[2].x;
    v_56.w = _World2Object[3].x;
    highp vec4 v_57;
    v_57.x = _World2Object[0].y;
    v_57.y = _World2Object[1].y;
    v_57.z = _World2Object[2].y;
    v_57.w = _World2Object[3].y;
    highp vec4 v_58;
    v_58.x = _World2Object[0].z;
    v_58.y = _World2Object[1].z;
    v_58.z = _World2Object[2].z;
    v_58.w = _World2Object[3].z;
    highp vec3 tmpvar_59;
    tmpvar_59 = normalize(((
      (v_56.xyz * tmpvar_6.x)
     + 
      (v_57.xyz * tmpvar_6.y)
    ) + (v_58.xyz * tmpvar_6.z)));
    highp float tmpvar_60;
    tmpvar_60 = dot (tmpvar_59, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_55 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_61;
    tmpvar_61.w = 1.0;
    tmpvar_61.xyz = (tmpvar_55 - (tmpvar_59 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_60 * tmpvar_60)))
    )));
    clipPos_53 = (unity_MatrixVP * tmpvar_61);
  } else {
    highp vec4 tmpvar_62;
    tmpvar_62.w = 1.0;
    tmpvar_62.xyz = vertex_52;
    clipPos_53 = (glstate_matrix_mvp * tmpvar_62);
  };
  highp vec4 clipPos_63;
  clipPos_63.xyw = clipPos_53.xyw;
  clipPos_63.z = (clipPos_53.z + clamp ((unity_LightShadowBias.x / clipPos_53.w), 0.0, 1.0));
  clipPos_63.z = mix (clipPos_63.z, max (clipPos_63.z, -(clipPos_53.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_63;
  xlv_TEXCOORD1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 54305
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54306
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54307
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54308
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 54309
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 54310
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 54311
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 54312
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 54313
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 54314
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 54315
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 54316
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 54317
    //LT
    tb20 = in_TEXCOORD0.x<0.500000;
    //Instruction 54318
    //AND
    t20 = tb20 ? 0.750000 : float(0.0);
    //Instruction 54319
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 54320
    //MAD
    t20 = t3.x * _ST_WindFrondRipple.z + t20;
    //Instruction 54321
    //ADD
    t20 = t20 + 0.500000;
    //Instruction 54322
    //FRC
    t20 = fract(t20);
    //Instruction 54323
    //MAD
    t20 = t20 * 2.000000 + -1.0;
    //Instruction 54324
    //MUL
    t3.x = abs(t20) * abs(t20);
    //Instruction 54325
    //MAD
    t20 = -abs(t20) * 2.000000 + 3.000000;
    //Instruction 54326
    //MAD
    t20 = t3.x * t20 + -0.500000;
    //Instruction 54327
    //MUL
    t20 = t20 * in_TEXCOORD2.y;
    //Instruction 54328
    //DP2
    t20 = dot(_ST_WindFrondRipple.yy, vec2(t20));
    //Instruction 54329
    //MAD
    t3.xyz = vec3(t20) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 54330
    //MOVC
    t2.xyz = (bool(tb19)) ? t3.xyz : t2.xyz;
    //Instruction 54331
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 54332
    //IF
    if(tb20){
        //Instruction 54333
        //IF
        if(tb19){
            //Instruction 54334
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54335
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 54336
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 54337
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 54338
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 54339
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54340
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54341
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54342
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54343
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54344
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54345
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54346
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 54347
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54348
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54349
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 54350
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54351
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54352
            //FRC
            t0 = fract(t0);
            //Instruction 54353
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54354
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 54355
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54356
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54357
            //ADD
            t0 = t0 + t0;
            //Instruction 54358
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 54359
            //LT
            tb20 = t5.w<0.0;
            //Instruction 54360
            //MOV
            t5.y = (-t5.w);
            //Instruction 54361
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 54362
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 54363
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 54364
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 54365
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 54366
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 54367
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 54368
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54369
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54370
            //MUL
            t22 = t0.x * t22;
            //Instruction 54371
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 54372
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54373
            //MUL
            t20 = t20 * t21;
            //Instruction 54374
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 54375
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54376
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54377
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54378
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54379
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 54380
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 54381
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54382
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 54383
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54384
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 54385
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 54386
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 54387
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 54388
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54389
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54390
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54391
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 54392
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54393
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54394
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 54395
        //ELSE
        } else {
            //Instruction 54396
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54397
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54398
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54399
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54400
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54401
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54402
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54403
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54404
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54405
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54406
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54407
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54408
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54409
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54410
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54411
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54412
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54413
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54414
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54415
            //MOV
            t0.y = (-t0.w);
            //Instruction 54416
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54417
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54418
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54419
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54420
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54421
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54422
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54423
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54424
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54425
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54426
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54427
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54428
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54429
        //ENDIF
        }
        //Instruction 54430
    //ENDIF
    }
    //Instruction 54431
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54432
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54433
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54434
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54435
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54436
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54437
    //NE
    tb3 = t20!=0.0;
    //Instruction 54438
    //LOG
    t9 = log2(t20);
    //Instruction 54439
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54440
    //EXP
    t9 = exp2(t9);
    //Instruction 54441
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54442
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54443
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54444
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54445
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54446
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54447
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54448
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54449
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54450
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54451
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54452
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54453
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54454
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54455
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54456
    //MOV
    t3.y = t2.y;
    //Instruction 54457
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54458
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54459
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54460
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54461
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54462
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 54463
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54464
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54465
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54466
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 54467
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 54468
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 54469
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 54470
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 54471
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 54472
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 54473
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 54474
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 54475
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 54476
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 54477
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 54478
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 54479
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 54480
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54481
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 54482
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 54483
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 54484
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54485
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 54486
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 54487
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 54488
    //SQRT
    t20 = sqrt(t20);
    //Instruction 54489
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 54490
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 54491
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 54492
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 54493
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 54494
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 54495
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54496
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 54497
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 54498
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 54499
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 54500
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 54501
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 54502
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 54503
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 54504
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 54505
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 54506
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 54507
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    //Instruction 54299
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 54300
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 54301
    //LT
    tb0 = t16_0<0.0;
    //Instruction 54302
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 54303
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 54304
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_3;
  tmpvar_3 = tmpvar_2.xy;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_7 = tmpvar_12;
  if ((tmpvar_9 == 5.0)) {
    highp vec3 vPos_13;
    vPos_13 = tmpvar_12;
    highp float fOffset_14;
    fOffset_14 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_14 = 0.75;
    };
    highp vec4 tmpvar_15;
    tmpvar_15.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_15.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_14);
    highp vec4 tmpvar_16;
    tmpvar_16 = abs(((
      fract((tmpvar_15 + 0.5))
     * 2.0) - 1.0));
    vPos_13 = (tmpvar_12 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_16 * tmpvar_16)
       * 
        (3.0 - (2.0 * tmpvar_16))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    FinalPosition_7 = vPos_13;
  };
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = FinalPosition_7;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = FinalPosition_7;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (FinalPosition_7 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_5 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_7 = vPos_17;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_7;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_7 = vPos_42;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 54831
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54832
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54833
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54834
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 54835
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 54836
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 54837
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 54838
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 54839
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 54840
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 54841
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 54842
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 54843
    //LT
    tb20 = in_TEXCOORD0.x<0.500000;
    //Instruction 54844
    //AND
    t20 = tb20 ? 0.750000 : float(0.0);
    //Instruction 54845
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 54846
    //MAD
    t20 = t3.x * _ST_WindFrondRipple.z + t20;
    //Instruction 54847
    //ADD
    t20 = t20 + 0.500000;
    //Instruction 54848
    //FRC
    t20 = fract(t20);
    //Instruction 54849
    //MAD
    t20 = t20 * 2.000000 + -1.0;
    //Instruction 54850
    //MUL
    t3.x = abs(t20) * abs(t20);
    //Instruction 54851
    //MAD
    t20 = -abs(t20) * 2.000000 + 3.000000;
    //Instruction 54852
    //MAD
    t20 = t3.x * t20 + -0.500000;
    //Instruction 54853
    //MUL
    t20 = t20 * in_TEXCOORD2.y;
    //Instruction 54854
    //DP2
    t20 = dot(_ST_WindFrondRipple.yy, vec2(t20));
    //Instruction 54855
    //MAD
    t3.xyz = vec3(t20) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 54856
    //MOVC
    t2.xyz = (bool(tb19)) ? t3.xyz : t2.xyz;
    //Instruction 54857
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 54858
    //IF
    if(tb20){
        //Instruction 54859
        //IF
        if(tb19){
            //Instruction 54860
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54861
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 54862
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 54863
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 54864
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 54865
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54866
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54867
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54868
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54869
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54870
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54871
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54872
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 54873
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54874
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54875
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 54876
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54877
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54878
            //FRC
            t0 = fract(t0);
            //Instruction 54879
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54880
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 54881
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54882
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54883
            //ADD
            t0 = t0 + t0;
            //Instruction 54884
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 54885
            //LT
            tb20 = t5.w<0.0;
            //Instruction 54886
            //MOV
            t5.y = (-t5.w);
            //Instruction 54887
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 54888
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 54889
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 54890
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 54891
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 54892
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 54893
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 54894
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54895
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54896
            //MUL
            t22 = t0.x * t22;
            //Instruction 54897
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 54898
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54899
            //MUL
            t20 = t20 * t21;
            //Instruction 54900
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 54901
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54902
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54903
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54904
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54905
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 54906
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 54907
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54908
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 54909
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54910
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 54911
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 54912
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 54913
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 54914
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54915
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54916
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54917
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 54918
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54919
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54920
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 54921
        //ELSE
        } else {
            //Instruction 54922
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54923
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54924
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54925
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54926
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54927
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54928
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54929
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54930
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54931
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54932
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54933
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54934
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54935
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54936
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54937
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54938
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54939
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54940
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54941
            //MOV
            t0.y = (-t0.w);
            //Instruction 54942
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54943
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54944
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54945
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54946
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54947
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54948
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54949
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54950
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54951
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54952
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54953
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54954
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54955
        //ENDIF
        }
        //Instruction 54956
    //ENDIF
    }
    //Instruction 54957
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54958
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54959
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54960
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54961
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54962
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54963
    //NE
    tb3 = t20!=0.0;
    //Instruction 54964
    //LOG
    t9 = log2(t20);
    //Instruction 54965
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54966
    //EXP
    t9 = exp2(t9);
    //Instruction 54967
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54968
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54969
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54970
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54971
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54972
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54973
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54974
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54975
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54976
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54977
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54978
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54979
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54980
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54981
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54982
    //MOV
    t3.y = t2.y;
    //Instruction 54983
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54984
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54985
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54986
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54987
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54988
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54989
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54990
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54991
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 54992
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 54993
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54994
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 54995
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 54996
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 54997
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 54998
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    //Instruction 54819
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 54820
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 54821
    //LT
    tb0 = t16_0<0.0;
    //Instruction 54822
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 54823
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 54824
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 54825
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 54826
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 54827
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 54828
    //FRC
    t0 = fract(t0);
    //Instruction 54829
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 54830
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  mediump vec2 tmpvar_6;
  tmpvar_6 = tmpvar_3.xy;
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_11 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_16;
  tmpvar_16.x = tmpvar_4.w;
  tmpvar_16.y = tmpvar_5.x;
  tmpvar_16.z = tmpvar_5.y;
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (FinalPosition_11, tmpvar_16, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_17;
  if (((tmpvar_13 > 1.0) && (tmpvar_13 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_13 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (tmpvar_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_10.zxy) - (tmpvar_28.zxy * vRotatedWindVector_10.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_10, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_8 = vDirection_22;
    FinalPosition_11 = vPos_21;
  };
  FinalPosition_11 = (FinalPosition_11 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_11;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_11;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_11 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_9 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_11 = vPos_62;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_11;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_11 = vPos_87;
  };
  tmpvar_7.xyz = FinalPosition_11;
  highp vec3 vertex_95;
  vertex_95 = tmpvar_7.xyz;
  highp vec4 clipPos_96;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_97;
    tmpvar_97.w = 1.0;
    tmpvar_97.xyz = vertex_95;
    highp vec3 tmpvar_98;
    tmpvar_98 = (_Object2World * tmpvar_97).xyz;
    highp vec4 v_99;
    v_99.x = _World2Object[0].x;
    v_99.y = _World2Object[1].x;
    v_99.z = _World2Object[2].x;
    v_99.w = _World2Object[3].x;
    highp vec4 v_100;
    v_100.x = _World2Object[0].y;
    v_100.y = _World2Object[1].y;
    v_100.z = _World2Object[2].y;
    v_100.w = _World2Object[3].y;
    highp vec4 v_101;
    v_101.x = _World2Object[0].z;
    v_101.y = _World2Object[1].z;
    v_101.z = _World2Object[2].z;
    v_101.w = _World2Object[3].z;
    highp vec3 tmpvar_102;
    tmpvar_102 = normalize(((
      (v_99.xyz * tmpvar_8.x)
     + 
      (v_100.xyz * tmpvar_8.y)
    ) + (v_101.xyz * tmpvar_8.z)));
    highp float tmpvar_103;
    tmpvar_103 = dot (tmpvar_102, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_98 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_104;
    tmpvar_104.w = 1.0;
    tmpvar_104.xyz = (tmpvar_98 - (tmpvar_102 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_103 * tmpvar_103)))
    )));
    clipPos_96 = (unity_MatrixVP * tmpvar_104);
  } else {
    highp vec4 tmpvar_105;
    tmpvar_105.w = 1.0;
    tmpvar_105.xyz = vertex_95;
    clipPos_96 = (glstate_matrix_mvp * tmpvar_105);
  };
  highp vec4 clipPos_106;
  clipPos_106.xyw = clipPos_96.xyw;
  clipPos_106.z = (clipPos_96.z + clamp ((unity_LightShadowBias.x / clipPos_96.w), 0.0, 1.0));
  clipPos_106.z = mix (clipPos_106.z, max (clipPos_106.z, -(clipPos_96.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_106;
  xlv_TEXCOORD1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp float t1;
bvec2 tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 54327
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54328
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 54329
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54330
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 54331
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 54332
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 54333
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 54334
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 54335
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 54336
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 54337
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 54338
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 54339
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 54340
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 54341
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 54342
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 54343
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 54344
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 54345
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 54346
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 54347
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 54348
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 54349
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 54350
        //FRC
        t15.x = fract(t15.x);
        //Instruction 54351
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 54352
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 54353
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 54354
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 54355
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 54356
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 54357
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 54358
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 54359
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 54360
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 54361
        //IF
        if(tb29){
            //Instruction 54362
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 54363
            //FRC
            t4 = fract(t4);
            //Instruction 54364
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54365
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 54366
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 54367
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 54368
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 54369
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 54370
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 54371
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 54372
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54373
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 54374
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54375
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 54376
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 54377
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 54378
            //SQRT
            t44 = sqrt(t44);
            //Instruction 54379
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 54380
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 54381
            //MUL
            t45 = t45 * t5.x;
            //Instruction 54382
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 54383
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 54384
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 54385
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 54386
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 54387
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 54388
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 54389
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 54390
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 54391
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 54392
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 54393
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 54394
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 54395
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 54396
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 54397
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 54398
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 54399
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 54400
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 54401
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 54402
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 54403
            //SQRT
            t45 = sqrt(t45);
            //Instruction 54404
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 54405
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 54406
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 54407
            //MUL
            t33 = t45 * t5.x;
            //Instruction 54408
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 54409
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 54410
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 54411
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 54412
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 54413
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 54414
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 54415
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 54416
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 54417
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54418
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 54419
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54420
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 54421
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 54422
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 54423
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 54424
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 54425
            //LOG
            t43 = log2(t43);
            //Instruction 54426
            //MUL
            t29 = t43 * t15.y;
            //Instruction 54427
            //EXP
            t29 = exp2(t29);
            //Instruction 54428
            //MUL
            t43 = t5.y * t45;
            //Instruction 54429
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 54430
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 54431
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 54432
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 54433
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 54434
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 54435
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 54436
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 54437
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 54438
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 54439
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 54440
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 54441
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 54442
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 54443
            //MOV
            t10.z = t11.x;
            //Instruction 54444
            //MOV
            t10.w = t9.x;
            //Instruction 54445
            //MOV
            t12.z = t8.y;
            //Instruction 54446
            //MOV
            t12.w = t13.y;
            //Instruction 54447
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 54448
            //MOV
            t13.w = t12.y;
            //Instruction 54449
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 54450
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 54451
            //MOV
            t9.w = t10.y;
            //Instruction 54452
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 54453
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 54454
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 54455
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 54456
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 54457
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 54458
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 54459
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 54460
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 54461
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 54462
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 54463
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 54464
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 54465
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 54466
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 54467
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 54468
        //ELSE
        } else {
            //Instruction 54469
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 54470
        //ENDIF
        }
        //Instruction 54471
    //ELSE
    } else {
        //Instruction 54472
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 54473
    //ENDIF
    }
    //Instruction 54474
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 54475
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 54476
    //IF
    if(tb16){
        //Instruction 54477
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 54478
        //IF
        if(tb16){
            //Instruction 54479
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54480
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 54481
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 54482
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 54483
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 54484
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 54485
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54486
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 54487
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54488
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 54489
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54490
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 54491
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 54492
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54493
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54494
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 54495
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54496
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54497
            //FRC
            t0 = fract(t0);
            //Instruction 54498
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54499
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 54500
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54501
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54502
            //ADD
            t0 = t0 + t0;
            //Instruction 54503
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 54504
            //LT
            tb44 = t6.w<0.0;
            //Instruction 54505
            //MOV
            t6.y = (-t6.w);
            //Instruction 54506
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 54507
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 54508
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 54509
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 54510
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 54511
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 54512
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 54513
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54514
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54515
            //MUL
            t46 = t0.x * t46;
            //Instruction 54516
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 54517
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54518
            //MUL
            t44 = t44 * t45;
            //Instruction 54519
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 54520
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 54521
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54522
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54523
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54524
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 54525
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 54526
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54527
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 54528
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54529
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 54530
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 54531
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 54532
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 54533
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54534
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 54535
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 54536
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 54537
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54538
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 54539
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 54540
        //ELSE
        } else {
            //Instruction 54541
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54542
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54543
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54544
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54545
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54546
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 54547
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 54548
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54549
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 54550
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 54551
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54552
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 54553
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54554
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 54555
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54556
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54557
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 54558
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 54559
            //LT
            tb16 = t0.w<0.0;
            //Instruction 54560
            //MOV
            t0.y = (-t0.w);
            //Instruction 54561
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54562
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 54563
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 54564
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 54565
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 54566
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 54567
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 54568
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54569
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54570
            //MUL
            t45 = t45 * t5.x;
            //Instruction 54571
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 54572
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 54573
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 54574
        //ENDIF
        }
        //Instruction 54575
    //ENDIF
    }
    //Instruction 54576
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 54577
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 54578
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54579
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 54580
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 54581
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 54582
    //NE
    tb45 = t44!=0.0;
    //Instruction 54583
    //LOG
    t4.x = log2(t44);
    //Instruction 54584
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 54585
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 54586
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 54587
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54588
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54589
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 54590
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 54591
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54592
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 54593
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54594
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 54595
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 54596
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 54597
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54598
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 54599
    //MUL
    t44 = t44 * t45;
    //Instruction 54600
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 54601
    //MOV
    t4.y = t3.y;
    //Instruction 54602
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 54603
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 54604
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 54605
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 54606
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 54607
    //NE
    tb1.x = unity_LightShadowBias.z!=0.0;
    //Instruction 54608
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 54609
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 54610
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    //Instruction 54611
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 54612
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 54613
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 54614
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 54615
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 54616
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 54617
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 54618
    //MUL
    t5.xyz = t15.yyy * t5.xyz;
    //Instruction 54619
    //MAD
    t4.xyz = t4.xyz * t15.xxx + t5.xyz;
    //Instruction 54620
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 54621
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 54622
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 54623
    //MAD
    t15.xyz = t5.xyz * t15.zzz + t4.xyz;
    //Instruction 54624
    //DP3
    t44 = dot(t15.xyz, t15.xyz);
    //Instruction 54625
    //RSQ
    t44 = inversesqrt(t44);
    //Instruction 54626
    //MUL
    t15.xyz = t15.xyz * vec3(t44);
    //Instruction 54627
    //MAD
    t4.xyz = (-t3.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 54628
    //DP3
    t44 = dot(t4.xyz, t4.xyz);
    //Instruction 54629
    //RSQ
    t44 = inversesqrt(t44);
    //Instruction 54630
    //MUL
    t4.xyz = vec3(t44) * t4.xyz;
    //Instruction 54631
    //DP3
    t44 = dot(t15.xyz, t4.xyz);
    //Instruction 54632
    //MAD
    t44 = (-t44) * t44 + 1.0;
    //Instruction 54633
    //SQRT
    t44 = sqrt(t44);
    //Instruction 54634
    //MUL
    t44 = t44 * unity_LightShadowBias.z;
    //Instruction 54635
    //MAD
    t15.xyz = (-t15.xyz) * vec3(t44) + t3.xyz;
    //Instruction 54636
    //MUL
    t0 = t15.yyyy * unity_MatrixVP[1];
    //Instruction 54637
    //MAD
    t0 = unity_MatrixVP[0] * t15.xxxx + t0;
    //Instruction 54638
    //MAD
    t0 = unity_MatrixVP[2] * t15.zzzz + t0;
    //Instruction 54639
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 54640
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 54641
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 54642
    //MAD
    t2 = glstate_matrix_mvp[2] * t2.zzzz + t3;
    //Instruction 54643
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 54644
    //MOVC
    t0 = (tb1.x) ? t0 : t2;
    //Instruction 54645
    //DIV
    t1 = unity_LightShadowBias.x / t0.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 54646
    //ADD
    t1 = t0.z + t1;
    //Instruction 54647
    //MAX
    t15.x = max((-t0.w), t1);
    //Instruction 54648
    //ADD
    t15.x = (-t1) + t15.x;
    //Instruction 54649
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t15.x + t1;
    //Instruction 54650
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 54651
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 54652
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    //Instruction 54321
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 54322
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 54323
    //LT
    tb0 = t16_0<0.0;
    //Instruction 54324
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 54325
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 54326
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  highp vec2 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord3.xy;
  mediump vec2 tmpvar_5;
  tmpvar_5 = tmpvar_2.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_9 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14.x = tmpvar_3.w;
  tmpvar_14.y = tmpvar_4.x;
  tmpvar_14.z = tmpvar_4.y;
  highp vec3 tmpvar_15;
  tmpvar_15 = mix (FinalPosition_9, tmpvar_14, unity_LODFade.xxx);
  FinalPosition_9 = tmpvar_15;
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_16;
    tmpvar_16 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_17;
    isBestWind_17 = (tmpvar_11 == 4.0);
    bool bLeaf2_18;
    bLeaf2_18 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float tmpvar_20;
    if (bLeaf2_18) {
      tmpvar_20 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_21;
    if (bLeaf2_18) {
      tmpvar_21 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_22;
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (tmpvar_20 + tmpvar_16);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_21 * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_19 = vPos_22;
    if (isBestWind_17) {
      highp vec3 tmpvar_25;
      tmpvar_25 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_26;
      if (bLeaf2_18) {
        tmpvar_26 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_27;
      if (bLeaf2_18) {
        tmpvar_27 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_28;
      if (bLeaf2_18) {
        tmpvar_28 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_29;
      if (bLeaf2_18) {
        tmpvar_29 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_30;
      if (bLeaf2_18) {
        tmpvar_30 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_30 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_31;
      if (bLeaf2_18) {
        tmpvar_31 = bool(1);
      } else {
        tmpvar_31 = bool(1);
      };
      highp float fTwitch_32;
      highp vec3 vAxis_33;
      highp float fOsc_34;
      highp vec3 vOriginPos_35;
      highp vec3 tmpvar_36;
      tmpvar_36 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_37;
      tmpvar_37 = ((tmpvar_36.x + tmpvar_36.y) + tmpvar_36.z);
      highp vec4 tmpvar_38;
      tmpvar_38.x = (tmpvar_26 + tmpvar_37);
      tmpvar_38.y = ((tmpvar_26 * 0.75) - tmpvar_37);
      tmpvar_38.z = ((tmpvar_26 * 0.01) + tmpvar_37);
      tmpvar_38.w = (tmpvar_26 + tmpvar_37);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      vOriginPos_35 = vPos_22;
      highp float tmpvar_41;
      tmpvar_41 = sqrt(dot (vPos_22, vPos_22));
      highp float fAngle_42;
      fAngle_42 = ((_glesMultiTexCoord2.x * tmpvar_28) * (tmpvar_39.x + (tmpvar_39.y * tmpvar_39.y)));
      highp vec2 vSinCos_43;
      vSinCos_43.x = sin(fAngle_42);
      vSinCos_43.y = cos(fAngle_42);
      highp float tmpvar_44;
      tmpvar_44 = (1.0 - vSinCos_43.y);
      highp mat3 tmpvar_45;
      tmpvar_45[0].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.x) + vSinCos_43.y);
      tmpvar_45[0].y = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.y) + (vSinCos_43.x * tmpvar_25.z));
      tmpvar_45[0].z = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.z) - (vSinCos_43.x * tmpvar_25.y));
      tmpvar_45[1].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.y) - (vSinCos_43.x * tmpvar_25.z));
      tmpvar_45[1].y = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.y) + vSinCos_43.y);
      tmpvar_45[1].z = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.z) + (vSinCos_43.x * tmpvar_25.x));
      tmpvar_45[2].x = (((tmpvar_44 * tmpvar_25.x) * tmpvar_25.z) + (vSinCos_43.x * tmpvar_25.y));
      tmpvar_45[2].y = (((tmpvar_44 * tmpvar_25.y) * tmpvar_25.z) - (vSinCos_43.x * tmpvar_25.x));
      tmpvar_45[2].z = (((tmpvar_44 * tmpvar_25.z) * tmpvar_25.z) + vSinCos_43.y);
      highp vec3 tmpvar_46;
      tmpvar_46 = ((tmpvar_25.yzx * vRotatedWindVector_8.zxy) - (tmpvar_25.zxy * vRotatedWindVector_8.yzx));
      vAxis_33.xz = tmpvar_46.xz;
      highp float tmpvar_47;
      tmpvar_47 = clamp (dot (vRotatedWindVector_8, tmpvar_25), -1.0, 1.0);
      vAxis_33.y = (tmpvar_46.y + tmpvar_47);
      highp vec3 tmpvar_48;
      tmpvar_48 = normalize(vAxis_33);
      vAxis_33 = tmpvar_48;
      highp float tmpvar_49;
      tmpvar_49 = (1.570796 - (sign(tmpvar_47) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_47))) * (1.570796 + (abs(tmpvar_47) * (-0.2146018 + 
          (abs(tmpvar_47) * (0.08656672 + (abs(tmpvar_47) * -0.03102955)))
        ))))
      )));
      fOsc_34 = (tmpvar_39.y - (tmpvar_39.x * tmpvar_39.x));
      fTwitch_32 = 0.0;
      if (tmpvar_31) {
        highp float fTime_50;
        fTime_50 = (tmpvar_30.z + tmpvar_37);
        highp vec4 tmpvar_51;
        tmpvar_51.zw = vec2(0.0, 0.0);
        tmpvar_51.x = fTime_50;
        tmpvar_51.y = (0.87 * fTime_50);
        highp vec4 tmpvar_52;
        highp vec4 tmpvar_53;
        tmpvar_53 = abs(((
          fract((tmpvar_51 + 0.5))
         * 2.0) - 1.0));
        tmpvar_52 = (((
          (tmpvar_53 * tmpvar_53)
         * 
          (3.0 - (2.0 * tmpvar_53))
        ) - 0.5) * 2.0);
        fTwitch_32 = (tmpvar_30.x * pow (clamp (
          ((((tmpvar_52.x * tmpvar_52.y) * tmpvar_52.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_30.y));
      };
      highp float fAngle_54;
      fAngle_54 = (_glesMultiTexCoord2.x * ((
        (tmpvar_49 * tmpvar_29)
       + 
        (fOsc_34 * tmpvar_27)
      ) + fTwitch_32));
      highp vec2 vSinCos_55;
      vSinCos_55.x = sin(fAngle_54);
      vSinCos_55.y = cos(fAngle_54);
      highp float tmpvar_56;
      tmpvar_56 = (1.0 - vSinCos_55.y);
      highp mat3 tmpvar_57;
      tmpvar_57[0].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.x) + vSinCos_55.y);
      tmpvar_57[0].y = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.y) + (vSinCos_55.x * tmpvar_48.z));
      tmpvar_57[0].z = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.z) - (vSinCos_55.x * tmpvar_48.y));
      tmpvar_57[1].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.y) - (vSinCos_55.x * tmpvar_48.z));
      tmpvar_57[1].y = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.y) + vSinCos_55.y);
      tmpvar_57[1].z = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.z) + (vSinCos_55.x * tmpvar_48.x));
      tmpvar_57[2].x = (((tmpvar_56 * tmpvar_48.x) * tmpvar_48.z) + (vSinCos_55.x * tmpvar_48.y));
      tmpvar_57[2].y = (((tmpvar_56 * tmpvar_48.y) * tmpvar_48.z) - (vSinCos_55.x * tmpvar_48.x));
      tmpvar_57[2].z = (((tmpvar_56 * tmpvar_48.z) * tmpvar_48.z) + vSinCos_55.y);
      vOriginPos_35 = (normalize((
        (tmpvar_45 * tmpvar_57)
       * vPos_22)) * tmpvar_41);
      vPos_19 = vOriginPos_35;
    };
    FinalPosition_9 = vPos_19;
  };
  FinalPosition_9 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_58;
    vPos_58 = FinalPosition_9;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_59;
      vPos_59 = FinalPosition_9;
      highp float fTime_60;
      highp float fAdherenceScale_61;
      highp vec3 vWindVector_62;
      vWindVector_62 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_60 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_63;
      highp float fOscillation_64;
      fOscillation_64 = 1.0;
      highp float fAmount_65;
      highp float fTarget_66;
      highp vec4 tmpvar_67;
      tmpvar_67.x = (fTime_60 + _glesMultiTexCoord0.w);
      tmpvar_67.y = ((fTime_60 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_67.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_60 + _glesMultiTexCoord0.w));
      tmpvar_67.w = ((fTime_60 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_68;
      tmpvar_68 = abs(((
        fract((tmpvar_67 + 0.5))
       * 2.0) - 1.0));
      vOscillations_63 = (((
        (tmpvar_68 * tmpvar_68)
       * 
        (3.0 - (2.0 * tmpvar_68))
      ) - 0.5) * 2.0);
      highp float tmpvar_69;
      tmpvar_69 = (vOscillations_63.y * vOscillations_63.z);
      fTarget_66 = 1.0;
      fAmount_65 = tmpvar_69;
      if ((tmpvar_69 < 0.0)) {
        fTarget_66 = -1.0;
        fAmount_65 = -(tmpvar_69);
      };
      fOscillation_64 = (((
        mix (mix (tmpvar_69, fTarget_66, fAmount_65), fTarget_66, fAmount_65)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_63.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_64 = (fOscillation_64 * (1.0 + (vOscillations_63.w * _ST_WindBranchWhip.x)));
      vPos_59 = (FinalPosition_9 + ((vWindVector_62 * fOscillation_64) * _ST_WindBranch.y));
      highp vec4 tmpvar_70;
      tmpvar_70.zw = vec2(0.0, 0.0);
      tmpvar_70.x = ((fTime_60 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_70.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_71;
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_70 + 0.5))
       * 2.0) - 1.0));
      tmpvar_71 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      fAdherenceScale_61 = (1.0 - ((tmpvar_71.x * tmpvar_71.y) * (
        (tmpvar_71.x * tmpvar_71.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_61 = (fAdherenceScale_61 + ((vOscillations_63.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_59 = (vPos_59 + ((
        ((vRotatedBranchAnchor_7 - vPos_59) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_61) * _glesMultiTexCoord0.z));
      vPos_58 = vPos_59;
    } else {
      highp vec3 vPos_73;
      vPos_73 = vPos_58;
      highp float fTime_74;
      highp vec3 vWindVector_75;
      vWindVector_75 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_74 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.w = 0.0;
      tmpvar_80.x = (fTime_74 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((fTime_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_74 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_76.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_73 = (vPos_58 + ((vWindVector_75 * fOscillation_77) * _ST_WindBranch.y));
      vPos_58 = vPos_73;
    };
    FinalPosition_9 = vPos_58;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_83;
    vPos_83 = FinalPosition_9;
    highp float fMoveAmount_84;
    highp float fAdjust_85;
    highp float fLength_86;
    fLength_86 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_87;
    tmpvar_87 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_85 = tmpvar_87;
    if ((tmpvar_87 != 0.0)) {
      fAdjust_85 = pow (tmpvar_87, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_88;
    tmpvar_88.zw = vec2(0.0, 0.0);
    tmpvar_88.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_88.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_89;
    highp vec4 tmpvar_90;
    tmpvar_90 = abs(((
      fract((tmpvar_88 + 0.5))
     * 2.0) - 1.0));
    tmpvar_89 = (((
      (tmpvar_90 * tmpvar_90)
     * 
      (3.0 - (2.0 * tmpvar_90))
    ) - 0.5) * 2.0);
    fMoveAmount_84 = ((_ST_WindGlobal.y * (tmpvar_89.x + 
      (tmpvar_89.y * tmpvar_89.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_84 = (fMoveAmount_84 * fAdjust_85);
    vPos_83.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_84));
    vPos_83 = (normalize(vPos_83) * fLength_86);
    FinalPosition_9 = vPos_83;
  };
  tmpvar_6.xyz = FinalPosition_9;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_6).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp float t17;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t31;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
highp float t46;
void main()
{
    //Instruction 54520
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54521
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 54522
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54523
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 54524
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 54525
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 54526
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 54527
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 54528
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 54529
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 54530
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 54531
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 54532
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 54533
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 54534
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 54535
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 54536
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 54537
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 54538
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 54539
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 54540
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 54541
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 54542
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 54543
        //FRC
        t15.x = fract(t15.x);
        //Instruction 54544
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 54545
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 54546
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 54547
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 54548
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 54549
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 54550
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 54551
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 54552
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 54553
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 54554
        //IF
        if(tb29){
            //Instruction 54555
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 54556
            //FRC
            t4 = fract(t4);
            //Instruction 54557
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54558
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 54559
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 54560
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 54561
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 54562
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 54563
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 54564
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 54565
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54566
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 54567
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54568
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 54569
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 54570
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 54571
            //SQRT
            t44 = sqrt(t44);
            //Instruction 54572
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 54573
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 54574
            //MUL
            t45 = t45 * t5.x;
            //Instruction 54575
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 54576
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 54577
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 54578
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 54579
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 54580
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 54581
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 54582
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 54583
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 54584
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 54585
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 54586
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 54587
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 54588
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 54589
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 54590
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 54591
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 54592
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 54593
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 54594
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 54595
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 54596
            //SQRT
            t45 = sqrt(t45);
            //Instruction 54597
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 54598
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 54599
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 54600
            //MUL
            t33 = t45 * t5.x;
            //Instruction 54601
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 54602
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 54603
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 54604
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 54605
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 54606
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 54607
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 54608
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 54609
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 54610
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54611
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 54612
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54613
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 54614
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 54615
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 54616
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 54617
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 54618
            //LOG
            t43 = log2(t43);
            //Instruction 54619
            //MUL
            t29 = t43 * t15.y;
            //Instruction 54620
            //EXP
            t29 = exp2(t29);
            //Instruction 54621
            //MUL
            t43 = t5.y * t45;
            //Instruction 54622
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 54623
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 54624
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 54625
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 54626
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 54627
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 54628
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 54629
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 54630
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 54631
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 54632
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 54633
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 54634
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 54635
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 54636
            //MOV
            t10.z = t11.x;
            //Instruction 54637
            //MOV
            t10.w = t9.x;
            //Instruction 54638
            //MOV
            t12.z = t8.y;
            //Instruction 54639
            //MOV
            t12.w = t13.y;
            //Instruction 54640
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 54641
            //MOV
            t13.w = t12.y;
            //Instruction 54642
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 54643
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 54644
            //MOV
            t9.w = t10.y;
            //Instruction 54645
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 54646
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 54647
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 54648
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 54649
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 54650
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 54651
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 54652
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 54653
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 54654
            //DP3
            t15.x = dot(t4.xyz, t4.xyz);
            //Instruction 54655
            //RSQ
            t15.x = inversesqrt(t15.x);
            //Instruction 54656
            //MUL
            t15.xyz = t15.xxx * t4.xyz;
            //Instruction 54657
            //MUL
            t3.xyz = vec3(t44) * t15.xyz;
            //Instruction 54658
        //ENDIF
        }
        //Instruction 54659
    //ENDIF
    }
    //Instruction 54660
    //ADD
    t15.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 54661
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 54662
    //IF
    if(tb16){
        //Instruction 54663
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 54664
        //IF
        if(tb16){
            //Instruction 54665
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54666
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 54667
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 54668
            //DP3
            t16.x = dot(t3.xyz, t3.xyz);
            //Instruction 54669
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 54670
            //MUL
            t3.xyz = t16.xxx * t3.xyz;
            //Instruction 54671
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54672
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54673
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54674
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54675
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54676
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 54677
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 54678
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54679
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54680
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 54681
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54682
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54683
            //FRC
            t0 = fract(t0);
            //Instruction 54684
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54685
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 54686
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54687
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54688
            //ADD
            t0 = t0 + t0;
            //Instruction 54689
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 54690
            //LT
            tb44 = t5.w<0.0;
            //Instruction 54691
            //MOV
            t5.y = (-t5.w);
            //Instruction 54692
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 54693
            //MOVC
            t5.xy = (bool(tb44)) ? t5.xy : t5.zw;
            //Instruction 54694
            //MAD
            t44 = (-t0.y) * t0.z + t5.x;
            //Instruction 54695
            //MAD
            t44 = t5.y * t44 + t5.w;
            //Instruction 54696
            //ADD
            t45 = (-t44) + t5.x;
            //Instruction 54697
            //MAD
            t44 = t5.y * t45 + t44;
            //Instruction 54698
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 54699
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54700
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54701
            //MUL
            t46 = t0.x * t46;
            //Instruction 54702
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 54703
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54704
            //MUL
            t44 = t44 * t45;
            //Instruction 54705
            //MUL
            t4.xyz = vec3(t44) * t4.xyz;
            //Instruction 54706
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t15.xyz;
            //Instruction 54707
            //MAD
            t5.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54708
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54709
            //MAD
            t5.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54710
            //ADD
            t16.xz = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 54711
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 54712
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54713
            //MUL
            t5.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 54714
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54715
            //MAD
            t16.xz = t5.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 54716
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 54717
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 54718
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 54719
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54720
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 54721
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 54722
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 54723
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54724
            //MUL
            t3.xyz = t16.xxx * t3.xyz;
            //Instruction 54725
            //MAD
            t15.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 54726
        //ELSE
        } else {
            //Instruction 54727
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54728
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54729
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54730
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54731
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54732
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 54733
            //ADD
            t4.x = t16.x + in_TEXCOORD0.w;
            //Instruction 54734
            //MAD
            t4.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54735
            //MUL
            t16.x = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54736
            //MUL
            t4.z = t16.x * 0.500000;
            //Instruction 54737
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54738
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54739
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54740
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54741
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54742
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54743
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54744
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54745
            //LT
            tb16 = t0.w<0.0;
            //Instruction 54746
            //MOV
            t0.y = (-t0.w);
            //Instruction 54747
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54748
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 54749
            //MAD
            t45 = (-t4.y) * t4.z + t16.x;
            //Instruction 54750
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 54751
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 54752
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 54753
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 54754
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54755
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54756
            //MUL
            t45 = t45 * t4.x;
            //Instruction 54757
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 54758
            //MUL
            t3.xyz = t16.xxx * t3.xyz;
            //Instruction 54759
            //MAD
            t15.xyz = t3.xyz * _ST_WindBranch.yyy + t15.xyz;
            //Instruction 54760
        //ENDIF
        }
        //Instruction 54761
    //ENDIF
    }
    //Instruction 54762
    //DP3
    t16.x = dot(t15.xyz, t15.xyz);
    //Instruction 54763
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 54764
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54765
    //MAD
    t44 = (-t44) * 0.250000 + t15.y;
    //Instruction 54766
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 54767
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 54768
    //NE
    tb3 = t44!=0.0;
    //Instruction 54769
    //LOG
    t17 = log2(t44);
    //Instruction 54770
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 54771
    //EXP
    t17 = exp2(t17);
    //Instruction 54772
    //MOVC
    t44 = (tb3) ? t17 : t44;
    //Instruction 54773
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54774
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54775
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54776
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54777
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54778
    //MUL
    t31.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54779
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54780
    //MAD
    t3.xy = t31.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54781
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54782
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54783
    //DIV
    t17 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54784
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t17;
    //Instruction 54785
    //MUL
    t44 = t44 * t3.x;
    //Instruction 54786
    //MAD
    t3.xz = t2.xz * vec2(t44) + t15.xz;
    //Instruction 54787
    //MOV
    t3.y = t15.y;
    //Instruction 54788
    //DP3
    t2.x = dot(t3.xyz, t3.xyz);
    //Instruction 54789
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 54790
    //MUL
    t2.xzw = t2.xxx * t3.xyz;
    //Instruction 54791
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 54792
    //MOVC
    t1.xyz = (tb1.x) ? t2.xyz : t15.xyz;
    //Instruction 54793
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54794
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54795
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54796
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 54797
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 54798
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54799
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 54800
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 54801
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 54802
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 54803
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    //Instruction 54508
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 54509
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 54510
    //LT
    tb0 = t16_0<0.0;
    //Instruction 54511
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 54512
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 54513
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 54514
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 54515
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 54516
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 54517
    //FRC
    t0 = fract(t0);
    //Instruction 54518
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 54519
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (clipPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = clipPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  gl_Position = clipPos_55;
  xlv_TEXCOORD2 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec2 projUV_1;
  mediump vec2 tmpvar_2;
  tmpvar_2 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_1.x = tmpvar_2.x;
  projUV_1.y = ((fract(tmpvar_2.y) * 0.0625) + unity_LODFade.y);
  lowp float x_3;
  x_3 = (texture2D (_DitherMaskLOD2D, projUV_1).w - 0.5);
  if ((x_3 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 55009
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 55010
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 55011
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55012
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 55013
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 55014
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 55015
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 55016
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 55017
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 55018
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 55019
    //IF
    if(tb19){
        //Instruction 55020
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 55021
        //IF
        if(tb19){
            //Instruction 55022
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55023
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 55024
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 55025
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 55026
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 55027
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 55028
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55029
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55030
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55031
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55032
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55033
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 55034
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 55035
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55036
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 55037
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 55038
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 55039
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55040
            //FRC
            t0 = fract(t0);
            //Instruction 55041
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55042
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 55043
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55044
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55045
            //ADD
            t0 = t0 + t0;
            //Instruction 55046
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 55047
            //LT
            tb20 = t4.w<0.0;
            //Instruction 55048
            //MOV
            t4.y = (-t4.w);
            //Instruction 55049
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 55050
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 55051
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 55052
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 55053
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 55054
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 55055
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 55056
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55057
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55058
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 55059
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 55060
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55061
            //MUL
            t20 = t20 * t21;
            //Instruction 55062
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 55063
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55064
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55065
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55066
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55067
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 55068
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 55069
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55070
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 55071
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55072
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 55073
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 55074
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 55075
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 55076
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55077
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 55078
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 55079
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 55080
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55081
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 55082
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 55083
        //ELSE
        } else {
            //Instruction 55084
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55085
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55086
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55087
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55088
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55089
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 55090
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 55091
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55092
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 55093
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 55094
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55095
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55096
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55097
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 55098
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55099
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55100
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 55101
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 55102
            //LT
            tb19 = t0.w<0.0;
            //Instruction 55103
            //MOV
            t0.y = (-t0.w);
            //Instruction 55104
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 55105
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 55106
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 55107
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 55108
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 55109
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 55110
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 55111
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55112
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55113
            //MUL
            t21 = t21 * t4.x;
            //Instruction 55114
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 55115
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 55116
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55117
        //ENDIF
        }
        //Instruction 55118
    //ELSE
    } else {
        //Instruction 55119
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 55120
    //ENDIF
    }
    //Instruction 55121
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 55122
    //SQRT
    t19 = sqrt(t19);
    //Instruction 55123
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55124
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 55125
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 55126
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 55127
    //NE
    tb3 = t20!=0.0;
    //Instruction 55128
    //LOG
    t9 = log2(t20);
    //Instruction 55129
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 55130
    //EXP
    t9 = exp2(t9);
    //Instruction 55131
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 55132
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55133
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55134
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 55135
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 55136
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55137
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 55138
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55139
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 55140
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 55141
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 55142
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55143
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 55144
    //MUL
    t20 = t20 * t3.x;
    //Instruction 55145
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 55146
    //MOV
    t3.y = t2.y;
    //Instruction 55147
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 55148
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 55149
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 55150
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 55151
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 55152
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 55153
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 55154
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 55155
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 55156
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 55157
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 55158
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 55159
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 55160
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 55161
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 55162
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 55163
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 55164
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 55165
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 55166
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 55167
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 55168
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 55169
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 55170
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 55171
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 55172
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 55173
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 55174
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 55175
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 55176
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 55177
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 55178
    //SQRT
    t20 = sqrt(t20);
    //Instruction 55179
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 55180
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 55181
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 55182
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 55183
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 55184
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 55185
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55186
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 55187
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 55188
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 55189
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 55190
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 55191
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 55192
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 55193
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 55194
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 55195
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 55196
    //MUL
    t7.x = t0.y * _ProjectionParams.x;
    //Instruction 55197
    //MUL
    t1.w = t7.x * 0.500000;
    //Instruction 55198
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 55199
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 55200
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 55201
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 55202
    //MOV
    t1.z = t0.w;
    //Instruction 55203
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 55204
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 54999
    //DIV
    t16_0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 55000
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 55001
    //MOV
    t1.x = t16_0.x;
    //Instruction 55002
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 55003
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 55004
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 55005
    //LT
    tb1 = t16_1<0.0;
    //Instruction 55006
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 55007
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 55008
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_4;
  highp vec3 vRotatedWindVector_5;
  highp vec3 FinalPosition_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_1.xyz;
  FinalPosition_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_5 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_4 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_5 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_4 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_12;
    vPos_12 = tmpvar_7;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_13;
      vPos_13 = tmpvar_7;
      highp float fTime_14;
      highp float fAdherenceScale_15;
      highp vec3 vWindVector_16;
      vWindVector_16 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_14 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_17;
      highp float fOscillation_18;
      fOscillation_18 = 1.0;
      highp float fAmount_19;
      highp float fTarget_20;
      highp vec4 tmpvar_21;
      tmpvar_21.x = (fTime_14 + _glesMultiTexCoord0.w);
      tmpvar_21.y = ((fTime_14 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_21.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_14 + _glesMultiTexCoord0.w));
      tmpvar_21.w = ((fTime_14 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_22;
      tmpvar_22 = abs(((
        fract((tmpvar_21 + 0.5))
       * 2.0) - 1.0));
      vOscillations_17 = (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0);
      highp float tmpvar_23;
      tmpvar_23 = (vOscillations_17.y * vOscillations_17.z);
      fTarget_20 = 1.0;
      fAmount_19 = tmpvar_23;
      if ((tmpvar_23 < 0.0)) {
        fTarget_20 = -1.0;
        fAmount_19 = -(tmpvar_23);
      };
      fOscillation_18 = (((
        mix (mix (tmpvar_23, fTarget_20, fAmount_19), fTarget_20, fAmount_19)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_17.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_18 = (fOscillation_18 * (1.0 + (vOscillations_17.w * _ST_WindBranchWhip.x)));
      vPos_13 = (_glesVertex.xyz + ((vWindVector_16 * fOscillation_18) * _ST_WindBranch.y));
      highp vec4 tmpvar_24;
      tmpvar_24.zw = vec2(0.0, 0.0);
      tmpvar_24.x = ((fTime_14 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_24.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_25;
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      tmpvar_25 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      fAdherenceScale_15 = (1.0 - ((tmpvar_25.x * tmpvar_25.y) * (
        (tmpvar_25.x * tmpvar_25.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_15 = (fAdherenceScale_15 + ((vOscillations_17.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_13 = (vPos_13 + ((
        ((vRotatedBranchAnchor_4 - vPos_13) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_15) * _glesMultiTexCoord0.z));
      vPos_12 = vPos_13;
    } else {
      highp vec3 vPos_27;
      vPos_27 = vPos_12;
      highp float fTime_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_27 = (vPos_12 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      vPos_12 = vPos_27;
    };
    FinalPosition_6 = vPos_12;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_37;
    vPos_37 = FinalPosition_6;
    highp float fMoveAmount_38;
    highp float fAdjust_39;
    highp float fLength_40;
    fLength_40 = sqrt(dot (FinalPosition_6, FinalPosition_6));
    highp float tmpvar_41;
    tmpvar_41 = (max ((FinalPosition_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_39 = tmpvar_41;
    if ((tmpvar_41 != 0.0)) {
      fAdjust_39 = pow (tmpvar_41, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_42.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_43;
    highp vec4 tmpvar_44;
    tmpvar_44 = abs(((
      fract((tmpvar_42 + 0.5))
     * 2.0) - 1.0));
    tmpvar_43 = (((
      (tmpvar_44 * tmpvar_44)
     * 
      (3.0 - (2.0 * tmpvar_44))
    ) - 0.5) * 2.0);
    fMoveAmount_38 = ((_ST_WindGlobal.y * (tmpvar_43.x + 
      (tmpvar_43.y * tmpvar_43.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_38 = (fMoveAmount_38 * fAdjust_39);
    vPos_37.xz = (FinalPosition_6.xz + (vRotatedWindVector_5.xz * fMoveAmount_38));
    vPos_37 = (normalize(vPos_37) * fLength_40);
    FinalPosition_6 = vPos_37;
  };
  tmpvar_3.xyz = FinalPosition_6;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_3);
  mediump vec3 screenPos_45;
  highp vec4 o_46;
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48.x = tmpvar_47.x;
  tmpvar_48.y = (tmpvar_47.y * _ProjectionParams.x);
  o_46.xy = (tmpvar_48 + tmpvar_47.w);
  o_46.zw = tmpvar_2.zw;
  highp vec3 tmpvar_49;
  tmpvar_49 = o_46.xyw;
  screenPos_45 = tmpvar_49;
  screenPos_45.xy = (screenPos_45.xy * (_ScreenParams.xy * 0.25));
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_3).xyz - _LightPositionRange.xyz);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD2 = screenPos_45;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec2 projUV_1;
  mediump vec2 tmpvar_2;
  tmpvar_2 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_1.x = tmpvar_2.x;
  projUV_1.y = ((fract(tmpvar_2.y) * 0.0625) + unity_LODFade.y);
  lowp float x_3;
  x_3 = (texture2D (_DitherMaskLOD2D, projUV_1).w - 0.5);
  if ((x_3 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_4;
  tmpvar_4 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 - (tmpvar_4.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 54820
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54821
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54822
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54823
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 54824
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 54825
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 54826
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 54827
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 54828
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 54829
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 54830
    //IF
    if(tb19){
        //Instruction 54831
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 54832
        //IF
        if(tb19){
            //Instruction 54833
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54834
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 54835
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 54836
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 54837
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 54838
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 54839
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54840
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54841
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54842
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54843
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54844
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54845
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 54846
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54847
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54848
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 54849
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54850
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54851
            //FRC
            t0 = fract(t0);
            //Instruction 54852
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54853
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 54854
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54855
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54856
            //ADD
            t0 = t0 + t0;
            //Instruction 54857
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 54858
            //LT
            tb20 = t4.w<0.0;
            //Instruction 54859
            //MOV
            t4.y = (-t4.w);
            //Instruction 54860
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 54861
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 54862
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 54863
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 54864
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 54865
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 54866
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 54867
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54868
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54869
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 54870
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 54871
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54872
            //MUL
            t20 = t20 * t21;
            //Instruction 54873
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 54874
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 54875
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54876
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54877
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54878
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 54879
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 54880
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54881
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 54882
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54883
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 54884
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 54885
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 54886
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 54887
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54888
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54889
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54890
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 54891
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54892
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 54893
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 54894
        //ELSE
        } else {
            //Instruction 54895
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54896
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54897
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54898
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54899
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54900
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54901
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54902
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54903
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54904
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54905
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54906
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54907
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54908
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54909
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54910
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54911
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54912
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54913
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54914
            //MOV
            t0.y = (-t0.w);
            //Instruction 54915
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54916
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54917
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54918
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54919
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54920
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54921
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54922
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54923
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54924
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54925
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54926
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54927
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 54928
        //ENDIF
        }
        //Instruction 54929
    //ELSE
    } else {
        //Instruction 54930
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 54931
    //ENDIF
    }
    //Instruction 54932
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54933
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54934
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54935
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54936
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54937
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54938
    //NE
    tb3 = t20!=0.0;
    //Instruction 54939
    //LOG
    t9 = log2(t20);
    //Instruction 54940
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54941
    //EXP
    t9 = exp2(t9);
    //Instruction 54942
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54943
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54944
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54945
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54946
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54947
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54948
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54949
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54950
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54951
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54952
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54953
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54954
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54955
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54956
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54957
    //MOV
    t3.y = t2.y;
    //Instruction 54958
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54959
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54960
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54961
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54962
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54963
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54964
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54965
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54966
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 54967
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 54968
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54969
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 54970
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 54971
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 54972
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 54973
    //MUL
    t7.x = t0.y * _ProjectionParams.x;
    //Instruction 54974
    //MUL
    t1.w = t7.x * 0.500000;
    //Instruction 54975
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 54976
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 54977
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 54978
    //MOV
    gl_Position = t0;
    //Instruction 54979
    //MOV
    t1.z = t0.w;
    //Instruction 54980
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 54981
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in highp vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 54804
    //DIV
    t16_0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 54805
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 54806
    //MOV
    t1.x = t16_0.x;
    //Instruction 54807
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 54808
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 54809
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 54810
    //LT
    tb1 = t16_1<0.0;
    //Instruction 54811
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 54812
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 54813
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 54814
    //MUL
    t1.x = t1.x * _LightPositionRange.w;
    //Instruction 54815
    //MIN
    t1.x = min(t1.x, 0.999000);
    //Instruction 54816
    //MUL
    t0 = t1.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 54817
    //FRC
    t0 = fract(t0);
    //Instruction 54818
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 54819
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (clipPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = clipPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  gl_Position = clipPos_55;
  xlv_TEXCOORD2 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec2 projUV_1;
  mediump vec2 tmpvar_2;
  tmpvar_2 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_1.x = tmpvar_2.x;
  projUV_1.y = ((fract(tmpvar_2.y) * 0.0625) + unity_LODFade.y);
  lowp float x_3;
  x_3 = (texture2D (_DitherMaskLOD2D, projUV_1).w - 0.5);
  if ((x_3 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 54663
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54664
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54665
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54666
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 54667
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 54668
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 54669
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 54670
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 54671
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 54672
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 54673
    //IF
    if(tb19){
        //Instruction 54674
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 54675
        //IF
        if(tb19){
            //Instruction 54676
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54677
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 54678
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 54679
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 54680
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 54681
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 54682
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54683
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54684
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54685
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54686
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54687
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54688
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 54689
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54690
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54691
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 54692
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54693
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54694
            //FRC
            t0 = fract(t0);
            //Instruction 54695
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54696
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 54697
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54698
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54699
            //ADD
            t0 = t0 + t0;
            //Instruction 54700
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 54701
            //LT
            tb20 = t4.w<0.0;
            //Instruction 54702
            //MOV
            t4.y = (-t4.w);
            //Instruction 54703
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 54704
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 54705
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 54706
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 54707
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 54708
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 54709
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 54710
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54711
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54712
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 54713
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 54714
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54715
            //MUL
            t20 = t20 * t21;
            //Instruction 54716
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 54717
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 54718
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54719
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54720
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54721
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 54722
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 54723
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54724
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 54725
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54726
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 54727
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 54728
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 54729
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 54730
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54731
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54732
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54733
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 54734
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54735
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 54736
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 54737
        //ELSE
        } else {
            //Instruction 54738
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54739
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54740
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54741
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54742
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54743
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54744
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54745
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54746
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54747
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54748
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54749
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54750
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54751
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54752
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54753
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54754
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54755
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54756
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54757
            //MOV
            t0.y = (-t0.w);
            //Instruction 54758
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54759
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54760
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54761
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54762
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54763
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54764
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54765
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54766
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54767
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54768
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54769
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54770
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 54771
        //ENDIF
        }
        //Instruction 54772
    //ELSE
    } else {
        //Instruction 54773
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 54774
    //ENDIF
    }
    //Instruction 54775
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54776
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54777
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54778
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54779
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54780
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54781
    //NE
    tb3 = t20!=0.0;
    //Instruction 54782
    //LOG
    t9 = log2(t20);
    //Instruction 54783
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54784
    //EXP
    t9 = exp2(t9);
    //Instruction 54785
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54786
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54787
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54788
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54789
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54790
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54791
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54792
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54793
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54794
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54795
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54796
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54797
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54798
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54799
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54800
    //MOV
    t3.y = t2.y;
    //Instruction 54801
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54802
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54803
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54804
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54805
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54806
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 54807
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54808
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54809
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54810
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 54811
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 54812
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 54813
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 54814
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 54815
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 54816
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 54817
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 54818
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 54819
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 54820
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 54821
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 54822
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 54823
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 54824
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54825
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 54826
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 54827
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 54828
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54829
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 54830
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 54831
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 54832
    //SQRT
    t20 = sqrt(t20);
    //Instruction 54833
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 54834
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 54835
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 54836
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 54837
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 54838
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 54839
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54840
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 54841
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 54842
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 54843
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 54844
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 54845
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 54846
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 54847
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 54848
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 54849
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 54850
    //MUL
    t7.x = t0.y * _ProjectionParams.x;
    //Instruction 54851
    //MUL
    t1.w = t7.x * 0.500000;
    //Instruction 54852
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 54853
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 54854
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 54855
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 54856
    //MOV
    t1.z = t0.w;
    //Instruction 54857
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 54858
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 54653
    //DIV
    t16_0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 54654
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 54655
    //MOV
    t1.x = t16_0.x;
    //Instruction 54656
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 54657
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 54658
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 54659
    //LT
    tb1 = t16_1<0.0;
    //Instruction 54660
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 54661
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 54662
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_4;
  highp vec3 vRotatedWindVector_5;
  highp vec3 FinalPosition_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = tmpvar_1.xyz;
  FinalPosition_6 = tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_5 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_4 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_5 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_4 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_12;
    vPos_12 = tmpvar_7;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_13;
      vPos_13 = tmpvar_7;
      highp float fTime_14;
      highp float fAdherenceScale_15;
      highp vec3 vWindVector_16;
      vWindVector_16 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_14 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_17;
      highp float fOscillation_18;
      fOscillation_18 = 1.0;
      highp float fAmount_19;
      highp float fTarget_20;
      highp vec4 tmpvar_21;
      tmpvar_21.x = (fTime_14 + _glesMultiTexCoord0.w);
      tmpvar_21.y = ((fTime_14 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_21.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_14 + _glesMultiTexCoord0.w));
      tmpvar_21.w = ((fTime_14 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_22;
      tmpvar_22 = abs(((
        fract((tmpvar_21 + 0.5))
       * 2.0) - 1.0));
      vOscillations_17 = (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0);
      highp float tmpvar_23;
      tmpvar_23 = (vOscillations_17.y * vOscillations_17.z);
      fTarget_20 = 1.0;
      fAmount_19 = tmpvar_23;
      if ((tmpvar_23 < 0.0)) {
        fTarget_20 = -1.0;
        fAmount_19 = -(tmpvar_23);
      };
      fOscillation_18 = (((
        mix (mix (tmpvar_23, fTarget_20, fAmount_19), fTarget_20, fAmount_19)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_17.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_18 = (fOscillation_18 * (1.0 + (vOscillations_17.w * _ST_WindBranchWhip.x)));
      vPos_13 = (_glesVertex.xyz + ((vWindVector_16 * fOscillation_18) * _ST_WindBranch.y));
      highp vec4 tmpvar_24;
      tmpvar_24.zw = vec2(0.0, 0.0);
      tmpvar_24.x = ((fTime_14 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_24.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_25;
      highp vec4 tmpvar_26;
      tmpvar_26 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      tmpvar_25 = (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0);
      fAdherenceScale_15 = (1.0 - ((tmpvar_25.x * tmpvar_25.y) * (
        (tmpvar_25.x * tmpvar_25.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_15 = (fAdherenceScale_15 + ((vOscillations_17.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_13 = (vPos_13 + ((
        ((vRotatedBranchAnchor_4 - vPos_13) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_15) * _glesMultiTexCoord0.z));
      vPos_12 = vPos_13;
    } else {
      highp vec3 vPos_27;
      vPos_27 = vPos_12;
      highp float fTime_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_27 = (vPos_12 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      vPos_12 = vPos_27;
    };
    FinalPosition_6 = vPos_12;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_37;
    vPos_37 = FinalPosition_6;
    highp float fMoveAmount_38;
    highp float fAdjust_39;
    highp float fLength_40;
    fLength_40 = sqrt(dot (FinalPosition_6, FinalPosition_6));
    highp float tmpvar_41;
    tmpvar_41 = (max ((FinalPosition_6.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_39 = tmpvar_41;
    if ((tmpvar_41 != 0.0)) {
      fAdjust_39 = pow (tmpvar_41, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_42.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_43;
    highp vec4 tmpvar_44;
    tmpvar_44 = abs(((
      fract((tmpvar_42 + 0.5))
     * 2.0) - 1.0));
    tmpvar_43 = (((
      (tmpvar_44 * tmpvar_44)
     * 
      (3.0 - (2.0 * tmpvar_44))
    ) - 0.5) * 2.0);
    fMoveAmount_38 = ((_ST_WindGlobal.y * (tmpvar_43.x + 
      (tmpvar_43.y * tmpvar_43.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_38 = (fMoveAmount_38 * fAdjust_39);
    vPos_37.xz = (FinalPosition_6.xz + (vRotatedWindVector_5.xz * fMoveAmount_38));
    vPos_37 = (normalize(vPos_37) * fLength_40);
    FinalPosition_6 = vPos_37;
  };
  tmpvar_3.xyz = FinalPosition_6;
  tmpvar_2 = (glstate_matrix_mvp * tmpvar_3);
  mediump vec3 screenPos_45;
  highp vec4 o_46;
  highp vec4 tmpvar_47;
  tmpvar_47 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48.x = tmpvar_47.x;
  tmpvar_48.y = (tmpvar_47.y * _ProjectionParams.x);
  o_46.xy = (tmpvar_48 + tmpvar_47.w);
  o_46.zw = tmpvar_2.zw;
  highp vec3 tmpvar_49;
  tmpvar_49 = o_46.xyw;
  screenPos_45 = tmpvar_49;
  screenPos_45.xy = (screenPos_45.xy * (_ScreenParams.xy * 0.25));
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_3).xyz - _LightPositionRange.xyz);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD2 = screenPos_45;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec2 projUV_1;
  mediump vec2 tmpvar_2;
  tmpvar_2 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_1.x = tmpvar_2.x;
  projUV_1.y = ((fract(tmpvar_2.y) * 0.0625) + unity_LODFade.y);
  lowp float x_3;
  x_3 = (texture2D (_DitherMaskLOD2D, projUV_1).w - 0.5);
  if ((x_3 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_4;
  tmpvar_4 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 - (tmpvar_4.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 55221
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 55222
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 55223
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55224
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 55225
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 55226
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 55227
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 55228
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 55229
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 55230
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 55231
    //IF
    if(tb19){
        //Instruction 55232
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 55233
        //IF
        if(tb19){
            //Instruction 55234
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55235
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 55236
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 55237
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 55238
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 55239
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 55240
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55241
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55242
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55243
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55244
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55245
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 55246
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 55247
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55248
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 55249
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 55250
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 55251
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55252
            //FRC
            t0 = fract(t0);
            //Instruction 55253
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55254
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 55255
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55256
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55257
            //ADD
            t0 = t0 + t0;
            //Instruction 55258
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 55259
            //LT
            tb20 = t4.w<0.0;
            //Instruction 55260
            //MOV
            t4.y = (-t4.w);
            //Instruction 55261
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 55262
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 55263
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 55264
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 55265
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 55266
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 55267
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 55268
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55269
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55270
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 55271
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 55272
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55273
            //MUL
            t20 = t20 * t21;
            //Instruction 55274
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 55275
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55276
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55277
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55278
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55279
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 55280
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 55281
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55282
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 55283
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55284
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 55285
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 55286
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 55287
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 55288
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55289
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 55290
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 55291
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 55292
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55293
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 55294
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 55295
        //ELSE
        } else {
            //Instruction 55296
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55297
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55298
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55299
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55300
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55301
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 55302
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 55303
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55304
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 55305
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 55306
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55307
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55308
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55309
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 55310
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55311
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55312
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 55313
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 55314
            //LT
            tb19 = t0.w<0.0;
            //Instruction 55315
            //MOV
            t0.y = (-t0.w);
            //Instruction 55316
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 55317
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 55318
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 55319
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 55320
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 55321
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 55322
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 55323
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55324
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55325
            //MUL
            t21 = t21 * t4.x;
            //Instruction 55326
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 55327
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 55328
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55329
        //ENDIF
        }
        //Instruction 55330
    //ELSE
    } else {
        //Instruction 55331
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 55332
    //ENDIF
    }
    //Instruction 55333
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 55334
    //SQRT
    t19 = sqrt(t19);
    //Instruction 55335
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55336
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 55337
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 55338
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 55339
    //NE
    tb3 = t20!=0.0;
    //Instruction 55340
    //LOG
    t9 = log2(t20);
    //Instruction 55341
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 55342
    //EXP
    t9 = exp2(t9);
    //Instruction 55343
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 55344
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55345
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55346
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 55347
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 55348
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55349
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 55350
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55351
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 55352
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 55353
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 55354
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55355
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 55356
    //MUL
    t20 = t20 * t3.x;
    //Instruction 55357
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 55358
    //MOV
    t3.y = t2.y;
    //Instruction 55359
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 55360
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 55361
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 55362
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 55363
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 55364
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 55365
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 55366
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 55367
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 55368
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 55369
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55370
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 55371
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 55372
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 55373
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 55374
    //MUL
    t7.x = t0.y * _ProjectionParams.x;
    //Instruction 55375
    //MUL
    t1.w = t7.x * 0.500000;
    //Instruction 55376
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 55377
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 55378
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 55379
    //MOV
    gl_Position = t0;
    //Instruction 55380
    //MOV
    t1.z = t0.w;
    //Instruction 55381
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 55382
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in highp vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 55205
    //DIV
    t16_0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 55206
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 55207
    //MOV
    t1.x = t16_0.x;
    //Instruction 55208
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 55209
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 55210
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 55211
    //LT
    tb1 = t16_1<0.0;
    //Instruction 55212
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 55213
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 55214
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 55215
    //MUL
    t1.x = t1.x * _LightPositionRange.w;
    //Instruction 55216
    //MIN
    t1.x = min(t1.x, 0.999000);
    //Instruction 55217
    //MUL
    t0 = t1.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 55218
    //FRC
    t0 = fract(t0);
    //Instruction 55219
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 55220
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  FinalPosition_9 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_12 == 5.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_10;
    highp float fOffset_16;
    fOffset_16 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_16 = 0.75;
    };
    highp vec4 tmpvar_17;
    tmpvar_17.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_17.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_16);
    highp vec4 tmpvar_18;
    tmpvar_18 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    vPos_15 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_18 * tmpvar_18)
       * 
        (3.0 - (2.0 * tmpvar_18))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = FinalPosition_9;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = FinalPosition_9;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (FinalPosition_9 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_9 = vPos_19;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_9;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_9 = vPos_44;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_52;
  vertex_52 = tmpvar_5.xyz;
  highp vec4 clipPos_53;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_52;
    highp vec3 tmpvar_55;
    tmpvar_55 = (_Object2World * tmpvar_54).xyz;
    highp vec4 v_56;
    v_56.x = _World2Object[0].x;
    v_56.y = _World2Object[1].x;
    v_56.z = _World2Object[2].x;
    v_56.w = _World2Object[3].x;
    highp vec4 v_57;
    v_57.x = _World2Object[0].y;
    v_57.y = _World2Object[1].y;
    v_57.z = _World2Object[2].y;
    v_57.w = _World2Object[3].y;
    highp vec4 v_58;
    v_58.x = _World2Object[0].z;
    v_58.y = _World2Object[1].z;
    v_58.z = _World2Object[2].z;
    v_58.w = _World2Object[3].z;
    highp vec3 tmpvar_59;
    tmpvar_59 = normalize(((
      (v_56.xyz * tmpvar_6.x)
     + 
      (v_57.xyz * tmpvar_6.y)
    ) + (v_58.xyz * tmpvar_6.z)));
    highp float tmpvar_60;
    tmpvar_60 = dot (tmpvar_59, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_55 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_61;
    tmpvar_61.w = 1.0;
    tmpvar_61.xyz = (tmpvar_55 - (tmpvar_59 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_60 * tmpvar_60)))
    )));
    clipPos_53 = (unity_MatrixVP * tmpvar_61);
  } else {
    highp vec4 tmpvar_62;
    tmpvar_62.w = 1.0;
    tmpvar_62.xyz = vertex_52;
    clipPos_53 = (glstate_matrix_mvp * tmpvar_62);
  };
  highp vec4 clipPos_63;
  clipPos_63.xyw = clipPos_53.xyw;
  clipPos_63.z = (clipPos_53.z + clamp ((unity_LightShadowBias.x / clipPos_53.w), 0.0, 1.0));
  clipPos_63.z = mix (clipPos_63.z, max (clipPos_63.z, -(clipPos_53.w)), unity_LightShadowBias.y);
  mediump vec3 screenPos_64;
  highp vec4 o_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (clipPos_63 * 0.5);
  highp vec2 tmpvar_67;
  tmpvar_67.x = tmpvar_66.x;
  tmpvar_67.y = (tmpvar_66.y * _ProjectionParams.x);
  o_65.xy = (tmpvar_67 + tmpvar_66.w);
  o_65.zw = clipPos_63.zw;
  highp vec3 tmpvar_68;
  tmpvar_68 = o_65.xyw;
  screenPos_64 = tmpvar_68;
  screenPos_64.xy = (screenPos_64.xy * (_ScreenParams.xy * 0.25));
  gl_Position = clipPos_63;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = screenPos_64;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  mediump vec2 projUV_2;
  mediump vec2 tmpvar_3;
  tmpvar_3 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_2.x = tmpvar_3.x;
  projUV_2.y = ((fract(tmpvar_3.y) * 0.0625) + unity_LODFade.y);
  lowp float x_4;
  x_4 = (texture2D (_DitherMaskLOD2D, projUV_2).w - 0.5);
  if ((x_4 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out mediump vec2 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 54996
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54997
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54998
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54999
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 55000
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 55001
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 55002
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 55003
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 55004
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 55005
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 55006
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 55007
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 55008
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 55009
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 55010
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 55011
    //FRC
    t2.x = fract(t2.x);
    //Instruction 55012
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 55013
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 55014
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 55015
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 55016
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 55017
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 55018
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 55019
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 55020
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 55021
    //IF
    if(tb20){
        //Instruction 55022
        //IF
        if(tb19){
            //Instruction 55023
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55024
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 55025
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 55026
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 55027
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 55028
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 55029
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55030
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55031
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55032
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55033
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55034
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 55035
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 55036
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55037
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 55038
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 55039
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 55040
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55041
            //FRC
            t0 = fract(t0);
            //Instruction 55042
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55043
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 55044
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55045
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55046
            //ADD
            t0 = t0 + t0;
            //Instruction 55047
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 55048
            //LT
            tb20 = t5.w<0.0;
            //Instruction 55049
            //MOV
            t5.y = (-t5.w);
            //Instruction 55050
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 55051
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 55052
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 55053
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 55054
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 55055
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 55056
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 55057
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55058
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55059
            //MUL
            t22 = t0.x * t22;
            //Instruction 55060
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 55061
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55062
            //MUL
            t20 = t20 * t21;
            //Instruction 55063
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 55064
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 55065
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55066
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55067
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55068
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 55069
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 55070
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55071
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 55072
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55073
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 55074
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 55075
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 55076
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 55077
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55078
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 55079
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 55080
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 55081
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55082
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 55083
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 55084
        //ELSE
        } else {
            //Instruction 55085
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55086
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55087
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55088
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55089
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55090
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 55091
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 55092
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55093
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 55094
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 55095
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55096
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55097
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55098
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 55099
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55100
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55101
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 55102
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 55103
            //LT
            tb19 = t0.w<0.0;
            //Instruction 55104
            //MOV
            t0.y = (-t0.w);
            //Instruction 55105
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 55106
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 55107
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 55108
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 55109
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 55110
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 55111
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 55112
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55113
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55114
            //MUL
            t21 = t21 * t4.x;
            //Instruction 55115
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 55116
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 55117
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 55118
        //ENDIF
        }
        //Instruction 55119
    //ENDIF
    }
    //Instruction 55120
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 55121
    //SQRT
    t19 = sqrt(t19);
    //Instruction 55122
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55123
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 55124
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 55125
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 55126
    //NE
    tb3 = t20!=0.0;
    //Instruction 55127
    //LOG
    t9 = log2(t20);
    //Instruction 55128
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 55129
    //EXP
    t9 = exp2(t9);
    //Instruction 55130
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 55131
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55132
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55133
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 55134
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 55135
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55136
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 55137
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55138
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 55139
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 55140
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 55141
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55142
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 55143
    //MUL
    t20 = t20 * t3.x;
    //Instruction 55144
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 55145
    //MOV
    t3.y = t2.y;
    //Instruction 55146
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 55147
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 55148
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 55149
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 55150
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 55151
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 55152
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 55153
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 55154
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 55155
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 55156
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 55157
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 55158
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 55159
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 55160
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 55161
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 55162
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 55163
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 55164
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 55165
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 55166
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 55167
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 55168
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 55169
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 55170
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 55171
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 55172
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 55173
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 55174
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 55175
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 55176
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 55177
    //SQRT
    t20 = sqrt(t20);
    //Instruction 55178
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 55179
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 55180
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 55181
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 55182
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 55183
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 55184
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55185
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 55186
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 55187
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 55188
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 55189
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 55190
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 55191
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 55192
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 55193
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 55194
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 55195
    //MUL
    t7.x = t0.y * _ProjectionParams.x;
    //Instruction 55196
    //MUL
    t1.w = t7.x * 0.500000;
    //Instruction 55197
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 55198
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 55199
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 55200
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 55201
    //MOV
    t1.z = t0.w;
    //Instruction 55202
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 55203
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 55204
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec2 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec2 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
mediump vec2 t16_1;
mediump float t16_3;
void main()
{
    //Instruction 54982
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 54983
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 54984
    //LT
    tb0 = t16_0<0.0;
    //Instruction 54985
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 54986
    //DIV
    t16_1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 54987
    //FRC
    t16_3 = fract(t16_1.y);
    //Instruction 54988
    //MOV
    t0.x = t16_1.x;
    //Instruction 54989
    //MAD
    t0.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 54990
    //SAMPLE
    t10_0 = texture(_DitherMaskLOD2D, t0.xy).w;
    //Instruction 54991
    //ADD
    t16_0 = t10_0 + -0.500000;
    //Instruction 54992
    //LT
    tb0 = t16_0<0.0;
    //Instruction 54993
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 54994
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 54995
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_2.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_6;
  highp vec3 vRotatedWindVector_7;
  highp vec3 FinalPosition_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = tmpvar_1.xyz;
  FinalPosition_8 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_7 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_6 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_7 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_6 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_11 == 5.0)) {
    highp vec3 vPos_14;
    vPos_14 = tmpvar_9;
    highp float fOffset_15;
    fOffset_15 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_15 = 0.75;
    };
    highp vec4 tmpvar_16;
    tmpvar_16.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_16.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_15);
    highp vec4 tmpvar_17;
    tmpvar_17 = abs(((
      fract((tmpvar_16 + 0.5))
     * 2.0) - 1.0));
    vPos_14 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_17 * tmpvar_17)
       * 
        (3.0 - (2.0 * tmpvar_17))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    FinalPosition_8 = vPos_14;
  };
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = FinalPosition_8;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = FinalPosition_8;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (FinalPosition_8 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_6 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_8 = vPos_18;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_8;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_8, FinalPosition_8));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_8.xz + (vRotatedWindVector_7.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_8 = vPos_43;
  };
  tmpvar_5.xyz = FinalPosition_8;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = tmpvar_3.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_5).xyz - _LightPositionRange.xyz);
  gl_Position = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  mediump vec2 projUV_2;
  mediump vec2 tmpvar_3;
  tmpvar_3 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_2.x = tmpvar_3.x;
  projUV_2.y = ((fract(tmpvar_3.y) * 0.0625) + unity_LODFade.y);
  lowp float x_4;
  x_4 = (texture2D (_DitherMaskLOD2D, projUV_2).w - 0.5);
  if ((x_4 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - (tmpvar_5.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 54879
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54880
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54881
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54882
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 54883
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 54884
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 54885
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 54886
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 54887
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 54888
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 54889
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 54890
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 54891
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 54892
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 54893
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 54894
    //FRC
    t2.x = fract(t2.x);
    //Instruction 54895
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 54896
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 54897
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 54898
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 54899
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 54900
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 54901
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 54902
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 54903
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 54904
    //IF
    if(tb20){
        //Instruction 54905
        //IF
        if(tb19){
            //Instruction 54906
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54907
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 54908
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 54909
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 54910
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 54911
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54912
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54913
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54914
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54915
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54916
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54917
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54918
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 54919
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54920
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54921
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 54922
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54923
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54924
            //FRC
            t0 = fract(t0);
            //Instruction 54925
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54926
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 54927
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54928
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54929
            //ADD
            t0 = t0 + t0;
            //Instruction 54930
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 54931
            //LT
            tb20 = t5.w<0.0;
            //Instruction 54932
            //MOV
            t5.y = (-t5.w);
            //Instruction 54933
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 54934
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 54935
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 54936
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 54937
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 54938
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 54939
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 54940
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54941
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54942
            //MUL
            t22 = t0.x * t22;
            //Instruction 54943
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 54944
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54945
            //MUL
            t20 = t20 * t21;
            //Instruction 54946
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 54947
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 54948
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54949
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54950
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54951
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 54952
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 54953
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54954
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 54955
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54956
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 54957
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 54958
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 54959
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 54960
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54961
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54962
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54963
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 54964
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54965
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54966
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 54967
        //ELSE
        } else {
            //Instruction 54968
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54969
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54970
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54971
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54972
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54973
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54974
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54975
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54976
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54977
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54978
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54979
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54980
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54981
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54982
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54983
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54984
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54985
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54986
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54987
            //MOV
            t0.y = (-t0.w);
            //Instruction 54988
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54989
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54990
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54991
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54992
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54993
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54994
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54995
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54996
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54997
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54998
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54999
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 55000
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 55001
        //ENDIF
        }
        //Instruction 55002
    //ENDIF
    }
    //Instruction 55003
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 55004
    //SQRT
    t19 = sqrt(t19);
    //Instruction 55005
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55006
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 55007
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 55008
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 55009
    //NE
    tb3 = t20!=0.0;
    //Instruction 55010
    //LOG
    t9 = log2(t20);
    //Instruction 55011
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 55012
    //EXP
    t9 = exp2(t9);
    //Instruction 55013
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 55014
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55015
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55016
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 55017
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 55018
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55019
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 55020
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55021
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 55022
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 55023
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 55024
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55025
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 55026
    //MUL
    t20 = t20 * t3.x;
    //Instruction 55027
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 55028
    //MOV
    t3.y = t2.y;
    //Instruction 55029
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 55030
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 55031
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 55032
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 55033
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 55034
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 55035
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 55036
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 55037
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 55038
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 55039
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55040
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 55041
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 55042
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 55043
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 55044
    //MUL
    t7.x = t0.y * _ProjectionParams.x;
    //Instruction 55045
    //MUL
    t1.w = t7.x * 0.500000;
    //Instruction 55046
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 55047
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 55048
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 55049
    //MOV
    gl_Position = t0;
    //Instruction 55050
    //MOV
    t1.z = t0.w;
    //Instruction 55051
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 55052
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 55053
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DitherMaskLOD2D;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
mediump vec2 t16_1;
mediump float t16_3;
void main()
{
    //Instruction 54859
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 54860
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 54861
    //LT
    tb0 = t16_0<0.0;
    //Instruction 54862
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 54863
    //DIV
    t16_1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 54864
    //FRC
    t16_3 = fract(t16_1.y);
    //Instruction 54865
    //MOV
    t0.x = t16_1.x;
    //Instruction 54866
    //MAD
    t0.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 54867
    //SAMPLE
    t10_0 = texture(_DitherMaskLOD2D, t0.xy).w;
    //Instruction 54868
    //ADD
    t16_0 = t10_0 + -0.500000;
    //Instruction 54869
    //LT
    tb0 = t16_0<0.0;
    //Instruction 54870
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 54871
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 54872
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 54873
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 54874
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 54875
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 54876
    //FRC
    t0 = fract(t0);
    //Instruction 54877
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 54878
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_9 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_14;
    tmpvar_14 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_15;
    isBestWind_15 = (tmpvar_11 == 4.0);
    bool bLeaf2_16;
    bLeaf2_16 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_17;
    vPos_17 = FinalPosition_9;
    highp vec3 vDirection_18;
    vDirection_18 = tmpvar_2;
    highp float tmpvar_19;
    if (bLeaf2_16) {
      tmpvar_19 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_19 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_20;
    if (bLeaf2_16) {
      tmpvar_20 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_21;
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (tmpvar_19 + tmpvar_14);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (FinalPosition_9 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_20 * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_18 = tmpvar_2;
    vPos_17 = vPos_21;
    if (isBestWind_15) {
      highp vec3 tmpvar_24;
      tmpvar_24 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_25;
      if (bLeaf2_16) {
        tmpvar_25 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_26;
      if (bLeaf2_16) {
        tmpvar_26 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_27;
      if (bLeaf2_16) {
        tmpvar_27 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_28;
      if (bLeaf2_16) {
        tmpvar_28 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_29;
      if (bLeaf2_16) {
        tmpvar_29 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_29 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_30;
      if (bLeaf2_16) {
        tmpvar_30 = bool(1);
      } else {
        tmpvar_30 = bool(1);
      };
      highp float fTwitch_31;
      highp vec3 vAxis_32;
      highp float fOsc_33;
      highp vec3 vOriginPos_34;
      highp vec3 tmpvar_35;
      tmpvar_35 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_36;
      tmpvar_36 = ((tmpvar_35.x + tmpvar_35.y) + tmpvar_35.z);
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_25 + tmpvar_36);
      tmpvar_37.y = ((tmpvar_25 * 0.75) - tmpvar_36);
      tmpvar_37.z = ((tmpvar_25 * 0.01) + tmpvar_36);
      tmpvar_37.w = (tmpvar_25 + tmpvar_36);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      vOriginPos_34 = vPos_21;
      highp float tmpvar_40;
      tmpvar_40 = sqrt(dot (vPos_21, vPos_21));
      highp float fAngle_41;
      fAngle_41 = ((_glesMultiTexCoord2.x * tmpvar_27) * (tmpvar_38.x + (tmpvar_38.y * tmpvar_38.y)));
      highp vec2 vSinCos_42;
      vSinCos_42.x = sin(fAngle_41);
      vSinCos_42.y = cos(fAngle_41);
      highp float tmpvar_43;
      tmpvar_43 = (1.0 - vSinCos_42.y);
      highp mat3 tmpvar_44;
      tmpvar_44[0].x = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.x) + vSinCos_42.y);
      tmpvar_44[0].y = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.y) + (vSinCos_42.x * tmpvar_24.z));
      tmpvar_44[0].z = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.z) - (vSinCos_42.x * tmpvar_24.y));
      tmpvar_44[1].x = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.y) - (vSinCos_42.x * tmpvar_24.z));
      tmpvar_44[1].y = (((tmpvar_43 * tmpvar_24.y) * tmpvar_24.y) + vSinCos_42.y);
      tmpvar_44[1].z = (((tmpvar_43 * tmpvar_24.y) * tmpvar_24.z) + (vSinCos_42.x * tmpvar_24.x));
      tmpvar_44[2].x = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.z) + (vSinCos_42.x * tmpvar_24.y));
      tmpvar_44[2].y = (((tmpvar_43 * tmpvar_24.y) * tmpvar_24.z) - (vSinCos_42.x * tmpvar_24.x));
      tmpvar_44[2].z = (((tmpvar_43 * tmpvar_24.z) * tmpvar_24.z) + vSinCos_42.y);
      highp vec3 tmpvar_45;
      tmpvar_45 = ((tmpvar_24.yzx * vRotatedWindVector_8.zxy) - (tmpvar_24.zxy * vRotatedWindVector_8.yzx));
      vAxis_32.xz = tmpvar_45.xz;
      highp float tmpvar_46;
      tmpvar_46 = clamp (dot (vRotatedWindVector_8, tmpvar_24), -1.0, 1.0);
      vAxis_32.y = (tmpvar_45.y + tmpvar_46);
      highp vec3 tmpvar_47;
      tmpvar_47 = normalize(vAxis_32);
      vAxis_32 = tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = (1.570796 - (sign(tmpvar_46) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_46))) * (1.570796 + (abs(tmpvar_46) * (-0.2146018 + 
          (abs(tmpvar_46) * (0.08656672 + (abs(tmpvar_46) * -0.03102955)))
        ))))
      )));
      fOsc_33 = (tmpvar_38.y - (tmpvar_38.x * tmpvar_38.x));
      fTwitch_31 = 0.0;
      if (tmpvar_30) {
        highp float fTime_49;
        fTime_49 = (tmpvar_29.z + tmpvar_36);
        highp vec4 tmpvar_50;
        tmpvar_50.zw = vec2(0.0, 0.0);
        tmpvar_50.x = fTime_49;
        tmpvar_50.y = (0.87 * fTime_49);
        highp vec4 tmpvar_51;
        highp vec4 tmpvar_52;
        tmpvar_52 = abs(((
          fract((tmpvar_50 + 0.5))
         * 2.0) - 1.0));
        tmpvar_51 = (((
          (tmpvar_52 * tmpvar_52)
         * 
          (3.0 - (2.0 * tmpvar_52))
        ) - 0.5) * 2.0);
        fTwitch_31 = (tmpvar_29.x * pow (clamp (
          ((((tmpvar_51.x * tmpvar_51.y) * tmpvar_51.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_29.y));
      };
      highp float fAngle_53;
      fAngle_53 = (_glesMultiTexCoord2.x * ((
        (tmpvar_48 * tmpvar_28)
       + 
        (fOsc_33 * tmpvar_26)
      ) + fTwitch_31));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.y) + (vSinCos_54.x * tmpvar_47.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.z) - (vSinCos_54.x * tmpvar_47.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.y) - (vSinCos_54.x * tmpvar_47.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_47.y) * tmpvar_47.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_47.y) * tmpvar_47.z) + (vSinCos_54.x * tmpvar_47.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.z) + (vSinCos_54.x * tmpvar_47.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_47.y) * tmpvar_47.z) - (vSinCos_54.x * tmpvar_47.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_47.z) * tmpvar_47.z) + vSinCos_54.y);
      highp mat3 tmpvar_57;
      tmpvar_57 = (tmpvar_44 * tmpvar_56);
      vOriginPos_34 = (normalize((tmpvar_57 * vPos_21)) * tmpvar_40);
      vDirection_18 = (tmpvar_57 * _glesNormal);
      vPos_17 = vOriginPos_34;
    };
    tmpvar_6 = vDirection_18;
    FinalPosition_9 = vPos_17;
  };
  FinalPosition_9 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_58;
    vPos_58 = FinalPosition_9;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_59;
      vPos_59 = FinalPosition_9;
      highp float fTime_60;
      highp float fAdherenceScale_61;
      highp vec3 vWindVector_62;
      vWindVector_62 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_60 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_63;
      highp float fOscillation_64;
      fOscillation_64 = 1.0;
      highp float fAmount_65;
      highp float fTarget_66;
      highp vec4 tmpvar_67;
      tmpvar_67.x = (fTime_60 + _glesMultiTexCoord0.w);
      tmpvar_67.y = ((fTime_60 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_67.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_60 + _glesMultiTexCoord0.w));
      tmpvar_67.w = ((fTime_60 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_68;
      tmpvar_68 = abs(((
        fract((tmpvar_67 + 0.5))
       * 2.0) - 1.0));
      vOscillations_63 = (((
        (tmpvar_68 * tmpvar_68)
       * 
        (3.0 - (2.0 * tmpvar_68))
      ) - 0.5) * 2.0);
      highp float tmpvar_69;
      tmpvar_69 = (vOscillations_63.y * vOscillations_63.z);
      fTarget_66 = 1.0;
      fAmount_65 = tmpvar_69;
      if ((tmpvar_69 < 0.0)) {
        fTarget_66 = -1.0;
        fAmount_65 = -(tmpvar_69);
      };
      fOscillation_64 = (((
        mix (mix (tmpvar_69, fTarget_66, fAmount_65), fTarget_66, fAmount_65)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_63.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_64 = (fOscillation_64 * (1.0 + (vOscillations_63.w * _ST_WindBranchWhip.x)));
      vPos_59 = (FinalPosition_9 + ((vWindVector_62 * fOscillation_64) * _ST_WindBranch.y));
      highp vec4 tmpvar_70;
      tmpvar_70.zw = vec2(0.0, 0.0);
      tmpvar_70.x = ((fTime_60 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_70.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_71;
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_70 + 0.5))
       * 2.0) - 1.0));
      tmpvar_71 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      fAdherenceScale_61 = (1.0 - ((tmpvar_71.x * tmpvar_71.y) * (
        (tmpvar_71.x * tmpvar_71.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_61 = (fAdherenceScale_61 + ((vOscillations_63.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_59 = (vPos_59 + ((
        ((vRotatedBranchAnchor_7 - vPos_59) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_61) * _glesMultiTexCoord0.z));
      vPos_58 = vPos_59;
    } else {
      highp vec3 vPos_73;
      vPos_73 = vPos_58;
      highp float fTime_74;
      highp vec3 vWindVector_75;
      vWindVector_75 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_74 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.w = 0.0;
      tmpvar_80.x = (fTime_74 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((fTime_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_74 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_76.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_73 = (vPos_58 + ((vWindVector_75 * fOscillation_77) * _ST_WindBranch.y));
      vPos_58 = vPos_73;
    };
    FinalPosition_9 = vPos_58;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_83;
    vPos_83 = FinalPosition_9;
    highp float fMoveAmount_84;
    highp float fAdjust_85;
    highp float fLength_86;
    fLength_86 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_87;
    tmpvar_87 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_85 = tmpvar_87;
    if ((tmpvar_87 != 0.0)) {
      fAdjust_85 = pow (tmpvar_87, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_88;
    tmpvar_88.zw = vec2(0.0, 0.0);
    tmpvar_88.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_88.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_89;
    highp vec4 tmpvar_90;
    tmpvar_90 = abs(((
      fract((tmpvar_88 + 0.5))
     * 2.0) - 1.0));
    tmpvar_89 = (((
      (tmpvar_90 * tmpvar_90)
     * 
      (3.0 - (2.0 * tmpvar_90))
    ) - 0.5) * 2.0);
    fMoveAmount_84 = ((_ST_WindGlobal.y * (tmpvar_89.x + 
      (tmpvar_89.y * tmpvar_89.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_84 = (fMoveAmount_84 * fAdjust_85);
    vPos_83.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_84));
    vPos_83 = (normalize(vPos_83) * fLength_86);
    FinalPosition_9 = vPos_83;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_91;
  vertex_91 = tmpvar_5.xyz;
  highp vec4 clipPos_92;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_93;
    tmpvar_93.w = 1.0;
    tmpvar_93.xyz = vertex_91;
    highp vec3 tmpvar_94;
    tmpvar_94 = (_Object2World * tmpvar_93).xyz;
    highp vec4 v_95;
    v_95.x = _World2Object[0].x;
    v_95.y = _World2Object[1].x;
    v_95.z = _World2Object[2].x;
    v_95.w = _World2Object[3].x;
    highp vec4 v_96;
    v_96.x = _World2Object[0].y;
    v_96.y = _World2Object[1].y;
    v_96.z = _World2Object[2].y;
    v_96.w = _World2Object[3].y;
    highp vec4 v_97;
    v_97.x = _World2Object[0].z;
    v_97.y = _World2Object[1].z;
    v_97.z = _World2Object[2].z;
    v_97.w = _World2Object[3].z;
    highp vec3 tmpvar_98;
    tmpvar_98 = normalize(((
      (v_95.xyz * tmpvar_6.x)
     + 
      (v_96.xyz * tmpvar_6.y)
    ) + (v_97.xyz * tmpvar_6.z)));
    highp float tmpvar_99;
    tmpvar_99 = dot (tmpvar_98, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_94 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_100;
    tmpvar_100.w = 1.0;
    tmpvar_100.xyz = (tmpvar_94 - (tmpvar_98 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_99 * tmpvar_99)))
    )));
    clipPos_92 = (unity_MatrixVP * tmpvar_100);
  } else {
    highp vec4 tmpvar_101;
    tmpvar_101.w = 1.0;
    tmpvar_101.xyz = vertex_91;
    clipPos_92 = (glstate_matrix_mvp * tmpvar_101);
  };
  highp vec4 clipPos_102;
  clipPos_102.xyw = clipPos_92.xyw;
  clipPos_102.z = (clipPos_92.z + clamp ((unity_LightShadowBias.x / clipPos_92.w), 0.0, 1.0));
  clipPos_102.z = mix (clipPos_102.z, max (clipPos_102.z, -(clipPos_92.w)), unity_LightShadowBias.y);
  mediump vec3 screenPos_103;
  highp vec4 o_104;
  highp vec4 tmpvar_105;
  tmpvar_105 = (clipPos_102 * 0.5);
  highp vec2 tmpvar_106;
  tmpvar_106.x = tmpvar_105.x;
  tmpvar_106.y = (tmpvar_105.y * _ProjectionParams.x);
  o_104.xy = (tmpvar_106 + tmpvar_105.w);
  o_104.zw = clipPos_102.zw;
  highp vec3 tmpvar_107;
  tmpvar_107 = o_104.xyw;
  screenPos_103 = tmpvar_107;
  screenPos_103.xy = (screenPos_103.xy * (_ScreenParams.xy * 0.25));
  gl_Position = clipPos_102;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = screenPos_103;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  mediump vec2 projUV_2;
  mediump vec2 tmpvar_3;
  tmpvar_3 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_2.x = tmpvar_3.x;
  projUV_2.y = ((fract(tmpvar_3.y) * 0.0625) + unity_LODFade.y);
  lowp float x_4;
  x_4 = (texture2D (_DitherMaskLOD2D, projUV_2).w - 0.5);
  if ((x_4 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out mediump vec2 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 55397
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 55398
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 55399
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55400
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 55401
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 55402
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 55403
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 55404
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 55405
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 55406
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 55407
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 55408
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 55409
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 55410
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 55411
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 55412
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 55413
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 55414
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 55415
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 55416
        //FRC
        t15.x = fract(t15.x);
        //Instruction 55417
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 55418
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 55419
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 55420
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 55421
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 55422
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 55423
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 55424
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 55425
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 55426
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 55427
        //IF
        if(tb29){
            //Instruction 55428
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 55429
            //FRC
            t4 = fract(t4);
            //Instruction 55430
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55431
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 55432
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 55433
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 55434
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 55435
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 55436
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 55437
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 55438
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55439
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 55440
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55441
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 55442
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 55443
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 55444
            //SQRT
            t44 = sqrt(t44);
            //Instruction 55445
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 55446
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 55447
            //MUL
            t45 = t45 * t5.x;
            //Instruction 55448
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 55449
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 55450
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 55451
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 55452
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 55453
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 55454
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 55455
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 55456
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 55457
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 55458
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 55459
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 55460
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 55461
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 55462
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 55463
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 55464
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 55465
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 55466
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 55467
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 55468
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 55469
            //SQRT
            t45 = sqrt(t45);
            //Instruction 55470
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 55471
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 55472
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 55473
            //MUL
            t33 = t45 * t5.x;
            //Instruction 55474
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 55475
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 55476
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 55477
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 55478
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 55479
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 55480
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 55481
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 55482
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 55483
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55484
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 55485
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55486
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 55487
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 55488
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 55489
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 55490
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 55491
            //LOG
            t43 = log2(t43);
            //Instruction 55492
            //MUL
            t29 = t43 * t15.y;
            //Instruction 55493
            //EXP
            t29 = exp2(t29);
            //Instruction 55494
            //MUL
            t43 = t5.y * t45;
            //Instruction 55495
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 55496
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 55497
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 55498
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 55499
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 55500
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 55501
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 55502
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 55503
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 55504
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 55505
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 55506
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 55507
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 55508
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 55509
            //MOV
            t10.z = t11.x;
            //Instruction 55510
            //MOV
            t10.w = t9.x;
            //Instruction 55511
            //MOV
            t12.z = t8.y;
            //Instruction 55512
            //MOV
            t12.w = t13.y;
            //Instruction 55513
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 55514
            //MOV
            t13.w = t12.y;
            //Instruction 55515
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 55516
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 55517
            //MOV
            t9.w = t10.y;
            //Instruction 55518
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 55519
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 55520
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 55521
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 55522
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 55523
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 55524
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 55525
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 55526
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 55527
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 55528
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 55529
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 55530
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 55531
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 55532
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 55533
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 55534
        //ELSE
        } else {
            //Instruction 55535
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 55536
        //ENDIF
        }
        //Instruction 55537
    //ELSE
    } else {
        //Instruction 55538
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 55539
    //ENDIF
    }
    //Instruction 55540
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 55541
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 55542
    //IF
    if(tb16){
        //Instruction 55543
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 55544
        //IF
        if(tb16){
            //Instruction 55545
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55546
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 55547
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 55548
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 55549
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 55550
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 55551
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55552
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 55553
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55554
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 55555
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55556
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 55557
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 55558
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55559
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 55560
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 55561
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 55562
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55563
            //FRC
            t0 = fract(t0);
            //Instruction 55564
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55565
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 55566
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55567
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55568
            //ADD
            t0 = t0 + t0;
            //Instruction 55569
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 55570
            //LT
            tb44 = t6.w<0.0;
            //Instruction 55571
            //MOV
            t6.y = (-t6.w);
            //Instruction 55572
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 55573
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 55574
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 55575
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 55576
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 55577
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 55578
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 55579
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55580
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55581
            //MUL
            t46 = t0.x * t46;
            //Instruction 55582
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 55583
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55584
            //MUL
            t44 = t44 * t45;
            //Instruction 55585
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 55586
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 55587
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55588
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55589
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55590
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 55591
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 55592
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55593
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 55594
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55595
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 55596
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 55597
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 55598
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 55599
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55600
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 55601
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 55602
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 55603
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55604
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 55605
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 55606
        //ELSE
        } else {
            //Instruction 55607
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55608
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55609
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55610
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55611
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55612
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 55613
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 55614
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55615
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 55616
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 55617
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55618
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 55619
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55620
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 55621
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55622
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55623
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 55624
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 55625
            //LT
            tb16 = t0.w<0.0;
            //Instruction 55626
            //MOV
            t0.y = (-t0.w);
            //Instruction 55627
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 55628
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 55629
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 55630
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 55631
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 55632
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 55633
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 55634
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55635
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55636
            //MUL
            t45 = t45 * t5.x;
            //Instruction 55637
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 55638
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 55639
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 55640
        //ENDIF
        }
        //Instruction 55641
    //ENDIF
    }
    //Instruction 55642
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 55643
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 55644
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55645
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 55646
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 55647
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 55648
    //NE
    tb45 = t44!=0.0;
    //Instruction 55649
    //LOG
    t4.x = log2(t44);
    //Instruction 55650
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 55651
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 55652
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 55653
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55654
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55655
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 55656
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 55657
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55658
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 55659
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55660
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 55661
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 55662
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 55663
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55664
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 55665
    //MUL
    t44 = t44 * t45;
    //Instruction 55666
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 55667
    //MOV
    t4.y = t3.y;
    //Instruction 55668
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 55669
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 55670
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 55671
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 55672
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 55673
    //NE
    tb1.x = unity_LightShadowBias.z!=0.0;
    //Instruction 55674
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 55675
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 55676
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    //Instruction 55677
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 55678
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 55679
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 55680
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 55681
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 55682
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 55683
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 55684
    //MUL
    t5.xyz = t15.yyy * t5.xyz;
    //Instruction 55685
    //MAD
    t4.xyz = t4.xyz * t15.xxx + t5.xyz;
    //Instruction 55686
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 55687
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 55688
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 55689
    //MAD
    t15.xyz = t5.xyz * t15.zzz + t4.xyz;
    //Instruction 55690
    //DP3
    t44 = dot(t15.xyz, t15.xyz);
    //Instruction 55691
    //RSQ
    t44 = inversesqrt(t44);
    //Instruction 55692
    //MUL
    t15.xyz = t15.xyz * vec3(t44);
    //Instruction 55693
    //MAD
    t4.xyz = (-t3.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 55694
    //DP3
    t44 = dot(t4.xyz, t4.xyz);
    //Instruction 55695
    //RSQ
    t44 = inversesqrt(t44);
    //Instruction 55696
    //MUL
    t4.xyz = vec3(t44) * t4.xyz;
    //Instruction 55697
    //DP3
    t44 = dot(t15.xyz, t4.xyz);
    //Instruction 55698
    //MAD
    t44 = (-t44) * t44 + 1.0;
    //Instruction 55699
    //SQRT
    t44 = sqrt(t44);
    //Instruction 55700
    //MUL
    t44 = t44 * unity_LightShadowBias.z;
    //Instruction 55701
    //MAD
    t15.xyz = (-t15.xyz) * vec3(t44) + t3.xyz;
    //Instruction 55702
    //MUL
    t0 = t15.yyyy * unity_MatrixVP[1];
    //Instruction 55703
    //MAD
    t0 = unity_MatrixVP[0] * t15.xxxx + t0;
    //Instruction 55704
    //MAD
    t0 = unity_MatrixVP[2] * t15.zzzz + t0;
    //Instruction 55705
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 55706
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 55707
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 55708
    //MAD
    t2 = glstate_matrix_mvp[2] * t2.zzzz + t3;
    //Instruction 55709
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 55710
    //MOVC
    t0 = (tb1.x) ? t0 : t2;
    //Instruction 55711
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 55712
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 55713
    //MAX
    t15.x = max((-t0.w), t1.x);
    //Instruction 55714
    //ADD
    t15.x = (-t1.x) + t15.x;
    //Instruction 55715
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t15.x + t1.x;
    //Instruction 55716
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 55717
    //MUL
    t15.x = t0.y * _ProjectionParams.x;
    //Instruction 55718
    //MUL
    t1.w = t15.x * 0.500000;
    //Instruction 55719
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 55720
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 55721
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 55722
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 55723
    //MOV
    t1.z = t0.w;
    //Instruction 55724
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 55725
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 55726
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec2 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec2 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
mediump vec2 t16_1;
mediump float t16_3;
void main()
{
    //Instruction 55383
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 55384
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 55385
    //LT
    tb0 = t16_0<0.0;
    //Instruction 55386
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 55387
    //DIV
    t16_1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 55388
    //FRC
    t16_3 = fract(t16_1.y);
    //Instruction 55389
    //MOV
    t0.x = t16_1.x;
    //Instruction 55390
    //MAD
    t0.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 55391
    //SAMPLE
    t10_0 = texture(_DitherMaskLOD2D, t0.xy).w;
    //Instruction 55392
    //ADD
    t16_0 = t10_0 + -0.500000;
    //Instruction 55393
    //LT
    tb0 = t16_0<0.0;
    //Instruction 55394
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 55395
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 55396
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_2.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_6;
  highp vec3 vRotatedWindVector_7;
  highp vec3 FinalPosition_8;
  FinalPosition_8 = tmpvar_1.xyz;
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedWindVector_7 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_6 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_7 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_6 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_8 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_10 > 1.0) && (tmpvar_10 < 5.0))) {
    highp float tmpvar_13;
    tmpvar_13 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_14;
    isBestWind_14 = (tmpvar_10 == 4.0);
    bool bLeaf2_15;
    bLeaf2_15 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_16;
    vPos_16 = FinalPosition_8;
    highp float tmpvar_17;
    if (bLeaf2_15) {
      tmpvar_17 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_17 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_18;
    if (bLeaf2_15) {
      tmpvar_18 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_18 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_19;
    highp vec4 tmpvar_20;
    tmpvar_20.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_20.x = (tmpvar_17 + tmpvar_13);
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_20 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (FinalPosition_8 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_18 * (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_16 = vPos_19;
    if (isBestWind_14) {
      highp vec3 tmpvar_22;
      tmpvar_22 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_23;
      if (bLeaf2_15) {
        tmpvar_23 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_23 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_24;
      if (bLeaf2_15) {
        tmpvar_24 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_24 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_25;
      if (bLeaf2_15) {
        tmpvar_25 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_26;
      if (bLeaf2_15) {
        tmpvar_26 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_27;
      if (bLeaf2_15) {
        tmpvar_27 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_27 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_28;
      if (bLeaf2_15) {
        tmpvar_28 = bool(1);
      } else {
        tmpvar_28 = bool(1);
      };
      highp float fTwitch_29;
      highp vec3 vAxis_30;
      highp float fOsc_31;
      highp vec3 vOriginPos_32;
      highp vec3 tmpvar_33;
      tmpvar_33 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_34;
      tmpvar_34 = ((tmpvar_33.x + tmpvar_33.y) + tmpvar_33.z);
      highp vec4 tmpvar_35;
      tmpvar_35.x = (tmpvar_23 + tmpvar_34);
      tmpvar_35.y = ((tmpvar_23 * 0.75) - tmpvar_34);
      tmpvar_35.z = ((tmpvar_23 * 0.01) + tmpvar_34);
      tmpvar_35.w = (tmpvar_23 + tmpvar_34);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      vOriginPos_32 = vPos_19;
      highp float tmpvar_38;
      tmpvar_38 = sqrt(dot (vPos_19, vPos_19));
      highp float fAngle_39;
      fAngle_39 = ((_glesMultiTexCoord2.x * tmpvar_25) * (tmpvar_36.x + (tmpvar_36.y * tmpvar_36.y)));
      highp vec2 vSinCos_40;
      vSinCos_40.x = sin(fAngle_39);
      vSinCos_40.y = cos(fAngle_39);
      highp float tmpvar_41;
      tmpvar_41 = (1.0 - vSinCos_40.y);
      highp mat3 tmpvar_42;
      tmpvar_42[0].x = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.x) + vSinCos_40.y);
      tmpvar_42[0].y = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.y) + (vSinCos_40.x * tmpvar_22.z));
      tmpvar_42[0].z = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.z) - (vSinCos_40.x * tmpvar_22.y));
      tmpvar_42[1].x = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.y) - (vSinCos_40.x * tmpvar_22.z));
      tmpvar_42[1].y = (((tmpvar_41 * tmpvar_22.y) * tmpvar_22.y) + vSinCos_40.y);
      tmpvar_42[1].z = (((tmpvar_41 * tmpvar_22.y) * tmpvar_22.z) + (vSinCos_40.x * tmpvar_22.x));
      tmpvar_42[2].x = (((tmpvar_41 * tmpvar_22.x) * tmpvar_22.z) + (vSinCos_40.x * tmpvar_22.y));
      tmpvar_42[2].y = (((tmpvar_41 * tmpvar_22.y) * tmpvar_22.z) - (vSinCos_40.x * tmpvar_22.x));
      tmpvar_42[2].z = (((tmpvar_41 * tmpvar_22.z) * tmpvar_22.z) + vSinCos_40.y);
      highp vec3 tmpvar_43;
      tmpvar_43 = ((tmpvar_22.yzx * vRotatedWindVector_7.zxy) - (tmpvar_22.zxy * vRotatedWindVector_7.yzx));
      vAxis_30.xz = tmpvar_43.xz;
      highp float tmpvar_44;
      tmpvar_44 = clamp (dot (vRotatedWindVector_7, tmpvar_22), -1.0, 1.0);
      vAxis_30.y = (tmpvar_43.y + tmpvar_44);
      highp vec3 tmpvar_45;
      tmpvar_45 = normalize(vAxis_30);
      vAxis_30 = tmpvar_45;
      highp float tmpvar_46;
      tmpvar_46 = (1.570796 - (sign(tmpvar_44) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_44))) * (1.570796 + (abs(tmpvar_44) * (-0.2146018 + 
          (abs(tmpvar_44) * (0.08656672 + (abs(tmpvar_44) * -0.03102955)))
        ))))
      )));
      fOsc_31 = (tmpvar_36.y - (tmpvar_36.x * tmpvar_36.x));
      fTwitch_29 = 0.0;
      if (tmpvar_28) {
        highp float fTime_47;
        fTime_47 = (tmpvar_27.z + tmpvar_34);
        highp vec4 tmpvar_48;
        tmpvar_48.zw = vec2(0.0, 0.0);
        tmpvar_48.x = fTime_47;
        tmpvar_48.y = (0.87 * fTime_47);
        highp vec4 tmpvar_49;
        highp vec4 tmpvar_50;
        tmpvar_50 = abs(((
          fract((tmpvar_48 + 0.5))
         * 2.0) - 1.0));
        tmpvar_49 = (((
          (tmpvar_50 * tmpvar_50)
         * 
          (3.0 - (2.0 * tmpvar_50))
        ) - 0.5) * 2.0);
        fTwitch_29 = (tmpvar_27.x * pow (clamp (
          ((((tmpvar_49.x * tmpvar_49.y) * tmpvar_49.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_27.y));
      };
      highp float fAngle_51;
      fAngle_51 = (_glesMultiTexCoord2.x * ((
        (tmpvar_46 * tmpvar_26)
       + 
        (fOsc_31 * tmpvar_24)
      ) + fTwitch_29));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.y) + (vSinCos_52.x * tmpvar_45.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.z) - (vSinCos_52.x * tmpvar_45.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.y) - (vSinCos_52.x * tmpvar_45.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_45.y) * tmpvar_45.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_45.y) * tmpvar_45.z) + (vSinCos_52.x * tmpvar_45.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_45.x) * tmpvar_45.z) + (vSinCos_52.x * tmpvar_45.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_45.y) * tmpvar_45.z) - (vSinCos_52.x * tmpvar_45.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_45.z) * tmpvar_45.z) + vSinCos_52.y);
      vOriginPos_32 = (normalize((
        (tmpvar_42 * tmpvar_54)
       * vPos_19)) * tmpvar_38);
      vPos_16 = vOriginPos_32;
    };
    FinalPosition_8 = vPos_16;
  };
  FinalPosition_8 = (FinalPosition_8 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_55;
    vPos_55 = FinalPosition_8;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_56;
      vPos_56 = FinalPosition_8;
      highp float fTime_57;
      highp float fAdherenceScale_58;
      highp vec3 vWindVector_59;
      vWindVector_59 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_57 = (_ST_WindBranch.x + (tmpvar_9.x + tmpvar_9.y));
      highp vec4 vOscillations_60;
      highp float fOscillation_61;
      fOscillation_61 = 1.0;
      highp float fAmount_62;
      highp float fTarget_63;
      highp vec4 tmpvar_64;
      tmpvar_64.x = (fTime_57 + _glesMultiTexCoord0.w);
      tmpvar_64.y = ((fTime_57 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_64.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_57 + _glesMultiTexCoord0.w));
      tmpvar_64.w = ((fTime_57 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_65;
      tmpvar_65 = abs(((
        fract((tmpvar_64 + 0.5))
       * 2.0) - 1.0));
      vOscillations_60 = (((
        (tmpvar_65 * tmpvar_65)
       * 
        (3.0 - (2.0 * tmpvar_65))
      ) - 0.5) * 2.0);
      highp float tmpvar_66;
      tmpvar_66 = (vOscillations_60.y * vOscillations_60.z);
      fTarget_63 = 1.0;
      fAmount_62 = tmpvar_66;
      if ((tmpvar_66 < 0.0)) {
        fTarget_63 = -1.0;
        fAmount_62 = -(tmpvar_66);
      };
      fOscillation_61 = (((
        mix (mix (tmpvar_66, fTarget_63, fAmount_62), fTarget_63, fAmount_62)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_60.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_61 = (fOscillation_61 * (1.0 + (vOscillations_60.w * _ST_WindBranchWhip.x)));
      vPos_56 = (FinalPosition_8 + ((vWindVector_59 * fOscillation_61) * _ST_WindBranch.y));
      highp vec4 tmpvar_67;
      tmpvar_67.zw = vec2(0.0, 0.0);
      tmpvar_67.x = ((fTime_57 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_67.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_68;
      highp vec4 tmpvar_69;
      tmpvar_69 = abs(((
        fract((tmpvar_67 + 0.5))
       * 2.0) - 1.0));
      tmpvar_68 = (((
        (tmpvar_69 * tmpvar_69)
       * 
        (3.0 - (2.0 * tmpvar_69))
      ) - 0.5) * 2.0);
      fAdherenceScale_58 = (1.0 - ((tmpvar_68.x * tmpvar_68.y) * (
        (tmpvar_68.x * tmpvar_68.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_58 = (fAdherenceScale_58 + ((vOscillations_60.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_56 = (vPos_56 + ((
        ((vRotatedBranchAnchor_6 - vPos_56) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_58) * _glesMultiTexCoord0.z));
      vPos_55 = vPos_56;
    } else {
      highp vec3 vPos_70;
      vPos_70 = vPos_55;
      highp float fTime_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_9.x + tmpvar_9.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.w = 0.0;
      tmpvar_77.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_70 = (vPos_55 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      vPos_55 = vPos_70;
    };
    FinalPosition_8 = vPos_55;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_80;
    vPos_80 = FinalPosition_8;
    highp float fMoveAmount_81;
    highp float fAdjust_82;
    highp float fLength_83;
    fLength_83 = sqrt(dot (FinalPosition_8, FinalPosition_8));
    highp float tmpvar_84;
    tmpvar_84 = (max ((FinalPosition_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_82 = tmpvar_84;
    if ((tmpvar_84 != 0.0)) {
      fAdjust_82 = pow (tmpvar_84, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_85;
    tmpvar_85.zw = vec2(0.0, 0.0);
    tmpvar_85.x = (tmpvar_9.x + _ST_WindGlobal.x);
    tmpvar_85.y = (tmpvar_9.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_86;
    highp vec4 tmpvar_87;
    tmpvar_87 = abs(((
      fract((tmpvar_85 + 0.5))
     * 2.0) - 1.0));
    tmpvar_86 = (((
      (tmpvar_87 * tmpvar_87)
     * 
      (3.0 - (2.0 * tmpvar_87))
    ) - 0.5) * 2.0);
    fMoveAmount_81 = ((_ST_WindGlobal.y * (tmpvar_86.x + 
      (tmpvar_86.y * tmpvar_86.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_81 = (fMoveAmount_81 * fAdjust_82);
    vPos_80.xz = (FinalPosition_8.xz + (vRotatedWindVector_7.xz * fMoveAmount_81));
    vPos_80 = (normalize(vPos_80) * fLength_83);
    FinalPosition_8 = vPos_80;
  };
  tmpvar_5.xyz = FinalPosition_8;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_88;
  highp vec4 o_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_91;
  tmpvar_91.x = tmpvar_90.x;
  tmpvar_91.y = (tmpvar_90.y * _ProjectionParams.x);
  o_89.xy = (tmpvar_91 + tmpvar_90.w);
  o_89.zw = tmpvar_3.zw;
  highp vec3 tmpvar_92;
  tmpvar_92 = o_89.xyw;
  screenPos_88 = tmpvar_92;
  screenPos_88.xy = (screenPos_88.xy * (_ScreenParams.xy * 0.25));
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_5).xyz - _LightPositionRange.xyz);
  gl_Position = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = screenPos_88;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  mediump vec2 projUV_2;
  mediump vec2 tmpvar_3;
  tmpvar_3 = (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.z);
  projUV_2.x = tmpvar_3.x;
  projUV_2.y = ((fract(tmpvar_3.y) * 0.0625) + unity_LODFade.y);
  lowp float x_4;
  x_4 = (texture2D (_DitherMaskLOD2D, projUV_2).w - 0.5);
  if ((x_4 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - (tmpvar_5.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp float t17;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t31;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
highp float t46;
void main()
{
    //Instruction 55225
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 55226
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 55227
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55228
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 55229
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 55230
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 55231
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 55232
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 55233
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 55234
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 55235
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 55236
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 55237
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 55238
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 55239
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 55240
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 55241
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 55242
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 55243
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 55244
        //FRC
        t15.x = fract(t15.x);
        //Instruction 55245
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 55246
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 55247
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 55248
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 55249
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 55250
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 55251
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 55252
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 55253
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 55254
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 55255
        //IF
        if(tb29){
            //Instruction 55256
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 55257
            //FRC
            t4 = fract(t4);
            //Instruction 55258
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55259
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 55260
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 55261
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 55262
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 55263
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 55264
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 55265
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 55266
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55267
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 55268
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55269
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 55270
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 55271
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 55272
            //SQRT
            t44 = sqrt(t44);
            //Instruction 55273
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 55274
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 55275
            //MUL
            t45 = t45 * t5.x;
            //Instruction 55276
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 55277
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 55278
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 55279
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 55280
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 55281
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 55282
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 55283
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 55284
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 55285
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 55286
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 55287
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 55288
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 55289
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 55290
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 55291
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 55292
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 55293
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 55294
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 55295
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 55296
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 55297
            //SQRT
            t45 = sqrt(t45);
            //Instruction 55298
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 55299
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 55300
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 55301
            //MUL
            t33 = t45 * t5.x;
            //Instruction 55302
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 55303
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 55304
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 55305
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 55306
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 55307
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 55308
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 55309
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 55310
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 55311
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55312
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 55313
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55314
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 55315
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 55316
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 55317
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 55318
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 55319
            //LOG
            t43 = log2(t43);
            //Instruction 55320
            //MUL
            t29 = t43 * t15.y;
            //Instruction 55321
            //EXP
            t29 = exp2(t29);
            //Instruction 55322
            //MUL
            t43 = t5.y * t45;
            //Instruction 55323
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 55324
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 55325
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 55326
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 55327
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 55328
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 55329
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 55330
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 55331
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 55332
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 55333
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 55334
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 55335
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 55336
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 55337
            //MOV
            t10.z = t11.x;
            //Instruction 55338
            //MOV
            t10.w = t9.x;
            //Instruction 55339
            //MOV
            t12.z = t8.y;
            //Instruction 55340
            //MOV
            t12.w = t13.y;
            //Instruction 55341
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 55342
            //MOV
            t13.w = t12.y;
            //Instruction 55343
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 55344
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 55345
            //MOV
            t9.w = t10.y;
            //Instruction 55346
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 55347
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 55348
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 55349
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 55350
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 55351
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 55352
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 55353
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 55354
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 55355
            //DP3
            t15.x = dot(t4.xyz, t4.xyz);
            //Instruction 55356
            //RSQ
            t15.x = inversesqrt(t15.x);
            //Instruction 55357
            //MUL
            t15.xyz = t15.xxx * t4.xyz;
            //Instruction 55358
            //MUL
            t3.xyz = vec3(t44) * t15.xyz;
            //Instruction 55359
        //ENDIF
        }
        //Instruction 55360
    //ENDIF
    }
    //Instruction 55361
    //ADD
    t15.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 55362
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 55363
    //IF
    if(tb16){
        //Instruction 55364
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 55365
        //IF
        if(tb16){
            //Instruction 55366
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55367
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 55368
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 55369
            //DP3
            t16.x = dot(t3.xyz, t3.xyz);
            //Instruction 55370
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 55371
            //MUL
            t3.xyz = t16.xxx * t3.xyz;
            //Instruction 55372
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55373
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55374
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55375
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55376
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55377
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 55378
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 55379
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55380
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 55381
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 55382
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 55383
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55384
            //FRC
            t0 = fract(t0);
            //Instruction 55385
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55386
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 55387
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55388
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55389
            //ADD
            t0 = t0 + t0;
            //Instruction 55390
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 55391
            //LT
            tb44 = t5.w<0.0;
            //Instruction 55392
            //MOV
            t5.y = (-t5.w);
            //Instruction 55393
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 55394
            //MOVC
            t5.xy = (bool(tb44)) ? t5.xy : t5.zw;
            //Instruction 55395
            //MAD
            t44 = (-t0.y) * t0.z + t5.x;
            //Instruction 55396
            //MAD
            t44 = t5.y * t44 + t5.w;
            //Instruction 55397
            //ADD
            t45 = (-t44) + t5.x;
            //Instruction 55398
            //MAD
            t44 = t5.y * t45 + t44;
            //Instruction 55399
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 55400
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55401
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55402
            //MUL
            t46 = t0.x * t46;
            //Instruction 55403
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 55404
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55405
            //MUL
            t44 = t44 * t45;
            //Instruction 55406
            //MUL
            t4.xyz = vec3(t44) * t4.xyz;
            //Instruction 55407
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t15.xyz;
            //Instruction 55408
            //MAD
            t5.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55409
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55410
            //MAD
            t5.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55411
            //ADD
            t16.xz = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 55412
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 55413
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55414
            //MUL
            t5.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 55415
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55416
            //MAD
            t16.xz = t5.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 55417
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 55418
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 55419
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 55420
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55421
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 55422
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 55423
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 55424
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55425
            //MUL
            t3.xyz = t16.xxx * t3.xyz;
            //Instruction 55426
            //MAD
            t15.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 55427
        //ELSE
        } else {
            //Instruction 55428
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55429
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55430
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55431
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55432
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55433
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 55434
            //ADD
            t4.x = t16.x + in_TEXCOORD0.w;
            //Instruction 55435
            //MAD
            t4.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55436
            //MUL
            t16.x = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 55437
            //MUL
            t4.z = t16.x * 0.500000;
            //Instruction 55438
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55439
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55440
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55441
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 55442
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55443
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55444
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 55445
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 55446
            //LT
            tb16 = t0.w<0.0;
            //Instruction 55447
            //MOV
            t0.y = (-t0.w);
            //Instruction 55448
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 55449
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 55450
            //MAD
            t45 = (-t4.y) * t4.z + t16.x;
            //Instruction 55451
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 55452
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 55453
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 55454
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 55455
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55456
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55457
            //MUL
            t45 = t45 * t4.x;
            //Instruction 55458
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 55459
            //MUL
            t3.xyz = t16.xxx * t3.xyz;
            //Instruction 55460
            //MAD
            t15.xyz = t3.xyz * _ST_WindBranch.yyy + t15.xyz;
            //Instruction 55461
        //ENDIF
        }
        //Instruction 55462
    //ENDIF
    }
    //Instruction 55463
    //DP3
    t16.x = dot(t15.xyz, t15.xyz);
    //Instruction 55464
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 55465
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55466
    //MAD
    t44 = (-t44) * 0.250000 + t15.y;
    //Instruction 55467
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 55468
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 55469
    //NE
    tb3 = t44!=0.0;
    //Instruction 55470
    //LOG
    t17 = log2(t44);
    //Instruction 55471
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 55472
    //EXP
    t17 = exp2(t17);
    //Instruction 55473
    //MOVC
    t44 = (tb3) ? t17 : t44;
    //Instruction 55474
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55475
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55476
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 55477
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 55478
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55479
    //MUL
    t31.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 55480
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55481
    //MAD
    t3.xy = t31.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 55482
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 55483
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 55484
    //DIV
    t17 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55485
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t17;
    //Instruction 55486
    //MUL
    t44 = t44 * t3.x;
    //Instruction 55487
    //MAD
    t3.xz = t2.xz * vec2(t44) + t15.xz;
    //Instruction 55488
    //MOV
    t3.y = t15.y;
    //Instruction 55489
    //DP3
    t2.x = dot(t3.xyz, t3.xyz);
    //Instruction 55490
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 55491
    //MUL
    t2.xzw = t2.xxx * t3.xyz;
    //Instruction 55492
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 55493
    //MOVC
    t1.xyz = (tb1.x) ? t2.xyz : t15.xyz;
    //Instruction 55494
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 55495
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 55496
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 55497
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 55498
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 55499
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55500
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 55501
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 55502
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 55503
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 55504
    //MUL
    t15.x = t0.y * _ProjectionParams.x;
    //Instruction 55505
    //MUL
    t1.w = t15.x * 0.500000;
    //Instruction 55506
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 55507
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 55508
    //MUL
    t1.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 55509
    //MOV
    gl_Position = t0;
    //Instruction 55510
    //MOV
    t1.z = t0.w;
    //Instruction 55511
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 55512
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 55513
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DitherMaskLOD2D;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
mediump vec2 t16_1;
mediump float t16_3;
void main()
{
    //Instruction 55205
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 55206
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 55207
    //LT
    tb0 = t16_0<0.0;
    //Instruction 55208
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 55209
    //DIV
    t16_1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.zz;
    //Instruction 55210
    //FRC
    t16_3 = fract(t16_1.y);
    //Instruction 55211
    //MOV
    t0.x = t16_1.x;
    //Instruction 55212
    //MAD
    t0.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 55213
    //SAMPLE
    t10_0 = texture(_DitherMaskLOD2D, t0.xy).w;
    //Instruction 55214
    //ADD
    t16_0 = t10_0 + -0.500000;
    //Instruction 55215
    //LT
    tb0 = t16_0<0.0;
    //Instruction 55216
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 55217
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 55218
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 55219
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 55220
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 55221
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 55222
    //FRC
    t0 = fract(t0);
    //Instruction 55223
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 55224
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="Vertex" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 446983
Program "vp" {
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  FinalPosition_9 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_10;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_16;
      vPos_16 = tmpvar_10;
      highp float fTime_17;
      highp float fAdherenceScale_18;
      highp vec3 vWindVector_19;
      vWindVector_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_17 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_20;
      highp float fOscillation_21;
      fOscillation_21 = 1.0;
      highp float fAmount_22;
      highp float fTarget_23;
      highp vec4 tmpvar_24;
      tmpvar_24.x = (fTime_17 + _glesMultiTexCoord0.w);
      tmpvar_24.y = ((fTime_17 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_24.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_17 + _glesMultiTexCoord0.w));
      tmpvar_24.w = ((fTime_17 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      vOscillations_20 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      highp float tmpvar_26;
      tmpvar_26 = (vOscillations_20.y * vOscillations_20.z);
      fTarget_23 = 1.0;
      fAmount_22 = tmpvar_26;
      if ((tmpvar_26 < 0.0)) {
        fTarget_23 = -1.0;
        fAmount_22 = -(tmpvar_26);
      };
      fOscillation_21 = (((
        mix (mix (tmpvar_26, fTarget_23, fAmount_22), fTarget_23, fAmount_22)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_20.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_21 = (fOscillation_21 * (1.0 + (vOscillations_20.w * _ST_WindBranchWhip.x)));
      vPos_16 = (_glesVertex.xyz + ((vWindVector_19 * fOscillation_21) * _ST_WindBranch.y));
      highp vec4 tmpvar_27;
      tmpvar_27.zw = vec2(0.0, 0.0);
      tmpvar_27.x = ((fTime_17 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_27.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_28;
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      tmpvar_28 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((tmpvar_28.x * tmpvar_28.y) * (
        (tmpvar_28.x * tmpvar_28.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_20.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_16 = (vPos_16 + ((
        ((vRotatedBranchAnchor_7 - vPos_16) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_15 = vPos_16;
    } else {
      highp vec3 vPos_30;
      vPos_30 = vPos_15;
      highp float fTime_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_31 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (fTime_31 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_31 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_30 = (vPos_15 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      vPos_15 = vPos_30;
    };
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_9;
    highp float fMoveAmount_41;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    fMoveAmount_41 = ((_ST_WindGlobal.y * (tmpvar_46.x + 
      (tmpvar_46.y * tmpvar_46.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_41 = (fMoveAmount_41 * fAdjust_42);
    vPos_40.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_41));
    vPos_40 = (normalize(vPos_40) * fLength_43);
    FinalPosition_9 = vPos_40;
  };
  tmpvar_6.xyz = FinalPosition_9;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_48;
  highp vec3 viewN_49;
  highp vec3 viewpos_50;
  viewpos_50 = (glstate_matrix_modelview0 * tmpvar_6).xyz;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_51[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_51[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_49 = normalize((tmpvar_51 * _glesNormal));
  lowp vec3 tmpvar_52;
  tmpvar_52 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_48 = tmpvar_52;
  highp vec3 toLight_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_50 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  toLight_53 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_48 = (lightColor_48 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_49, toLight_53))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_53, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_50 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  toLight_56 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_48 = (lightColor_48 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_49, toLight_56))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_56, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_50 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_48 = (lightColor_48 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_49, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_50 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_48 = (lightColor_48 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_49, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5.xyz = tmpvar_1;
  tmpvar_5.w = tmpvar_2;
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t10;
highp float t11;
highp float t15;
highp vec2 t17;
mediump float t16_21;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
void main()
{
    //Instruction 55519
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 55520
    //MUL
    t16_21 = _WindEnabled * _WindQuality;
    //Instruction 55521
    //LT
    tb1 = 0.0<t16_21;
    //Instruction 55522
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55523
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 55524
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 55525
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 55526
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 55527
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 55528
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 55529
    //GE
    tb22 = t16_21>=3.000000;
    //Instruction 55530
    //IF
    if(tb22){
        //Instruction 55531
        //EQ
        tb22 = t16_21==5.000000;
        //Instruction 55532
        //IF
        if(tb22){
            //Instruction 55533
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55534
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 55535
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 55536
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 55537
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 55538
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 55539
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55540
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55541
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55542
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55543
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55544
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 55545
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 55546
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55547
            //MUL
            t23 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 55548
            //MUL
            t4.z = t23 * 0.500000;
            //Instruction 55549
            //ADD
            t4.w = t4.x + (-in_TEXCOORD0.z);
            //Instruction 55550
            //ADD
            t4 = t4 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55551
            //FRC
            t4 = fract(t4);
            //Instruction 55552
            //MAD
            t4 = t4 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55553
            //MUL
            t5 = abs(t4) * abs(t4);
            //Instruction 55554
            //MAD
            t4 = -abs(t4) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55555
            //MAD
            t4 = t5 * t4 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55556
            //ADD
            t4 = t4 + t4;
            //Instruction 55557
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 55558
            //LT
            tb23 = t5.w<0.0;
            //Instruction 55559
            //MOV
            t5.y = (-t5.w);
            //Instruction 55560
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 55561
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 55562
            //MAD
            t23 = (-t4.y) * t4.z + t5.x;
            //Instruction 55563
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 55564
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 55565
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 55566
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 55567
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55568
            //ADD
            t11 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55569
            //MUL
            t4.x = t11 * t4.x;
            //Instruction 55570
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 55571
            //MAD
            t24 = t4.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55572
            //MUL
            t23 = t23 * t24;
            //Instruction 55573
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 55574
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55575
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55576
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55577
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55578
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 55579
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 55580
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55581
            //MUL
            t5.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 55582
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55583
            //MAD
            t4.xy = t5.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 55584
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 55585
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 55586
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 55587
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55588
            //MUL
            t23 = t4.w * _ST_WindVector.w;
            //Instruction 55589
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 55590
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 55591
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55592
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 55593
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 55594
        //ELSE
        } else {
            //Instruction 55595
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55596
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55597
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55598
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55599
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55600
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 55601
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 55602
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55603
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 55604
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 55605
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55606
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55607
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55608
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 55609
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55610
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55611
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 55612
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 55613
            //LT
            tb22 = t5.w<0.0;
            //Instruction 55614
            //MOV
            t5.y = (-t5.w);
            //Instruction 55615
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 55616
            //MOVC
            t5.xy = (bool(tb22)) ? t5.xy : t5.zw;
            //Instruction 55617
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 55618
            //MAD
            t22 = t5.y * t22 + t5.w;
            //Instruction 55619
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 55620
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 55621
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 55622
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55623
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55624
            //MUL
            t24 = t24 * t4.x;
            //Instruction 55625
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 55626
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 55627
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55628
        //ENDIF
        }
        //Instruction 55629
    //ELSE
    } else {
        //Instruction 55630
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 55631
    //ENDIF
    }
    //Instruction 55632
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 55633
    //SQRT
    t22 = sqrt(t22);
    //Instruction 55634
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55635
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 55636
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 55637
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 55638
    //NE
    tb3 = t23!=0.0;
    //Instruction 55639
    //LOG
    t10 = log2(t23);
    //Instruction 55640
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 55641
    //EXP
    t10 = exp2(t10);
    //Instruction 55642
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 55643
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55644
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55645
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 55646
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 55647
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55648
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 55649
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55650
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 55651
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 55652
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 55653
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55654
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 55655
    //MUL
    t23 = t23 * t3.x;
    //Instruction 55656
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 55657
    //MOV
    t3.y = t2.y;
    //Instruction 55658
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 55659
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 55660
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 55661
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 55662
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 55663
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 55664
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    //Instruction 55665
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    //Instruction 55666
    //MAD
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 55667
    //MUL
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 55668
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 55669
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 55670
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 55671
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 55672
    //MUL
    t3.xyz = vec3(t22) * t3.xyz;
    //Instruction 55673
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 55674
    //MOV
    t4.xyz = t10_6.xyz;
    //Instruction 55675
    //MOV
    ti22 = 0x0;
    //Instruction 55676
    //LOOP
    while(true){
        //Instruction 55677
        //IGE
        tb23 = ti22>=0x4;
        //Instruction 55678
        //BREAKC
        if(tb23){break;}
        //Instruction 55679
        //MAD
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti22 + 0].www + unity_LightPosition[ti22 + 0].xyz;
        //Instruction 55680
        //DP3
        t23 = dot(t5.xyz, t5.xyz);
        //Instruction 55681
        //RSQ
        t24 = inversesqrt(t23);
        //Instruction 55682
        //MUL
        t5.xyz = vec3(t24) * t5.xyz;
        //Instruction 55683
        //MAD
        t23 = t23 * unity_LightAtten[ti22 + 0].z + 1.0;
        //Instruction 55684
        //DIV
        t23 = float(1.0) / t23;
        //Instruction 55685
        //DP3
        t24 = dot(t5.xyz, unity_SpotDirection[ti22 + 0].xyz);
        //Instruction 55686
        //MAX
        t24 = max(t24, 0.0);
        //Instruction 55687
        //ADD
        t24 = t24 + (-unity_LightAtten[ti22 + 0].x);
        //Instruction 55688
        //MUL
        t24 = t24 * unity_LightAtten[ti22 + 0].y;
        t24 = clamp(t24, 0.0, 1.0);
        //Instruction 55689
        //MUL
        t23 = t23 * t24;
        //Instruction 55690
        //DP3
        t24 = dot(t3.xyz, t5.xyz);
        //Instruction 55691
        //MAX
        t24 = max(t24, 0.0);
        //Instruction 55692
        //MUL
        t23 = t23 * t24;
        //Instruction 55693
        //MAD
        t4.xyz = unity_LightColor[ti22 + 0].xyz * vec3(t23) + t4.xyz;
        //Instruction 55694
        //IADD
        ti22 = ti22 + 0x1;
        //Instruction 55695
    //ENDLOOP
    }
    //Instruction 55696
    //MUL
    t2.xyz = t16_0.xyz * t4.xyz;
    //Instruction 55697
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55698
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 55699
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 55700
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 55701
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 55702
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 55703
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 55704
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 55705
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
void main()
{
    //Instruction 55514
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 55515
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 55516
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 55517
    //MOV
    SV_Target0 = t16_1;
    //Instruction 55518
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _Object2World[3].x;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].y;
  tmpvar_6 = clamp (((
    fract(((tmpvar_7 + tmpvar_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_6;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_13;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_13;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_10 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_12 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_7 + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_50;
  highp vec3 viewN_51;
  highp vec3 viewpos_52;
  viewpos_52 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_53[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_53[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_51 = normalize((tmpvar_53 * _glesNormal));
  lowp vec3 tmpvar_54;
  tmpvar_54 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_50 = tmpvar_54;
  highp vec3 toLight_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_52 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  toLight_55 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_50 = (lightColor_50 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_51, toLight_55))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_55, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_52 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  toLight_58 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_50 = (lightColor_50 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_51, toLight_58))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_58, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_52 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_50 = (lightColor_50 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_51, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_52 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_50 = (lightColor_50 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_51, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t9;
bool tb9;
highp float t13;
highp vec2 t17;
highp vec2 t20;
mediump float t16_24;
highp float t25;
highp int ti25;
highp float t26;
bool tb26;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 55720
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 55721
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 55722
    //ADD
    t9.x = t1.x + _Object2World[3].z;
    //Instruction 55723
    //ADD
    t17.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 55724
    //ADD
    t9.y = t17.x + in_NORMAL0.x;
    //Instruction 55725
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 55726
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 55727
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 55728
    //MUL
    t2.z = t9.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 55729
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 55730
    //LT
    tb9 = 0.0<t16_24;
    //Instruction 55731
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55732
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 55733
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 55734
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 55735
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 55736
    //MUL
    t17.xy = t17.xx * t3.xz;
    //Instruction 55737
    //AND
    t17.xy = mix(vec2(0.0, 0.0), t17.xy, bvec2(tb9));
    //Instruction 55738
    //GE
    tb26 = t16_24>=3.000000;
    //Instruction 55739
    //IF
    if(tb26){
        //Instruction 55740
        //EQ
        tb26 = t16_24==5.000000;
        //Instruction 55741
        //IF
        if(tb26){
            //Instruction 55742
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55743
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 55744
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 55745
            //DP3
            t26 = dot(t3.xyz, t3.xyz);
            //Instruction 55746
            //RSQ
            t26 = inversesqrt(t26);
            //Instruction 55747
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 55748
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55749
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55750
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55751
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55752
            //ADD
            t26 = t1.x + _ST_WindBranch.x;
            //Instruction 55753
            //ADD
            t5.x = t26 + in_TEXCOORD0.w;
            //Instruction 55754
            //MAD
            t5.y = t26 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55755
            //MUL
            t27 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 55756
            //MUL
            t5.z = t27 * 0.500000;
            //Instruction 55757
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 55758
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55759
            //FRC
            t5 = fract(t5);
            //Instruction 55760
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55761
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 55762
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55763
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55764
            //ADD
            t5 = t5 + t5;
            //Instruction 55765
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 55766
            //LT
            tb27 = t6.w<0.0;
            //Instruction 55767
            //MOV
            t6.y = (-t6.w);
            //Instruction 55768
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 55769
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 55770
            //MAD
            t27 = (-t5.y) * t5.z + t6.x;
            //Instruction 55771
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 55772
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 55773
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 55774
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 55775
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55776
            //ADD
            t13 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55777
            //MUL
            t5.x = t13 * t5.x;
            //Instruction 55778
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 55779
            //MAD
            t28 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55780
            //MUL
            t27 = t27 * t28;
            //Instruction 55781
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 55782
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55783
            //MAD
            t5.x = t26 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55784
            //MUL
            t26 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55785
            //MAD
            t5.y = t26 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55786
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 55787
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 55788
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55789
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 55790
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55791
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 55792
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 55793
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 55794
            //MUL
            t26 = t5.x * t5.y;
            //Instruction 55795
            //MAD
            t26 = (-t26) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55796
            //MUL
            t27 = t5.w * _ST_WindVector.w;
            //Instruction 55797
            //MAD
            t26 = t27 * _ST_WindBranchWhip.x + t26;
            //Instruction 55798
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 55799
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55800
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 55801
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 55802
        //ELSE
        } else {
            //Instruction 55803
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55804
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55805
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55806
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55807
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 55808
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 55809
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55810
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 55811
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 55812
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55813
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 55814
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55815
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 55816
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55817
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55818
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 55819
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 55820
            //LT
            tb1 = t6.w<0.0;
            //Instruction 55821
            //MOV
            t6.y = (-t6.w);
            //Instruction 55822
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 55823
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 55824
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 55825
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 55826
            //ADD
            t26 = (-t1.x) + t6.x;
            //Instruction 55827
            //MAD
            t1.x = t6.y * t26 + t1.x;
            //Instruction 55828
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 55829
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55830
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55831
            //MUL
            t27 = t27 * t5.x;
            //Instruction 55832
            //MAD
            t1.x = t1.x * t26 + t27;
            //Instruction 55833
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 55834
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55835
        //ENDIF
        }
        //Instruction 55836
    //ELSE
    } else {
        //Instruction 55837
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 55838
    //ENDIF
    }
    //Instruction 55839
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 55840
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 55841
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55842
    //MAD
    t26 = (-t26) * 0.250000 + t3.y;
    //Instruction 55843
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 55844
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 55845
    //NE
    tb27 = t26!=0.0;
    //Instruction 55846
    //LOG
    t4.x = log2(t26);
    //Instruction 55847
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 55848
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 55849
    //MOVC
    t26 = (tb27) ? t4.x : t26;
    //Instruction 55850
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55851
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55852
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 55853
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 55854
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55855
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 55856
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55857
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 55858
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 55859
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 55860
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55861
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 55862
    //MUL
    t26 = t26 * t27;
    //Instruction 55863
    //MAD
    t4.xz = t17.xy * vec2(t26) + t3.xz;
    //Instruction 55864
    //MOV
    t4.y = t3.y;
    //Instruction 55865
    //DP3
    t17.x = dot(t4.xyz, t4.xyz);
    //Instruction 55866
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 55867
    //MUL
    t4.xyz = t17.xxx * t4.xyz;
    //Instruction 55868
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 55869
    //MOVC
    t1.xyz = (bool(tb9)) ? t1.xzw : t3.xyz;
    //Instruction 55870
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 55871
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 55872
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 55873
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 55874
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 55875
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 55876
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 55877
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 55878
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 55879
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 55880
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 55881
    //MOV
    t5.xyz = t10_7.xyz;
    //Instruction 55882
    //MOV
    ti25 = 0x0;
    //Instruction 55883
    //LOOP
    while(true){
        //Instruction 55884
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 55885
        //BREAKC
        if(tb26){break;}
        //Instruction 55886
        //MAD
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 55887
        //DP3
        t26 = dot(t6.xyz, t6.xyz);
        //Instruction 55888
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 55889
        //MUL
        t6.xyz = vec3(t27) * t6.xyz;
        //Instruction 55890
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 55891
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 55892
        //DP3
        t27 = dot(t6.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 55893
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 55894
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 55895
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 55896
        //MUL
        t26 = t26 * t27;
        //Instruction 55897
        //DP3
        t27 = dot(t4.xyz, t6.xyz);
        //Instruction 55898
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 55899
        //MUL
        t26 = t26 * t27;
        //Instruction 55900
        //MAD
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t5.xyz;
        //Instruction 55901
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 55902
    //ENDLOOP
    }
    //Instruction 55903
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 55904
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55905
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 55906
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 55907
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 55908
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 55909
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 55910
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 55911
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 55912
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
mediump vec3 t16_1;
mediump float t16_2;
mediump float t16_3;
mediump float t16_13;
void main()
{
    //Instruction 55706
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 55707
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 55708
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 55709
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 55710
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 55711
    //MAX
    t16_2 = max(t10_0.z, t10_0.y);
    //Instruction 55712
    //MAX
    t16_2 = max(t10_0.x, t16_2);
    //Instruction 55713
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 55714
    //DIV
    t16_13 = t16_2 / t16_13;
    //Instruction 55715
    //MAD
    t16_3 = t16_13 * 0.500000 + 0.500000;
    //Instruction 55716
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_3);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 55717
    //MUL
    t16_0.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 55718
    //MOV
    SV_Target0 = t16_0;
    //Instruction 55719
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_7;
  tmpvar_7.xy = _glesMultiTexCoord2.zw;
  tmpvar_7.z = _glesMultiTexCoord1.w;
  tmpvar_6 = tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_50;
  highp vec3 viewN_51;
  highp vec3 viewpos_52;
  viewpos_52 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_53[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_53[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_51 = normalize((tmpvar_53 * _glesNormal));
  lowp vec3 tmpvar_54;
  tmpvar_54 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_50 = tmpvar_54;
  highp vec3 toLight_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_52 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  toLight_55 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_50 = (lightColor_50 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_51, toLight_55))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_55, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_52 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  toLight_58 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_50 = (lightColor_50 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_51, toLight_58))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_58, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_52 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_50 = (lightColor_50 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_51, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_52 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_50 = (lightColor_50 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_51, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_interpolator2 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 blendColor_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_3 = tmpvar_6;
  diffuseColor_4.xyz = mix (blendColor_3.xyz, diffuseColor_4.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
highp vec3 t8;
highp float t10;
highp float t11;
highp float t15;
highp vec2 t17;
mediump float t16_21;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
void main()
{
    //Instruction 55063
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 55064
    //MUL
    t16_21 = _WindEnabled * _WindQuality;
    //Instruction 55065
    //LT
    tb1 = 0.0<t16_21;
    //Instruction 55066
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55067
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 55068
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 55069
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 55070
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 55071
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 55072
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 55073
    //GE
    tb22 = t16_21>=3.000000;
    //Instruction 55074
    //IF
    if(tb22){
        //Instruction 55075
        //EQ
        tb22 = t16_21==5.000000;
        //Instruction 55076
        //IF
        if(tb22){
            //Instruction 55077
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55078
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 55079
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 55080
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 55081
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 55082
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 55083
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55084
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55085
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55086
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55087
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55088
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 55089
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 55090
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55091
            //MUL
            t23 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 55092
            //MUL
            t4.z = t23 * 0.500000;
            //Instruction 55093
            //ADD
            t4.w = t4.x + (-in_TEXCOORD0.z);
            //Instruction 55094
            //ADD
            t4 = t4 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55095
            //FRC
            t4 = fract(t4);
            //Instruction 55096
            //MAD
            t4 = t4 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55097
            //MUL
            t5 = abs(t4) * abs(t4);
            //Instruction 55098
            //MAD
            t4 = -abs(t4) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55099
            //MAD
            t4 = t5 * t4 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55100
            //ADD
            t4 = t4 + t4;
            //Instruction 55101
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 55102
            //LT
            tb23 = t5.w<0.0;
            //Instruction 55103
            //MOV
            t5.y = (-t5.w);
            //Instruction 55104
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 55105
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 55106
            //MAD
            t23 = (-t4.y) * t4.z + t5.x;
            //Instruction 55107
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 55108
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 55109
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 55110
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 55111
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55112
            //ADD
            t11 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55113
            //MUL
            t4.x = t11 * t4.x;
            //Instruction 55114
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 55115
            //MAD
            t24 = t4.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55116
            //MUL
            t23 = t23 * t24;
            //Instruction 55117
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 55118
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55119
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55120
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55121
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55122
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 55123
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 55124
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55125
            //MUL
            t5.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 55126
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55127
            //MAD
            t4.xy = t5.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 55128
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 55129
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 55130
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 55131
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55132
            //MUL
            t23 = t4.w * _ST_WindVector.w;
            //Instruction 55133
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 55134
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 55135
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55136
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 55137
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 55138
        //ELSE
        } else {
            //Instruction 55139
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55140
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 55141
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55142
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 55143
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55144
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 55145
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 55146
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55147
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 55148
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 55149
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55150
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55151
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55152
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 55153
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55154
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55155
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 55156
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 55157
            //LT
            tb22 = t5.w<0.0;
            //Instruction 55158
            //MOV
            t5.y = (-t5.w);
            //Instruction 55159
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 55160
            //MOVC
            t5.xy = (bool(tb22)) ? t5.xy : t5.zw;
            //Instruction 55161
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 55162
            //MAD
            t22 = t5.y * t22 + t5.w;
            //Instruction 55163
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 55164
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 55165
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 55166
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55167
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55168
            //MUL
            t24 = t24 * t4.x;
            //Instruction 55169
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 55170
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 55171
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55172
        //ENDIF
        }
        //Instruction 55173
    //ELSE
    } else {
        //Instruction 55174
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 55175
    //ENDIF
    }
    //Instruction 55176
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 55177
    //SQRT
    t22 = sqrt(t22);
    //Instruction 55178
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55179
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 55180
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 55181
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 55182
    //NE
    tb3 = t23!=0.0;
    //Instruction 55183
    //LOG
    t10 = log2(t23);
    //Instruction 55184
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 55185
    //EXP
    t10 = exp2(t10);
    //Instruction 55186
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 55187
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55188
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55189
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 55190
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 55191
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55192
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 55193
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55194
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 55195
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 55196
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 55197
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55198
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 55199
    //MUL
    t23 = t23 * t3.x;
    //Instruction 55200
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 55201
    //MOV
    t3.y = t2.y;
    //Instruction 55202
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 55203
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 55204
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 55205
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 55206
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 55207
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 55208
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    //Instruction 55209
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    //Instruction 55210
    //MAD
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 55211
    //MUL
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 55212
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 55213
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 55214
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 55215
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 55216
    //MUL
    t3.xyz = vec3(t22) * t3.xyz;
    //Instruction 55217
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 55218
    //MOV
    t4.xyz = t10_6.xyz;
    //Instruction 55219
    //MOV
    ti22 = 0x0;
    //Instruction 55220
    //LOOP
    while(true){
        //Instruction 55221
        //IGE
        tb23 = ti22>=0x4;
        //Instruction 55222
        //BREAKC
        if(tb23){break;}
        //Instruction 55223
        //MAD
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti22 + 0].www + unity_LightPosition[ti22 + 0].xyz;
        //Instruction 55224
        //DP3
        t23 = dot(t5.xyz, t5.xyz);
        //Instruction 55225
        //RSQ
        t24 = inversesqrt(t23);
        //Instruction 55226
        //MUL
        t5.xyz = vec3(t24) * t5.xyz;
        //Instruction 55227
        //MAD
        t23 = t23 * unity_LightAtten[ti22 + 0].z + 1.0;
        //Instruction 55228
        //DIV
        t23 = float(1.0) / t23;
        //Instruction 55229
        //DP3
        t24 = dot(t5.xyz, unity_SpotDirection[ti22 + 0].xyz);
        //Instruction 55230
        //MAX
        t24 = max(t24, 0.0);
        //Instruction 55231
        //ADD
        t24 = t24 + (-unity_LightAtten[ti22 + 0].x);
        //Instruction 55232
        //MUL
        t24 = t24 * unity_LightAtten[ti22 + 0].y;
        t24 = clamp(t24, 0.0, 1.0);
        //Instruction 55233
        //MUL
        t23 = t23 * t24;
        //Instruction 55234
        //DP3
        t24 = dot(t3.xyz, t5.xyz);
        //Instruction 55235
        //MAX
        t24 = max(t24, 0.0);
        //Instruction 55236
        //MUL
        t23 = t23 * t24;
        //Instruction 55237
        //MAD
        t4.xyz = unity_LightColor[ti22 + 0].xyz * vec3(t23) + t4.xyz;
        //Instruction 55238
        //IADD
        ti22 = ti22 + 0x1;
        //Instruction 55239
    //ENDLOOP
    }
    //Instruction 55240
    //MUL
    t2.xyz = t16_0.xyz * t4.xyz;
    //Instruction 55241
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55242
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 55243
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 55244
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 55245
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 55246
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 55247
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 55248
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 55249
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 55250
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 55251
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 55252
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 55054
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 55055
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 55056
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 55057
    //ADD
    t16_3.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 55058
    //MUL
    t16_1.w = t10_1.w * _Color.w;
    //Instruction 55059
    //MAD
    t16_0.xyz = t16_0.xxx * t16_3.xyz + t10_2.xyz;
    //Instruction 55060
    //MUL
    t16_1.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 55061
    //MOV
    SV_Target0 = t16_1;
    //Instruction 55062
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].x;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].y;
  tmpvar_7 = clamp (((
    fract(((tmpvar_8 + tmpvar_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_7;
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_6 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_8 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_52;
  highp vec3 viewN_53;
  highp vec3 viewpos_54;
  viewpos_54 = (glstate_matrix_modelview0 * tmpvar_11).xyz;
  highp mat3 tmpvar_55;
  tmpvar_55[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_55[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_55[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_53 = normalize((tmpvar_55 * _glesNormal));
  lowp vec3 tmpvar_56;
  tmpvar_56 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_52 = tmpvar_56;
  highp vec3 toLight_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (unity_LightPosition[0].xyz - (viewpos_54 * unity_LightPosition[0].w));
  highp float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_58);
  toLight_57 = (tmpvar_58 * inversesqrt(tmpvar_59));
  lightColor_52 = (lightColor_52 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_53, toLight_57))
   * 
    ((1.0/((1.0 + (tmpvar_59 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_57, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (unity_LightPosition[1].xyz - (viewpos_54 * unity_LightPosition[1].w));
  highp float tmpvar_62;
  tmpvar_62 = dot (tmpvar_61, tmpvar_61);
  toLight_60 = (tmpvar_61 * inversesqrt(tmpvar_62));
  lightColor_52 = (lightColor_52 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_53, toLight_60))
   * 
    ((1.0/((1.0 + (tmpvar_62 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_60, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (unity_LightPosition[2].xyz - (viewpos_54 * unity_LightPosition[2].w));
  highp float tmpvar_65;
  tmpvar_65 = dot (tmpvar_64, tmpvar_64);
  toLight_63 = (tmpvar_64 * inversesqrt(tmpvar_65));
  lightColor_52 = (lightColor_52 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_53, toLight_63))
   * 
    ((1.0/((1.0 + (tmpvar_65 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_63, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (unity_LightPosition[3].xyz - (viewpos_54 * unity_LightPosition[3].w));
  highp float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_67);
  toLight_66 = (tmpvar_67 * inversesqrt(tmpvar_68));
  lightColor_52 = (lightColor_52 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_53, toLight_66))
   * 
    ((1.0/((1.0 + (tmpvar_68 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_66, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
  xlv_Input_interpolator2 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_interpolator2;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 blendColor_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_2 = (diffuseColor_5.w * _Color.w);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator2.xy);
  blendColor_4 = tmpvar_7;
  diffuseColor_5.xyz = mix (blendColor_4.xyz, diffuseColor_5.xyz, vec3(clamp (xlv_Input_interpolator2.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_5.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t9;
bool tb9;
highp float t13;
highp vec2 t17;
highp vec2 t20;
mediump float t16_24;
highp float t25;
highp int ti25;
highp float t26;
bool tb26;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 55271
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 55272
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 55273
    //ADD
    t9.x = t1.x + _Object2World[3].z;
    //Instruction 55274
    //ADD
    t17.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 55275
    //ADD
    t9.y = t17.x + in_NORMAL0.x;
    //Instruction 55276
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 55277
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 55278
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 55279
    //MUL
    t2.z = t9.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 55280
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 55281
    //LT
    tb9 = 0.0<t16_24;
    //Instruction 55282
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55283
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 55284
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 55285
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 55286
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 55287
    //MUL
    t17.xy = t17.xx * t3.xz;
    //Instruction 55288
    //AND
    t17.xy = mix(vec2(0.0, 0.0), t17.xy, bvec2(tb9));
    //Instruction 55289
    //GE
    tb26 = t16_24>=3.000000;
    //Instruction 55290
    //IF
    if(tb26){
        //Instruction 55291
        //EQ
        tb26 = t16_24==5.000000;
        //Instruction 55292
        //IF
        if(tb26){
            //Instruction 55293
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55294
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 55295
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 55296
            //DP3
            t26 = dot(t3.xyz, t3.xyz);
            //Instruction 55297
            //RSQ
            t26 = inversesqrt(t26);
            //Instruction 55298
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 55299
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55300
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55301
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55302
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55303
            //ADD
            t26 = t1.x + _ST_WindBranch.x;
            //Instruction 55304
            //ADD
            t5.x = t26 + in_TEXCOORD0.w;
            //Instruction 55305
            //MAD
            t5.y = t26 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55306
            //MUL
            t27 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 55307
            //MUL
            t5.z = t27 * 0.500000;
            //Instruction 55308
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 55309
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55310
            //FRC
            t5 = fract(t5);
            //Instruction 55311
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55312
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 55313
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55314
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55315
            //ADD
            t5 = t5 + t5;
            //Instruction 55316
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 55317
            //LT
            tb27 = t6.w<0.0;
            //Instruction 55318
            //MOV
            t6.y = (-t6.w);
            //Instruction 55319
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 55320
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 55321
            //MAD
            t27 = (-t5.y) * t5.z + t6.x;
            //Instruction 55322
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 55323
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 55324
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 55325
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 55326
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55327
            //ADD
            t13 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55328
            //MUL
            t5.x = t13 * t5.x;
            //Instruction 55329
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 55330
            //MAD
            t28 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55331
            //MUL
            t27 = t27 * t28;
            //Instruction 55332
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 55333
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55334
            //MAD
            t5.x = t26 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55335
            //MUL
            t26 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55336
            //MAD
            t5.y = t26 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55337
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 55338
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 55339
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55340
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 55341
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55342
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 55343
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 55344
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 55345
            //MUL
            t26 = t5.x * t5.y;
            //Instruction 55346
            //MAD
            t26 = (-t26) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55347
            //MUL
            t27 = t5.w * _ST_WindVector.w;
            //Instruction 55348
            //MAD
            t26 = t27 * _ST_WindBranchWhip.x + t26;
            //Instruction 55349
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 55350
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55351
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 55352
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 55353
        //ELSE
        } else {
            //Instruction 55354
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55355
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55356
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55357
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55358
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 55359
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 55360
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55361
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 55362
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 55363
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55364
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 55365
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55366
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 55367
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55368
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55369
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 55370
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 55371
            //LT
            tb1 = t6.w<0.0;
            //Instruction 55372
            //MOV
            t6.y = (-t6.w);
            //Instruction 55373
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 55374
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 55375
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 55376
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 55377
            //ADD
            t26 = (-t1.x) + t6.x;
            //Instruction 55378
            //MAD
            t1.x = t6.y * t26 + t1.x;
            //Instruction 55379
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 55380
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55381
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55382
            //MUL
            t27 = t27 * t5.x;
            //Instruction 55383
            //MAD
            t1.x = t1.x * t26 + t27;
            //Instruction 55384
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 55385
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 55386
        //ENDIF
        }
        //Instruction 55387
    //ELSE
    } else {
        //Instruction 55388
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 55389
    //ENDIF
    }
    //Instruction 55390
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 55391
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 55392
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55393
    //MAD
    t26 = (-t26) * 0.250000 + t3.y;
    //Instruction 55394
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 55395
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 55396
    //NE
    tb27 = t26!=0.0;
    //Instruction 55397
    //LOG
    t4.x = log2(t26);
    //Instruction 55398
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 55399
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 55400
    //MOVC
    t26 = (tb27) ? t4.x : t26;
    //Instruction 55401
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55402
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55403
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 55404
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 55405
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55406
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 55407
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55408
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 55409
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 55410
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 55411
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55412
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 55413
    //MUL
    t26 = t26 * t27;
    //Instruction 55414
    //MAD
    t4.xz = t17.xy * vec2(t26) + t3.xz;
    //Instruction 55415
    //MOV
    t4.y = t3.y;
    //Instruction 55416
    //DP3
    t17.x = dot(t4.xyz, t4.xyz);
    //Instruction 55417
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 55418
    //MUL
    t4.xyz = t17.xxx * t4.xyz;
    //Instruction 55419
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 55420
    //MOVC
    t1.xyz = (bool(tb9)) ? t1.xzw : t3.xyz;
    //Instruction 55421
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 55422
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 55423
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 55424
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 55425
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 55426
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 55427
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 55428
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 55429
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 55430
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 55431
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 55432
    //MOV
    t5.xyz = t10_7.xyz;
    //Instruction 55433
    //MOV
    ti25 = 0x0;
    //Instruction 55434
    //LOOP
    while(true){
        //Instruction 55435
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 55436
        //BREAKC
        if(tb26){break;}
        //Instruction 55437
        //MAD
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 55438
        //DP3
        t26 = dot(t6.xyz, t6.xyz);
        //Instruction 55439
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 55440
        //MUL
        t6.xyz = vec3(t27) * t6.xyz;
        //Instruction 55441
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 55442
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 55443
        //DP3
        t27 = dot(t6.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 55444
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 55445
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 55446
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 55447
        //MUL
        t26 = t26 * t27;
        //Instruction 55448
        //DP3
        t27 = dot(t4.xyz, t6.xyz);
        //Instruction 55449
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 55450
        //MUL
        t26 = t26 * t27;
        //Instruction 55451
        //MAD
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t5.xyz;
        //Instruction 55452
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 55453
    //ENDLOOP
    }
    //Instruction 55454
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 55455
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55456
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 55457
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 55458
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 55459
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 55460
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 55461
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 55462
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 55463
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 55464
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 55465
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 55466
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec4 t10_1;
mediump float t16_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 55253
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 55254
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 55255
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 55256
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 55257
    //MUL
    t16_1.w = t10_1.w * _Color.w;
    //Instruction 55258
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 55259
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 55260
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 55261
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 55262
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 55263
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 55264
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 55265
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 55266
    //MAD
    t16_2 = t16_12 * 0.500000 + 0.500000;
    //Instruction 55267
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_2);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 55268
    //MUL
    t16_1.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 55269
    //MOV
    SV_Target0 = t16_1;
    //Instruction 55270
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 == 5.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    highp float fOffset_18;
    fOffset_18 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_18 = 0.75;
    };
    highp vec4 tmpvar_19;
    tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_19.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_18);
    highp vec4 tmpvar_20;
    tmpvar_20 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    vPos_17 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_20 * tmpvar_20)
       * 
        (3.0 - (2.0 * tmpvar_20))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_8 = tmpvar_2;
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_11;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = FinalPosition_11;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (FinalPosition_11 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_9 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_11 = vPos_21;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_11;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_11 = vPos_46;
  };
  tmpvar_7.xyz = FinalPosition_11;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_54;
  highp vec3 viewN_55;
  highp vec3 viewpos_56;
  viewpos_56 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_57[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_57[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_55 = normalize((tmpvar_57 * tmpvar_8));
  lowp vec3 tmpvar_58;
  tmpvar_58 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_54 = tmpvar_58;
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[0].xyz - (viewpos_56 * unity_LightPosition[0].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_54 = (lightColor_54 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_55, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[1].xyz - (viewpos_56 * unity_LightPosition[1].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_54 = (lightColor_54 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_55, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (unity_LightPosition[2].xyz - (viewpos_56 * unity_LightPosition[2].w));
  highp float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_66);
  toLight_65 = (tmpvar_66 * inversesqrt(tmpvar_67));
  lightColor_54 = (lightColor_54 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_55, toLight_65))
   * 
    ((1.0/((1.0 + (tmpvar_67 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_65, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (unity_LightPosition[3].xyz - (viewpos_56 * unity_LightPosition[3].w));
  highp float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_69);
  toLight_68 = (tmpvar_69 * inversesqrt(tmpvar_70));
  lightColor_54 = (lightColor_54 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_55, toLight_68))
   * 
    ((1.0/((1.0 + (tmpvar_70 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_68, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_54);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
void main()
{
    //Instruction 55921
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 55922
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 55923
    //LT
    tb1 = 0.0<t16_24;
    //Instruction 55924
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55925
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 55926
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 55927
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 55928
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 55929
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 55930
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 55931
    //EQ
    tb25 = t16_24==5.000000;
    //Instruction 55932
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 55933
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 55934
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 55935
    //MAD
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 55936
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 55937
    //FRC
    t2.x = fract(t2.x);
    //Instruction 55938
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 55939
    //MUL
    t10 = abs(t2.x) * abs(t2.x);
    //Instruction 55940
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 55941
    //MAD
    t2.x = t10 * t2.x + -0.500000;
    //Instruction 55942
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 55943
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 55944
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 55945
    //MOVC
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 55946
    //GE
    tb26 = t16_24>=3.000000;
    //Instruction 55947
    //IF
    if(tb26){
        //Instruction 55948
        //IF
        if(tb25){
            //Instruction 55949
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55950
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 55951
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 55952
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 55953
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 55954
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 55955
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55956
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55957
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55958
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55959
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55960
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 55961
            //ADD
            t5.x = t25 + in_TEXCOORD0.w;
            //Instruction 55962
            //MAD
            t5.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55963
            //MUL
            t26 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 55964
            //MUL
            t5.z = t26 * 0.500000;
            //Instruction 55965
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 55966
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55967
            //FRC
            t5 = fract(t5);
            //Instruction 55968
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55969
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 55970
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55971
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55972
            //ADD
            t5 = t5 + t5;
            //Instruction 55973
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 55974
            //LT
            tb26 = t6.w<0.0;
            //Instruction 55975
            //MOV
            t6.y = (-t6.w);
            //Instruction 55976
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 55977
            //MOVC
            t6.xy = (bool(tb26)) ? t6.xy : t6.zw;
            //Instruction 55978
            //MAD
            t26 = (-t5.y) * t5.z + t6.x;
            //Instruction 55979
            //MAD
            t26 = t6.y * t26 + t6.w;
            //Instruction 55980
            //ADD
            t27 = (-t26) + t6.x;
            //Instruction 55981
            //MAD
            t26 = t6.y * t27 + t26;
            //Instruction 55982
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 55983
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55984
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55985
            //MUL
            t28 = t28 * t5.x;
            //Instruction 55986
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 55987
            //MAD
            t27 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55988
            //MUL
            t26 = t26 * t27;
            //Instruction 55989
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 55990
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 55991
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55992
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55993
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55994
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 55995
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 55996
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55997
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 55998
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55999
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 56000
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 56001
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 56002
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 56003
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56004
            //MUL
            t26 = t5.w * _ST_WindVector.w;
            //Instruction 56005
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 56006
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 56007
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56008
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56009
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 56010
        //ELSE
        } else {
            //Instruction 56011
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56012
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 56013
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56014
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 56015
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56016
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56017
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 56018
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56019
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 56020
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 56021
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56022
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56023
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56024
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 56025
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56026
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56027
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 56028
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 56029
            //LT
            tb25 = t5.w<0.0;
            //Instruction 56030
            //MOV
            t5.y = (-t5.w);
            //Instruction 56031
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 56032
            //MOVC
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            //Instruction 56033
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 56034
            //MAD
            t25 = t5.y * t25 + t5.w;
            //Instruction 56035
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 56036
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 56037
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 56038
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56039
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56040
            //MUL
            t27 = t27 * t4.x;
            //Instruction 56041
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 56042
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56043
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 56044
        //ENDIF
        }
        //Instruction 56045
    //ENDIF
    }
    //Instruction 56046
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 56047
    //SQRT
    t25 = sqrt(t25);
    //Instruction 56048
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56049
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 56050
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 56051
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 56052
    //NE
    tb3 = t26!=0.0;
    //Instruction 56053
    //LOG
    t11 = log2(t26);
    //Instruction 56054
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 56055
    //EXP
    t11 = exp2(t11);
    //Instruction 56056
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 56057
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56058
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56059
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 56060
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 56061
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56062
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 56063
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56064
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 56065
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 56066
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 56067
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56068
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 56069
    //MUL
    t26 = t26 * t3.x;
    //Instruction 56070
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 56071
    //MOV
    t3.y = t2.y;
    //Instruction 56072
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 56073
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 56074
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 56075
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 56076
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 56077
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56078
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    //Instruction 56079
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    //Instruction 56080
    //MAD
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 56081
    //MUL
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56082
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 56083
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 56084
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 56085
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 56086
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 56087
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56088
    //MOV
    t4.xyz = t10_7.xyz;
    //Instruction 56089
    //MOV
    ti25 = 0x0;
    //Instruction 56090
    //LOOP
    while(true){
        //Instruction 56091
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 56092
        //BREAKC
        if(tb26){break;}
        //Instruction 56093
        //MAD
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 56094
        //DP3
        t26 = dot(t5.xyz, t5.xyz);
        //Instruction 56095
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 56096
        //MUL
        t5.xyz = vec3(t27) * t5.xyz;
        //Instruction 56097
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 56098
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 56099
        //DP3
        t27 = dot(t5.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 56100
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56101
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 56102
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 56103
        //MUL
        t26 = t26 * t27;
        //Instruction 56104
        //DP3
        t27 = dot(t3.xyz, t5.xyz);
        //Instruction 56105
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56106
        //MUL
        t26 = t26 * t27;
        //Instruction 56107
        //MAD
        t4.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t4.xyz;
        //Instruction 56108
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 56109
    //ENDLOOP
    }
    //Instruction 56110
    //MUL
    t2.xyz = t16_0.xyz * t4.xyz;
    //Instruction 56111
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56112
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56113
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56114
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56115
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 56116
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56117
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 56118
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 56119
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    //Instruction 55913
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 55914
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 55915
    //LT
    tb2 = t10_1<0.0;
    //Instruction 55916
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 55917
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 55918
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 55919
    //MOV
    SV_Target0 = t16_1;
    //Instruction 55920
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].x;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].y;
  tmpvar_7 = clamp (((
    fract(((tmpvar_8 + tmpvar_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_7;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_14;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_14 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_12 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_14 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_14;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_8 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_14 = vPos_48;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_56;
  highp vec3 viewN_57;
  highp vec3 viewpos_58;
  viewpos_58 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_59[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_59[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_57 = normalize((tmpvar_59 * tmpvar_11));
  lowp vec3 tmpvar_60;
  tmpvar_60 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_56 = tmpvar_60;
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[0].xyz - (viewpos_58 * unity_LightPosition[0].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_56 = (lightColor_56 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_57, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[1].xyz - (viewpos_58 * unity_LightPosition[1].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_56 = (lightColor_56 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_57, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (unity_LightPosition[2].xyz - (viewpos_58 * unity_LightPosition[2].w));
  highp float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_68);
  toLight_67 = (tmpvar_68 * inversesqrt(tmpvar_69));
  lightColor_56 = (lightColor_56 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_57, toLight_67))
   * 
    ((1.0/((1.0 + (tmpvar_69 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_67, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (unity_LightPosition[3].xyz - (viewpos_58 * unity_LightPosition[3].w));
  highp float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_71);
  toLight_70 = (tmpvar_71 * inversesqrt(tmpvar_72));
  lightColor_56 = (lightColor_56 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_57, toLight_70))
   * 
    ((1.0/((1.0 + (tmpvar_72 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_70, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_56);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_8;
highp vec2 t10;
bool tb10;
highp float t12;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
void main()
{
    //Instruction 55744
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 55745
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 55746
    //ADD
    t10.x = t1.x + _Object2World[3].z;
    //Instruction 55747
    //ADD
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 55748
    //ADD
    t10.y = t19.x + in_NORMAL0.x;
    //Instruction 55749
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 55750
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 55751
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 55752
    //MUL
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 55753
    //MUL
    t16_27 = _WindEnabled * _WindQuality;
    //Instruction 55754
    //LT
    tb10 = 0.0<t16_27;
    //Instruction 55755
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55756
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 55757
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 55758
    //DP3
    t19.x = dot(t3.xyz, t3.xyz);
    //Instruction 55759
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 55760
    //MUL
    t19.xy = t19.xx * t3.xz;
    //Instruction 55761
    //AND
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, bvec2(tb10));
    //Instruction 55762
    //EQ
    tb29 = t16_27==5.000000;
    //Instruction 55763
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 55764
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 55765
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 55766
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 55767
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 55768
    //FRC
    t3.x = fract(t3.x);
    //Instruction 55769
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 55770
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 55771
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 55772
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 55773
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 55774
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 55775
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 55776
    //MOVC
    t3.xyz = (bool(tb29)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 55777
    //GE
    tb30 = t16_27>=3.000000;
    //Instruction 55778
    //IF
    if(tb30){
        //Instruction 55779
        //IF
        if(tb29){
            //Instruction 55780
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55781
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 55782
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 55783
            //DP3
            t29 = dot(t4.xyz, t4.xyz);
            //Instruction 55784
            //RSQ
            t29 = inversesqrt(t29);
            //Instruction 55785
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 55786
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55787
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 55788
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55789
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 55790
            //ADD
            t29 = t1.x + _ST_WindBranch.x;
            //Instruction 55791
            //ADD
            t6.x = t29 + in_TEXCOORD0.w;
            //Instruction 55792
            //MAD
            t6.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55793
            //MUL
            t30 = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 55794
            //MUL
            t6.z = t30 * 0.500000;
            //Instruction 55795
            //ADD
            t6.w = t6.x + (-in_TEXCOORD0.z);
            //Instruction 55796
            //ADD
            t6 = t6 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55797
            //FRC
            t6 = fract(t6);
            //Instruction 55798
            //MAD
            t6 = t6 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55799
            //MUL
            t7 = abs(t6) * abs(t6);
            //Instruction 55800
            //MAD
            t6 = -abs(t6) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55801
            //MAD
            t6 = t7 * t6 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55802
            //ADD
            t6 = t6 + t6;
            //Instruction 55803
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 55804
            //LT
            tb30 = t7.w<0.0;
            //Instruction 55805
            //MOV
            t7.y = (-t7.w);
            //Instruction 55806
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 55807
            //MOVC
            t7.xy = (bool(tb30)) ? t7.xy : t7.zw;
            //Instruction 55808
            //MAD
            t30 = (-t6.y) * t6.z + t7.x;
            //Instruction 55809
            //MAD
            t30 = t7.y * t30 + t7.w;
            //Instruction 55810
            //ADD
            t31 = (-t30) + t7.x;
            //Instruction 55811
            //MAD
            t30 = t7.y * t31 + t30;
            //Instruction 55812
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 55813
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55814
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55815
            //MUL
            t32 = t32 * t6.x;
            //Instruction 55816
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 55817
            //MAD
            t31 = t6.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55818
            //MUL
            t30 = t30 * t31;
            //Instruction 55819
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 55820
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 55821
            //MAD
            t6.x = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55822
            //MUL
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55823
            //MAD
            t6.y = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55824
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 55825
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 55826
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55827
            //MUL
            t7.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 55828
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55829
            //MAD
            t6.xy = t7.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 55830
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 55831
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 55832
            //MUL
            t29 = t6.x * t6.y;
            //Instruction 55833
            //MAD
            t29 = (-t29) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55834
            //MUL
            t30 = t6.w * _ST_WindVector.w;
            //Instruction 55835
            //MAD
            t29 = t30 * _ST_WindBranchWhip.x + t29;
            //Instruction 55836
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 55837
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55838
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 55839
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 55840
        //ELSE
        } else {
            //Instruction 55841
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55842
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55843
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55844
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55845
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 55846
            //ADD
            t5.x = t1.x + in_TEXCOORD0.w;
            //Instruction 55847
            //MAD
            t5.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55848
            //MUL
            t1.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 55849
            //MUL
            t5.z = t1.x * 0.500000;
            //Instruction 55850
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55851
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 55852
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55853
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 55854
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55855
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55856
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 55857
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 55858
            //LT
            tb1 = t6.w<0.0;
            //Instruction 55859
            //MOV
            t6.y = (-t6.w);
            //Instruction 55860
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 55861
            //MOVC
            t6.xy = (bool(tb1)) ? t6.xy : t6.zw;
            //Instruction 55862
            //MAD
            t1.x = (-t5.y) * t5.z + t6.x;
            //Instruction 55863
            //MAD
            t1.x = t6.y * t1.x + t6.w;
            //Instruction 55864
            //ADD
            t29 = (-t1.x) + t6.x;
            //Instruction 55865
            //MAD
            t1.x = t6.y * t29 + t1.x;
            //Instruction 55866
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 55867
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55868
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55869
            //MUL
            t30 = t30 * t5.x;
            //Instruction 55870
            //MAD
            t1.x = t1.x * t29 + t30;
            //Instruction 55871
            //MUL
            t4.xyz = t1.xxx * t4.xyz;
            //Instruction 55872
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 55873
        //ENDIF
        }
        //Instruction 55874
    //ENDIF
    }
    //Instruction 55875
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 55876
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 55877
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55878
    //MAD
    t29 = (-t29) * 0.250000 + t3.y;
    //Instruction 55879
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 55880
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 55881
    //NE
    tb30 = t29!=0.0;
    //Instruction 55882
    //LOG
    t4.x = log2(t29);
    //Instruction 55883
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 55884
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 55885
    //MOVC
    t29 = (tb30) ? t4.x : t29;
    //Instruction 55886
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55887
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55888
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 55889
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 55890
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55891
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 55892
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55893
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 55894
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 55895
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 55896
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55897
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 55898
    //MUL
    t29 = t29 * t30;
    //Instruction 55899
    //MAD
    t4.xz = t19.xy * vec2(t29) + t3.xz;
    //Instruction 55900
    //MOV
    t4.y = t3.y;
    //Instruction 55901
    //DP3
    t19.x = dot(t4.xyz, t4.xyz);
    //Instruction 55902
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 55903
    //MUL
    t4.xyz = t19.xxx * t4.xyz;
    //Instruction 55904
    //MUL
    t1.xzw = t1.xxx * t4.xyz;
    //Instruction 55905
    //MOVC
    t1.xyz = (bool(tb10)) ? t1.xzw : t3.xyz;
    //Instruction 55906
    //MUL
    t3.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 55907
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t3.xyz;
    //Instruction 55908
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t3.xyz;
    //Instruction 55909
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 55910
    //MUL
    t4.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 55911
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 55912
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 55913
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 55914
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 55915
    //MUL
    t4.xyz = vec3(t28) * t4.xyz;
    //Instruction 55916
    //MUL
    t10_8.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 55917
    //MOV
    t5.xyz = t10_8.xyz;
    //Instruction 55918
    //MOV
    ti28 = 0x0;
    //Instruction 55919
    //LOOP
    while(true){
        //Instruction 55920
        //IGE
        tb29 = ti28>=0x4;
        //Instruction 55921
        //BREAKC
        if(tb29){break;}
        //Instruction 55922
        //MAD
        t6.xyz = (-t3.xyz) * unity_LightPosition[ti28 + 0].www + unity_LightPosition[ti28 + 0].xyz;
        //Instruction 55923
        //DP3
        t29 = dot(t6.xyz, t6.xyz);
        //Instruction 55924
        //RSQ
        t30 = inversesqrt(t29);
        //Instruction 55925
        //MUL
        t6.xyz = vec3(t30) * t6.xyz;
        //Instruction 55926
        //MAD
        t29 = t29 * unity_LightAtten[ti28 + 0].z + 1.0;
        //Instruction 55927
        //DIV
        t29 = float(1.0) / t29;
        //Instruction 55928
        //DP3
        t30 = dot(t6.xyz, unity_SpotDirection[ti28 + 0].xyz);
        //Instruction 55929
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 55930
        //ADD
        t30 = t30 + (-unity_LightAtten[ti28 + 0].x);
        //Instruction 55931
        //MUL
        t30 = t30 * unity_LightAtten[ti28 + 0].y;
        t30 = clamp(t30, 0.0, 1.0);
        //Instruction 55932
        //MUL
        t29 = t29 * t30;
        //Instruction 55933
        //DP3
        t30 = dot(t4.xyz, t6.xyz);
        //Instruction 55934
        //MAX
        t30 = max(t30, 0.0);
        //Instruction 55935
        //MUL
        t29 = t29 * t30;
        //Instruction 55936
        //MAD
        t5.xyz = unity_LightColor[ti28 + 0].xyz * vec3(t29) + t5.xyz;
        //Instruction 55937
        //IADD
        ti28 = ti28 + 0x1;
        //Instruction 55938
    //ENDLOOP
    }
    //Instruction 55939
    //MUL
    t3.xyz = t16_0.xyz * t5.xyz;
    //Instruction 55940
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 55941
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 55942
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 55943
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 55944
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 55945
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 55946
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 55947
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 55948
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    //Instruction 55727
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 55728
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 55729
    //LT
    tb2 = t10_1<0.0;
    //Instruction 55730
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 55731
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 55732
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 55733
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 55734
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 55735
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 55736
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 55737
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 55738
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 55739
    //MAD
    t16_2 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 55740
    //MUL
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 55741
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 55742
    //MOV
    SV_Target0 = t16_0;
    //Instruction 55743
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_7;
  highp vec3 tmpvar_8;
  tmpvar_7 = tmpvar_1;
  tmpvar_8 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_11 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_13 > 1.0) && (tmpvar_13 < 5.0))) {
    highp float tmpvar_16;
    tmpvar_16 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_17;
    isBestWind_17 = (tmpvar_13 == 4.0);
    bool bLeaf2_18;
    bLeaf2_18 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_19;
    vPos_19 = FinalPosition_11;
    highp vec3 vDirection_20;
    vDirection_20 = tmpvar_2;
    highp float tmpvar_21;
    if (bLeaf2_18) {
      tmpvar_21 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_21 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_22;
    if (bLeaf2_18) {
      tmpvar_22 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_22 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_23;
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (tmpvar_21 + tmpvar_16);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (FinalPosition_11 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_22 * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_20 = tmpvar_2;
    vPos_19 = vPos_23;
    if (isBestWind_17) {
      highp vec3 tmpvar_26;
      tmpvar_26 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_27;
      if (bLeaf2_18) {
        tmpvar_27 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_28;
      if (bLeaf2_18) {
        tmpvar_28 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_29;
      if (bLeaf2_18) {
        tmpvar_29 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_30;
      if (bLeaf2_18) {
        tmpvar_30 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_31;
      if (bLeaf2_18) {
        tmpvar_31 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_31 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_32;
      if (bLeaf2_18) {
        tmpvar_32 = bool(1);
      } else {
        tmpvar_32 = bool(1);
      };
      highp float fTwitch_33;
      highp vec3 vAxis_34;
      highp float fOsc_35;
      highp vec3 vOriginPos_36;
      highp vec3 tmpvar_37;
      tmpvar_37 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_38;
      tmpvar_38 = ((tmpvar_37.x + tmpvar_37.y) + tmpvar_37.z);
      highp vec4 tmpvar_39;
      tmpvar_39.x = (tmpvar_27 + tmpvar_38);
      tmpvar_39.y = ((tmpvar_27 * 0.75) - tmpvar_38);
      tmpvar_39.z = ((tmpvar_27 * 0.01) + tmpvar_38);
      tmpvar_39.w = (tmpvar_27 + tmpvar_38);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      vOriginPos_36 = vPos_23;
      highp float tmpvar_42;
      tmpvar_42 = sqrt(dot (vPos_23, vPos_23));
      highp float fAngle_43;
      fAngle_43 = ((_glesMultiTexCoord2.x * tmpvar_29) * (tmpvar_40.x + (tmpvar_40.y * tmpvar_40.y)));
      highp vec2 vSinCos_44;
      vSinCos_44.x = sin(fAngle_43);
      vSinCos_44.y = cos(fAngle_43);
      highp float tmpvar_45;
      tmpvar_45 = (1.0 - vSinCos_44.y);
      highp mat3 tmpvar_46;
      tmpvar_46[0].x = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.x) + vSinCos_44.y);
      tmpvar_46[0].y = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.y) + (vSinCos_44.x * tmpvar_26.z));
      tmpvar_46[0].z = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.z) - (vSinCos_44.x * tmpvar_26.y));
      tmpvar_46[1].x = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.y) - (vSinCos_44.x * tmpvar_26.z));
      tmpvar_46[1].y = (((tmpvar_45 * tmpvar_26.y) * tmpvar_26.y) + vSinCos_44.y);
      tmpvar_46[1].z = (((tmpvar_45 * tmpvar_26.y) * tmpvar_26.z) + (vSinCos_44.x * tmpvar_26.x));
      tmpvar_46[2].x = (((tmpvar_45 * tmpvar_26.x) * tmpvar_26.z) + (vSinCos_44.x * tmpvar_26.y));
      tmpvar_46[2].y = (((tmpvar_45 * tmpvar_26.y) * tmpvar_26.z) - (vSinCos_44.x * tmpvar_26.x));
      tmpvar_46[2].z = (((tmpvar_45 * tmpvar_26.z) * tmpvar_26.z) + vSinCos_44.y);
      highp vec3 tmpvar_47;
      tmpvar_47 = ((tmpvar_26.yzx * vRotatedWindVector_10.zxy) - (tmpvar_26.zxy * vRotatedWindVector_10.yzx));
      vAxis_34.xz = tmpvar_47.xz;
      highp float tmpvar_48;
      tmpvar_48 = clamp (dot (vRotatedWindVector_10, tmpvar_26), -1.0, 1.0);
      vAxis_34.y = (tmpvar_47.y + tmpvar_48);
      highp vec3 tmpvar_49;
      tmpvar_49 = normalize(vAxis_34);
      vAxis_34 = tmpvar_49;
      highp float tmpvar_50;
      tmpvar_50 = (1.570796 - (sign(tmpvar_48) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_48))) * (1.570796 + (abs(tmpvar_48) * (-0.2146018 + 
          (abs(tmpvar_48) * (0.08656672 + (abs(tmpvar_48) * -0.03102955)))
        ))))
      )));
      fOsc_35 = (tmpvar_40.y - (tmpvar_40.x * tmpvar_40.x));
      fTwitch_33 = 0.0;
      if (tmpvar_32) {
        highp float fTime_51;
        fTime_51 = (tmpvar_31.z + tmpvar_38);
        highp vec4 tmpvar_52;
        tmpvar_52.zw = vec2(0.0, 0.0);
        tmpvar_52.x = fTime_51;
        tmpvar_52.y = (0.87 * fTime_51);
        highp vec4 tmpvar_53;
        highp vec4 tmpvar_54;
        tmpvar_54 = abs(((
          fract((tmpvar_52 + 0.5))
         * 2.0) - 1.0));
        tmpvar_53 = (((
          (tmpvar_54 * tmpvar_54)
         * 
          (3.0 - (2.0 * tmpvar_54))
        ) - 0.5) * 2.0);
        fTwitch_33 = (tmpvar_31.x * pow (clamp (
          ((((tmpvar_53.x * tmpvar_53.y) * tmpvar_53.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_31.y));
      };
      highp float fAngle_55;
      fAngle_55 = (_glesMultiTexCoord2.x * ((
        (tmpvar_50 * tmpvar_30)
       + 
        (fOsc_35 * tmpvar_28)
      ) + fTwitch_33));
      highp vec2 vSinCos_56;
      vSinCos_56.x = sin(fAngle_55);
      vSinCos_56.y = cos(fAngle_55);
      highp float tmpvar_57;
      tmpvar_57 = (1.0 - vSinCos_56.y);
      highp mat3 tmpvar_58;
      tmpvar_58[0].x = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.x) + vSinCos_56.y);
      tmpvar_58[0].y = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.y) + (vSinCos_56.x * tmpvar_49.z));
      tmpvar_58[0].z = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.z) - (vSinCos_56.x * tmpvar_49.y));
      tmpvar_58[1].x = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.y) - (vSinCos_56.x * tmpvar_49.z));
      tmpvar_58[1].y = (((tmpvar_57 * tmpvar_49.y) * tmpvar_49.y) + vSinCos_56.y);
      tmpvar_58[1].z = (((tmpvar_57 * tmpvar_49.y) * tmpvar_49.z) + (vSinCos_56.x * tmpvar_49.x));
      tmpvar_58[2].x = (((tmpvar_57 * tmpvar_49.x) * tmpvar_49.z) + (vSinCos_56.x * tmpvar_49.y));
      tmpvar_58[2].y = (((tmpvar_57 * tmpvar_49.y) * tmpvar_49.z) - (vSinCos_56.x * tmpvar_49.x));
      tmpvar_58[2].z = (((tmpvar_57 * tmpvar_49.z) * tmpvar_49.z) + vSinCos_56.y);
      highp mat3 tmpvar_59;
      tmpvar_59 = (tmpvar_46 * tmpvar_58);
      vOriginPos_36 = (normalize((tmpvar_59 * vPos_23)) * tmpvar_42);
      vDirection_20 = (tmpvar_59 * _glesNormal);
      vPos_19 = vOriginPos_36;
    };
    tmpvar_8 = vDirection_20;
    FinalPosition_11 = vPos_19;
  };
  FinalPosition_11 = (FinalPosition_11 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_60;
    vPos_60 = FinalPosition_11;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_61;
      vPos_61 = FinalPosition_11;
      highp float fTime_62;
      highp float fAdherenceScale_63;
      highp vec3 vWindVector_64;
      vWindVector_64 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_62 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_65;
      highp float fOscillation_66;
      fOscillation_66 = 1.0;
      highp float fAmount_67;
      highp float fTarget_68;
      highp vec4 tmpvar_69;
      tmpvar_69.x = (fTime_62 + _glesMultiTexCoord0.w);
      tmpvar_69.y = ((fTime_62 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_69.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_62 + _glesMultiTexCoord0.w));
      tmpvar_69.w = ((fTime_62 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_70;
      tmpvar_70 = abs(((
        fract((tmpvar_69 + 0.5))
       * 2.0) - 1.0));
      vOscillations_65 = (((
        (tmpvar_70 * tmpvar_70)
       * 
        (3.0 - (2.0 * tmpvar_70))
      ) - 0.5) * 2.0);
      highp float tmpvar_71;
      tmpvar_71 = (vOscillations_65.y * vOscillations_65.z);
      fTarget_68 = 1.0;
      fAmount_67 = tmpvar_71;
      if ((tmpvar_71 < 0.0)) {
        fTarget_68 = -1.0;
        fAmount_67 = -(tmpvar_71);
      };
      fOscillation_66 = (((
        mix (mix (tmpvar_71, fTarget_68, fAmount_67), fTarget_68, fAmount_67)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_65.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_66 = (fOscillation_66 * (1.0 + (vOscillations_65.w * _ST_WindBranchWhip.x)));
      vPos_61 = (FinalPosition_11 + ((vWindVector_64 * fOscillation_66) * _ST_WindBranch.y));
      highp vec4 tmpvar_72;
      tmpvar_72.zw = vec2(0.0, 0.0);
      tmpvar_72.x = ((fTime_62 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_72.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_73;
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      tmpvar_73 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      fAdherenceScale_63 = (1.0 - ((tmpvar_73.x * tmpvar_73.y) * (
        (tmpvar_73.x * tmpvar_73.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_63 = (fAdherenceScale_63 + ((vOscillations_65.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_61 = (vPos_61 + ((
        ((vRotatedBranchAnchor_9 - vPos_61) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_63) * _glesMultiTexCoord0.z));
      vPos_60 = vPos_61;
    } else {
      highp vec3 vPos_75;
      vPos_75 = vPos_60;
      highp float fTime_76;
      highp vec3 vWindVector_77;
      vWindVector_77 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_76 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_78;
      highp float fOscillation_79;
      fOscillation_79 = 1.0;
      highp float fAmount_80;
      highp float fTarget_81;
      highp vec4 tmpvar_82;
      tmpvar_82.w = 0.0;
      tmpvar_82.x = (fTime_76 + _glesMultiTexCoord0.w);
      tmpvar_82.y = ((fTime_76 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_82.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_76 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      vOscillations_78 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      highp float tmpvar_84;
      tmpvar_84 = (vOscillations_78.y * vOscillations_78.z);
      fTarget_81 = 1.0;
      fAmount_80 = tmpvar_84;
      if ((tmpvar_84 < 0.0)) {
        fTarget_81 = -1.0;
        fAmount_80 = -(tmpvar_84);
      };
      fOscillation_79 = (((
        mix (mix (tmpvar_84, fTarget_81, fAmount_80), fTarget_81, fAmount_80)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_78.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_75 = (vPos_60 + ((vWindVector_77 * fOscillation_79) * _ST_WindBranch.y));
      vPos_60 = vPos_75;
    };
    FinalPosition_11 = vPos_60;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_85;
    vPos_85 = FinalPosition_11;
    highp float fMoveAmount_86;
    highp float fAdjust_87;
    highp float fLength_88;
    fLength_88 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_89;
    tmpvar_89 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_87 = tmpvar_89;
    if ((tmpvar_89 != 0.0)) {
      fAdjust_87 = pow (tmpvar_89, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_90;
    tmpvar_90.zw = vec2(0.0, 0.0);
    tmpvar_90.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_90.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_91;
    highp vec4 tmpvar_92;
    tmpvar_92 = abs(((
      fract((tmpvar_90 + 0.5))
     * 2.0) - 1.0));
    tmpvar_91 = (((
      (tmpvar_92 * tmpvar_92)
     * 
      (3.0 - (2.0 * tmpvar_92))
    ) - 0.5) * 2.0);
    fMoveAmount_86 = ((_ST_WindGlobal.y * (tmpvar_91.x + 
      (tmpvar_91.y * tmpvar_91.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_86 = (fMoveAmount_86 * fAdjust_87);
    vPos_85.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_86));
    vPos_85 = (normalize(vPos_85) * fLength_88);
    FinalPosition_11 = vPos_85;
  };
  tmpvar_7.xyz = FinalPosition_11;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_93;
  highp vec3 viewN_94;
  highp vec3 viewpos_95;
  viewpos_95 = (glstate_matrix_modelview0 * tmpvar_7).xyz;
  highp mat3 tmpvar_96;
  tmpvar_96[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_96[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_96[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_94 = normalize((tmpvar_96 * tmpvar_8));
  lowp vec3 tmpvar_97;
  tmpvar_97 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_93 = tmpvar_97;
  highp vec3 toLight_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (unity_LightPosition[0].xyz - (viewpos_95 * unity_LightPosition[0].w));
  highp float tmpvar_100;
  tmpvar_100 = dot (tmpvar_99, tmpvar_99);
  toLight_98 = (tmpvar_99 * inversesqrt(tmpvar_100));
  lightColor_93 = (lightColor_93 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_94, toLight_98))
   * 
    ((1.0/((1.0 + (tmpvar_100 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_98, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (unity_LightPosition[1].xyz - (viewpos_95 * unity_LightPosition[1].w));
  highp float tmpvar_103;
  tmpvar_103 = dot (tmpvar_102, tmpvar_102);
  toLight_101 = (tmpvar_102 * inversesqrt(tmpvar_103));
  lightColor_93 = (lightColor_93 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_94, toLight_101))
   * 
    ((1.0/((1.0 + (tmpvar_103 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_101, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_104;
  highp vec3 tmpvar_105;
  tmpvar_105 = (unity_LightPosition[2].xyz - (viewpos_95 * unity_LightPosition[2].w));
  highp float tmpvar_106;
  tmpvar_106 = dot (tmpvar_105, tmpvar_105);
  toLight_104 = (tmpvar_105 * inversesqrt(tmpvar_106));
  lightColor_93 = (lightColor_93 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_94, toLight_104))
   * 
    ((1.0/((1.0 + (tmpvar_106 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_104, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_107;
  highp vec3 tmpvar_108;
  tmpvar_108 = (unity_LightPosition[3].xyz - (viewpos_95 * unity_LightPosition[3].w));
  highp float tmpvar_109;
  tmpvar_109 = dot (tmpvar_108, tmpvar_108);
  toLight_107 = (tmpvar_108 * inversesqrt(tmpvar_109));
  lightColor_93 = (lightColor_93 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_94, toLight_107))
   * 
    ((1.0/((1.0 + (tmpvar_109 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_107, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_93);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
lowp vec3 t10_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
mediump float t16_45;
highp float t46;
highp int ti46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
void main()
{
    //Instruction 55475
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 55476
    //MUL
    t16_45 = _WindEnabled * _WindQuality;
    //Instruction 55477
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_45)).xy;
    //Instruction 55478
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55479
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 55480
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 55481
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 55482
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 55483
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 55484
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 55485
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 55486
    //LT
    tb31 = t16_45<5.000000;
    //Instruction 55487
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 55488
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 55489
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 55490
        //EQ
        tb31 = t16_45==4.000000;
        //Instruction 55491
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 55492
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 55493
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 55494
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 55495
        //FRC
        t16.x = fract(t16.x);
        //Instruction 55496
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 55497
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 55498
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 55499
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 55500
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 55501
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 55502
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 55503
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 55504
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 55505
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 55506
        //IF
        if(tb31){
            //Instruction 55507
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 55508
            //FRC
            t4 = fract(t4);
            //Instruction 55509
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55510
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 55511
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 55512
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 55513
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 55514
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 55515
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 55516
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 55517
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55518
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 55519
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55520
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 55521
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 55522
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 55523
            //SQRT
            t47 = sqrt(t47);
            //Instruction 55524
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 55525
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 55526
            //MUL
            t48 = t48 * t5.x;
            //Instruction 55527
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 55528
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 55529
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 55530
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 55531
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 55532
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 55533
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 55534
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 55535
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 55536
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 55537
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 55538
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 55539
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 55540
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 55541
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 55542
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 55543
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 55544
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 55545
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 55546
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 55547
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 55548
            //SQRT
            t48 = sqrt(t48);
            //Instruction 55549
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 55550
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 55551
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 55552
            //MUL
            t35 = t48 * t5.x;
            //Instruction 55553
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 55554
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 55555
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 55556
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 55557
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 55558
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 55559
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 55560
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 55561
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 55562
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55563
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 55564
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55565
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 55566
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 55567
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 55568
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 55569
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 55570
            //LOG
            t46 = log2(t46);
            //Instruction 55571
            //MUL
            t31 = t46 * t16.y;
            //Instruction 55572
            //EXP
            t31 = exp2(t31);
            //Instruction 55573
            //MUL
            t46 = t5.y * t48;
            //Instruction 55574
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 55575
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 55576
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 55577
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 55578
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 55579
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 55580
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 55581
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 55582
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 55583
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 55584
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 55585
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 55586
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 55587
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 55588
            //MOV
            t10.z = t11.x;
            //Instruction 55589
            //MOV
            t10.w = t9.x;
            //Instruction 55590
            //MOV
            t12.z = t8.y;
            //Instruction 55591
            //MOV
            t12.w = t13.y;
            //Instruction 55592
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 55593
            //MOV
            t13.w = t12.y;
            //Instruction 55594
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 55595
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 55596
            //MOV
            t9.w = t10.y;
            //Instruction 55597
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 55598
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 55599
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 55600
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 55601
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 55602
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 55603
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 55604
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 55605
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 55606
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 55607
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 55608
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 55609
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 55610
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 55611
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 55612
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 55613
        //ELSE
        } else {
            //Instruction 55614
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 55615
        //ENDIF
        }
        //Instruction 55616
    //ELSE
    } else {
        //Instruction 55617
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 55618
    //ENDIF
    }
    //Instruction 55619
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 55620
    //GE
    tb17 = t16_45>=3.000000;
    //Instruction 55621
    //IF
    if(tb17){
        //Instruction 55622
        //EQ
        tb17 = t16_45==5.000000;
        //Instruction 55623
        //IF
        if(tb17){
            //Instruction 55624
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55625
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 55626
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 55627
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 55628
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 55629
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 55630
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55631
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 55632
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55633
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 55634
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55635
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 55636
            //ADD
            t6.x = t17.x + in_TEXCOORD0.w;
            //Instruction 55637
            //MAD
            t6.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55638
            //MUL
            t47 = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 55639
            //MUL
            t6.z = t47 * 0.500000;
            //Instruction 55640
            //ADD
            t6.w = t6.x + (-in_TEXCOORD0.z);
            //Instruction 55641
            //ADD
            t6 = t6 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55642
            //FRC
            t6 = fract(t6);
            //Instruction 55643
            //MAD
            t6 = t6 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55644
            //MUL
            t7 = abs(t6) * abs(t6);
            //Instruction 55645
            //MAD
            t6 = -abs(t6) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55646
            //MAD
            t6 = t7 * t6 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55647
            //ADD
            t6 = t6 + t6;
            //Instruction 55648
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 55649
            //LT
            tb47 = t7.w<0.0;
            //Instruction 55650
            //MOV
            t7.y = (-t7.w);
            //Instruction 55651
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 55652
            //MOVC
            t7.xy = (bool(tb47)) ? t7.xy : t7.zw;
            //Instruction 55653
            //MAD
            t47 = (-t6.y) * t6.z + t7.x;
            //Instruction 55654
            //MAD
            t47 = t7.y * t47 + t7.w;
            //Instruction 55655
            //ADD
            t48 = (-t47) + t7.x;
            //Instruction 55656
            //MAD
            t47 = t7.y * t48 + t47;
            //Instruction 55657
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 55658
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55659
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55660
            //MUL
            t49 = t49 * t6.x;
            //Instruction 55661
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 55662
            //MAD
            t48 = t6.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 55663
            //MUL
            t47 = t47 * t48;
            //Instruction 55664
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 55665
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 55666
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55667
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 55668
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 55669
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 55670
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 55671
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55672
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 55673
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55674
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 55675
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 55676
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 55677
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 55678
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 55679
            //MUL
            t47 = t6.w * _ST_WindVector.w;
            //Instruction 55680
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 55681
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 55682
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 55683
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 55684
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 55685
        //ELSE
        } else {
            //Instruction 55686
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55687
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55688
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55689
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55690
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55691
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 55692
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 55693
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55694
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 55695
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 55696
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 55697
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 55698
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55699
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 55700
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 55701
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 55702
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 55703
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 55704
            //LT
            tb17 = t6.w<0.0;
            //Instruction 55705
            //MOV
            t6.y = (-t6.w);
            //Instruction 55706
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 55707
            //MOVC
            t17.xz = (bool(tb17)) ? t6.xy : t6.zw;
            //Instruction 55708
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 55709
            //MAD
            t48 = t17.z * t48 + t6.w;
            //Instruction 55710
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 55711
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 55712
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 55713
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 55714
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 55715
            //MUL
            t48 = t48 * t5.x;
            //Instruction 55716
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 55717
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 55718
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 55719
        //ENDIF
        }
        //Instruction 55720
    //ENDIF
    }
    //Instruction 55721
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 55722
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 55723
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 55724
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 55725
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 55726
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 55727
    //NE
    tb48 = t47!=0.0;
    //Instruction 55728
    //LOG
    t4.x = log2(t47);
    //Instruction 55729
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 55730
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 55731
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 55732
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 55733
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 55734
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 55735
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 55736
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 55737
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 55738
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 55739
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 55740
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 55741
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 55742
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 55743
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 55744
    //MUL
    t47 = t47 * t48;
    //Instruction 55745
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 55746
    //MOV
    t4.y = t3.y;
    //Instruction 55747
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 55748
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 55749
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 55750
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 55751
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 55752
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 55753
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t3.xyz;
    //Instruction 55754
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t2.zzz + t3.xyz;
    //Instruction 55755
    //MAD
    t3.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 55756
    //MUL
    t4.xyz = t16.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 55757
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t16.xxx + t4.xyz;
    //Instruction 55758
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * t16.zzz + t1.xyz;
    //Instruction 55759
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 55760
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 55761
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 55762
    //MUL
    t10_14.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 55763
    //MOV
    t4.xyz = t10_14.xyz;
    //Instruction 55764
    //MOV
    ti46 = 0x0;
    //Instruction 55765
    //LOOP
    while(true){
        //Instruction 55766
        //IGE
        tb47 = ti46>=0x4;
        //Instruction 55767
        //BREAKC
        if(tb47){break;}
        //Instruction 55768
        //MAD
        t5.xyz = (-t3.xyz) * unity_LightPosition[ti46 + 0].www + unity_LightPosition[ti46 + 0].xyz;
        //Instruction 55769
        //DP3
        t47 = dot(t5.xyz, t5.xyz);
        //Instruction 55770
        //RSQ
        t48 = inversesqrt(t47);
        //Instruction 55771
        //MUL
        t5.xyz = vec3(t48) * t5.xyz;
        //Instruction 55772
        //MAD
        t47 = t47 * unity_LightAtten[ti46 + 0].z + 1.0;
        //Instruction 55773
        //DIV
        t47 = float(1.0) / t47;
        //Instruction 55774
        //DP3
        t48 = dot(t5.xyz, unity_SpotDirection[ti46 + 0].xyz);
        //Instruction 55775
        //MAX
        t48 = max(t48, 0.0);
        //Instruction 55776
        //ADD
        t48 = t48 + (-unity_LightAtten[ti46 + 0].x);
        //Instruction 55777
        //MUL
        t48 = t48 * unity_LightAtten[ti46 + 0].y;
        t48 = clamp(t48, 0.0, 1.0);
        //Instruction 55778
        //MUL
        t47 = t47 * t48;
        //Instruction 55779
        //DP3
        t48 = dot(t1.xyz, t5.xyz);
        //Instruction 55780
        //MAX
        t48 = max(t48, 0.0);
        //Instruction 55781
        //MUL
        t47 = t47 * t48;
        //Instruction 55782
        //MAD
        t4.xyz = unity_LightColor[ti46 + 0].xyz * vec3(t47) + t4.xyz;
        //Instruction 55783
        //IADD
        ti46 = ti46 + 0x1;
        //Instruction 55784
    //ENDLOOP
    }
    //Instruction 55785
    //MUL
    t1.xyz = t16_0.xyz * t4.xyz;
    //Instruction 55786
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 55787
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 55788
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 55789
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 55790
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 55791
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 55792
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 55793
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 55794
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    //Instruction 55467
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 55468
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 55469
    //LT
    tb2 = t10_1<0.0;
    //Instruction 55470
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 55471
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 55472
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 55473
    //MOV
    SV_Target0 = t16_1;
    //Instruction 55474
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_4;
  lowp vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6.xy = tmpvar_3.xy;
  tmpvar_5.w = _Color.w;
  tmpvar_5.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].x;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].y;
  tmpvar_7 = clamp (((
    fract(((tmpvar_8 + tmpvar_9) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_7;
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_14;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_13.zxy) - (tmpvar_28.zxy * vRotatedWindVector_13.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_13, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_11 = vDirection_22;
    FinalPosition_14 = vPos_21;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_14;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_14;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_14 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_12 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_8 + tmpvar_9));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_14 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_14;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_8 + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_9 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_14 = vPos_87;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_4.w = tmpvar_5.w;
  highp vec3 lightColor_95;
  highp vec3 viewN_96;
  highp vec3 viewpos_97;
  viewpos_97 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_98[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_98[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_96 = normalize((tmpvar_98 * tmpvar_11));
  lowp vec3 tmpvar_99;
  tmpvar_99 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_95 = tmpvar_99;
  highp vec3 toLight_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (unity_LightPosition[0].xyz - (viewpos_97 * unity_LightPosition[0].w));
  highp float tmpvar_102;
  tmpvar_102 = dot (tmpvar_101, tmpvar_101);
  toLight_100 = (tmpvar_101 * inversesqrt(tmpvar_102));
  lightColor_95 = (lightColor_95 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_96, toLight_100))
   * 
    ((1.0/((1.0 + (tmpvar_102 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_100, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_103;
  highp vec3 tmpvar_104;
  tmpvar_104 = (unity_LightPosition[1].xyz - (viewpos_97 * unity_LightPosition[1].w));
  highp float tmpvar_105;
  tmpvar_105 = dot (tmpvar_104, tmpvar_104);
  toLight_103 = (tmpvar_104 * inversesqrt(tmpvar_105));
  lightColor_95 = (lightColor_95 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_96, toLight_103))
   * 
    ((1.0/((1.0 + (tmpvar_105 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_103, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_106;
  highp vec3 tmpvar_107;
  tmpvar_107 = (unity_LightPosition[2].xyz - (viewpos_97 * unity_LightPosition[2].w));
  highp float tmpvar_108;
  tmpvar_108 = dot (tmpvar_107, tmpvar_107);
  toLight_106 = (tmpvar_107 * inversesqrt(tmpvar_108));
  lightColor_95 = (lightColor_95 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_96, toLight_106))
   * 
    ((1.0/((1.0 + (tmpvar_108 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_106, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_109;
  highp vec3 tmpvar_110;
  tmpvar_110 = (unity_LightPosition[3].xyz - (viewpos_97 * unity_LightPosition[3].w));
  highp float tmpvar_111;
  tmpvar_111 = dot (tmpvar_110, tmpvar_110);
  toLight_109 = (tmpvar_110 * inversesqrt(tmpvar_111));
  lightColor_95 = (lightColor_95 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_96, toLight_109))
   * 
    ((1.0/((1.0 + (tmpvar_111 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_109, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_4.xyz = (tmpvar_5.xyz * lightColor_95);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_Input_color = tmpvar_4;
  xlv_Input_interpolator1 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t17;
bvec2 tb17;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t33;
highp int ti33;
highp vec2 t37;
highp vec2 t39;
mediump float t16_48;
highp float t49;
highp int ti49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 55812
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 55813
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 55814
    //ADD
    t17.x = t1.x + _Object2World[3].z;
    //Instruction 55815
    //ADD
    t33.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 55816
    //ADD
    t17.y = t33.x + in_NORMAL0.x;
    //Instruction 55817
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 55818
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 55819
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 55820
    //MUL
    t2.z = t17.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 55821
    //MUL
    t16_48 = _WindEnabled * _WindQuality;
    //Instruction 55822
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_48)).xy;
    //Instruction 55823
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55824
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 55825
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 55826
    //DP3
    t49 = dot(t3.xyz, t3.xyz);
    //Instruction 55827
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 55828
    //MUL
    t3.xyz = vec3(t49) * t3.xyz;
    //Instruction 55829
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 55830
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 55831
    //LT
    tb49 = t16_48<5.000000;
    //Instruction 55832
    //AND
    ti33 = int(uint(tb49) & uint(tb17.y));
    //Instruction 55833
    //IF
    if((uint(ti33))!=uint(0u)){
        //Instruction 55834
        //ADD
        t33.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 55835
        //EQ
        tb49 = t16_48==4.000000;
        //Instruction 55836
        //LT
        tb50 = 0.0<in_TEXCOORD2.w;
        //Instruction 55837
        //MOVC
        t5.xy = (bool(tb50)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 55838
        //ADD
        t33.x = t33.x + t5.x;
        //Instruction 55839
        //ADD
        t33.x = t33.x + 0.500000;
        //Instruction 55840
        //FRC
        t33.x = fract(t33.x);
        //Instruction 55841
        //MAD
        t33.x = t33.x * 2.000000 + -1.0;
        //Instruction 55842
        //MUL
        t51 = abs(t33.x) * abs(t33.x);
        //Instruction 55843
        //MAD
        t33.x = -abs(t33.x) * 2.000000 + 3.000000;
        //Instruction 55844
        //MAD
        t33.x = t51 * t33.x + -0.500000;
        //Instruction 55845
        //DP2
        t33.x = dot(t33.xx, t5.yy);
        //Instruction 55846
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 55847
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 55848
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 55849
        //MUL
        t5.xyz = t33.xxx * t5.xyz;
        //Instruction 55850
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 55851
        //IF
        if(tb49){
            //Instruction 55852
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 55853
            //FRC
            t5 = fract(t5);
            //Instruction 55854
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55855
            //MOVC
            t6 = (bool(tb50)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 55856
            //MOVC
            t7.xyz = (bool(tb50)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 55857
            //MUL
            t33.x = t5.w * 3.000000;
            //Instruction 55858
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 55859
            //MAD
            t8.x = t6.x * 0.750000 + (-t33.x);
            //Instruction 55860
            //ADD
            t33.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 55861
            //FRC
            t33.xy = fract(t33.xy);
            //Instruction 55862
            //MAD
            t33.xy = t33.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55863
            //MUL
            t8.xy = abs(t33.xy) * abs(t33.xy);
            //Instruction 55864
            //MAD
            t33.xy = -abs(t33.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55865
            //MAD
            t33.xy = t8.xy * t33.xy + vec2(-0.500000, -0.500000);
            //Instruction 55866
            //ADD
            t33.xy = t33.xy + t33.xy;
            //Instruction 55867
            //DP3
            t50 = dot(t4.xyz, t4.xyz);
            //Instruction 55868
            //SQRT
            t50 = sqrt(t50);
            //Instruction 55869
            //MAD
            t51 = t33.x * t33.x + t33.y;
            //Instruction 55870
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 55871
            //MUL
            t51 = t51 * t52;
            //Instruction 55872
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 55873
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 55874
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 55875
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 55876
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 55877
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 55878
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 55879
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 55880
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 55881
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 55882
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 55883
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 55884
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 55885
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 55886
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 55887
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 55888
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 55889
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 55890
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 55891
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 55892
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 55893
            //SQRT
            t51 = sqrt(t51);
            //Instruction 55894
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 55895
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 55896
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 55897
            //MUL
            t6.x = t51 * t52;
            //Instruction 55898
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 55899
            //LT
            tb19 = t19<(-t19);
            //Instruction 55900
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 55901
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 55902
            //MAD
            t33.x = (-t33.y) * t33.y + t33.x;
            //Instruction 55903
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 55904
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 55905
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 55906
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 55907
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 55908
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 55909
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 55910
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 55911
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 55912
            //MUL
            t49 = t6.z * t6.z;
            //Instruction 55913
            //MAD
            t49 = t49 * t6.x + 1.0;
            //Instruction 55914
            //MUL
            t49 = t49 * 0.500000;
            t49 = clamp(t49, 0.0, 1.0);
            //Instruction 55915
            //LOG
            t49 = log2(t49);
            //Instruction 55916
            //MUL
            t49 = t49 * t7.y;
            //Instruction 55917
            //EXP
            t49 = exp2(t49);
            //Instruction 55918
            //MUL
            t33.x = t6.y * t33.x;
            //Instruction 55919
            //MAD
            t33.x = t19 * t6.w + t33.x;
            //Instruction 55920
            //MAD
            t33.x = t7.x * t49 + t33.x;
            //Instruction 55921
            //MUL
            t33.x = t33.x * in_TEXCOORD2.x;
            //Instruction 55922
            //SINCOS
            t6.x = sin(t33.x);
            t7.x = cos(t33.x);
            //Instruction 55923
            //ADD
            t33.x = (-t7.x) + 1.0;
            //Instruction 55924
            //MUL
            t8 = vec4(t5.y * t33.x, t5.y * t33.x, t5.y * t33.x, t5.z * t33.x);
            //Instruction 55925
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 55926
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 55927
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 55928
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 55929
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 55930
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 55931
            //MUL
            t49 = t5.x * t5.x;
            //Instruction 55932
            //MAD
            t9.w = t49 * t33.x + t7.x;
            //Instruction 55933
            //MOV
            t11.z = t12.x;
            //Instruction 55934
            //MOV
            t11.w = t10.x;
            //Instruction 55935
            //MOV
            t13.z = t9.y;
            //Instruction 55936
            //MOV
            t13.w = t14.y;
            //Instruction 55937
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 55938
            //MOV
            t14.w = t13.y;
            //Instruction 55939
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 55940
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 55941
            //MOV
            t10.w = t11.y;
            //Instruction 55942
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 55943
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 55944
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 55945
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 55946
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 55947
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 55948
            //DP3
            t33.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 55949
            //DP3
            t33.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 55950
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 55951
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 55952
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 55953
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 55954
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 55955
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 55956
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 55957
            //MUL
            t4.xyz = vec3(t50) * t5.xyz;
            //Instruction 55958
        //ELSE
        } else {
            //Instruction 55959
            //MOV
            t33.xy = in_NORMAL0.xy;
            //Instruction 55960
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 55961
        //ENDIF
        }
        //Instruction 55962
    //ELSE
    } else {
        //Instruction 55963
        //MOV
        t33.xy = in_NORMAL0.xy;
        //Instruction 55964
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 55965
    //ENDIF
    }
    //Instruction 55966
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 55967
    //GE
    tb50 = t16_48>=3.000000;
    //Instruction 55968
    //IF
    if(tb50){
        //Instruction 55969
        //EQ
        tb50 = t16_48==5.000000;
        //Instruction 55970
        //IF
        if(tb50){
            //Instruction 55971
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55972
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 55973
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 55974
            //DP3
            t50 = dot(t5.xyz, t5.xyz);
            //Instruction 55975
            //RSQ
            t50 = inversesqrt(t50);
            //Instruction 55976
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 55977
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55978
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 55979
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55980
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 55981
            //ADD
            t50 = t1.x + _ST_WindBranch.x;
            //Instruction 55982
            //ADD
            t7.x = t50 + in_TEXCOORD0.w;
            //Instruction 55983
            //MAD
            t7.y = t50 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55984
            //MUL
            t51 = t7.x * _ST_WindBranchTwitch.y;
            //Instruction 55985
            //MUL
            t7.z = t51 * 0.500000;
            //Instruction 55986
            //ADD
            t7.w = t7.x + (-in_TEXCOORD0.z);
            //Instruction 55987
            //ADD
            t7 = t7 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55988
            //FRC
            t7 = fract(t7);
            //Instruction 55989
            //MAD
            t7 = t7 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55990
            //MUL
            t8 = abs(t7) * abs(t7);
            //Instruction 55991
            //MAD
            t7 = -abs(t7) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55992
            //MAD
            t7 = t8 * t7 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55993
            //ADD
            t7 = t7 + t7;
            //Instruction 55994
            //MUL
            t8.w = t7.z * t7.y;
            //Instruction 55995
            //LT
            tb51 = t8.w<0.0;
            //Instruction 55996
            //MOV
            t8.y = (-t8.w);
            //Instruction 55997
            //MOV
            t8.xz = vec2(-1.0, 1.0);
            //Instruction 55998
            //MOVC
            t8.xy = (bool(tb51)) ? t8.xy : t8.zw;
            //Instruction 55999
            //MAD
            t51 = (-t7.y) * t7.z + t8.x;
            //Instruction 56000
            //MAD
            t51 = t8.y * t51 + t8.w;
            //Instruction 56001
            //ADD
            t52 = (-t51) + t8.x;
            //Instruction 56002
            //MAD
            t51 = t8.y * t52 + t51;
            //Instruction 56003
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 56004
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56005
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56006
            //MUL
            t53 = t53 * t7.x;
            //Instruction 56007
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 56008
            //MAD
            t52 = t7.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56009
            //MUL
            t51 = t51 * t52;
            //Instruction 56010
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 56011
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 56012
            //MAD
            t7.x = t50 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56013
            //MUL
            t50 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56014
            //MAD
            t7.y = t50 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56015
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 56016
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 56017
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56018
            //MUL
            t8.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 56019
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56020
            //MAD
            t7.xy = t8.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 56021
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 56022
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 56023
            //MUL
            t50 = t7.x * t7.y;
            //Instruction 56024
            //MAD
            t50 = (-t50) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56025
            //MUL
            t51 = t7.w * _ST_WindVector.w;
            //Instruction 56026
            //MAD
            t50 = t51 * _ST_WindBranchWhip.x + t50;
            //Instruction 56027
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 56028
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56029
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 56030
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 56031
        //ELSE
        } else {
            //Instruction 56032
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56033
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56034
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56035
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 56036
            //ADD
            t1.x = t1.x + _ST_WindBranch.x;
            //Instruction 56037
            //ADD
            t6.x = t1.x + in_TEXCOORD0.w;
            //Instruction 56038
            //MAD
            t6.y = t1.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56039
            //MUL
            t1.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 56040
            //MUL
            t6.z = t1.x * 0.500000;
            //Instruction 56041
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56042
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 56043
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56044
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 56045
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56046
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56047
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 56048
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 56049
            //LT
            tb1 = t7.w<0.0;
            //Instruction 56050
            //MOV
            t7.y = (-t7.w);
            //Instruction 56051
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 56052
            //MOVC
            t7.xy = (bool(tb1)) ? t7.xy : t7.zw;
            //Instruction 56053
            //MAD
            t1.x = (-t6.y) * t6.z + t7.x;
            //Instruction 56054
            //MAD
            t1.x = t7.y * t1.x + t7.w;
            //Instruction 56055
            //ADD
            t50 = (-t1.x) + t7.x;
            //Instruction 56056
            //MAD
            t1.x = t7.y * t50 + t1.x;
            //Instruction 56057
            //MUL
            t1.x = t1.x * _ST_WindBranchTwitch.x;
            //Instruction 56058
            //ADD
            t50 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56059
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56060
            //MUL
            t51 = t51 * t6.x;
            //Instruction 56061
            //MAD
            t1.x = t1.x * t50 + t51;
            //Instruction 56062
            //MUL
            t5.xyz = t1.xxx * t5.xyz;
            //Instruction 56063
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 56064
        //ENDIF
        }
        //Instruction 56065
    //ENDIF
    }
    //Instruction 56066
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 56067
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 56068
    //DIV
    t50 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56069
    //MAD
    t50 = (-t50) * 0.250000 + t4.y;
    //Instruction 56070
    //MAX
    t50 = max(t50, 0.0);
    //Instruction 56071
    //MUL
    t50 = t50 * _ST_WindGlobal.z;
    //Instruction 56072
    //NE
    tb51 = t50!=0.0;
    //Instruction 56073
    //LOG
    t52 = log2(t50);
    //Instruction 56074
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 56075
    //EXP
    t52 = exp2(t52);
    //Instruction 56076
    //MOVC
    t50 = (tb51) ? t52 : t50;
    //Instruction 56077
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56078
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56079
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 56080
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 56081
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56082
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 56083
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56084
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 56085
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 56086
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 56087
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56088
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 56089
    //MUL
    t50 = t50 * t51;
    //Instruction 56090
    //MAD
    t5.xz = t3.xz * vec2(t50) + t4.xz;
    //Instruction 56091
    //MOV
    t5.y = t4.y;
    //Instruction 56092
    //DP3
    t50 = dot(t5.xyz, t5.xyz);
    //Instruction 56093
    //RSQ
    t50 = inversesqrt(t50);
    //Instruction 56094
    //MUL
    t3.xzw = vec3(t50) * t5.xyz;
    //Instruction 56095
    //MUL
    t3.xzw = t1.xxx * t3.xzw;
    //Instruction 56096
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 56097
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_modelview0[1].xyz;
    //Instruction 56098
    //MAD
    t4.xyz = glstate_matrix_modelview0[0].xyz * t3.xxx + t4.xyz;
    //Instruction 56099
    //MAD
    t4.xyz = glstate_matrix_modelview0[2].xyz * t3.www + t4.xyz;
    //Instruction 56100
    //MAD
    t4.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 56101
    //MUL
    t1.xyw = t33.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56102
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t33.xxx + t1.xyw;
    //Instruction 56103
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * vec3(t19) + t1.xyz;
    //Instruction 56104
    //DP3
    t49 = dot(t1.xyz, t1.xyz);
    //Instruction 56105
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 56106
    //MUL
    t1.xyz = vec3(t49) * t1.xyz;
    //Instruction 56107
    //MUL
    t10_15.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56108
    //MOV
    t5.xyz = t10_15.xyz;
    //Instruction 56109
    //MOV
    ti49 = 0x0;
    //Instruction 56110
    //LOOP
    while(true){
        //Instruction 56111
        //IGE
        tb50 = ti49>=0x4;
        //Instruction 56112
        //BREAKC
        if(tb50){break;}
        //Instruction 56113
        //MAD
        t6.xyz = (-t4.xyz) * unity_LightPosition[ti49 + 0].www + unity_LightPosition[ti49 + 0].xyz;
        //Instruction 56114
        //DP3
        t50 = dot(t6.xyz, t6.xyz);
        //Instruction 56115
        //RSQ
        t19 = inversesqrt(t50);
        //Instruction 56116
        //MUL
        t6.xyz = vec3(t19) * t6.xyz;
        //Instruction 56117
        //MAD
        t50 = t50 * unity_LightAtten[ti49 + 0].z + 1.0;
        //Instruction 56118
        //DIV
        t50 = float(1.0) / t50;
        //Instruction 56119
        //DP3
        t19 = dot(t6.xyz, unity_SpotDirection[ti49 + 0].xyz);
        //Instruction 56120
        //MAX
        t19 = max(t19, 0.0);
        //Instruction 56121
        //ADD
        t19 = t19 + (-unity_LightAtten[ti49 + 0].x);
        //Instruction 56122
        //MUL
        t19 = t19 * unity_LightAtten[ti49 + 0].y;
        t19 = clamp(t19, 0.0, 1.0);
        //Instruction 56123
        //MUL
        t50 = t50 * t19;
        //Instruction 56124
        //DP3
        t19 = dot(t1.xyz, t6.xyz);
        //Instruction 56125
        //MAX
        t19 = max(t19, 0.0);
        //Instruction 56126
        //MUL
        t50 = t50 * t19;
        //Instruction 56127
        //MAD
        t5.xyz = unity_LightColor[ti49 + 0].xyz * vec3(t50) + t5.xyz;
        //Instruction 56128
        //IADD
        ti49 = ti49 + 0x1;
        //Instruction 56129
    //ENDLOOP
    }
    //Instruction 56130
    //MUL
    t1.xyz = t16_0.xyz * t5.xyz;
    //Instruction 56131
    //MUL
    t0 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 56132
    //MAD
    t0 = glstate_matrix_mvp[0] * t3.xxxx + t0;
    //Instruction 56133
    //MAD
    t0 = glstate_matrix_mvp[2] * t3.wwww + t0;
    //Instruction 56134
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56135
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 56136
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56137
    //MOV
    t2.xy = in_TEXCOORD0.xy;
    //Instruction 56138
    //MOV
    vs_TEXCOORD2.xyz = t2.xyz;
    //Instruction 56139
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    //Instruction 55795
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 55796
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 55797
    //LT
    tb2 = t10_1<0.0;
    //Instruction 55798
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 55799
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 55800
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 55801
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 55802
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 55803
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 55804
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 55805
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 55806
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 55807
    //MAD
    t16_2 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 55808
    //MUL
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 55809
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 55810
    //MOV
    SV_Target0 = t16_0;
    //Instruction 55811
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_6;
  tmpvar_6 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_9 = tmpvar_14;
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_14;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_16;
      vPos_16 = tmpvar_14;
      highp float fTime_17;
      highp float fAdherenceScale_18;
      highp vec3 vWindVector_19;
      vWindVector_19 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_17 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_20;
      highp float fOscillation_21;
      fOscillation_21 = 1.0;
      highp float fAmount_22;
      highp float fTarget_23;
      highp vec4 tmpvar_24;
      tmpvar_24.x = (fTime_17 + _glesMultiTexCoord0.w);
      tmpvar_24.y = ((fTime_17 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_24.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_17 + _glesMultiTexCoord0.w));
      tmpvar_24.w = ((fTime_17 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_24 + 0.5))
       * 2.0) - 1.0));
      vOscillations_20 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      highp float tmpvar_26;
      tmpvar_26 = (vOscillations_20.y * vOscillations_20.z);
      fTarget_23 = 1.0;
      fAmount_22 = tmpvar_26;
      if ((tmpvar_26 < 0.0)) {
        fTarget_23 = -1.0;
        fAmount_22 = -(tmpvar_26);
      };
      fOscillation_21 = (((
        mix (mix (tmpvar_26, fTarget_23, fAmount_22), fTarget_23, fAmount_22)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_20.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_21 = (fOscillation_21 * (1.0 + (vOscillations_20.w * _ST_WindBranchWhip.x)));
      vPos_16 = (tmpvar_14 + ((vWindVector_19 * fOscillation_21) * _ST_WindBranch.y));
      highp vec4 tmpvar_27;
      tmpvar_27.zw = vec2(0.0, 0.0);
      tmpvar_27.x = ((fTime_17 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_27.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_28;
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      tmpvar_28 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      fAdherenceScale_18 = (1.0 - ((tmpvar_28.x * tmpvar_28.y) * (
        (tmpvar_28.x * tmpvar_28.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_18 = (fAdherenceScale_18 + ((vOscillations_20.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_16 = (vPos_16 + ((
        ((vRotatedBranchAnchor_7 - vPos_16) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_18) * _glesMultiTexCoord0.z));
      vPos_15 = vPos_16;
    } else {
      highp vec3 vPos_30;
      vPos_30 = vPos_15;
      highp float fTime_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_31 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.w = 0.0;
      tmpvar_37.x = (fTime_31 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_31 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_31 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_30 = (vPos_15 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      vPos_15 = vPos_30;
    };
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_40;
    vPos_40 = FinalPosition_9;
    highp float fMoveAmount_41;
    highp float fAdjust_42;
    highp float fLength_43;
    fLength_43 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_44;
    tmpvar_44 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_42 = tmpvar_44;
    if ((tmpvar_44 != 0.0)) {
      fAdjust_42 = pow (tmpvar_44, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_45;
    tmpvar_45.zw = vec2(0.0, 0.0);
    tmpvar_45.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_45.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_46;
    highp vec4 tmpvar_47;
    tmpvar_47 = abs(((
      fract((tmpvar_45 + 0.5))
     * 2.0) - 1.0));
    tmpvar_46 = (((
      (tmpvar_47 * tmpvar_47)
     * 
      (3.0 - (2.0 * tmpvar_47))
    ) - 0.5) * 2.0);
    fMoveAmount_41 = ((_ST_WindGlobal.y * (tmpvar_46.x + 
      (tmpvar_46.y * tmpvar_46.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_41 = (fMoveAmount_41 * fAdjust_42);
    vPos_40.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_41));
    vPos_40 = (normalize(vPos_40) * fLength_43);
    FinalPosition_9 = vPos_40;
  };
  tmpvar_6.xyz = FinalPosition_9;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_48;
  highp vec3 viewN_49;
  highp vec3 viewpos_50;
  viewpos_50 = (glstate_matrix_modelview0 * tmpvar_6).xyz;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_51[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_51[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_49 = normalize((tmpvar_51 * _glesNormal));
  lowp vec3 tmpvar_52;
  tmpvar_52 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_48 = tmpvar_52;
  highp vec3 toLight_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[0].xyz - (viewpos_50 * unity_LightPosition[0].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  toLight_53 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_48 = (lightColor_48 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_49, toLight_53))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_53, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[1].xyz - (viewpos_50 * unity_LightPosition[1].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  toLight_56 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_48 = (lightColor_48 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_49, toLight_56))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_56, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[2].xyz - (viewpos_50 * unity_LightPosition[2].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_48 = (lightColor_48 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_49, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (unity_LightPosition[3].xyz - (viewpos_50 * unity_LightPosition[3].w));
  highp float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_63);
  toLight_62 = (tmpvar_63 * inversesqrt(tmpvar_64));
  lightColor_48 = (lightColor_48 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_49, toLight_62))
   * 
    ((1.0/((1.0 + (tmpvar_64 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_62, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_48);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5.xyz = tmpvar_1;
  tmpvar_5.w = tmpvar_2;
  gl_FragData[0] = tmpvar_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
mediump float t16_24;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
void main()
{
    //Instruction 55954
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 55955
    //MUL
    t16_24 = _WindEnabled * _WindQuality;
    //Instruction 55956
    //LT
    tb1 = 0.0<t16_24;
    //Instruction 55957
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 55958
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 55959
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 55960
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 55961
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 55962
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 55963
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 55964
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 55965
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 55966
    //GE
    tb25 = t16_24>=3.000000;
    //Instruction 55967
    //IF
    if(tb25){
        //Instruction 55968
        //EQ
        tb25 = t16_24==5.000000;
        //Instruction 55969
        //IF
        if(tb25){
            //Instruction 55970
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 55971
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 55972
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 55973
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 55974
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 55975
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 55976
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 55977
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 55978
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 55979
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 55980
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 55981
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 55982
            //ADD
            t5.x = t25 + in_TEXCOORD0.w;
            //Instruction 55983
            //MAD
            t5.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 55984
            //MUL
            t26 = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 55985
            //MUL
            t5.z = t26 * 0.500000;
            //Instruction 55986
            //ADD
            t5.w = t5.x + (-in_TEXCOORD0.z);
            //Instruction 55987
            //ADD
            t5 = t5 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 55988
            //FRC
            t5 = fract(t5);
            //Instruction 55989
            //MAD
            t5 = t5 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 55990
            //MUL
            t6 = abs(t5) * abs(t5);
            //Instruction 55991
            //MAD
            t5 = -abs(t5) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 55992
            //MAD
            t5 = t6 * t5 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 55993
            //ADD
            t5 = t5 + t5;
            //Instruction 55994
            //MUL
            t6.w = t5.z * t5.y;
            //Instruction 55995
            //LT
            tb26 = t6.w<0.0;
            //Instruction 55996
            //MOV
            t6.y = (-t6.w);
            //Instruction 55997
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 55998
            //MOVC
            t6.xy = (bool(tb26)) ? t6.xy : t6.zw;
            //Instruction 55999
            //MAD
            t26 = (-t5.y) * t5.z + t6.x;
            //Instruction 56000
            //MAD
            t26 = t6.y * t26 + t6.w;
            //Instruction 56001
            //ADD
            t27 = (-t26) + t6.x;
            //Instruction 56002
            //MAD
            t26 = t6.y * t27 + t26;
            //Instruction 56003
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 56004
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56005
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56006
            //MUL
            t28 = t28 * t5.x;
            //Instruction 56007
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 56008
            //MAD
            t27 = t5.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56009
            //MUL
            t26 = t26 * t27;
            //Instruction 56010
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 56011
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 56012
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56013
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56014
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56015
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 56016
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 56017
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56018
            //MUL
            t6.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 56019
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56020
            //MAD
            t5.xy = t6.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 56021
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 56022
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 56023
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 56024
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 56025
            //MUL
            t26 = t5.w * _ST_WindVector.w;
            //Instruction 56026
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 56027
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 56028
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 56029
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56030
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 56031
        //ELSE
        } else {
            //Instruction 56032
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56033
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 56034
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56035
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 56036
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 56037
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 56038
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 56039
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56040
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 56041
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 56042
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 56043
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 56044
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56045
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 56046
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 56047
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 56048
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 56049
            //MUL
            t5.w = t4.z * t4.y;
            //Instruction 56050
            //LT
            tb25 = t5.w<0.0;
            //Instruction 56051
            //MOV
            t5.y = (-t5.w);
            //Instruction 56052
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 56053
            //MOVC
            t5.xy = (bool(tb25)) ? t5.xy : t5.zw;
            //Instruction 56054
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 56055
            //MAD
            t25 = t5.y * t25 + t5.w;
            //Instruction 56056
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 56057
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 56058
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 56059
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56060
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56061
            //MUL
            t27 = t27 * t4.x;
            //Instruction 56062
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 56063
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 56064
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 56065
        //ENDIF
        }
        //Instruction 56066
    //ENDIF
    }
    //Instruction 56067
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 56068
    //SQRT
    t25 = sqrt(t25);
    //Instruction 56069
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 56070
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 56071
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 56072
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 56073
    //NE
    tb3 = t26!=0.0;
    //Instruction 56074
    //LOG
    t11 = log2(t26);
    //Instruction 56075
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 56076
    //EXP
    t11 = exp2(t11);
    //Instruction 56077
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 56078
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 56079
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 56080
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 56081
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 56082
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 56083
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 56084
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 56085
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 56086
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 56087
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 56088
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 56089
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 56090
    //MUL
    t26 = t26 * t3.x;
    //Instruction 56091
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 56092
    //MOV
    t3.y = t2.y;
    //Instruction 56093
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 56094
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 56095
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 56096
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 56097
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 56098
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 56099
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    //Instruction 56100
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.zzz + t2.xyz;
    //Instruction 56101
    //MAD
    t2.xyz = glstate_matrix_modelview0[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 56102
    //MUL
    t3.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
    //Instruction 56103
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 56104
    //MAD
    t3.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 56105
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 56106
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 56107
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 56108
    //MUL
    t10_7.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 56109
    //MOV
    t4.xyz = t10_7.xyz;
    //Instruction 56110
    //MOV
    ti25 = 0x0;
    //Instruction 56111
    //LOOP
    while(true){
        //Instruction 56112
        //IGE
        tb26 = ti25>=0x4;
        //Instruction 56113
        //BREAKC
        if(tb26){break;}
        //Instruction 56114
        //MAD
        t5.xyz = (-t2.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 56115
        //DP3
        t26 = dot(t5.xyz, t5.xyz);
        //Instruction 56116
        //RSQ
        t27 = inversesqrt(t26);
        //Instruction 56117
        //MUL
        t5.xyz = vec3(t27) * t5.xyz;
        //Instruction 56118
        //MAD
        t26 = t26 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 56119
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 56120
        //DP3
        t27 = dot(t5.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 56121
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56122
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 56123
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 56124
        //MUL
        t26 = t26 * t27;
        //Instruction 56125
        //DP3
        t27 = dot(t3.xyz, t5.xyz);
        //Instruction 56126
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 56127
        //MUL
        t26 = t26 * t27;
        //Instruction 56128
        //MAD
        t4.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t26) + t4.xyz;
        //Instruction 56129
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 56130
    //ENDLOOP
    }
    //Instruction 56131
    //MUL
    t2.xyz = t16_0.xyz * t4.xyz;
    //Instruction 56132
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 56133
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 56134
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 56135
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 56136
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 56137
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 56138
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 56139
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 56140
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
void main()
{
    //Instruction 55949
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 55950
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 55951
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 55952
    //MOV
    SV_Target0 = t16_1;
    //Instruction 55953
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec4 tmpvar_3;
  lowp vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  tmpvar_5.xy = tmpvar_2.xy;
  tmpvar_4.w = _Color.w;
  tmpvar_4.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = _Object2World[3].x;
  highp float tmpvar_8;
  tmpvar_8 = _Object2World[3].y;
  tmpvar_6 = clamp (((
    fract(((tmpvar_7 + tmpvar_8) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_5.z = tmpvar_6;
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_10 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_7 + tmpvar_8));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_12 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_12;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_7 + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_8 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_12 = vPos_42;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_3.w = tmpvar_4.w;
  highp vec3 lightColor_50;
  highp vec3 viewN_51;
  highp vec3 viewpos_52;
  viewpos_52 = (glstate_matrix_modelview0 * tmpvar_9).xyz;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_53[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_53[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_51 = normalize((tmpvar_53 * _glesNormal));
  lowp vec3 tmpvar_54;
  tmpvar_54 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_50 = tmpvar_54;
  highp vec3 toLight_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[0].xyz - (viewpos_52 * unity_LightPosition[0].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  toLight_55 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_50 = (lightColor_50 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_51, toLight_55))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_55, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[1].xyz - (viewpos_52 * unity_LightPosition[1].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  toLight_58 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_50 = (lightColor_50 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_51, toLight_58))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_58, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (unity_LightPosition[2].xyz - (viewpos_52 * unity_LightPosition[2].w));
  highp float tmpvar_63;
  tmpvar_63 = dot (tmpvar_62, tmpvar_62);
  toLight_61 = (tmpvar_62 * inversesqrt(tmpvar_63));
  lightColor_50 = (lightColor_50 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_51, toLight_61))
   * 
    ((1.0/((1.0 + (tmpvar_63 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_61, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (unity_LightPosition[3].xyz - (viewpos_52 * unity_LightPosition[3].w));
  highp float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_65);
  toLight_64 = (tmpvar_65 * inversesqrt(tmpvar_66));
  lightColor_50 = (lightColor_50 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_51, toLight_64))
   * 
    ((1.0/((1.0 + (tmpvar_66 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_64, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_3.xyz = (tmpvar_4.xyz * lightColor_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_Input_color = tmpvar_3;
  xlv_Input_interpolator1 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_1;
  tmpvar_7.w = tmpvar_2;
  gl_FragData[0] = tmpvar_7;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
mediump vec3 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_8;
highp vec2 t10;
bool tb10;
highp vec2 t19;
highp vec2 t22;
mediump float t16_27;
highp float t28;
highp int ti28;
highp float t29;
bool tb29;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
void main()
{
    //Instruction 56154
    //MUL
    t16_0.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 56155
    //ADD
    t1.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 56156
    //ADD
    t10.x = t1.x + _Object2World[3].z;
    //Instruction 56157
    //ADD
    t19.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 56158
    //ADD
    t10.y = t19.x + in_NORMAL0.x;
    //Instruction 56159
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 56160
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 56161
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 56162
    //MUL
    t2.z = t10.x * _HueVariation.w;
    t2.z = clamp(t2.z, 0.0, 1.0);
    //Instruction 56163
    //MUL
    t16_27 = _WindEnabled * _WindQuality;
    //Instruction 56164
    //LT
    tb10 = 0.0<t16_27;
    //Instruction 56165
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 56166
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 56167
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 56168
    //DP3
    t19.x = dot(t3.xyz, t3.xyz);
    //Instruction 56169
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 56170
    //MUL
    t19.xy = t19.xx * t3.xz;
    //Instruction 56171
    //AND
    t19.xy = mix(vec2(0.0, 0.0), t19.xy, bvec2(tb10));
    //Instruction 56172
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 56173
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 56174
    //GE
    tb29 = t16_27>=3.000000;
    //Instruction 56175
    //IF
    if(tb29){
        //Instruction 56176
        //EQ
        tb29 = t16_27==5.000000;
        //Instruction 56177
        //IF
        if(tb29){
            //Instruction 56178
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 56179
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 56180
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 56181
            //DP3
            t29 = dot(t4.xyz, t4.xyz);
            //Instruction 56182
            //RSQ
            t29 = inversesqrt(t29);
            //Instruction 56183
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 56184
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 56185
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 56186
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 56187
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 56188
            //ADD
            t29 = t1.x + _ST_WindBranch.x;
            //Instruction 56189
            //ADD
            t6.x = t29 + in_TEXCOORD0.w;
            //Instruction 56190
            //MAD
            t6.y = t29 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 56191
            //MUL
            t30 = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 56192
            //MUL
            t6.z = t30 * 0.500000;
            //Instruction 56193
            //ADD
            t6.w = t6.x + (-in_TEXCOORD0.z);
            //Instruction 56194
            //ADD
            t6 = t6 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 56195
            //FRC
            t6 = fract(t6);
            //Instruction 56196
            //MAD
            t6 = t6 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 56197
            //MUL
            t7 = abs(t6) * abs(t6);
            //Instruction 56198
            //MAD
            t6 = -abs(t6) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 56199
            //MAD
            t6 = t7 * t6 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 56200
            //ADD
            t6 = t6 + t6;
            //Instruction 56201
            //MUL
            t7.w = t6.z * t6.y;
            //Instruction 56202
            //LT
            tb30 = t7.w<0.0;
            //Instruction 56203
            //MOV
            t7.y = (-t7.w);
            //Instruction 56204
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 56205
            //MOVC
            t7.xy = (bool(tb30)) ? t7.xy : t7.zw;
            //Instruction 56206
            //MAD
            t30 = (-t6.y) * t6.z + t7.x;
            //Instruction 56207
            //MAD
            t30 = t7.y * t30 + t7.w;
            //Instruction 56208
            //ADD
            t31 = (-t30) + t7.x;
            //Instruction 56209
            //MAD
            t30 = t7.y * t31 + t30;
            //Instruction 56210
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 56211
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 56212
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 56213
            //MUL
            t32 = t32 * t6.x;
            //Instruction 56214
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 56215
            //MAD
            t31 = t6.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 56216
            //MUL
            t30 = t30 * t31;
            //Instruction 56217
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 56218
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 56219
            //MAD
            t6.x = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56220
            //MUL
            t29 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 56221
            //MAD
            t6.y = t29 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 56222
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 56223
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 56224
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 56225
            //MUL
            t7.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 56226
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 56227
            //MAD
            t6.xy = t7.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 56228
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 56229
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 56230
            //MUL
            t29 = t6.x * t6.y;
            //Instruction 56231
            //MAD
    