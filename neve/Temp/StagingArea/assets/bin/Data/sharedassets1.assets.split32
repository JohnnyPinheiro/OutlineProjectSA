ruction 40358
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 40359
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40360
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40361
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 40362
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 40363
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40364
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 40365
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40366
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 40367
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 40368
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 40369
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40370
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 40371
    //MUL
    t25 = t25 * t27;
    //Instruction 40372
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 40373
    //MOV
    t4.y = t3.y;
    //Instruction 40374
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 40375
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 40376
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 40377
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 40378
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 40379
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 40380
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 40381
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 40382
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 40383
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 40384
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 40385
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 40386
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 40387
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 40388
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 40389
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 40390
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 40391
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 40392
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 40393
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 40394
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 40395
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 40396
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 40397
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 40398
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 40399
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 40400
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 40401
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 40402
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 40403
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 40404
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 40405
    //MOV
    t5.y = _World2Object[0].z;
    //Instruction 40406
    //MOV
    t5.z = _World2Object[1].z;
    //Instruction 40407
    //MOV
    t5.x = _World2Object[2].z;
    //Instruction 40408
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 40409
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 40410
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 40411
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 40412
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 40413
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 40414
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 40415
    //DP3
    t24 = dot(t5.xyz, t5.xyz);
    //Instruction 40416
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 40417
    //MUL
    t5.xyz = vec3(t24) * t5.xyz;
    //Instruction 40418
    //MUL
    t10_7.xyz = t4.xyz * t5.xyz;
    //Instruction 40419
    //MAD
    t10_7.xyz = t4.zxy * t5.yzx + (-t10_7.xyz);
    //Instruction 40420
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 40421
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 40422
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 40423
    //MOV
    vs_TEXCOORD0.z = t4.y;
    //Instruction 40424
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 40425
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 40426
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 40427
    //MOV
    vs_TEXCOORD1.z = t4.z;
    //Instruction 40428
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 40429
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 40430
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 40431
    //MOV
    vs_TEXCOORD2.z = t4.x;
    //Instruction 40432
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 40433
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 40434
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 40435
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 40436
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 40437
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 40213
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 40214
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 40215
    //MOV
    t1.x = t16_0.x;
    //Instruction 40216
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 40217
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40218
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 40219
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40220
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40221
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 40222
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 40223
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 40224
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 40225
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 40226
    //MAD
    SV_Target0.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40227
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40228
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  mediump vec2 projUV_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_3.x = tmpvar_4.x;
  projUV_3.y = ((fract(tmpvar_4.y) * 0.0625) + unity_LODFade.y);
  lowp float x_5;
  x_5 = (texture2D (_DitherMaskLOD2D, projUV_3).w - 0.5);
  if ((x_5 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 40274
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40275
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 40276
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 40277
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40278
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 40279
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 40280
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 40281
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 40282
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 40283
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 40284
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 40285
    //IF
    if(tb19){
        //Instruction 40286
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 40287
        //IF
        if(tb19){
            //Instruction 40288
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40289
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 40290
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 40291
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 40292
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 40293
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 40294
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40295
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 40296
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40297
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 40298
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 40299
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 40300
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 40301
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40302
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 40303
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 40304
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 40305
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40306
            //FRC
            t0 = fract(t0);
            //Instruction 40307
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40308
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 40309
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40310
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40311
            //ADD
            t0 = t0 + t0;
            //Instruction 40312
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 40313
            //LT
            tb20 = t4.w<0.0;
            //Instruction 40314
            //MOV
            t4.y = (-t4.w);
            //Instruction 40315
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 40316
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 40317
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 40318
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 40319
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 40320
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 40321
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 40322
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40323
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40324
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 40325
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 40326
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40327
            //MUL
            t20 = t20 * t21;
            //Instruction 40328
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 40329
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40330
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40331
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40332
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40333
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 40334
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 40335
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40336
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 40337
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40338
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 40339
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 40340
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 40341
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 40342
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40343
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 40344
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 40345
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 40346
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40347
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 40348
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 40349
        //ELSE
        } else {
            //Instruction 40350
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40351
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 40352
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40353
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 40354
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 40355
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 40356
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 40357
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40358
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 40359
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 40360
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40361
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40362
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40363
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 40364
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40365
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40366
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 40367
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 40368
            //LT
            tb19 = t0.w<0.0;
            //Instruction 40369
            //MOV
            t0.y = (-t0.w);
            //Instruction 40370
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 40371
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 40372
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 40373
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 40374
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 40375
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 40376
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 40377
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40378
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40379
            //MUL
            t21 = t21 * t4.x;
            //Instruction 40380
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 40381
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 40382
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40383
        //ENDIF
        }
        //Instruction 40384
    //ELSE
    } else {
        //Instruction 40385
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 40386
    //ENDIF
    }
    //Instruction 40387
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 40388
    //SQRT
    t19 = sqrt(t19);
    //Instruction 40389
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40390
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 40391
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 40392
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 40393
    //NE
    tb3 = t20!=0.0;
    //Instruction 40394
    //LOG
    t9 = log2(t20);
    //Instruction 40395
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 40396
    //EXP
    t9 = exp2(t9);
    //Instruction 40397
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 40398
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40399
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40400
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 40401
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 40402
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40403
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 40404
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40405
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 40406
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 40407
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 40408
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40409
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 40410
    //MUL
    t20 = t20 * t3.x;
    //Instruction 40411
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 40412
    //MOV
    t3.y = t2.y;
    //Instruction 40413
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 40414
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 40415
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 40416
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 40417
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 40418
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 40419
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 40420
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 40421
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 40422
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 40423
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 40424
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 40425
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 40426
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 40427
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 40428
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 40429
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 40430
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 40431
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 40432
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 40433
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 40434
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 40435
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 40436
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 40437
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 40438
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 40439
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 40440
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 40441
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 40442
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 40443
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 40444
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 40445
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 40446
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 40447
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 40448
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 40449
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 40450
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 40451
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 40452
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 40453
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 40454
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 40455
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 40456
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 40457
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 40458
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 40459
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 40263
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 40264
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 40265
    //MOV
    t1.x = t16_0.x;
    //Instruction 40266
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 40267
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40268
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 40269
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40270
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40271
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40272
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40273
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_55;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  mediump float maxBase_3;
  mediump vec4 blendColor_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_4 = tmpvar_10;
  diffuseColor_5.xyz = mix (blendColor_4.xyz, diffuseColor_5.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_3 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_3), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 40547
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40548
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 40549
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 40550
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 40551
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 40552
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 40553
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 40554
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 40555
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 40556
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 40557
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 40558
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40559
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 40560
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 40561
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 40562
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 40563
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 40564
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 40565
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 40566
    //IF
    if(tb22){
        //Instruction 40567
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 40568
        //IF
        if(tb22){
            //Instruction 40569
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40570
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 40571
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 40572
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 40573
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 40574
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 40575
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40576
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40577
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40578
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40579
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 40580
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 40581
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40582
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 40583
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 40584
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 40585
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40586
            //FRC
            t2 = fract(t2);
            //Instruction 40587
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40588
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 40589
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40590
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40591
            //ADD
            t2 = t2 + t2;
            //Instruction 40592
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 40593
            //LT
            tb24 = t5.w<0.0;
            //Instruction 40594
            //MOV
            t5.y = (-t5.w);
            //Instruction 40595
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 40596
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 40597
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 40598
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 40599
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 40600
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 40601
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 40602
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40603
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40604
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 40605
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 40606
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40607
            //MUL
            t24 = t24 * t25;
            //Instruction 40608
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 40609
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40610
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40611
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40612
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40613
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 40614
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 40615
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40616
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 40617
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40618
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 40619
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 40620
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 40621
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 40622
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40623
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 40624
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 40625
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 40626
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40627
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 40628
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 40629
        //ELSE
        } else {
            //Instruction 40630
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40631
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40632
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40633
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40634
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 40635
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 40636
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40637
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 40638
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 40639
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40640
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40641
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40642
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 40643
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40644
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40645
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 40646
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 40647
            //LT
            tb0 = t2.w<0.0;
            //Instruction 40648
            //MOV
            t2.y = (-t2.w);
            //Instruction 40649
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 40650
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 40651
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 40652
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 40653
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 40654
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 40655
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 40656
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40657
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40658
            //MUL
            t24 = t24 * t5.x;
            //Instruction 40659
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 40660
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 40661
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40662
        //ENDIF
        }
        //Instruction 40663
    //ELSE
    } else {
        //Instruction 40664
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 40665
    //ENDIF
    }
    //Instruction 40666
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 40667
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 40668
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40669
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 40670
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 40671
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 40672
    //NE
    tb24 = t22!=0.0;
    //Instruction 40673
    //LOG
    t4.x = log2(t22);
    //Instruction 40674
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 40675
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 40676
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 40677
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40678
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40679
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 40680
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 40681
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40682
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 40683
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40684
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 40685
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 40686
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 40687
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40688
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 40689
    //MUL
    t22 = t22 * t24;
    //Instruction 40690
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 40691
    //MOV
    t4.y = t3.y;
    //Instruction 40692
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 40693
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 40694
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 40695
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 40696
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 40697
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 40698
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 40699
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 40700
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 40701
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 40702
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 40703
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 40704
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 40705
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 40706
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 40707
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 40708
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 40709
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 40710
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 40711
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 40712
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 40713
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 40714
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 40715
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 40716
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 40717
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 40718
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 40719
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 40720
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 40721
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 40722
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 40723
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 40724
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 40725
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 40726
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 40727
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 40728
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 40729
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 40730
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 40731
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 40732
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 40733
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 40734
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 40735
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 40736
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 40737
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 40738
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 40536
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 40537
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 40538
    //MOV
    t1.x = t16_0.x;
    //Instruction 40539
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 40540
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40541
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 40542
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40543
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40544
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40545
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40546
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.x;
  tmpvar_70.y = worldBinormal_3.x;
  tmpvar_70.z = worldNormal_5.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.y;
  tmpvar_71.y = worldBinormal_3.y;
  tmpvar_71.z = worldNormal_5.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.z;
  tmpvar_72.y = worldBinormal_3.z;
  tmpvar_72.z = worldNormal_5.z;
  tmpvar_72.w = tmpvar_61.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  mediump float maxBase_3;
  mediump vec4 blendColor_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_4 = tmpvar_10;
  diffuseColor_5.xyz = mix (blendColor_4.xyz, diffuseColor_5.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_3 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_3), 0.0, 1.0);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 40755
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40756
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 40757
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 40758
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 40759
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 40760
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 40761
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 40762
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 40763
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 40764
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 40765
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 40766
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40767
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 40768
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 40769
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 40770
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 40771
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 40772
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 40773
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 40774
    //IF
    if(tb25){
        //Instruction 40775
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 40776
        //IF
        if(tb25){
            //Instruction 40777
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40778
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 40779
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 40780
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 40781
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 40782
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 40783
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40784
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40785
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40786
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40787
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 40788
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 40789
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40790
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 40791
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 40792
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 40793
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40794
            //FRC
            t2 = fract(t2);
            //Instruction 40795
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40796
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 40797
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40798
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40799
            //ADD
            t2 = t2 + t2;
            //Instruction 40800
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 40801
            //LT
            tb27 = t5.w<0.0;
            //Instruction 40802
            //MOV
            t5.y = (-t5.w);
            //Instruction 40803
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 40804
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 40805
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 40806
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 40807
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 40808
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 40809
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 40810
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40811
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40812
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 40813
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 40814
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40815
            //MUL
            t27 = t27 * t28;
            //Instruction 40816
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 40817
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40818
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40819
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40820
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40821
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 40822
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 40823
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40824
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 40825
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40826
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 40827
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 40828
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 40829
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 40830
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40831
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 40832
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 40833
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 40834
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40835
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 40836
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 40837
        //ELSE
        } else {
            //Instruction 40838
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40839
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40840
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40841
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40842
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 40843
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 40844
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40845
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 40846
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 40847
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40848
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40849
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40850
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 40851
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40852
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40853
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 40854
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 40855
            //LT
            tb0 = t2.w<0.0;
            //Instruction 40856
            //MOV
            t2.y = (-t2.w);
            //Instruction 40857
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 40858
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 40859
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 40860
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 40861
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 40862
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 40863
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 40864
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40865
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40866
            //MUL
            t27 = t27 * t5.x;
            //Instruction 40867
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 40868
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 40869
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40870
        //ENDIF
        }
        //Instruction 40871
    //ELSE
    } else {
        //Instruction 40872
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 40873
    //ENDIF
    }
    //Instruction 40874
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 40875
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 40876
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40877
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 40878
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 40879
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 40880
    //NE
    tb27 = t25!=0.0;
    //Instruction 40881
    //LOG
    t4.x = log2(t25);
    //Instruction 40882
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 40883
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 40884
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 40885
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40886
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40887
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 40888
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 40889
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40890
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 40891
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40892
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 40893
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 40894
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 40895
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40896
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 40897
    //MUL
    t25 = t25 * t27;
    //Instruction 40898
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 40899
    //MOV
    t4.y = t3.y;
    //Instruction 40900
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 40901
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 40902
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 40903
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 40904
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 40905
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 40906
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 40907
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 40908
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 40909
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 40910
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 40911
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 40912
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 40913
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 40914
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 40915
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 40916
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 40917
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 40918
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 40919
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 40920
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 40921
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 40922
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 40923
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 40924
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 40925
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 40926
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 40927
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 40928
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 40929
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 40930
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 40931
    //MOV
    t5.y = _World2Object[0].z;
    //Instruction 40932
    //MOV
    t5.z = _World2Object[1].z;
    //Instruction 40933
    //MOV
    t5.x = _World2Object[2].z;
    //Instruction 40934
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 40935
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 40936
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 40937
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 40938
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 40939
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 40940
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 40941
    //DP3
    t24 = dot(t5.xyz, t5.xyz);
    //Instruction 40942
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 40943
    //MUL
    t5.xyz = vec3(t24) * t5.xyz;
    //Instruction 40944
    //MUL
    t10_7.xyz = t4.xyz * t5.xyz;
    //Instruction 40945
    //MAD
    t10_7.xyz = t4.zxy * t5.yzx + (-t10_7.xyz);
    //Instruction 40946
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 40947
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 40948
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 40949
    //MOV
    vs_TEXCOORD0.z = t4.y;
    //Instruction 40950
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 40951
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 40952
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 40953
    //MOV
    vs_TEXCOORD1.z = t4.z;
    //Instruction 40954
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 40955
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 40956
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 40957
    //MOV
    vs_TEXCOORD2.z = t4.x;
    //Instruction 40958
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 40959
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 40960
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 40961
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 40962
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 40963
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 40964
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 40965
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 40966
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 40739
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 40740
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 40741
    //MOV
    t1.x = t16_0.x;
    //Instruction 40742
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 40743
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40744
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 40745
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40746
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40747
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 40748
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 40749
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 40750
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 40751
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 40752
    //MAD
    SV_Target0.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40753
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40754
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_10.x)
   + 
    (v_63.xyz * tmpvar_10.y)
  ) + (v_64.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_65;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_57;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_3 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 40475
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40476
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 40477
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 40478
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40479
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 40480
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 40481
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 40482
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 40483
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 40484
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 40485
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 40486
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 40487
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 40488
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 40489
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 40490
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 40491
    //FRC
    t2.x = fract(t2.x);
    //Instruction 40492
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 40493
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 40494
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 40495
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 40496
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 40497
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 40498
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 40499
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 40500
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 40501
    //IF
    if(tb20){
        //Instruction 40502
        //IF
        if(tb19){
            //Instruction 40503
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40504
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 40505
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 40506
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 40507
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 40508
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 40509
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40510
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40511
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40512
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40513
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 40514
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 40515
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 40516
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40517
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 40518
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 40519
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 40520
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40521
            //FRC
            t0 = fract(t0);
            //Instruction 40522
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40523
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 40524
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40525
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40526
            //ADD
            t0 = t0 + t0;
            //Instruction 40527
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 40528
            //LT
            tb20 = t5.w<0.0;
            //Instruction 40529
            //MOV
            t5.y = (-t5.w);
            //Instruction 40530
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 40531
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 40532
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 40533
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 40534
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 40535
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 40536
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 40537
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40538
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40539
            //MUL
            t22 = t0.x * t22;
            //Instruction 40540
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 40541
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40542
            //MUL
            t20 = t20 * t21;
            //Instruction 40543
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 40544
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 40545
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40546
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40547
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40548
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 40549
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 40550
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40551
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 40552
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40553
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 40554
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 40555
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 40556
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 40557
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40558
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 40559
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 40560
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 40561
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40562
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 40563
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 40564
        //ELSE
        } else {
            //Instruction 40565
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40566
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 40567
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40568
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 40569
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 40570
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 40571
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 40572
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40573
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 40574
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 40575
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40576
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40577
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40578
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 40579
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40580
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40581
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 40582
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 40583
            //LT
            tb19 = t0.w<0.0;
            //Instruction 40584
            //MOV
            t0.y = (-t0.w);
            //Instruction 40585
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 40586
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 40587
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 40588
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 40589
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 40590
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 40591
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 40592
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40593
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40594
            //MUL
            t21 = t21 * t4.x;
            //Instruction 40595
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 40596
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 40597
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 40598
        //ENDIF
        }
        //Instruction 40599
    //ENDIF
    }
    //Instruction 40600
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 40601
    //SQRT
    t19 = sqrt(t19);
    //Instruction 40602
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40603
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 40604
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 40605
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 40606
    //NE
    tb3 = t20!=0.0;
    //Instruction 40607
    //LOG
    t9 = log2(t20);
    //Instruction 40608
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 40609
    //EXP
    t9 = exp2(t9);
    //Instruction 40610
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 40611
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40612
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40613
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 40614
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 40615
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40616
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 40617
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40618
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 40619
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 40620
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 40621
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40622
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 40623
    //MUL
    t20 = t20 * t3.x;
    //Instruction 40624
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 40625
    //MOV
    t3.y = t2.y;
    //Instruction 40626
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 40627
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 40628
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 40629
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 40630
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 40631
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 40632
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 40633
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 40634
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 40635
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 40636
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 40637
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 40638
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 40639
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 40640
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 40641
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 40642
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 40643
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 40644
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 40645
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 40646
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 40647
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 40648
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 40649
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 40650
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 40651
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 40652
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 40653
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 40654
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 40655
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 40656
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 40657
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 40658
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 40659
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 40660
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 40661
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 40662
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 40663
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 40664
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 40665
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 40666
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 40667
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 40668
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 40669
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 40460
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 40461
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 40462
    //MOV
    t1.x = t16_0.x;
    //Instruction 40463
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 40464
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40465
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 40466
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40467
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40468
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 40469
    //MAD
    t10_2 = t10_1 * _Color.w + (-_Cutoff);
    //Instruction 40470
    //LT
    tb1 = t10_2<0.0;
    //Instruction 40471
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40472
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40473
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40474
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_13.x)
   + 
    (v_65.xyz * tmpvar_13.y)
  ) + (v_66.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_67;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_59;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_3 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 40453
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40454
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 40455
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 40456
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 40457
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 40458
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 40459
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 40460
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 40461
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 40462
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 40463
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 40464
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40465
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 40466
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 40467
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 40468
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 40469
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 40470
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 40471
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 40472
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 40473
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 40474
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 40475
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 40476
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 40477
    //FRC
    t3.x = fract(t3.x);
    //Instruction 40478
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 40479
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 40480
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 40481
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 40482
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 40483
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 40484
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 40485
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 40486
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 40487
    //IF
    if(tb24){
        //Instruction 40488
        //IF
        if(tb22){
            //Instruction 40489
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40490
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 40491
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 40492
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 40493
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 40494
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 40495
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40496
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40497
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40498
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 40499
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 40500
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 40501
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40502
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 40503
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 40504
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 40505
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40506
            //FRC
            t2 = fract(t2);
            //Instruction 40507
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40508
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 40509
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40510
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40511
            //ADD
            t2 = t2 + t2;
            //Instruction 40512
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 40513
            //LT
            tb24 = t6.w<0.0;
            //Instruction 40514
            //MOV
            t6.y = (-t6.w);
            //Instruction 40515
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 40516
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 40517
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 40518
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 40519
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 40520
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 40521
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 40522
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40523
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40524
            //MUL
            t26 = t2.x * t26;
            //Instruction 40525
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 40526
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40527
            //MUL
            t24 = t24 * t25;
            //Instruction 40528
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 40529
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 40530
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40531
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40532
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40533
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 40534
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 40535
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40536
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 40537
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40538
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 40539
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 40540
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 40541
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 40542
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40543
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 40544
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 40545
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 40546
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40547
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 40548
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 40549
        //ELSE
        } else {
            //Instruction 40550
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40551
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40552
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40553
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40554
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 40555
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 40556
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40557
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 40558
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 40559
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40560
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40561
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40562
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 40563
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40564
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40565
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 40566
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 40567
            //LT
            tb0 = t2.w<0.0;
            //Instruction 40568
            //MOV
            t2.y = (-t2.w);
            //Instruction 40569
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 40570
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 40571
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 40572
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 40573
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 40574
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 40575
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 40576
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40577
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40578
            //MUL
            t24 = t24 * t5.x;
            //Instruction 40579
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 40580
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 40581
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 40582
        //ENDIF
        }
        //Instruction 40583
    //ENDIF
    }
    //Instruction 40584
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 40585
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 40586
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40587
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 40588
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 40589
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 40590
    //NE
    tb24 = t22!=0.0;
    //Instruction 40591
    //LOG
    t4.x = log2(t22);
    //Instruction 40592
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 40593
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 40594
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 40595
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40596
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40597
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 40598
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 40599
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40600
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 40601
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40602
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 40603
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 40604
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 40605
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40606
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 40607
    //MUL
    t22 = t22 * t24;
    //Instruction 40608
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 40609
    //MOV
    t4.y = t3.y;
    //Instruction 40610
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 40611
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 40612
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 40613
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 40614
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 40615
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 40616
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 40617
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 40618
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 40619
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 40620
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 40621
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 40622
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 40623
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 40624
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 40625
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 40626
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 40627
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 40628
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 40629
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 40630
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 40631
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 40632
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 40633
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 40634
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 40635
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 40636
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 40637
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 40638
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 40639
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 40640
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 40641
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 40642
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 40643
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 40644
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 40645
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 40646
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 40647
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 40648
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 40649
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 40650
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 40651
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 40652
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 40653
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 40438
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 40439
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 40440
    //MOV
    t1.x = t16_0.x;
    //Instruction 40441
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 40442
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40443
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 40444
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40445
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40446
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 40447
    //MAD
    t10_2 = t10_1 * _Color.w + (-_Cutoff);
    //Instruction 40448
    //LT
    tb1 = t10_2<0.0;
    //Instruction 40449
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40450
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40451
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40452
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_65;
  tmpvar_65 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(((
    (v_66.xyz * tmpvar_14.x)
   + 
    (v_67.xyz * tmpvar_14.y)
  ) + (v_68.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_69;
  highp mat3 tmpvar_70;
  tmpvar_70[0] = _Object2World[0].xyz;
  tmpvar_70[1] = _Object2World[1].xyz;
  tmpvar_70[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize((tmpvar_70 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_71;
  lowp vec3 tmpvar_72;
  tmpvar_72 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_73;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_5.x;
  tmpvar_74.y = worldBinormal_4.x;
  tmpvar_74.z = worldNormal_6.x;
  tmpvar_74.w = tmpvar_65.x;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_5.y;
  tmpvar_75.y = worldBinormal_4.y;
  tmpvar_75.z = worldNormal_6.y;
  tmpvar_75.w = tmpvar_65.y;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_5.z;
  tmpvar_76.y = worldBinormal_4.z;
  tmpvar_76.z = worldNormal_6.z;
  tmpvar_76.w = tmpvar_65.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_74;
  xlv_TEXCOORD1 = tmpvar_75;
  xlv_TEXCOORD2 = tmpvar_76;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_60;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_3 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 40987
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40988
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 40989
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 40990
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 40991
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 40992
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 40993
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 40994
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 40995
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 40996
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 40997
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 40998
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40999
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41000
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41001
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 41002
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 41003
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 41004
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 41005
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 41006
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 41007
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 41008
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 41009
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 41010
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 41011
    //FRC
    t3.x = fract(t3.x);
    //Instruction 41012
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 41013
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 41014
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 41015
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 41016
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 41017
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 41018
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 41019
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 41020
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 41021
    //IF
    if(tb27){
        //Instruction 41022
        //IF
        if(tb25){
            //Instruction 41023
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41024
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 41025
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 41026
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 41027
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 41028
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 41029
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41030
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41031
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41032
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 41033
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 41034
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 41035
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41036
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41037
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 41038
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41039
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41040
            //FRC
            t2 = fract(t2);
            //Instruction 41041
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41042
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 41043
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41044
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41045
            //ADD
            t2 = t2 + t2;
            //Instruction 41046
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 41047
            //LT
            tb27 = t6.w<0.0;
            //Instruction 41048
            //MOV
            t6.y = (-t6.w);
            //Instruction 41049
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 41050
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 41051
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 41052
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 41053
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 41054
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 41055
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 41056
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41057
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41058
            //MUL
            t29 = t2.x * t29;
            //Instruction 41059
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 41060
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41061
            //MUL
            t27 = t27 * t28;
            //Instruction 41062
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 41063
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 41064
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41065
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41066
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41067
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 41068
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 41069
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41070
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 41071
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41072
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 41073
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 41074
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 41075
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 41076
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41077
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 41078
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 41079
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 41080
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41081
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 41082
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 41083
        //ELSE
        } else {
            //Instruction 41084
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41085
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41086
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41087
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41088
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 41089
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 41090
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41091
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 41092
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 41093
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41094
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41095
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41096
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 41097
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41098
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41099
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 41100
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 41101
            //LT
            tb0 = t2.w<0.0;
            //Instruction 41102
            //MOV
            t2.y = (-t2.w);
            //Instruction 41103
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 41104
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 41105
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 41106
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 41107
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 41108
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 41109
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 41110
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41111
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41112
            //MUL
            t27 = t27 * t5.x;
            //Instruction 41113
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 41114
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 41115
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 41116
        //ENDIF
        }
        //Instruction 41117
    //ENDIF
    }
    //Instruction 41118
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 41119
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 41120
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41121
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 41122
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 41123
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 41124
    //NE
    tb27 = t25!=0.0;
    //Instruction 41125
    //LOG
    t4.x = log2(t25);
    //Instruction 41126
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 41127
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 41128
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 41129
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41130
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41131
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 41132
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 41133
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41134
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 41135
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41136
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 41137
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 41138
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 41139
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41140
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 41141
    //MUL
    t25 = t25 * t27;
    //Instruction 41142
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 41143
    //MOV
    t4.y = t3.y;
    //Instruction 41144
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 41145
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 41146
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 41147
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 41148
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 41149
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 41150
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 41151
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 41152
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 41153
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 41154
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 41155
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 41156
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 41157
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 41158
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 41159
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 41160
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 41161
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 41162
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 41163
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 41164
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 41165
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 41166
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 41167
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 41168
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 41169
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 41170
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 41171
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 41172
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 41173
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 41174
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 41175
    //MOV
    t5.y = _World2Object[0].z;
    //Instruction 41176
    //MOV
    t5.z = _World2Object[1].z;
    //Instruction 41177
    //MOV
    t5.x = _World2Object[2].z;
    //Instruction 41178
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 41179
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 41180
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 41181
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 41182
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 41183
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 41184
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 41185
    //DP3
    t24 = dot(t5.xyz, t5.xyz);
    //Instruction 41186
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 41187
    //MUL
    t5.xyz = vec3(t24) * t5.xyz;
    //Instruction 41188
    //MUL
    t10_7.xyz = t4.xyz * t5.xyz;
    //Instruction 41189
    //MAD
    t10_7.xyz = t4.zxy * t5.yzx + (-t10_7.xyz);
    //Instruction 41190
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 41191
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 41192
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 41193
    //MOV
    vs_TEXCOORD0.z = t4.y;
    //Instruction 41194
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 41195
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 41196
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 41197
    //MOV
    vs_TEXCOORD1.z = t4.z;
    //Instruction 41198
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 41199
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 41200
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 41201
    //MOV
    vs_TEXCOORD2.z = t4.x;
    //Instruction 41202
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 41203
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 41204
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 41205
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 41206
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 41207
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 40967
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 40968
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 40969
    //MOV
    t1.x = t16_0.x;
    //Instruction 40970
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 40971
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40972
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 40973
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40974
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40975
    //SAMPLE
    t10_1.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 40976
    //MAD
    t10_2.x = t10_1.x * _Color.w + (-_Cutoff);
    //Instruction 40977
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 40978
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40979
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 40980
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 40981
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 40982
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 40983
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 40984
    //MAD
    SV_Target0.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40985
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40986
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_95;
  hPos_95 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_96;
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (hPos_95 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = hPos_95.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  screenPos_96 = tmpvar_100;
  screenPos_96.xy = (screenPos_96.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_10.x)
   + 
    (v_102.xyz * tmpvar_10.y)
  ) + (v_103.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_104;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_96;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_3 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 41223
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41224
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 41225
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 41226
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41227
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 41228
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 41229
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 41230
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 41231
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 41232
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 41233
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 41234
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 41235
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 41236
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 41237
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 41238
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 41239
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 41240
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 41241
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 41242
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 41243
        //FRC
        t15.x = fract(t15.x);
        //Instruction 41244
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 41245
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 41246
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 41247
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 41248
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 41249
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 41250
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 41251
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 41252
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 41253
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 41254
        //IF
        if(tb29){
            //Instruction 41255
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 41256
            //FRC
            t4 = fract(t4);
            //Instruction 41257
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41258
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 41259
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 41260
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 41261
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 41262
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 41263
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 41264
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 41265
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41266
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 41267
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41268
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 41269
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 41270
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 41271
            //SQRT
            t44 = sqrt(t44);
            //Instruction 41272
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 41273
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 41274
            //MUL
            t45 = t45 * t5.x;
            //Instruction 41275
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 41276
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 41277
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 41278
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 41279
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 41280
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 41281
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 41282
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 41283
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 41284
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 41285
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 41286
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 41287
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 41288
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 41289
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 41290
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 41291
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 41292
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 41293
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 41294
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 41295
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 41296
            //SQRT
            t45 = sqrt(t45);
            //Instruction 41297
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 41298
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 41299
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 41300
            //MUL
            t33 = t45 * t5.x;
            //Instruction 41301
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 41302
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 41303
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 41304
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 41305
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 41306
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 41307
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 41308
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 41309
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 41310
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41311
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 41312
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41313
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 41314
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 41315
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 41316
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 41317
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 41318
            //LOG
            t43 = log2(t43);
            //Instruction 41319
            //MUL
            t29 = t43 * t15.y;
            //Instruction 41320
            //EXP
            t29 = exp2(t29);
            //Instruction 41321
            //MUL
            t43 = t5.y * t45;
            //Instruction 41322
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 41323
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 41324
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 41325
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 41326
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 41327
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 41328
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 41329
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 41330
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 41331
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 41332
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 41333
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 41334
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 41335
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 41336
            //MOV
            t10.z = t11.x;
            //Instruction 41337
            //MOV
            t10.w = t9.x;
            //Instruction 41338
            //MOV
            t12.z = t8.y;
            //Instruction 41339
            //MOV
            t12.w = t13.y;
            //Instruction 41340
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 41341
            //MOV
            t13.w = t12.y;
            //Instruction 41342
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 41343
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 41344
            //MOV
            t9.w = t10.y;
            //Instruction 41345
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 41346
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 41347
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 41348
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 41349
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 41350
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 41351
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 41352
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 41353
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 41354
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 41355
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 41356
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 41357
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 41358
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 41359
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 41360
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 41361
        //ELSE
        } else {
            //Instruction 41362
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 41363
        //ENDIF
        }
        //Instruction 41364
    //ELSE
    } else {
        //Instruction 41365
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 41366
    //ENDIF
    }
    //Instruction 41367
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 41368
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 41369
    //IF
    if(tb16){
        //Instruction 41370
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 41371
        //IF
        if(tb16){
            //Instruction 41372
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41373
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 41374
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 41375
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 41376
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 41377
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 41378
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41379
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41380
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41381
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 41382
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 41383
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 41384
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 41385
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41386
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 41387
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 41388
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 41389
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41390
            //FRC
            t0 = fract(t0);
            //Instruction 41391
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41392
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 41393
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41394
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41395
            //ADD
            t0 = t0 + t0;
            //Instruction 41396
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 41397
            //LT
            tb44 = t6.w<0.0;
            //Instruction 41398
            //MOV
            t6.y = (-t6.w);
            //Instruction 41399
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 41400
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 41401
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 41402
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 41403
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 41404
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 41405
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 41406
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41407
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41408
            //MUL
            t46 = t0.x * t46;
            //Instruction 41409
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 41410
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41411
            //MUL
            t44 = t44 * t45;
            //Instruction 41412
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 41413
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 41414
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41415
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41416
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41417
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 41418
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 41419
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41420
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 41421
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41422
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 41423
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 41424
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 41425
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 41426
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41427
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 41428
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 41429
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 41430
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41431
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 41432
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 41433
        //ELSE
        } else {
            //Instruction 41434
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41435
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41436
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41437
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41438
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 41439
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 41440
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 41441
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41442
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 41443
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 41444
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41445
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41446
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41447
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 41448
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41449
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41450
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 41451
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 41452
            //LT
            tb16 = t0.w<0.0;
            //Instruction 41453
            //MOV
            t0.y = (-t0.w);
            //Instruction 41454
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 41455
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 41456
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 41457
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 41458
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 41459
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 41460
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 41461
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41462
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41463
            //MUL
            t45 = t45 * t5.x;
            //Instruction 41464
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 41465
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 41466
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 41467
        //ENDIF
        }
        //Instruction 41468
    //ENDIF
    }
    //Instruction 41469
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 41470
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 41471
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41472
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 41473
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 41474
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 41475
    //NE
    tb45 = t44!=0.0;
    //Instruction 41476
    //LOG
    t4.x = log2(t44);
    //Instruction 41477
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 41478
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 41479
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 41480
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41481
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41482
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 41483
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 41484
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41485
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 41486
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41487
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 41488
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 41489
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 41490
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41491
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 41492
    //MUL
    t44 = t44 * t45;
    //Instruction 41493
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 41494
    //MOV
    t4.y = t3.y;
    //Instruction 41495
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 41496
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 41497
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 41498
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 41499
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 41500
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 41501
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 41502
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 41503
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 41504
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 41505
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 41506
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 41507
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 41508
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 41509
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 41510
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 41511
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 41512
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 41513
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 41514
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 41515
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 41516
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 41517
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 41518
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 41519
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 41520
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 41521
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 41522
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 41523
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 41524
    //MUL
    t4.xyz = t15.yyy * t4.xyz;
    //Instruction 41525
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t4.xyz;
    //Instruction 41526
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 41527
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 41528
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 41529
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 41530
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 41531
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 41532
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 41533
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 41534
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 41535
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 41536
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 41537
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 41538
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 41208
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 41209
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 41210
    //MOV
    t1.x = t16_0.x;
    //Instruction 41211
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 41212
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 41213
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 41214
    //LT
    tb1 = t16_1<0.0;
    //Instruction 41215
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 41216
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 41217
    //MAD
    t10_2 = t10_1 * _Color.w + (-_Cutoff);
    //Instruction 41218
    //LT
    tb1 = t10_2<0.0;
    //Instruction 41219
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 41220
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 41221
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 41222
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_97;
  hPos_97 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_98;
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (hPos_97 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = hPos_97.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  screenPos_98 = tmpvar_102;
  screenPos_98.xy = (screenPos_98.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_106;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_98;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_3 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 40669
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40670
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 40671
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 40672
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 40673
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 40674
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 40675
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 40676
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 40677
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 40678
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 40679
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 40680
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40681
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 40682
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 40683
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 40684
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 40685
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 40686
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 40687
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 40688
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 40689
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 40690
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 40691
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 40692
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 40693
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 40694
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 40695
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 40696
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 40697
        //FRC
        t30.x = fract(t30.x);
        //Instruction 40698
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 40699
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 40700
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 40701
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 40702
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 40703
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 40704
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 40705
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 40706
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 40707
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 40708
        //IF
        if(tb45){
            //Instruction 40709
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 40710
            //FRC
            t5 = fract(t5);
            //Instruction 40711
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40712
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 40713
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 40714
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 40715
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 40716
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 40717
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 40718
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 40719
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40720
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 40721
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40722
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 40723
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 40724
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 40725
            //SQRT
            t46 = sqrt(t46);
            //Instruction 40726
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 40727
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 40728
            //MUL
            t48 = t48 * t49;
            //Instruction 40729
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 40730
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 40731
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 40732
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 40733
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 40734
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 40735
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 40736
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 40737
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 40738
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 40739
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 40740
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 40741
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 40742
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 40743
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 40744
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 40745
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 40746
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 40747
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 40748
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 40749
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 40750
            //SQRT
            t48 = sqrt(t48);
            //Instruction 40751
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 40752
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 40753
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 40754
            //MUL
            t6.x = t48 * t49;
            //Instruction 40755
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 40756
            //LT
            tb18 = t18<(-t18);
            //Instruction 40757
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 40758
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 40759
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 40760
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 40761
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 40762
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 40763
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 40764
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40765
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 40766
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40767
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 40768
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 40769
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 40770
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 40771
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 40772
            //LOG
            t45 = log2(t45);
            //Instruction 40773
            //MUL
            t45 = t45 * t7.y;
            //Instruction 40774
            //EXP
            t45 = exp2(t45);
            //Instruction 40775
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 40776
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 40777
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 40778
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 40779
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 40780
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 40781
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 40782
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 40783
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 40784
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 40785
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 40786
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 40787
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 40788
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 40789
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 40790
            //MOV
            t11.z = t12.x;
            //Instruction 40791
            //MOV
            t11.w = t10.x;
            //Instruction 40792
            //MOV
            t13.z = t9.y;
            //Instruction 40793
            //MOV
            t13.w = t14.y;
            //Instruction 40794
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 40795
            //MOV
            t14.w = t13.y;
            //Instruction 40796
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 40797
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 40798
            //MOV
            t10.w = t11.y;
            //Instruction 40799
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 40800
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 40801
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 40802
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 40803
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 40804
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 40805
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 40806
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 40807
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 40808
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 40809
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 40810
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 40811
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 40812
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 40813
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 40814
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 40815
        //ELSE
        } else {
            //Instruction 40816
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 40817
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 40818
        //ENDIF
        }
        //Instruction 40819
    //ELSE
    } else {
        //Instruction 40820
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 40821
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 40822
    //ENDIF
    }
    //Instruction 40823
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 40824
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 40825
    //IF
    if(tb46){
        //Instruction 40826
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 40827
        //IF
        if(tb46){
            //Instruction 40828
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40829
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 40830
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 40831
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 40832
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 40833
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 40834
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40835
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 40836
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40837
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 40838
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 40839
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 40840
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40841
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 40842
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 40843
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 40844
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40845
            //FRC
            t2 = fract(t2);
            //Instruction 40846
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40847
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 40848
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40849
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40850
            //ADD
            t2 = t2 + t2;
            //Instruction 40851
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 40852
            //LT
            tb48 = t7.w<0.0;
            //Instruction 40853
            //MOV
            t7.y = (-t7.w);
            //Instruction 40854
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 40855
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 40856
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 40857
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 40858
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 40859
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 40860
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 40861
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40862
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40863
            //MUL
            t50 = t2.x * t50;
            //Instruction 40864
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 40865
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40866
            //MUL
            t48 = t48 * t49;
            //Instruction 40867
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 40868
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 40869
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40870
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40871
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40872
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 40873
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 40874
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40875
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 40876
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40877
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 40878
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 40879
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 40880
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 40881
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40882
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 40883
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 40884
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 40885
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40886
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 40887
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 40888
        //ELSE
        } else {
            //Instruction 40889
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40890
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40891
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40892
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 40893
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 40894
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 40895
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40896
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 40897
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 40898
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40899
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 40900
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40901
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 40902
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40903
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40904
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 40905
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 40906
            //LT
            tb0 = t2.w<0.0;
            //Instruction 40907
            //MOV
            t2.y = (-t2.w);
            //Instruction 40908
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 40909
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 40910
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 40911
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 40912
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 40913
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 40914
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 40915
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40916
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40917
            //MUL
            t48 = t48 * t6.x;
            //Instruction 40918
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 40919
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 40920
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 40921
        //ENDIF
        }
        //Instruction 40922
    //ENDIF
    }
    //Instruction 40923
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 40924
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 40925
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40926
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 40927
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 40928
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 40929
    //NE
    tb48 = t46!=0.0;
    //Instruction 40930
    //LOG
    t49 = log2(t46);
    //Instruction 40931
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 40932
    //EXP
    t49 = exp2(t49);
    //Instruction 40933
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 40934
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40935
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40936
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 40937
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 40938
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40939
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 40940
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40941
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 40942
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 40943
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 40944
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40945
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 40946
    //MUL
    t46 = t46 * t48;
    //Instruction 40947
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 40948
    //MOV
    t5.y = t4.y;
    //Instruction 40949
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 40950
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 40951
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 40952
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 40953
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 40954
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 40955
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 40956
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 40957
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 40958
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 40959
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 40960
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 40961
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 40962
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 40963
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 40964
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 40965
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 40966
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 40967
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 40968
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 40969
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 40970
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 40971
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 40972
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 40973
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 40974
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 40975
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 40976
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 40977
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 40978
    //MUL
    t0.xyw = t30.yyy * t6.xyz;
    //Instruction 40979
    //MAD
    t0.xyz = t5.xyz * t30.xxx + t0.xyw;
    //Instruction 40980
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 40981
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 40982
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 40983
    //MAD
    t0.xyz = t5.xyz * vec3(t18) + t0.xyz;
    //Instruction 40984
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 40985
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 40986
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 40987
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 40988
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 40989
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 40990
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 40991
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 40992
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 40654
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 40655
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 40656
    //MOV
    t1.x = t16_0.x;
    //Instruction 40657
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 40658
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40659
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 40660
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40661
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40662
    //SAMPLE
    t10_1 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 40663
    //MAD
    t10_2 = t10_1 * _Color.w + (-_Cutoff);
    //Instruction 40664
    //LT
    tb1 = t10_2<0.0;
    //Instruction 40665
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40666
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40667
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40668
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_104;
  tmpvar_104 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_14.x)
   + 
    (v_106.xyz * tmpvar_14.y)
  ) + (v_107.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_112;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_5.x;
  tmpvar_113.y = worldBinormal_4.x;
  tmpvar_113.z = worldNormal_6.x;
  tmpvar_113.w = tmpvar_104.x;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_5.y;
  tmpvar_114.y = worldBinormal_4.y;
  tmpvar_114.z = worldNormal_6.y;
  tmpvar_114.w = tmpvar_104.y;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.z;
  tmpvar_115.y = worldBinormal_4.z;
  tmpvar_115.z = worldNormal_6.z;
  tmpvar_115.w = tmpvar_104.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_99;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_3 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_11 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 40690
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40691
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 40692
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 40693
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 40694
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 40695
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 40696
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 40697
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 40698
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 40699
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 40700
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 40701
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40702
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 40703
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 40704
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 40705
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 40706
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 40707
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 40708
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 40709
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 40710
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 40711
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 40712
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 40713
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 40714
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 40715
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 40716
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 40717
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 40718
        //FRC
        t32.x = fract(t32.x);
        //Instruction 40719
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 40720
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 40721
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 40722
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 40723
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 40724
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 40725
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 40726
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 40727
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 40728
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 40729
        //IF
        if(tb48){
            //Instruction 40730
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 40731
            //FRC
            t5 = fract(t5);
            //Instruction 40732
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40733
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 40734
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 40735
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 40736
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 40737
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 40738
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 40739
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 40740
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40741
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 40742
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40743
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 40744
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 40745
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 40746
            //SQRT
            t49 = sqrt(t49);
            //Instruction 40747
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 40748
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 40749
            //MUL
            t51 = t51 * t52;
            //Instruction 40750
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 40751
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 40752
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 40753
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 40754
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 40755
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 40756
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 40757
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 40758
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 40759
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 40760
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 40761
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 40762
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 40763
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 40764
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 40765
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 40766
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 40767
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 40768
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 40769
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 40770
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 40771
            //SQRT
            t51 = sqrt(t51);
            //Instruction 40772
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 40773
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 40774
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 40775
            //MUL
            t6.x = t51 * t52;
            //Instruction 40776
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 40777
            //LT
            tb19 = t19<(-t19);
            //Instruction 40778
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 40779
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 40780
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 40781
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 40782
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 40783
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 40784
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 40785
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40786
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 40787
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40788
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 40789
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 40790
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 40791
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 40792
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 40793
            //LOG
            t48 = log2(t48);
            //Instruction 40794
            //MUL
            t48 = t48 * t7.y;
            //Instruction 40795
            //EXP
            t48 = exp2(t48);
            //Instruction 40796
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 40797
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 40798
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 40799
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 40800
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 40801
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 40802
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 40803
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 40804
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 40805
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 40806
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 40807
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 40808
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 40809
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 40810
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 40811
            //MOV
            t11.z = t12.x;
            //Instruction 40812
            //MOV
            t11.w = t10.x;
            //Instruction 40813
            //MOV
            t13.z = t9.y;
            //Instruction 40814
            //MOV
            t13.w = t14.y;
            //Instruction 40815
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 40816
            //MOV
            t14.w = t13.y;
            //Instruction 40817
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 40818
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 40819
            //MOV
            t10.w = t11.y;
            //Instruction 40820
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 40821
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 40822
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 40823
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 40824
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 40825
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 40826
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 40827
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 40828
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 40829
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 40830
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 40831
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 40832
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 40833
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 40834
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 40835
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 40836
        //ELSE
        } else {
            //Instruction 40837
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 40838
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 40839
        //ENDIF
        }
        //Instruction 40840
    //ELSE
    } else {
        //Instruction 40841
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 40842
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 40843
    //ENDIF
    }
    //Instruction 40844
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 40845
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 40846
    //IF
    if(tb49){
        //Instruction 40847
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 40848
        //IF
        if(tb49){
            //Instruction 40849
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40850
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 40851
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 40852
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 40853
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 40854
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 40855
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40856
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 40857
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40858
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 40859
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 40860
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 40861
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40862
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 40863
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 40864
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 40865
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40866
            //FRC
            t2 = fract(t2);
            //Instruction 40867
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40868
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 40869
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40870
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40871
            //ADD
            t2 = t2 + t2;
            //Instruction 40872
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 40873
            //LT
            tb51 = t7.w<0.0;
            //Instruction 40874
            //MOV
            t7.y = (-t7.w);
            //Instruction 40875
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 40876
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 40877
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 40878
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 40879
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 40880
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 40881
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 40882
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40883
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40884
            //MUL
            t53 = t2.x * t53;
            //Instruction 40885
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 40886
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40887
            //MUL
            t51 = t51 * t52;
            //Instruction 40888
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 40889
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 40890
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40891
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40892
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40893
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 40894
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 40895
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40896
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 40897
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40898
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 40899
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 40900
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 40901
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 40902
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40903
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 40904
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 40905
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 40906
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40907
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 40908
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 40909
        //ELSE
        } else {
            //Instruction 40910
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40911
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40912
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40913
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 40914
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 40915
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 40916
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40917
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 40918
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 40919
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40920
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 40921
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40922
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 40923
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40924
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40925
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 40926
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 40927
            //LT
            tb0 = t2.w<0.0;
            //Instruction 40928
            //MOV
            t2.y = (-t2.w);
            //Instruction 40929
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 40930
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 40931
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 40932
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 40933
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 40934
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 40935
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 40936
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40937
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40938
            //MUL
            t51 = t51 * t6.x;
            //Instruction 40939
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 40940
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 40941
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 40942
        //ENDIF
        }
        //Instruction 40943
    //ENDIF
    }
    //Instruction 40944
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 40945
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 40946
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40947
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 40948
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 40949
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 40950
    //NE
    tb51 = t49!=0.0;
    //Instruction 40951
    //LOG
    t52 = log2(t49);
    //Instruction 40952
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 40953
    //EXP
    t52 = exp2(t52);
    //Instruction 40954
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 40955
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40956
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40957
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 40958
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 40959
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40960
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 40961
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40962
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 40963
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 40964
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 40965
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40966
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 40967
    //MUL
    t49 = t49 * t51;
    //Instruction 40968
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 40969
    //MOV
    t5.y = t4.y;
    //Instruction 40970
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 40971
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 40972
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 40973
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 40974
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 40975
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 40976
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 40977
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 40978
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 40979
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 40980
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 40981
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 40982
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 40983
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 40984
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 40985
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 40986
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 40987
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 40988
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 40989
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 40990
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 40991
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 40992
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 40993
    //MOV
    t5.y = _World2Object[0].x;
    //Instruction 40994
    //MOV
    t5.z = _World2Object[1].x;
    //Instruction 40995
    //MOV
    t5.x = _World2Object[2].x;
    //Instruction 40996
    //MOV
    t6.y = _World2Object[0].y;
    //Instruction 40997
    //MOV
    t6.z = _World2Object[1].y;
    //Instruction 40998
    //MOV
    t6.x = _World2Object[2].y;
    //Instruction 40999
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 41000
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 41001
    //MOV
    t5.y = _World2Object[0].z;
    //Instruction 41002
    //MOV
    t5.z = _World2Object[1].z;
    //Instruction 41003
    //MOV
    t5.x = _World2Object[2].z;
    //Instruction 41004
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 41005
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 41006
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 41007
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 41008
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 41009
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 41010
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 41011
    //DP3
    t48 = dot(t5.xyz, t5.xyz);
    //Instruction 41012
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 41013
    //MUL
    t5.xyz = vec3(t48) * t5.xyz;
    //Instruction 41014
    //MUL
    t10_15.xyz = t0.xyz * t5.xyz;
    //Instruction 41015
    //MAD
    t10_15.xyz = t0.zxy * t5.yzx + (-t10_15.xyz);
    //Instruction 41016
    //MUL
    t6.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 41017
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 41018
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 41019
    //MOV
    vs_TEXCOORD0.z = t0.y;
    //Instruction 41020
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 41021
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 41022
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 41023
    //MOV
    vs_TEXCOORD1.z = t0.z;
    //Instruction 41024
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 41025
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 41026
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 41027
    //MOV
    vs_TEXCOORD2.z = t0.x;
    //Instruction 41028
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 41029
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 41030
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 41031
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 41032
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 41033
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump float t16_3;
void main()
{
    //Instruction 40670
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 40671
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 40672
    //MOV
    t1.x = t16_0.x;
    //Instruction 40673
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 40674
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40675
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 40676
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40677
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40678
    //SAMPLE
    t10_1.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 40679
    //MAD
    t10_2.x = t10_1.x * _Color.w + (-_Cutoff);
    //Instruction 40680
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 40681
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40682
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 40683
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 40684
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 40685
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 40686
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 40687
    //MAD
    SV_Target0.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40688
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40689
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassFinal" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  ZWrite Off
  Cull [_Cull]
  GpuProgramID 224722
Program "vp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_58;
  mediump vec4 normal_59;
  normal_59 = tmpvar_57;
  mediump vec3 x2_60;
  mediump vec3 x1_61;
  x1_61.x = dot (unity_SHAr, normal_59);
  x1_61.y = dot (unity_SHAg, normal_59);
  x1_61.z = dot (unity_SHAb, normal_59);
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_62);
  x2_60.y = dot (unity_SHBg, tmpvar_62);
  x2_60.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_58 = ((x2_60 + (unity_SHC.xyz * 
    ((normal_59.x * normal_59.x) - (normal_59.y * normal_59.y))
  )) + x1_61);
  tmpvar_6 = tmpvar_58;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_51;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_9;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_10;
  c_10.xyz = (tmpvar_5 * light_3.xyz);
  c_10.w = tmpvar_6;
  c_2.xyz = c_10.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 41045
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41046
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 41047
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 41048
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41049
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 41050
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 41051
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 41052
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 41053
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 41054
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 41055
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 41056
    //IF
    if(tb25){
        //Instruction 41057
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 41058
        //IF
        if(tb25){
            //Instruction 41059
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41060
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 41061
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 41062
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 41063
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 41064
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 41065
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41066
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 41067
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41068
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 41069
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 41070
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 41071
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 41072
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41073
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 41074
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 41075
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 41076
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41077
            //FRC
            t0 = fract(t0);
            //Instruction 41078
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41079
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 41080
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41081
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41082
            //ADD
            t0 = t0 + t0;
            //Instruction 41083
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 41084
            //LT
            tb26 = t4.w<0.0;
            //Instruction 41085
            //MOV
            t4.y = (-t4.w);
            //Instruction 41086
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 41087
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 41088
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 41089
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 41090
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 41091
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 41092
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 41093
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41094
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41095
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 41096
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 41097
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41098
            //MUL
            t26 = t26 * t27;
            //Instruction 41099
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 41100
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41101
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41102
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41103
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41104
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 41105
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 41106
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41107
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 41108
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41109
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 41110
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 41111
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 41112
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 41113
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41114
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 41115
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 41116
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 41117
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41118
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 41119
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 41120
        //ELSE
        } else {
            //Instruction 41121
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41122
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 41123
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41124
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 41125
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 41126
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 41127
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 41128
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41129
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 41130
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 41131
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41132
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41133
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41134
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 41135
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41136
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41137
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 41138
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 41139
            //LT
            tb25 = t0.w<0.0;
            //Instruction 41140
            //MOV
            t0.y = (-t0.w);
            //Instruction 41141
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 41142
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 41143
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 41144
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 41145
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 41146
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 41147
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 41148
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41149
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41150
            //MUL
            t27 = t27 * t4.x;
            //Instruction 41151
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 41152
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 41153
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41154
        //ENDIF
        }
        //Instruction 41155
    //ELSE
    } else {
        //Instruction 41156
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 41157
    //ENDIF
    }
    //Instruction 41158
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 41159
    //SQRT
    t25 = sqrt(t25);
    //Instruction 41160
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41161
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 41162
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 41163
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 41164
    //NE
    tb3 = t26!=0.0;
    //Instruction 41165
    //LOG
    t11 = log2(t26);
    //Instruction 41166
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 41167
    //EXP
    t11 = exp2(t11);
    //Instruction 41168
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 41169
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41170
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41171
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 41172
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 41173
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41174
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 41175
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41176
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 41177
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 41178
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 41179
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41180
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 41181
    //MUL
    t26 = t26 * t3.x;
    //Instruction 41182
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 41183
    //MOV
    t3.y = t2.y;
    //Instruction 41184
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 41185
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 41186
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 41187
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 41188
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 41189
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 41190
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 41191
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 41192
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 41193
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 41194
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 41195
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 41196
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 41197
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 41198
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 41199
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 41200
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 41201
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 41202
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 41203
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 41204
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 41205
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 41206
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 41207
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 41208
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 41209
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 41210
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 41211
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 41212
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 41213
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 41214
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 41215
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 41216
    //MOV
    t1.w = 1.0;
    //Instruction 41217
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 41218
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 41219
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 41220
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 41221
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 41222
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 41223
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 41224
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 41225
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 41226
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 41227
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 41228
    //MOV
    gl_Position = t0;
    //Instruction 41229
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41230
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 41231
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 41232
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 41233
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41234
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 41235
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
void main()
{
    //Instruction 41034
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 41035
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 41036
    //MAX
    t16_1.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41037
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 41038
    //ADD
    t0.xyz = (-t16_1.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 41039
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 41040
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41041
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 41042
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 41043
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41044
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_58;
  mediump vec4 normal_59;
  normal_59 = tmpvar_57;
  mediump vec3 x2_60;
  mediump vec3 x1_61;
  x1_61.x = dot (unity_SHAr, normal_59);
  x1_61.y = dot (unity_SHAg, normal_59);
  x1_61.z = dot (unity_SHAb, normal_59);
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_62);
  x2_60.y = dot (unity_SHBg, tmpvar_62);
  x2_60.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_58 = ((x2_60 + (unity_SHC.xyz * 
    ((normal_59.x * normal_59.x) - (normal_59.y * normal_59.y))
  )) + x1_61);
  tmpvar_6 = tmpvar_58;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_51;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_10.w;
  light_3.xyz = (tmpvar_10.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 41246
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41247
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 41248
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 41249
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41250
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 41251
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 41252
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 41253
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 41254
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 41255
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 41256
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 41257
    //IF
    if(tb25){
        //Instruction 41258
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 41259
        //IF
        if(tb25){
            //Instruction 41260
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41261
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 41262
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 41263
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 41264
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 41265
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 41266
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41267
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 41268
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41269
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 41270
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 41271
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 41272
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 41273
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41274
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 41275
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 41276
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 41277
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41278
            //FRC
            t0 = fract(t0);
            //Instruction 41279
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41280
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 41281
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41282
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41283
            //ADD
            t0 = t0 + t0;
            //Instruction 41284
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 41285
            //LT
            tb26 = t4.w<0.0;
            //Instruction 41286
            //MOV
            t4.y = (-t4.w);
            //Instruction 41287
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 41288
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 41289
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 41290
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 41291
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 41292
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 41293
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 41294
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41295
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41296
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 41297
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 41298
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41299
            //MUL
            t26 = t26 * t27;
            //Instruction 41300
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 41301
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41302
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41303
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41304
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41305
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 41306
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 41307
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41308
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 41309
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41310
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 41311
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 41312
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 41313
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 41314
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41315
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 41316
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 41317
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 41318
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41319
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 41320
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 41321
        //ELSE
        } else {
            //Instruction 41322
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41323
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 41324
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41325
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 41326
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 41327
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 41328
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 41329
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41330
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 41331
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 41332
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41333
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41334
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41335
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 41336
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41337
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41338
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 41339
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 41340
            //LT
            tb25 = t0.w<0.0;
            //Instruction 41341
            //MOV
            t0.y = (-t0.w);
            //Instruction 41342
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 41343
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 41344
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 41345
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 41346
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 41347
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 41348
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 41349
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41350
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41351
            //MUL
            t27 = t27 * t4.x;
            //Instruction 41352
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 41353
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 41354
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41355
        //ENDIF
        }
        //Instruction 41356
    //ELSE
    } else {
        //Instruction 41357
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 41358
    //ENDIF
    }
    //Instruction 41359
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 41360
    //SQRT
    t25 = sqrt(t25);
    //Instruction 41361
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41362
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 41363
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 41364
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 41365
    //NE
    tb3 = t26!=0.0;
    //Instruction 41366
    //LOG
    t11 = log2(t26);
    //Instruction 41367
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 41368
    //EXP
    t11 = exp2(t11);
    //Instruction 41369
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 41370
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41371
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41372
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 41373
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 41374
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41375
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 41376
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41377
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 41378
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 41379
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 41380
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41381
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 41382
    //MUL
    t26 = t26 * t3.x;
    //Instruction 41383
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 41384
    //MOV
    t3.y = t2.y;
    //Instruction 41385
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 41386
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 41387
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 41388
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 41389
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 41390
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 41391
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 41392
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 41393
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 41394
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 41395
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 41396
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 41397
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 41398
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 41399
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 41400
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 41401
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 41402
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 41403
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 41404
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 41405
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 41406
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 41407
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 41408
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 41409
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 41410
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 41411
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 41412
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 41413
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 41414
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 41415
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 41416
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 41417
    //MOV
    t1.w = 1.0;
    //Instruction 41418
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 41419
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 41420
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 41421
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 41422
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 41423
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 41424
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 41425
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 41426
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 41427
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 41428
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 41429
    //MOV
    gl_Position = t0;
    //Instruction 41430
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41431
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 41432
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 41433
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 41434
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41435
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 41436
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
void main()
{
    //Instruction 41236
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 41237
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 41238
    //MAX
    t16_1.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41239
    //ADD
    t0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    //Instruction 41240
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 41241
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41242
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 41243
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 41244
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41245
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_53;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 41559
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41560
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 41561
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 41562
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 41563
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 41564
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 41565
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 41566
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 41567
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 41568
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 41569
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 41570
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41571
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41572
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41573
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 41574
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41575
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 41576
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 41577
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 41578
    //IF
    if(tb28){
        //Instruction 41579
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 41580
        //IF
        if(tb28){
            //Instruction 41581
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41582
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 41583
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 41584
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 41585
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 41586
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41587
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41588
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41589
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41590
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41591
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 41592
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 41593
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41594
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41595
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 41596
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41597
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41598
            //FRC
            t2 = fract(t2);
            //Instruction 41599
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41600
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 41601
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41602
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41603
            //ADD
            t2 = t2 + t2;
            //Instruction 41604
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 41605
            //LT
            tb30 = t5.w<0.0;
            //Instruction 41606
            //MOV
            t5.y = (-t5.w);
            //Instruction 41607
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 41608
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 41609
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 41610
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 41611
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 41612
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 41613
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 41614
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41615
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41616
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 41617
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 41618
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41619
            //MUL
            t30 = t30 * t31;
            //Instruction 41620
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 41621
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41622
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41623
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41624
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41625
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 41626
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 41627
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41628
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 41629
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41630
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 41631
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 41632
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 41633
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 41634
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41635
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 41636
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 41637
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 41638
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41639
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41640
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 41641
        //ELSE
        } else {
            //Instruction 41642
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41643
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41644
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41645
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41646
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 41647
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 41648
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41649
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 41650
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 41651
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41652
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41653
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41654
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 41655
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41656
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41657
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 41658
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 41659
            //LT
            tb0 = t2.w<0.0;
            //Instruction 41660
            //MOV
            t2.y = (-t2.w);
            //Instruction 41661
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 41662
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 41663
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 41664
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 41665
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 41666
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 41667
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 41668
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41669
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41670
            //MUL
            t30 = t30 * t5.x;
            //Instruction 41671
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 41672
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 41673
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41674
        //ENDIF
        }
        //Instruction 41675
    //ELSE
    } else {
        //Instruction 41676
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 41677
    //ENDIF
    }
    //Instruction 41678
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 41679
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 41680
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41681
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 41682
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 41683
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 41684
    //NE
    tb30 = t28!=0.0;
    //Instruction 41685
    //LOG
    t4.x = log2(t28);
    //Instruction 41686
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 41687
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 41688
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 41689
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41690
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41691
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 41692
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 41693
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41694
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 41695
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41696
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 41697
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 41698
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 41699
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41700
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 41701
    //MUL
    t28 = t28 * t30;
    //Instruction 41702
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 41703
    //MOV
    t4.y = t3.y;
    //Instruction 41704
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 41705
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41706
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 41707
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 41708
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 41709
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 41710
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 41711
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 41712
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 41713
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 41714
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 41715
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 41716
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 41717
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 41718
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 41719
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 41720
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 41721
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 41722
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 41723
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 41724
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 41725
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 41726
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 41727
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 41728
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 41729
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 41730
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 41731
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 41732
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 41733
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 41734
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 41735
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 41736
    //MOV
    t0.w = 1.0;
    //Instruction 41737
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 41738
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 41739
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 41740
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 41741
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 41742
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 41743
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 41744
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 41745
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 41746
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 41747
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 41748
    //MOV
    gl_Position = t2;
    //Instruction 41749
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41750
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 41751
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 41752
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 41753
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41754
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 41755
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 41539
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 41540
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 41541
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 41542
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 41543
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 41544
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 41545
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 41546
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 41547
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 41548
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 41549
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41550
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 41551
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 41552
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41553
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 41554
    //ADD
    t0.xyz = (-t16_2.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 41555
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 41556
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 41557
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41558
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_53;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_12.w;
  light_3.xyz = (tmpvar_12.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 41775
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41776
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 41777
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 41778
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 41779
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 41780
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 41781
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 41782
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 41783
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 41784
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 41785
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 41786
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41787
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41788
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41789
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 41790
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41791
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 41792
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 41793
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 41794
    //IF
    if(tb28){
        //Instruction 41795
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 41796
        //IF
        if(tb28){
            //Instruction 41797
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41798
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 41799
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 41800
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 41801
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 41802
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41803
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41804
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41805
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41806
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41807
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 41808
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 41809
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41810
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41811
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 41812
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41813
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41814
            //FRC
            t2 = fract(t2);
            //Instruction 41815
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41816
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 41817
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41818
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41819
            //ADD
            t2 = t2 + t2;
            //Instruction 41820
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 41821
            //LT
            tb30 = t5.w<0.0;
            //Instruction 41822
            //MOV
            t5.y = (-t5.w);
            //Instruction 41823
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 41824
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 41825
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 41826
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 41827
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 41828
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 41829
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 41830
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41831
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41832
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 41833
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 41834
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41835
            //MUL
            t30 = t30 * t31;
            //Instruction 41836
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 41837
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41838
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41839
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41840
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41841
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 41842
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 41843
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41844
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 41845
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41846
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 41847
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 41848
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 41849
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 41850
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41851
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 41852
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 41853
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 41854
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41855
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41856
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 41857
        //ELSE
        } else {
            //Instruction 41858
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41859
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41860
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41861
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41862
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 41863
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 41864
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41865
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 41866
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 41867
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41868
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41869
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41870
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 41871
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41872
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41873
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 41874
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 41875
            //LT
            tb0 = t2.w<0.0;
            //Instruction 41876
            //MOV
            t2.y = (-t2.w);
            //Instruction 41877
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 41878
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 41879
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 41880
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 41881
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 41882
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 41883
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 41884
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41885
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41886
            //MUL
            t30 = t30 * t5.x;
            //Instruction 41887
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 41888
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 41889
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41890
        //ENDIF
        }
        //Instruction 41891
    //ELSE
    } else {
        //Instruction 41892
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 41893
    //ENDIF
    }
    //Instruction 41894
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 41895
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 41896
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41897
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 41898
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 41899
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 41900
    //NE
    tb30 = t28!=0.0;
    //Instruction 41901
    //LOG
    t4.x = log2(t28);
    //Instruction 41902
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 41903
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 41904
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 41905
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41906
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41907
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 41908
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 41909
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41910
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 41911
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41912
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 41913
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 41914
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 41915
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41916
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 41917
    //MUL
    t28 = t28 * t30;
    //Instruction 41918
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 41919
    //MOV
    t4.y = t3.y;
    //Instruction 41920
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 41921
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41922
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 41923
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 41924
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 41925
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 41926
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 41927
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 41928
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 41929
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 41930
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 41931
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 41932
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 41933
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 41934
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 41935
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 41936
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 41937
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 41938
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 41939
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 41940
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 41941
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 41942
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 41943
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 41944
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 41945
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 41946
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 41947
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 41948
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 41949
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 41950
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 41951
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 41952
    //MOV
    t0.w = 1.0;
    //Instruction 41953
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 41954
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 41955
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 41956
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 41957
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 41958
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 41959
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 41960
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 41961
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 41962
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 41963
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 41964
    //MOV
    gl_Position = t2;
    //Instruction 41965
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41966
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 41967
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 41968
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 41969
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41970
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 41971
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 41756
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 41757
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 41758
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 41759
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 41760
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 41761
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 41762
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 41763
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 41764
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 41765
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 41766
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41767
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 41768
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 41769
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41770
    //ADD
    t0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 41771
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 41772
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 41773
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41774
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_53;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 41457
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41458
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 41459
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 41460
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 41461
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 41462
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 41463
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 41464
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 41465
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 41466
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 41467
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 41468
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41469
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41470
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41471
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 41472
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41473
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 41474
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 41475
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 41476
    //IF
    if(tb28){
        //Instruction 41477
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 41478
        //IF
        if(tb28){
            //Instruction 41479
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41480
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 41481
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 41482
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 41483
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 41484
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41485
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41486
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41487
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41488
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41489
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 41490
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 41491
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41492
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41493
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 41494
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41495
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41496
            //FRC
            t2 = fract(t2);
            //Instruction 41497
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41498
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 41499
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41500
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41501
            //ADD
            t2 = t2 + t2;
            //Instruction 41502
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 41503
            //LT
            tb30 = t5.w<0.0;
            //Instruction 41504
            //MOV
            t5.y = (-t5.w);
            //Instruction 41505
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 41506
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 41507
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 41508
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 41509
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 41510
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 41511
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 41512
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41513
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41514
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 41515
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 41516
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41517
            //MUL
            t30 = t30 * t31;
            //Instruction 41518
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 41519
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41520
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41521
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41522
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41523
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 41524
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 41525
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41526
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 41527
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41528
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 41529
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 41530
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 41531
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 41532
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41533
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 41534
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 41535
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 41536
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41537
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41538
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 41539
        //ELSE
        } else {
            //Instruction 41540
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41541
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41542
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41543
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41544
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 41545
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 41546
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41547
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 41548
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 41549
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41550
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41551
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41552
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 41553
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41554
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41555
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 41556
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 41557
            //LT
            tb0 = t2.w<0.0;
            //Instruction 41558
            //MOV
            t2.y = (-t2.w);
            //Instruction 41559
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 41560
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 41561
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 41562
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 41563
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 41564
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 41565
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 41566
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41567
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41568
            //MUL
            t30 = t30 * t5.x;
            //Instruction 41569
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 41570
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 41571
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41572
        //ENDIF
        }
        //Instruction 41573
    //ELSE
    } else {
        //Instruction 41574
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 41575
    //ENDIF
    }
    //Instruction 41576
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 41577
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 41578
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41579
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 41580
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 41581
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 41582
    //NE
    tb30 = t28!=0.0;
    //Instruction 41583
    //LOG
    t4.x = log2(t28);
    //Instruction 41584
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 41585
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 41586
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 41587
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41588
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41589
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 41590
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 41591
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41592
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 41593
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41594
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 41595
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 41596
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 41597
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41598
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 41599
    //MUL
    t28 = t28 * t30;
    //Instruction 41600
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 41601
    //MOV
    t4.y = t3.y;
    //Instruction 41602
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 41603
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41604
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 41605
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 41606
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 41607
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 41608
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 41609
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 41610
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 41611
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 41612
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 41613
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 41614
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 41615
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 41616
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 41617
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 41618
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 41619
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 41620
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 41621
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 41622
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 41623
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 41624
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 41625
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 41626
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 41627
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 41628
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 41629
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 41630
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 41631
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 41632
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 41633
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 41634
    //MOV
    t0.w = 1.0;
    //Instruction 41635
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 41636
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 41637
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 41638
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 41639
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 41640
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 41641
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 41642
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 41643
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 41644
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 41645
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 41646
    //MOV
    gl_Position = t2;
    //Instruction 41647
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41648
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 41649
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 41650
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 41651
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41652
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 41653
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 41437
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 41438
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 41439
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 41440
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 41441
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 41442
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 41443
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 41444
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 41445
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 41446
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 41447
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41448
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 41449
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 41450
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41451
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 41452
    //ADD
    t0.xyz = (-t16_2.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 41453
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 41454
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 41455
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41456
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_53;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_12.w;
  light_3.xyz = (tmpvar_12.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 41012
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41013
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 41014
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 41015
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 41016
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 41017
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 41018
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 41019
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 41020
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 41021
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 41022
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 41023
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41024
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41025
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41026
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 41027
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41028
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 41029
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 41030
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 41031
    //IF
    if(tb28){
        //Instruction 41032
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 41033
        //IF
        if(tb28){
            //Instruction 41034
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41035
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 41036
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 41037
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 41038
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 41039
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41040
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41041
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41042
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41043
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41044
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 41045
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 41046
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41047
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41048
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 41049
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41050
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41051
            //FRC
            t2 = fract(t2);
            //Instruction 41052
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41053
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 41054
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41055
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41056
            //ADD
            t2 = t2 + t2;
            //Instruction 41057
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 41058
            //LT
            tb30 = t5.w<0.0;
            //Instruction 41059
            //MOV
            t5.y = (-t5.w);
            //Instruction 41060
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 41061
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 41062
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 41063
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 41064
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 41065
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 41066
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 41067
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41068
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41069
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 41070
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 41071
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41072
            //MUL
            t30 = t30 * t31;
            //Instruction 41073
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 41074
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41075
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41076
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41077
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41078
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 41079
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 41080
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41081
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 41082
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41083
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 41084
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 41085
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 41086
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 41087
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41088
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 41089
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 41090
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 41091
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41092
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41093
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 41094
        //ELSE
        } else {
            //Instruction 41095
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41096
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41097
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41098
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41099
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 41100
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 41101
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41102
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 41103
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 41104
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41105
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41106
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41107
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 41108
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41109
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41110
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 41111
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 41112
            //LT
            tb0 = t2.w<0.0;
            //Instruction 41113
            //MOV
            t2.y = (-t2.w);
            //Instruction 41114
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 41115
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 41116
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 41117
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 41118
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 41119
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 41120
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 41121
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41122
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41123
            //MUL
            t30 = t30 * t5.x;
            //Instruction 41124
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 41125
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 41126
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41127
        //ENDIF
        }
        //Instruction 41128
    //ELSE
    } else {
        //Instruction 41129
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 41130
    //ENDIF
    }
    //Instruction 41131
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 41132
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 41133
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41134
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 41135
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 41136
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 41137
    //NE
    tb30 = t28!=0.0;
    //Instruction 41138
    //LOG
    t4.x = log2(t28);
    //Instruction 41139
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 41140
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 41141
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 41142
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41143
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41144
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 41145
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 41146
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41147
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 41148
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41149
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 41150
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 41151
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 41152
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41153
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 41154
    //MUL
    t28 = t28 * t30;
    //Instruction 41155
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 41156
    //MOV
    t4.y = t3.y;
    //Instruction 41157
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 41158
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41159
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 41160
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 41161
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 41162
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 41163
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 41164
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 41165
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 41166
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 41167
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 41168
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 41169
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 41170
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 41171
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 41172
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 41173
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 41174
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 41175
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 41176
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 41177
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 41178
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 41179
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 41180
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 41181
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 41182
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 41183
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 41184
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 41185
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 41186
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 41187
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 41188
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 41189
    //MOV
    t0.w = 1.0;
    //Instruction 41190
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 41191
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 41192
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 41193
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 41194
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 41195
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 41196
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 41197
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 41198
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 41199
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 41200
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 41201
    //MOV
    gl_Position = t2;
    //Instruction 41202
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41203
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 41204
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 41205
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 41206
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41207
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 41208
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 40993
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 40994
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 40995
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 40996
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 40997
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 40998
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 40999
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 41000
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 41001
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 41002
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 41003
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41004
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 41005
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 41006
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41007
    //ADD
    t0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 41008
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 41009
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 41010
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41011
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_53;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_7 = tmpvar_10;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_11;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 41987
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41988
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 41989
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 41990
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41991
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 41992
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 41993
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 41994
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 41995
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 41996
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 41997
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 41998
    //IF
    if(tb25){
        //Instruction 41999
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 42000
        //IF
        if(tb25){
            //Instruction 42001
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42002
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 42003
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 42004
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 42005
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 42006
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 42007
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42008
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 42009
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42010
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 42011
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 42012
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 42013
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 42014
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42015
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 42016
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 42017
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 42018
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42019
            //FRC
            t0 = fract(t0);
            //Instruction 42020
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42021
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 42022
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42023
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42024
            //ADD
            t0 = t0 + t0;
            //Instruction 42025
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 42026
            //LT
            tb26 = t4.w<0.0;
            //Instruction 42027
            //MOV
            t4.y = (-t4.w);
            //Instruction 42028
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 42029
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 42030
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 42031
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 42032
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 42033
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 42034
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 42035
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42036
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42037
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 42038
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 42039
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42040
            //MUL
            t26 = t26 * t27;
            //Instruction 42041
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 42042
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 42043
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42044
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42045
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42046
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 42047
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 42048
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42049
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 42050
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42051
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 42052
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 42053
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 42054
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 42055
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42056
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 42057
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 42058
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 42059
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42060
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 42061
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 42062
        //ELSE
        } else {
            //Instruction 42063
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42064
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 42065
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42066
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 42067
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 42068
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 42069
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 42070
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42071
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 42072
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 42073
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42074
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42075
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42076
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 42077
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42078
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42079
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 42080
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 42081
            //LT
            tb25 = t0.w<0.0;
            //Instruction 42082
            //MOV
            t0.y = (-t0.w);
            //Instruction 42083
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 42084
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 42085
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 42086
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 42087
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 42088
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 42089
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 42090
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42091
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42092
            //MUL
            t27 = t27 * t4.x;
            //Instruction 42093
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 42094
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 42095
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 42096
        //ENDIF
        }
        //Instruction 42097
    //ELSE
    } else {
        //Instruction 42098
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 42099
    //ENDIF
    }
    //Instruction 42100
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 42101
    //SQRT
    t25 = sqrt(t25);
    //Instruction 42102
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42103
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 42104
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 42105
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 42106
    //NE
    tb3 = t26!=0.0;
    //Instruction 42107
    //LOG
    t11 = log2(t26);
    //Instruction 42108
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 42109
    //EXP
    t11 = exp2(t11);
    //Instruction 42110
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 42111
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42112
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42113
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 42114
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 42115
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42116
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 42117
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42118
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 42119
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 42120
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 42121
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42122
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 42123
    //MUL
    t26 = t26 * t3.x;
    //Instruction 42124
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 42125
    //MOV
    t3.y = t2.y;
    //Instruction 42126
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 42127
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 42128
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 42129
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 42130
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 42131
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 42132
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 42133
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 42134
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 42135
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 42136
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 42137
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 42138
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 42139
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 42140
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 42141
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 42142
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 42143
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 42144
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 42145
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 42146
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 42147
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 42148
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 42149
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 42150
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 42151
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 42152
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 42153
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 42154
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 42155
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 42156
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 42157
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 42158
    //MOV
    t1.w = 1.0;
    //Instruction 42159
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 42160
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 42161
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 42162
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 42163
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 42164
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 42165
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 42166
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 42167
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 42168
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 42169
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 42170
    //MOV
    gl_Position = t0;
    //Instruction 42171
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42172
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 42173
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 42174
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 42175
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 42176
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 42177
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 42178
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42179
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 42180
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
void main()
{
    //Instruction 41972
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 41973
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 41974
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 41975
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 41976
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 41977
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41978
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 41979
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 41980
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41981
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 41982
    //ADD
    t1.xyz = (-t16_3.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 41983
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 41984
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 41985
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41986
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_53;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_7 = tmpvar_10;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_12.w;
  light_3.xyz = (tmpvar_12.xyz + xlv_TEXCOORD6);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 42195
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42196
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 42197
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 42198
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42199
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 42200
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 42201
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 42202
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 42203
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 42204
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 42205
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 42206
    //IF
    if(tb25){
        //Instruction 42207
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 42208
        //IF
        if(tb25){
            //Instruction 42209
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42210
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 42211
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 42212
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 42213
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 42214
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 42215
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42216
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 42217
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42218
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 42219
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 42220
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 42221
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 42222
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42223
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 42224
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 42225
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 42226
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42227
            //FRC
            t0 = fract(t0);
            //Instruction 42228
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42229
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 42230
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42231
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42232
            //ADD
            t0 = t0 + t0;
            //Instruction 42233
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 42234
            //LT
            tb26 = t4.w<0.0;
            //Instruction 42235
            //MOV
            t4.y = (-t4.w);
            //Instruction 42236
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 42237
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 42238
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 42239
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 42240
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 42241
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 42242
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 42243
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42244
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42245
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 42246
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 42247
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42248
            //MUL
            t26 = t26 * t27;
            //Instruction 42249
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 42250
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 42251
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42252
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42253
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42254
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 42255
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 42256
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42257
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 42258
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42259
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 42260
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 42261
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 42262
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 42263
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42264
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 42265
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 42266
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 42267
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42268
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 42269
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 42270
        //ELSE
        } else {
            //Instruction 42271
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42272
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 42273
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42274
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 42275
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 42276
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 42277
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 42278
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42279
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 42280
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 42281
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42282
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42283
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42284
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 42285
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42286
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42287
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 42288
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 42289
            //LT
            tb25 = t0.w<0.0;
            //Instruction 42290
            //MOV
            t0.y = (-t0.w);
            //Instruction 42291
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 42292
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 42293
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 42294
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 42295
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 42296
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 42297
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 42298
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42299
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42300
            //MUL
            t27 = t27 * t4.x;
            //Instruction 42301
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 42302
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 42303
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 42304
        //ENDIF
        }
        //Instruction 42305
    //ELSE
    } else {
        //Instruction 42306
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 42307
    //ENDIF
    }
    //Instruction 42308
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 42309
    //SQRT
    t25 = sqrt(t25);
    //Instruction 42310
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42311
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 42312
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 42313
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 42314
    //NE
    tb3 = t26!=0.0;
    //Instruction 42315
    //LOG
    t11 = log2(t26);
    //Instruction 42316
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 42317
    //EXP
    t11 = exp2(t11);
    //Instruction 42318
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 42319
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42320
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42321
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 42322
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 42323
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42324
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 42325
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42326
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 42327
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 42328
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 42329
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42330
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 42331
    //MUL
    t26 = t26 * t3.x;
    //Instruction 42332
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 42333
    //MOV
    t3.y = t2.y;
    //Instruction 42334
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 42335
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 42336
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 42337
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 42338
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 42339
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 42340
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 42341
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 42342
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 42343
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 42344
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 42345
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 42346
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 42347
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 42348
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 42349
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 42350
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 42351
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 42352
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 42353
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 42354
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 42355
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 42356
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 42357
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 42358
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 42359
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 42360
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 42361
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 42362
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 42363
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 42364
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 42365
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 42366
    //MOV
    t1.w = 1.0;
    //Instruction 42367
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 42368
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 42369
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 42370
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 42371
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 42372
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 42373
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 42374
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 42375
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 42376
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 42377
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 42378
    //MOV
    gl_Position = t0;
    //Instruction 42379
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42380
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 42381
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 42382
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 42383
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 42384
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 42385
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 42386
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42387
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 42388
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
void main()
{
    //Instruction 42181
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 42182
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 42183
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 42184
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 42185
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 42186
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42187
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 42188
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 42189
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42190
    //ADD
    t1.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 42191
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 42192
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 42193
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42194
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_62;
  mediump vec4 normal_63;
  normal_63 = tmpvar_61;
  mediump vec3 x2_64;
  mediump vec3 x1_65;
  x1_65.x = dot (unity_SHAr, normal_63);
  x1_65.y = dot (unity_SHAg, normal_63);
  x1_65.z = dot (unity_SHAb, normal_63);
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_66);
  x2_64.y = dot (unity_SHBg, tmpvar_66);
  x2_64.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_62 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + x1_65);
  tmpvar_6 = tmpvar_62;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_55;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_10;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_11;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_12 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 41233
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41234
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 41235
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 41236
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 41237
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 41238
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 41239
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 41240
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 41241
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 41242
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 41243
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 41244
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41245
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41246
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41247
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 41248
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41249
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 41250
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 41251
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 41252
    //IF
    if(tb28){
        //Instruction 41253
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 41254
        //IF
        if(tb28){
            //Instruction 41255
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41256
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 41257
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 41258
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 41259
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 41260
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41261
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41262
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41263
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41264
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41265
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 41266
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 41267
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41268
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41269
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 41270
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41271
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41272
            //FRC
            t2 = fract(t2);
            //Instruction 41273
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41274
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 41275
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41276
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41277
            //ADD
            t2 = t2 + t2;
            //Instruction 41278
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 41279
            //LT
            tb30 = t5.w<0.0;
            //Instruction 41280
            //MOV
            t5.y = (-t5.w);
            //Instruction 41281
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 41282
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 41283
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 41284
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 41285
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 41286
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 41287
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 41288
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41289
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41290
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 41291
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 41292
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41293
            //MUL
            t30 = t30 * t31;
            //Instruction 41294
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 41295
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41296
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41297
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41298
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41299
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 41300
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 41301
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41302
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 41303
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41304
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 41305
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 41306
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 41307
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 41308
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41309
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 41310
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 41311
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 41312
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41313
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41314
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 41315
        //ELSE
        } else {
            //Instruction 41316
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41317
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41318
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41319
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41320
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 41321
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 41322
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41323
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 41324
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 41325
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41326
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41327
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41328
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 41329
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41330
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41331
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 41332
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 41333
            //LT
            tb0 = t2.w<0.0;
            //Instruction 41334
            //MOV
            t2.y = (-t2.w);
            //Instruction 41335
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 41336
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 41337
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 41338
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 41339
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 41340
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 41341
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 41342
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41343
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41344
            //MUL
            t30 = t30 * t5.x;
            //Instruction 41345
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 41346
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 41347
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41348
        //ENDIF
        }
        //Instruction 41349
    //ELSE
    } else {
        //Instruction 41350
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 41351
    //ENDIF
    }
    //Instruction 41352
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 41353
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 41354
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41355
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 41356
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 41357
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 41358
    //NE
    tb30 = t28!=0.0;
    //Instruction 41359
    //LOG
    t4.x = log2(t28);
    //Instruction 41360
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 41361
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 41362
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 41363
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41364
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41365
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 41366
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 41367
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41368
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 41369
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41370
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 41371
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 41372
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 41373
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41374
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 41375
    //MUL
    t28 = t28 * t30;
    //Instruction 41376
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 41377
    //MOV
    t4.y = t3.y;
    //Instruction 41378
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 41379
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41380
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 41381
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 41382
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 41383
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 41384
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 41385
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 41386
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 41387
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 41388
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 41389
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 41390
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 41391
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 41392
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 41393
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 41394
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 41395
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 41396
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 41397
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 41398
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 41399
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 41400
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 41401
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 41402
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 41403
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 41404
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 41405
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 41406
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 41407
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 41408
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 41409
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 41410
    //MOV
    t0.w = 1.0;
    //Instruction 41411
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 41412
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 41413
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 41414
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 41415
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 41416
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 41417
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 41418
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 41419
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 41420
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 41421
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 41422
    //MOV
    gl_Position = t2;
    //Instruction 41423
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41424
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 41425
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 41426
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 41427
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 41428
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 41429
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 41430
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41431
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 41432
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 41209
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 41210
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 41211
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 41212
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 41213
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 41214
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 41215
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 41216
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 41217
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 41218
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 41219
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 41220
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 41221
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 41222
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 41223
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41224
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 41225
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 41226
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41227
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 41228
    //ADD
    t1.xyz = (-t16_3.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 41229
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 41230
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 41231
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41232
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_62;
  mediump vec4 normal_63;
  normal_63 = tmpvar_61;
  mediump vec3 x2_64;
  mediump vec3 x1_65;
  x1_65.x = dot (unity_SHAr, normal_63);
  x1_65.y = dot (unity_SHAg, normal_63);
  x1_65.z = dot (unity_SHAb, normal_63);
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_66);
  x2_64.y = dot (unity_SHBg, tmpvar_66);
  x2_64.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_62 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + x1_65);
  tmpvar_6 = tmpvar_62;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_55;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_10;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_11;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_12 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 41677
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41678
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 41679
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 41680
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 41681
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 41682
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 41683
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 41684
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 41685
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 41686
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 41687
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 41688
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41689
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41690
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41691
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 41692
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41693
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 41694
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 41695
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 41696
    //IF
    if(tb28){
        //Instruction 41697
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 41698
        //IF
        if(tb28){
            //Instruction 41699
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41700
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 41701
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 41702
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 41703
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 41704
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41705
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41706
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41707
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41708
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41709
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 41710
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 41711
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41712
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41713
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 41714
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41715
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41716
            //FRC
            t2 = fract(t2);
            //Instruction 41717
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41718
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 41719
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41720
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41721
            //ADD
            t2 = t2 + t2;
            //Instruction 41722
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 41723
            //LT
            tb30 = t5.w<0.0;
            //Instruction 41724
            //MOV
            t5.y = (-t5.w);
            //Instruction 41725
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 41726
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 41727
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 41728
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 41729
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 41730
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 41731
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 41732
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41733
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41734
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 41735
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 41736
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41737
            //MUL
            t30 = t30 * t31;
            //Instruction 41738
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 41739
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41740
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41741
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41742
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41743
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 41744
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 41745
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41746
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 41747
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41748
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 41749
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 41750
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 41751
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 41752
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41753
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 41754
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 41755
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 41756
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41757
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41758
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 41759
        //ELSE
        } else {
            //Instruction 41760
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41761
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41762
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41763
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41764
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 41765
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 41766
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41767
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 41768
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 41769
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41770
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41771
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41772
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 41773
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41774
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41775
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 41776
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 41777
            //LT
            tb0 = t2.w<0.0;
            //Instruction 41778
            //MOV
            t2.y = (-t2.w);
            //Instruction 41779
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 41780
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 41781
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 41782
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 41783
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 41784
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 41785
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 41786
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41787
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41788
            //MUL
            t30 = t30 * t5.x;
            //Instruction 41789
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 41790
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 41791
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41792
        //ENDIF
        }
        //Instruction 41793
    //ELSE
    } else {
        //Instruction 41794
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 41795
    //ENDIF
    }
    //Instruction 41796
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 41797
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 41798
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41799
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 41800
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 41801
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 41802
    //NE
    tb30 = t28!=0.0;
    //Instruction 41803
    //LOG
    t4.x = log2(t28);
    //Instruction 41804
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 41805
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 41806
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 41807
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41808
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41809
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 41810
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 41811
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41812
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 41813
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41814
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 41815
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 41816
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 41817
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41818
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 41819
    //MUL
    t28 = t28 * t30;
    //Instruction 41820
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 41821
    //MOV
    t4.y = t3.y;
    //Instruction 41822
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 41823
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41824
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 41825
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 41826
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 41827
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 41828
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 41829
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 41830
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 41831
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 41832
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 41833
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 41834
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 41835
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 41836
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 41837
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 41838
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 41839
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 41840
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 41841
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 41842
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 41843
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 41844
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 41845
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 41846
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 41847
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 41848
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 41849
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 41850
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 41851
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 41852
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 41853
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 41854
    //MOV
    t0.w = 1.0;
    //Instruction 41855
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 41856
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 41857
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 41858
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 41859
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 41860
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 41861
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 41862
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 41863
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 41864
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 41865
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 41866
    //MOV
    gl_Position = t2;
    //Instruction 41867
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41868
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 41869
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 41870
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 41871
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 41872
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 41873
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 41874
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41875
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 41876
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 41654
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 41655
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 41656
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 41657
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 41658
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 41659
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 41660
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 41661
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 41662
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 41663
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 41664
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 41665
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 41666
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 41667
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 41668
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41669
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 41670
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 41671
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41672
    //ADD
    t1.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 41673
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 41674
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 41675
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41676
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_62;
  mediump vec4 normal_63;
  normal_63 = tmpvar_61;
  mediump vec3 x2_64;
  mediump vec3 x1_65;
  x1_65.x = dot (unity_SHAr, normal_63);
  x1_65.y = dot (unity_SHAg, normal_63);
  x1_65.z = dot (unity_SHAb, normal_63);
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_66);
  x2_64.y = dot (unity_SHBg, tmpvar_66);
  x2_64.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_62 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + x1_65);
  tmpvar_6 = tmpvar_62;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_55;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_10;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_11;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_12 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 42413
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42414
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 42415
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 42416
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 42417
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 42418
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 42419
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 42420
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 42421
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 42422
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 42423
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 42424
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42425
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 42426
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 42427
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 42428
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 42429
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 42430
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 42431
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 42432
    //IF
    if(tb28){
        //Instruction 42433
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 42434
        //IF
        if(tb28){
            //Instruction 42435
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42436
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 42437
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 42438
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 42439
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 42440
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 42441
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42442
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42443
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42444
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 42445
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 42446
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 42447
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42448
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 42449
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 42450
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 42451
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42452
            //FRC
            t2 = fract(t2);
            //Instruction 42453
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42454
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 42455
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42456
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42457
            //ADD
            t2 = t2 + t2;
            //Instruction 42458
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 42459
            //LT
            tb30 = t5.w<0.0;
            //Instruction 42460
            //MOV
            t5.y = (-t5.w);
            //Instruction 42461
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 42462
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 42463
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 42464
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 42465
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 42466
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 42467
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 42468
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42469
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42470
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 42471
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 42472
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42473
            //MUL
            t30 = t30 * t31;
            //Instruction 42474
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 42475
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 42476
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42477
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42478
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42479
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 42480
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 42481
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42482
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 42483
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42484
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 42485
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 42486
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 42487
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 42488
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42489
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 42490
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 42491
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 42492
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42493
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 42494
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 42495
        //ELSE
        } else {
            //Instruction 42496
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42497
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42498
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42499
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 42500
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 42501
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 42502
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42503
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 42504
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 42505
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42506
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42507
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42508
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 42509
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42510
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42511
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 42512
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 42513
            //LT
            tb0 = t2.w<0.0;
            //Instruction 42514
            //MOV
            t2.y = (-t2.w);
            //Instruction 42515
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 42516
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 42517
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 42518
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 42519
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 42520
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 42521
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 42522
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42523
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42524
            //MUL
            t30 = t30 * t5.x;
            //Instruction 42525
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 42526
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 42527
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 42528
        //ENDIF
        }
        //Instruction 42529
    //ELSE
    } else {
        //Instruction 42530
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 42531
    //ENDIF
    }
    //Instruction 42532
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 42533
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 42534
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42535
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 42536
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 42537
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 42538
    //NE
    tb30 = t28!=0.0;
    //Instruction 42539
    //LOG
    t4.x = log2(t28);
    //Instruction 42540
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 42541
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 42542
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 42543
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42544
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42545
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 42546
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 42547
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42548
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 42549
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42550
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 42551
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 42552
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 42553
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42554
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 42555
    //MUL
    t28 = t28 * t30;
    //Instruction 42556
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 42557
    //MOV
    t4.y = t3.y;
    //Instruction 42558
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 42559
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 42560
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 42561
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 42562
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 42563
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 42564
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 42565
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 42566
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 42567
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 42568
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 42569
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 42570
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 42571
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 42572
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 42573
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 42574
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 42575
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 42576
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 42577
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 42578
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 42579
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 42580
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 42581
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 42582
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 42583
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 42584
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 42585
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 42586
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 42587
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 42588
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 42589
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 42590
    //MOV
    t0.w = 1.0;
    //Instruction 42591
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 42592
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 42593
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 42594
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 42595
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 42596
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 42597
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 42598
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 42599
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 42600
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 42601
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 42602
    //MOV
    gl_Position = t2;
    //Instruction 42603
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42604
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 42605
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 42606
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 42607
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 42608
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 42609
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 42610
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42611
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 42612
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 42389
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 42390
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 42391
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 42392
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 42393
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 42394
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 42395
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 42396
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 42397
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 42398
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 42399
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 42400
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 42401
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 42402
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 42403
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42404
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 42405
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 42406
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42407
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 42408
    //ADD
    t1.xyz = (-t16_3.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 42409
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 42410
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 42411
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42412
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_62;
  mediump vec4 normal_63;
  normal_63 = tmpvar_61;
  mediump vec3 x2_64;
  mediump vec3 x1_65;
  x1_65.x = dot (unity_SHAr, normal_63);
  x1_65.y = dot (unity_SHAg, normal_63);
  x1_65.z = dot (unity_SHAb, normal_63);
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_66);
  x2_64.y = dot (unity_SHBg, tmpvar_66);
  x2_64.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_62 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + x1_65);
  tmpvar_6 = tmpvar_62;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_55;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_10;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_11;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_12 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 41456
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41457
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 41458
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 41459
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 41460
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 41461
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 41462
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 41463
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 41464
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 41465
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 41466
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 41467
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41468
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41469
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41470
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 41471
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41472
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 41473
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 41474
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 41475
    //IF
    if(tb28){
        //Instruction 41476
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 41477
        //IF
        if(tb28){
            //Instruction 41478
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41479
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 41480
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 41481
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 41482
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 41483
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41484
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41485
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41486
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41487
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41488
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 41489
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 41490
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41491
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41492
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 41493
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41494
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41495
            //FRC
            t2 = fract(t2);
            //Instruction 41496
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41497
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 41498
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41499
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41500
            //ADD
            t2 = t2 + t2;
            //Instruction 41501
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 41502
            //LT
            tb30 = t5.w<0.0;
            //Instruction 41503
            //MOV
            t5.y = (-t5.w);
            //Instruction 41504
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 41505
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 41506
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 41507
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 41508
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 41509
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 41510
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 41511
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41512
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41513
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 41514
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 41515
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41516
            //MUL
            t30 = t30 * t31;
            //Instruction 41517
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 41518
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41519
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41520
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41521
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41522
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 41523
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 41524
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41525
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 41526
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41527
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 41528
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 41529
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 41530
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 41531
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41532
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 41533
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 41534
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 41535
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41536
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 41537
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 41538
        //ELSE
        } else {
            //Instruction 41539
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41540
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41541
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41542
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41543
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 41544
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 41545
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41546
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 41547
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 41548
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41549
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41550
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41551
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 41552
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41553
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41554
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 41555
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 41556
            //LT
            tb0 = t2.w<0.0;
            //Instruction 41557
            //MOV
            t2.y = (-t2.w);
            //Instruction 41558
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 41559
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 41560
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 41561
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 41562
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 41563
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 41564
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 41565
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41566
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41567
            //MUL
            t30 = t30 * t5.x;
            //Instruction 41568
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 41569
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 41570
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 41571
        //ENDIF
        }
        //Instruction 41572
    //ELSE
    } else {
        //Instruction 41573
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 41574
    //ENDIF
    }
    //Instruction 41575
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 41576
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 41577
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41578
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 41579
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 41580
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 41581
    //NE
    tb30 = t28!=0.0;
    //Instruction 41582
    //LOG
    t4.x = log2(t28);
    //Instruction 41583
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 41584
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 41585
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 41586
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41587
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41588
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 41589
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 41590
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41591
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 41592
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41593
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 41594
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 41595
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 41596
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41597
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 41598
    //MUL
    t28 = t28 * t30;
    //Instruction 41599
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 41600
    //MOV
    t4.y = t3.y;
    //Instruction 41601
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 41602
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41603
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 41604
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 41605
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 41606
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 41607
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 41608
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 41609
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 41610
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 41611
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 41612
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 41613
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 41614
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 41615
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 41616
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 41617
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 41618
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 41619
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 41620
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 41621
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 41622
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 41623
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 41624
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 41625
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 41626
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 41627
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 41628
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 41629
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 41630
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 41631
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 41632
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 41633
    //MOV
    t0.w = 1.0;
    //Instruction 41634
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 41635
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 41636
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 41637
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 41638
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 41639
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 41640
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 41641
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 41642
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 41643
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 41644
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 41645
    //MOV
    gl_Position = t2;
    //Instruction 41646
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41647
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 41648
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 41649
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 41650
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 41651
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 41652
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 41653
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41654
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 41655
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 41433
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 41434
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 41435
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 41436
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 41437
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 41438
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 41439
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 41440
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 41441
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 41442
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 41443
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 41444
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 41445
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 41446
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 41447
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41448
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 41449
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 41450
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41451
    //ADD
    t1.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 41452
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 41453
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 41454
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41455
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * tmpvar_11.x)
   + 
    (v_61.xyz * tmpvar_11.y)
  ) + (v_62.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_7 = tmpvar_64;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_57;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 41670
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41671
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 41672
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 41673
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41674
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 41675
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 41676
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 41677
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 41678
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 41679
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 41680
    //EQ
    tb25 = t16_0==5.000000;
    //Instruction 41681
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 41682
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 41683
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 41684
    //MAD
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 41685
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 41686
    //FRC
    t2.x = fract(t2.x);
    //Instruction 41687
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 41688
    //MUL
    t10 = abs(t2.x) * abs(t2.x);
    //Instruction 41689
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 41690
    //MAD
    t2.x = t10 * t2.x + -0.500000;
    //Instruction 41691
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 41692
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 41693
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 41694
    //MOVC
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 41695
    //GE
    tb26 = t16_0>=3.000000;
    //Instruction 41696
    //IF
    if(tb26){
        //Instruction 41697
        //IF
        if(tb25){
            //Instruction 41698
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41699
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 41700
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 41701
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 41702
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 41703
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 41704
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41705
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41706
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41707
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41708
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 41709
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 41710
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 41711
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41712
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 41713
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 41714
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 41715
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41716
            //FRC
            t0 = fract(t0);
            //Instruction 41717
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41718
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 41719
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41720
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41721
            //ADD
            t0 = t0 + t0;
            //Instruction 41722
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 41723
            //LT
            tb26 = t5.w<0.0;
            //Instruction 41724
            //MOV
            t5.y = (-t5.w);
            //Instruction 41725
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 41726
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 41727
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 41728
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 41729
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 41730
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 41731
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 41732
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41733
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41734
            //MUL
            t28 = t0.x * t28;
            //Instruction 41735
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 41736
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41737
            //MUL
            t26 = t26 * t27;
            //Instruction 41738
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 41739
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 41740
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41741
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41742
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41743
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 41744
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 41745
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41746
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 41747
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41748
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 41749
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 41750
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 41751
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 41752
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41753
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 41754
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 41755
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 41756
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41757
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 41758
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 41759
        //ELSE
        } else {
            //Instruction 41760
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41761
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 41762
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41763
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 41764
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 41765
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 41766
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 41767
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41768
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 41769
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 41770
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 41771
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41772
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41773
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 41774
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 41775
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 41776
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 41777
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 41778
            //LT
            tb25 = t0.w<0.0;
            //Instruction 41779
            //MOV
            t0.y = (-t0.w);
            //Instruction 41780
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 41781
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 41782
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 41783
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 41784
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 41785
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 41786
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 41787
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41788
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41789
            //MUL
            t27 = t27 * t4.x;
            //Instruction 41790
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 41791
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 41792
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 41793
        //ENDIF
        }
        //Instruction 41794
    //ENDIF
    }
    //Instruction 41795
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 41796
    //SQRT
    t25 = sqrt(t25);
    //Instruction 41797
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 41798
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 41799
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 41800
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 41801
    //NE
    tb3 = t26!=0.0;
    //Instruction 41802
    //LOG
    t11 = log2(t26);
    //Instruction 41803
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 41804
    //EXP
    t11 = exp2(t11);
    //Instruction 41805
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 41806
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 41807
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 41808
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 41809
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 41810
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 41811
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 41812
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 41813
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 41814
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 41815
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 41816
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 41817
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 41818
    //MUL
    t26 = t26 * t3.x;
    //Instruction 41819
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 41820
    //MOV
    t3.y = t2.y;
    //Instruction 41821
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 41822
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 41823
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 41824
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 41825
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 41826
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 41827
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 41828
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 41829
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 41830
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 41831
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 41832
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 41833
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 41834
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 41835
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 41836
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 41837
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 41838
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 41839
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 41840
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 41841
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 41842
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 41843
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 41844
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 41845
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 41846
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 41847
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 41848
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 41849
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 41850
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 41851
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 41852
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 41853
    //MOV
    t1.w = 1.0;
    //Instruction 41854
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 41855
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 41856
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 41857
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 41858
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 41859
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 41860
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 41861
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 41862
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 41863
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 41864
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 41865
    //MOV
    gl_Position = t0;
    //Instruction 41866
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 41867
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 41868
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 41869
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 41870
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 41871
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 41872
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 41656
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 41657
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 41658
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41659
    //LT
    tb0 = t10_1<0.0;
    //Instruction 41660
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 41661
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 41662
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 41663
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41664
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 41665
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 41666
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 41667
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 41668
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41669
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * tmpvar_11.x)
   + 
    (v_61.xyz * tmpvar_11.y)
  ) + (v_62.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_7 = tmpvar_64;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_57;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 42626
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42627
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 42628
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 42629
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42630
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 42631
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 42632
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 42633
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 42634
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 42635
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 42636
    //EQ
    tb25 = t16_0==5.000000;
    //Instruction 42637
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 42638
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 42639
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 42640
    //MAD
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 42641
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 42642
    //FRC
    t2.x = fract(t2.x);
    //Instruction 42643
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 42644
    //MUL
    t10 = abs(t2.x) * abs(t2.x);
    //Instruction 42645
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 42646
    //MAD
    t2.x = t10 * t2.x + -0.500000;
    //Instruction 42647
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 42648
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 42649
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 42650
    //MOVC
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 42651
    //GE
    tb26 = t16_0>=3.000000;
    //Instruction 42652
    //IF
    if(tb26){
        //Instruction 42653
        //IF
        if(tb25){
            //Instruction 42654
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42655
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 42656
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 42657
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 42658
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 42659
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 42660
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42661
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42662
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42663
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 42664
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 42665
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 42666
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 42667
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42668
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 42669
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 42670
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 42671
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42672
            //FRC
            t0 = fract(t0);
            //Instruction 42673
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42674
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 42675
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42676
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42677
            //ADD
            t0 = t0 + t0;
            //Instruction 42678
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 42679
            //LT
            tb26 = t5.w<0.0;
            //Instruction 42680
            //MOV
            t5.y = (-t5.w);
            //Instruction 42681
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 42682
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 42683
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 42684
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 42685
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 42686
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 42687
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 42688
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42689
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42690
            //MUL
            t28 = t0.x * t28;
            //Instruction 42691
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 42692
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42693
            //MUL
            t26 = t26 * t27;
            //Instruction 42694
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 42695
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 42696
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42697
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42698
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42699
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 42700
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 42701
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42702
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 42703
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42704
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 42705
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 42706
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 42707
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 42708
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42709
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 42710
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 42711
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 42712
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42713
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 42714
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 42715
        //ELSE
        } else {
            //Instruction 42716
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42717
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 42718
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42719
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 42720
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 42721
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 42722
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 42723
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42724
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 42725
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 42726
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42727
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42728
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42729
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 42730
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42731
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42732
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 42733
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 42734
            //LT
            tb25 = t0.w<0.0;
            //Instruction 42735
            //MOV
            t0.y = (-t0.w);
            //Instruction 42736
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 42737
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 42738
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 42739
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 42740
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 42741
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 42742
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 42743
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42744
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42745
            //MUL
            t27 = t27 * t4.x;
            //Instruction 42746
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 42747
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 42748
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 42749
        //ENDIF
        }
        //Instruction 42750
    //ENDIF
    }
    //Instruction 42751
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 42752
    //SQRT
    t25 = sqrt(t25);
    //Instruction 42753
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42754
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 42755
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 42756
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 42757
    //NE
    tb3 = t26!=0.0;
    //Instruction 42758
    //LOG
    t11 = log2(t26);
    //Instruction 42759
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 42760
    //EXP
    t11 = exp2(t11);
    //Instruction 42761
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 42762
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42763
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42764
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 42765
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 42766
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42767
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 42768
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42769
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 42770
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 42771
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 42772
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42773
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 42774
    //MUL
    t26 = t26 * t3.x;
    //Instruction 42775
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 42776
    //MOV
    t3.y = t2.y;
    //Instruction 42777
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 42778
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 42779
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 42780
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 42781
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 42782
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 42783
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 42784
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 42785
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 42786
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 42787
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 42788
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 42789
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 42790
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 42791
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 42792
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 42793
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 42794
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 42795
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 42796
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 42797
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 42798
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 42799
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 42800
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 42801
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 42802
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 42803
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 42804
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 42805
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 42806
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 42807
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 42808
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 42809
    //MOV
    t1.w = 1.0;
    //Instruction 42810
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 42811
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 42812
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 42813
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 42814
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 42815
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 42816
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 42817
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 42818
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 42819
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 42820
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 42821
    //MOV
    gl_Position = t0;
    //Instruction 42822
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42823
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 42824
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 42825
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 42826
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42827
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 42828
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 42613
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 42614
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 42615
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42616
    //LT
    tb0 = t10_1<0.0;
    //Instruction 42617
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 42618
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 42619
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 42620
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42621
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 42622
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 42623
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 42624
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42625
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * tmpvar_14.x)
   + 
    (v_63.xyz * tmpvar_14.y)
  ) + (v_64.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_7 = tmpvar_66;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_59;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 41900
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41901
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 41902
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 41903
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 41904
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 41905
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 41906
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 41907
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 41908
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 41909
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 41910
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 41911
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41912
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41913
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41914
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 41915
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41916
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 41917
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 41918
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 41919
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 41920
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 41921
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 41922
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 41923
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 41924
    //FRC
    t3.x = fract(t3.x);
    //Instruction 41925
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 41926
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 41927
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 41928
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 41929
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 41930
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 41931
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 41932
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 41933
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 41934
    //IF
    if(tb30){
        //Instruction 41935
        //IF
        if(tb28){
            //Instruction 41936
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41937
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 41938
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 41939
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 41940
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 41941
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 41942
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41943
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41944
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41945
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 41946
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 41947
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 41948
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41949
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41950
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 41951
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41952
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41953
            //FRC
            t2 = fract(t2);
            //Instruction 41954
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41955
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 41956
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41957
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41958
            //ADD
            t2 = t2 + t2;
            //Instruction 41959
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 41960
            //LT
            tb30 = t6.w<0.0;
            //Instruction 41961
            //MOV
            t6.y = (-t6.w);
            //Instruction 41962
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 41963
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 41964
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 41965
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 41966
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 41967
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 41968
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 41969
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41970
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41971
            //MUL
            t32 = t2.x * t32;
            //Instruction 41972
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 41973
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41974
            //MUL
            t30 = t30 * t31;
            //Instruction 41975
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 41976
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 41977
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41978
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41979
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41980
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 41981
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 41982
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41983
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 41984
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41985
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 41986
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 41987
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 41988
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 41989
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41990
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 41991
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 41992
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 41993
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41994
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 41995
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 41996
        //ELSE
        } else {
            //Instruction 41997
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41998
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41999
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42000
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 42001
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 42002
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 42003
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42004
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 42005
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 42006
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42007
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42008
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42009
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 42010
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42011
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42012
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 42013
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 42014
            //LT
            tb0 = t2.w<0.0;
            //Instruction 42015
            //MOV
            t2.y = (-t2.w);
            //Instruction 42016
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 42017
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 42018
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 42019
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 42020
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 42021
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 42022
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 42023
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42024
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42025
            //MUL
            t30 = t30 * t5.x;
            //Instruction 42026
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 42027
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 42028
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42029
        //ENDIF
        }
        //Instruction 42030
    //ENDIF
    }
    //Instruction 42031
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 42032
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 42033
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42034
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 42035
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 42036
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 42037
    //NE
    tb30 = t28!=0.0;
    //Instruction 42038
    //LOG
    t4.x = log2(t28);
    //Instruction 42039
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 42040
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 42041
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 42042
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42043
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42044
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 42045
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 42046
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42047
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 42048
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42049
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 42050
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 42051
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 42052
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42053
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 42054
    //MUL
    t28 = t28 * t30;
    //Instruction 42055
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 42056
    //MOV
    t4.y = t3.y;
    //Instruction 42057
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 42058
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 42059
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 42060
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 42061
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 42062
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 42063
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 42064
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 42065
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 42066
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 42067
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 42068
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 42069
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 42070
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 42071
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 42072
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 42073
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 42074
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 42075
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 42076
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 42077
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 42078
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 42079
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 42080
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 42081
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 42082
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 42083
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 42084
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 42085
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 42086
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 42087
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 42088
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 42089
    //MOV
    t0.w = 1.0;
    //Instruction 42090
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 42091
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 42092
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 42093
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 42094
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 42095
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 42096
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 42097
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 42098
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 42099
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 42100
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 42101
    //MOV
    gl_Position = t2;
    //Instruction 42102
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42103
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 42104
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 42105
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 42106
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42107
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 42108
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 41877
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 41878
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 41879
    //LT
    tb12 = t10_1<0.0;
    //Instruction 41880
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 41881
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 41882
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 41883
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 41884
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 41885
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 41886
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 41887
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 41888
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 41889
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 41890
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41891
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 41892
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 41893
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41894
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 41895
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 41896
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 41897
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 41898
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41899
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * tmpvar_14.x)
   + 
    (v_63.xyz * tmpvar_14.y)
  ) + (v_64.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_7 = tmpvar_66;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_59;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 41895
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 41896
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 41897
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 41898
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 41899
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 41900
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 41901
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 41902
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 41903
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 41904
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 41905
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 41906
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 41907
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 41908
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 41909
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 41910
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 41911
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 41912
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 41913
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 41914
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 41915
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 41916
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 41917
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 41918
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 41919
    //FRC
    t3.x = fract(t3.x);
    //Instruction 41920
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 41921
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 41922
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 41923
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 41924
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 41925
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 41926
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 41927
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 41928
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 41929
    //IF
    if(tb30){
        //Instruction 41930
        //IF
        if(tb28){
            //Instruction 41931
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 41932
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 41933
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 41934
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 41935
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 41936
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 41937
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41938
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 41939
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41940
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 41941
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 41942
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 41943
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41944
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 41945
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 41946
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 41947
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 41948
            //FRC
            t2 = fract(t2);
            //Instruction 41949
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 41950
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 41951
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 41952
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 41953
            //ADD
            t2 = t2 + t2;
            //Instruction 41954
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 41955
            //LT
            tb30 = t6.w<0.0;
            //Instruction 41956
            //MOV
            t6.y = (-t6.w);
            //Instruction 41957
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 41958
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 41959
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 41960
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 41961
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 41962
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 41963
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 41964
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 41965
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 41966
            //MUL
            t32 = t2.x * t32;
            //Instruction 41967
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 41968
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 41969
            //MUL
            t30 = t30 * t31;
            //Instruction 41970
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 41971
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 41972
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41973
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 41974
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 41975
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 41976
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 41977
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 41978
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 41979
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 41980
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 41981
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 41982
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 41983
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 41984
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 41985
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 41986
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 41987
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 41988
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 41989
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 41990
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 41991
        //ELSE
        } else {
            //Instruction 41992
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 41993
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 41994
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 41995
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 41996
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 41997
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 41998
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 41999
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 42000
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 42001
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42002
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42003
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42004
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 42005
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42006
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42007
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 42008
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 42009
            //LT
            tb0 = t2.w<0.0;
            //Instruction 42010
            //MOV
            t2.y = (-t2.w);
            //Instruction 42011
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 42012
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 42013
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 42014
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 42015
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 42016
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 42017
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 42018
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42019
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42020
            //MUL
            t30 = t30 * t5.x;
            //Instruction 42021
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 42022
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 42023
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42024
        //ENDIF
        }
        //Instruction 42025
    //ENDIF
    }
    //Instruction 42026
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 42027
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 42028
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42029
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 42030
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 42031
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 42032
    //NE
    tb30 = t28!=0.0;
    //Instruction 42033
    //LOG
    t4.x = log2(t28);
    //Instruction 42034
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 42035
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 42036
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 42037
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42038
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42039
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 42040
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 42041
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42042
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 42043
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42044
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 42045
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 42046
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 42047
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42048
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 42049
    //MUL
    t28 = t28 * t30;
    //Instruction 42050
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 42051
    //MOV
    t4.y = t3.y;
    //Instruction 42052
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 42053
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 42054
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 42055
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 42056
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 42057
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 42058
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 42059
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 42060
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 42061
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 42062
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 42063
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 42064
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 42065
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 42066
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 42067
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 42068
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 42069
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 42070
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 42071
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 42072
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 42073
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 42074
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 42075
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 42076
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 42077
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 42078
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 42079
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 42080
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 42081
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 42082
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 42083
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 42084
    //MOV
    t0.w = 1.0;
    //Instruction 42085
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 42086
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 42087
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 42088
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 42089
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 42090
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 42091
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 42092
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 42093
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 42094
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 42095
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 42096
    //MOV
    gl_Position = t2;
    //Instruction 42097
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42098
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 42099
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 42100
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 42101
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42102
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 42103
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 41873
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 41874
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 41875
    //LT
    tb12 = t10_1<0.0;
    //Instruction 41876
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 41877
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 41878
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 41879
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 41880
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 41881
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 41882
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 41883
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 41884
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 41885
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 41886
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 41887
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 41888
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 41889
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 41890
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 41891
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 41892
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 41893
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 41894
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + 