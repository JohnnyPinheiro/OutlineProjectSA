(vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * tmpvar_14.x)
   + 
    (v_63.xyz * tmpvar_14.y)
  ) + (v_64.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_7 = tmpvar_66;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_59;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 42852
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42853
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 42854
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 42855
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 42856
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 42857
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 42858
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 42859
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 42860
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 42861
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 42862
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 42863
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42864
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 42865
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 42866
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 42867
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 42868
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 42869
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 42870
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 42871
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 42872
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 42873
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 42874
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 42875
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 42876
    //FRC
    t3.x = fract(t3.x);
    //Instruction 42877
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 42878
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 42879
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 42880
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 42881
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 42882
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 42883
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 42884
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 42885
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 42886
    //IF
    if(tb30){
        //Instruction 42887
        //IF
        if(tb28){
            //Instruction 42888
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42889
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 42890
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 42891
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 42892
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 42893
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 42894
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42895
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42896
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42897
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 42898
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 42899
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 42900
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42901
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 42902
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 42903
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 42904
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42905
            //FRC
            t2 = fract(t2);
            //Instruction 42906
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42907
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 42908
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42909
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42910
            //ADD
            t2 = t2 + t2;
            //Instruction 42911
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 42912
            //LT
            tb30 = t6.w<0.0;
            //Instruction 42913
            //MOV
            t6.y = (-t6.w);
            //Instruction 42914
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 42915
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 42916
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 42917
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 42918
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 42919
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 42920
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 42921
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42922
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42923
            //MUL
            t32 = t2.x * t32;
            //Instruction 42924
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 42925
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42926
            //MUL
            t30 = t30 * t31;
            //Instruction 42927
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 42928
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42929
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42930
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42931
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42932
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 42933
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 42934
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42935
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 42936
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42937
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 42938
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 42939
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 42940
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 42941
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42942
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 42943
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 42944
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 42945
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42946
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 42947
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 42948
        //ELSE
        } else {
            //Instruction 42949
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42950
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42951
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42952
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 42953
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 42954
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 42955
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42956
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 42957
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 42958
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42959
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42960
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42961
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 42962
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42963
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42964
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 42965
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 42966
            //LT
            tb0 = t2.w<0.0;
            //Instruction 42967
            //MOV
            t2.y = (-t2.w);
            //Instruction 42968
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 42969
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 42970
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 42971
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 42972
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 42973
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 42974
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 42975
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42976
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42977
            //MUL
            t30 = t30 * t5.x;
            //Instruction 42978
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 42979
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 42980
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42981
        //ENDIF
        }
        //Instruction 42982
    //ENDIF
    }
    //Instruction 42983
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 42984
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 42985
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42986
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 42987
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 42988
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 42989
    //NE
    tb30 = t28!=0.0;
    //Instruction 42990
    //LOG
    t4.x = log2(t28);
    //Instruction 42991
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 42992
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 42993
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 42994
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42995
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42996
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 42997
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 42998
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42999
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 43000
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43001
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 43002
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 43003
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 43004
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43005
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 43006
    //MUL
    t28 = t28 * t30;
    //Instruction 43007
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 43008
    //MOV
    t4.y = t3.y;
    //Instruction 43009
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 43010
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43011
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 43012
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 43013
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 43014
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 43015
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 43016
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 43017
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 43018
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 43019
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 43020
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 43021
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 43022
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 43023
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 43024
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 43025
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 43026
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 43027
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 43028
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 43029
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 43030
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 43031
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 43032
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 43033
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 43034
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 43035
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 43036
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 43037
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 43038
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 43039
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 43040
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 43041
    //MOV
    t0.w = 1.0;
    //Instruction 43042
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 43043
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 43044
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 43045
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 43046
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 43047
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 43048
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 43049
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 43050
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 43051
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 43052
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 43053
    //MOV
    gl_Position = t2;
    //Instruction 43054
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43055
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43056
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43057
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 43058
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43059
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 43060
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 42829
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 42830
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 42831
    //LT
    tb12 = t10_1<0.0;
    //Instruction 42832
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 42833
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 42834
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 42835
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 42836
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 42837
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 42838
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 42839
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 42840
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 42841
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 42842
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42843
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 42844
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 42845
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42846
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 42847
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 42848
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 42849
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 42850
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42851
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * tmpvar_14.x)
   + 
    (v_63.xyz * tmpvar_14.y)
  ) + (v_64.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_7 = tmpvar_66;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_59;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 42131
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42132
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 42133
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 42134
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 42135
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 42136
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 42137
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 42138
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 42139
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 42140
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 42141
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 42142
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42143
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 42144
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 42145
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 42146
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 42147
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 42148
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 42149
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 42150
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 42151
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 42152
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 42153
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 42154
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 42155
    //FRC
    t3.x = fract(t3.x);
    //Instruction 42156
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 42157
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 42158
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 42159
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 42160
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 42161
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 42162
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 42163
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 42164
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 42165
    //IF
    if(tb30){
        //Instruction 42166
        //IF
        if(tb28){
            //Instruction 42167
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42168
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 42169
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 42170
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 42171
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 42172
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 42173
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42174
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42175
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42176
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 42177
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 42178
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 42179
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42180
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 42181
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 42182
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 42183
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42184
            //FRC
            t2 = fract(t2);
            //Instruction 42185
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42186
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 42187
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42188
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42189
            //ADD
            t2 = t2 + t2;
            //Instruction 42190
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 42191
            //LT
            tb30 = t6.w<0.0;
            //Instruction 42192
            //MOV
            t6.y = (-t6.w);
            //Instruction 42193
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 42194
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 42195
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 42196
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 42197
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 42198
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 42199
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 42200
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42201
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42202
            //MUL
            t32 = t2.x * t32;
            //Instruction 42203
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 42204
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42205
            //MUL
            t30 = t30 * t31;
            //Instruction 42206
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 42207
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42208
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42209
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42210
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42211
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 42212
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 42213
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42214
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 42215
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42216
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 42217
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 42218
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 42219
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 42220
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42221
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 42222
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 42223
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 42224
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42225
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 42226
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 42227
        //ELSE
        } else {
            //Instruction 42228
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42229
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42230
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42231
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 42232
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 42233
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 42234
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42235
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 42236
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 42237
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42238
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42239
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42240
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 42241
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42242
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42243
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 42244
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 42245
            //LT
            tb0 = t2.w<0.0;
            //Instruction 42246
            //MOV
            t2.y = (-t2.w);
            //Instruction 42247
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 42248
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 42249
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 42250
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 42251
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 42252
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 42253
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 42254
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42255
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42256
            //MUL
            t30 = t30 * t5.x;
            //Instruction 42257
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 42258
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 42259
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42260
        //ENDIF
        }
        //Instruction 42261
    //ENDIF
    }
    //Instruction 42262
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 42263
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 42264
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42265
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 42266
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 42267
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 42268
    //NE
    tb30 = t28!=0.0;
    //Instruction 42269
    //LOG
    t4.x = log2(t28);
    //Instruction 42270
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 42271
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 42272
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 42273
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42274
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42275
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 42276
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 42277
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42278
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 42279
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42280
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 42281
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 42282
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 42283
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42284
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 42285
    //MUL
    t28 = t28 * t30;
    //Instruction 42286
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 42287
    //MOV
    t4.y = t3.y;
    //Instruction 42288
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 42289
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 42290
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 42291
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 42292
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 42293
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 42294
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 42295
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 42296
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 42297
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 42298
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 42299
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 42300
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 42301
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 42302
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 42303
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 42304
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 42305
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 42306
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 42307
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 42308
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 42309
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 42310
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 42311
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 42312
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 42313
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 42314
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 42315
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 42316
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 42317
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 42318
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 42319
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 42320
    //MOV
    t0.w = 1.0;
    //Instruction 42321
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 42322
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 42323
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 42324
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 42325
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 42326
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 42327
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 42328
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 42329
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 42330
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 42331
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 42332
    //MOV
    gl_Position = t2;
    //Instruction 42333
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42334
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 42335
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 42336
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 42337
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42338
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 42339
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 42109
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 42110
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 42111
    //LT
    tb12 = t10_1<0.0;
    //Instruction 42112
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 42113
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 42114
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 42115
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 42116
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 42117
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 42118
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 42119
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 42120
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 42121
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 42122
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42123
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 42124
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 42125
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42126
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 42127
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 42128
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 42129
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42130
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_96;
  highp vec4 tmpvar_97;
  tmpvar_97 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_98;
  tmpvar_98.x = tmpvar_97.x;
  tmpvar_98.y = (tmpvar_97.y * _ProjectionParams.x);
  o_96.xy = (tmpvar_98 + tmpvar_97.w);
  o_96.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = normalize(((
    (v_99.xyz * tmpvar_11.x)
   + 
    (v_100.xyz * tmpvar_11.y)
  ) + (v_101.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_103;
  mediump vec4 normal_104;
  normal_104 = tmpvar_102;
  mediump vec3 x2_105;
  mediump vec3 x1_106;
  x1_106.x = dot (unity_SHAr, normal_104);
  x1_106.y = dot (unity_SHAg, normal_104);
  x1_106.z = dot (unity_SHAb, normal_104);
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_104.xyzz * normal_104.yzzx);
  x2_105.x = dot (unity_SHBr, tmpvar_107);
  x2_105.y = dot (unity_SHBg, tmpvar_107);
  x2_105.z = dot (unity_SHBb, tmpvar_107);
  tmpvar_103 = ((x2_105 + (unity_SHC.xyz * 
    ((normal_104.x * normal_104.x) - (normal_104.y * normal_104.y))
  )) + x1_106);
  tmpvar_7 = tmpvar_103;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_96;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
mediump vec3 t16_15;
highp vec3 t17;
highp int ti17;
highp vec3 t18;
bool tb18;
highp vec3 t23;
highp float t33;
bool tb33;
highp vec2 t36;
highp float t37;
highp vec2 t38;
highp float t49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
mediump float t16_62;
void main()
{
    //Instruction 42118
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42119
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 42120
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 42121
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42122
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 42123
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 42124
    //DP3
    t33 = dot(t2.xyz, t2.xyz);
    //Instruction 42125
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 42126
    //MUL
    t2.xyz = vec3(t33) * t2.xyz;
    //Instruction 42127
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 42128
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 42129
    //LT
    tb33 = t16_0<5.000000;
    //Instruction 42130
    //AND
    ti17 = int(uint(tb33) & uint(tb1.y));
    //Instruction 42131
    //IF
    if((uint(ti17))!=uint(0u)){
        //Instruction 42132
        //ADD
        t17.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 42133
        //EQ
        tb33 = t16_0==4.000000;
        //Instruction 42134
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 42135
        //MOVC
        t4.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 42136
        //ADD
        t17.x = t17.x + t4.x;
        //Instruction 42137
        //ADD
        t17.x = t17.x + 0.500000;
        //Instruction 42138
        //FRC
        t17.x = fract(t17.x);
        //Instruction 42139
        //MAD
        t17.x = t17.x * 2.000000 + -1.0;
        //Instruction 42140
        //MUL
        t50 = abs(t17.x) * abs(t17.x);
        //Instruction 42141
        //MAD
        t17.x = -abs(t17.x) * 2.000000 + 3.000000;
        //Instruction 42142
        //MAD
        t17.x = t50 * t17.x + -0.500000;
        //Instruction 42143
        //DP2
        t17.x = dot(t17.xx, t4.yy);
        //Instruction 42144
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 42145
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 42146
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 42147
        //MUL
        t4.xyz = t17.xxx * t4.xyz;
        //Instruction 42148
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 42149
        //IF
        if(tb33){
            //Instruction 42150
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 42151
            //FRC
            t4 = fract(t4);
            //Instruction 42152
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42153
            //MOVC
            t5 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 42154
            //MOVC
            t17.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 42155
            //MUL
            t50 = t4.w * 3.000000;
            //Instruction 42156
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 42157
            //MAD
            t6.x = t5.x * 0.750000 + (-t50);
            //Instruction 42158
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 42159
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 42160
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42161
            //MUL
            t38.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 42162
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42163
            //MAD
            t6.xy = t38.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 42164
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 42165
            //DP3
            t50 = dot(t3.xyz, t3.xyz);
            //Instruction 42166
            //SQRT
            t50 = sqrt(t50);
            //Instruction 42167
            //MAD
            t51 = t6.x * t6.x + t6.y;
            //Instruction 42168
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 42169
            //MUL
            t51 = t51 * t5.x;
            //Instruction 42170
            //SINCOS
            t5.x = sin(t51);
            t7.x = cos(t51);
            //Instruction 42171
            //ADD
            t51 = (-t7.x) + 1.0;
            //Instruction 42172
            //MUL
            t8 = t4.xxxy * vec4(t51);
            //Instruction 42173
            //MUL
            t23.xyz = t4.zxy * t5.xxx;
            //Instruction 42174
            //MAD
            t9.xy = t8.zy * t4.zy + t23.zx;
            //Instruction 42175
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 42176
            //MAD
            t9.z = t8.w * t4.z + (-t23.y);
            //Instruction 42177
            //MAD
            t11.xy = t8.yz * t4.yz + (-t23.xz);
            //Instruction 42178
            //MAD
            t11.z = t8.w * t4.z + t23.y;
            //Instruction 42179
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 42180
            //MAD
            t11.w = t5.x * t51 + t7.x;
            //Instruction 42181
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 42182
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 42183
            //DP3
            t18.x = dot(t2.xyz, t4.xyz);
            //Instruction 42184
            //MAX
            t18.x = max(t18.x, -1.0);
            //Instruction 42185
            //MIN
            t18.x = min(t18.x, 1.0);
            //Instruction 42186
            //ADD
            t7.w = t18.x + t7.y;
            //Instruction 42187
            //DP3
            t51 = dot(t7.xzw, t7.xzw);
            //Instruction 42188
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 42189
            //MUL
            t4.xyz = vec3(t51) * t7.zxw;
            //Instruction 42190
            //ADD
            t51 = -abs(t18.x) + 1.0;
            //Instruction 42191
            //SQRT
            t51 = sqrt(t51);
            //Instruction 42192
            //MAD
            t5.x = abs(t18.x) * -0.018729 + 0.074261;
            //Instruction 42193
            //MAD
            t5.x = t5.x * abs(t18.x) + -0.212114;
            //Instruction 42194
            //MAD
            t5.x = t5.x * abs(t18.x) + 1.570729;
            //Instruction 42195
            //MUL
            t37 = t51 * t5.x;
            //Instruction 42196
            //MAD
            t37 = t37 * -2.000000 + 3.141593;
            //Instruction 42197
            //LT
            tb18 = t18.x<(-t18.x);
            //Instruction 42198
            //AND
            t18.x = tb18 ? t37 : float(0.0);
            //Instruction 42199
            //MAD
            t18.x = t5.x * t51 + t18.x;
            //Instruction 42200
            //MAD
            t51 = (-t6.y) * t6.y + t6.x;
            //Instruction 42201
            //MAD
            t6.x = t4.w * 3.000000 + t17.z;
            //Instruction 42202
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 42203
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 42204
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 42205
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42206
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 42207
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42208
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 42209
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 42210
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 42211
            //MAD
            t49 = t49 * t5.x + 1.0;
            //Instruction 42212
            //MUL
            t49 = t49 * 0.500000;
            t49 = clamp(t49, 0.0, 1.0);
            //Instruction 42213
            //LOG
            t49 = log2(t49);
            //Instruction 42214
            //MUL
            t33 = t49 * t17.y;
            //Instruction 42215
            //EXP
            t33 = exp2(t33);
            //Instruction 42216
            //MUL
            t49 = t5.y * t51;
            //Instruction 42217
            //MAD
            t49 = t18.x * t5.w + t49;
            //Instruction 42218
            //MAD
            t17.x = t17.x * t33 + t49;
            //Instruction 42219
            //MUL
            t17.x = t17.x * in_TEXCOORD2.x;
            //Instruction 42220
            //SINCOS
            t5.x = sin(t17.x);
            t6.x = cos(t17.x);
            //Instruction 42221
            //ADD
            t17.x = (-t6.x) + 1.0;
            //Instruction 42222
            //MUL
            t7 = vec4(t4.y * t17.x, t4.y * t17.x, t4.y * t17.x, t4.z * t17.x);
            //Instruction 42223
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 42224
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 42225
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 42226
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 42227
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 42228
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 42229
            //MUL
            t33 = t4.x * t4.x;
            //Instruction 42230
            //MAD
            t8.w = t33 * t17.x + t6.x;
            //Instruction 42231
            //MOV
            t10.z = t11.x;
            //Instruction 42232
            //MOV
            t10.w = t9.x;
            //Instruction 42233
            //MOV
            t12.z = t8.y;
            //Instruction 42234
            //MOV
            t12.w = t13.y;
            //Instruction 42235
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 42236
            //MOV
            t13.w = t12.y;
            //Instruction 42237
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 42238
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 42239
            //MOV
            t9.w = t10.y;
            //Instruction 42240
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 42241
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 42242
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 42243
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 42244
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 42245
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 42246
            //DP3
            t17.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 42247
            //DP3
            t17.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 42248
            //DP3
            t17.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 42249
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 42250
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 42251
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 42252
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 42253
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 42254
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 42255
            //MUL
            t3.xyz = vec3(t50) * t4.xyz;
            //Instruction 42256
        //ELSE
        } else {
            //Instruction 42257
            //MOV
            t17.xyz = in_NORMAL0.xyz;
            //Instruction 42258
        //ENDIF
        }
        //Instruction 42259
    //ELSE
    } else {
        //Instruction 42260
        //MOV
        t17.xyz = in_NORMAL0.xyz;
        //Instruction 42261
    //ENDIF
    }
    //Instruction 42262
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 42263
    //GE
    tb18 = t16_0>=3.000000;
    //Instruction 42264
    //IF
    if(tb18){
        //Instruction 42265
        //EQ
        tb18 = t16_0==5.000000;
        //Instruction 42266
        //IF
        if(tb18){
            //Instruction 42267
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42268
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 42269
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 42270
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 42271
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 42272
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 42273
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42274
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42275
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42276
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 42277
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 42278
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 42279
            //ADD
            t0.x = t18.x + in_TEXCOORD0.w;
            //Instruction 42280
            //MAD
            t0.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42281
            //MUL
            t50 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 42282
            //MUL
            t0.z = t50 * 0.500000;
            //Instruction 42283
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 42284
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42285
            //FRC
            t0 = fract(t0);
            //Instruction 42286
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42287
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 42288
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42289
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42290
            //ADD
            t0 = t0 + t0;
            //Instruction 42291
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 42292
            //LT
            tb50 = t6.w<0.0;
            //Instruction 42293
            //MOV
            t6.y = (-t6.w);
            //Instruction 42294
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 42295
            //MOVC
            t6.xy = (bool(tb50)) ? t6.xy : t6.zw;
            //Instruction 42296
            //MAD
            t50 = (-t0.y) * t0.z + t6.x;
            //Instruction 42297
            //MAD
            t50 = t6.y * t50 + t6.w;
            //Instruction 42298
            //ADD
            t51 = (-t50) + t6.x;
            //Instruction 42299
            //MAD
            t50 = t6.y * t51 + t50;
            //Instruction 42300
            //MUL
            t50 = t50 * _ST_WindBranchTwitch.x;
            //Instruction 42301
            //ADD
            t51 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42302
            //ADD
            t52 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42303
            //MUL
            t52 = t0.x * t52;
            //Instruction 42304
            //MAD
            t50 = t50 * t51 + t52;
            //Instruction 42305
            //MAD
            t51 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42306
            //MUL
            t50 = t50 * t51;
            //Instruction 42307
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 42308
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42309
            //MAD
            t6.x = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42310
            //MUL
            t18.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42311
            //MAD
            t6.y = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42312
            //ADD
            t18.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 42313
            //FRC
            t18.xz = fract(t18.xz);
            //Instruction 42314
            //MAD
            t18.xz = t18.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42315
            //MUL
            t6.xy = abs(t18.xz) * abs(t18.xz);
            //Instruction 42316
            //MAD
            t18.xz = -abs(t18.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42317
            //MAD
            t18.xz = t6.xy * t18.xz + vec2(-0.500000, -0.500000);
            //Instruction 42318
            //ADD
            t18.xz = t18.xz + t18.xz;
            //Instruction 42319
            //MUL
            t18.xz = t18.xz * t18.xz;
            //Instruction 42320
            //MUL
            t18.x = t18.x * t18.z;
            //Instruction 42321
            //MAD
            t18.x = (-t18.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42322
            //MUL
            t50 = t0.w * _ST_WindVector.w;
            //Instruction 42323
            //MAD
            t18.x = t50 * _ST_WindBranchWhip.x + t18.x;
            //Instruction 42324
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 42325
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42326
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 42327
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 42328
        //ELSE
        } else {
            //Instruction 42329
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42330
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42331
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42332
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 42333
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 42334
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 42335
            //ADD
            t5.x = t18.x + in_TEXCOORD0.w;
            //Instruction 42336
            //MAD
            t5.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42337
            //MUL
            t18.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 42338
            //MUL
            t5.z = t18.x * 0.500000;
            //Instruction 42339
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42340
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42341
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42342
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 42343
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42344
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42345
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 42346
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 42347
            //LT
            tb18 = t0.w<0.0;
            //Instruction 42348
            //MOV
            t0.y = (-t0.w);
            //Instruction 42349
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 42350
            //MOVC
            t18.xz = (bool(tb18)) ? t0.xy : t0.zw;
            //Instruction 42351
            //MAD
            t51 = (-t5.y) * t5.z + t18.x;
            //Instruction 42352
            //MAD
            t51 = t18.z * t51 + t0.w;
            //Instruction 42353
            //ADD
            t18.x = t18.x + (-t51);
            //Instruction 42354
            //MAD
            t18.x = t18.z * t18.x + t51;
            //Instruction 42355
            //MUL
            t18.x = t18.x * _ST_WindBranchTwitch.x;
            //Instruction 42356
            //ADD
            t50 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42357
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42358
            //MUL
            t51 = t51 * t5.x;
            //Instruction 42359
            //MAD
            t18.x = t18.x * t50 + t51;
            //Instruction 42360
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 42361
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42362
        //ENDIF
        }
        //Instruction 42363
    //ENDIF
    }
    //Instruction 42364
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 42365
    //SQRT
    t18.x = sqrt(t18.x);
    //Instruction 42366
    //DIV
    t50 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42367
    //MAD
    t50 = (-t50) * 0.250000 + t3.y;
    //Instruction 42368
    //MAX
    t50 = max(t50, 0.0);
    //Instruction 42369
    //MUL
    t50 = t50 * _ST_WindGlobal.z;
    //Instruction 42370
    //NE
    tb51 = t50!=0.0;
    //Instruction 42371
    //LOG
    t4.x = log2(t50);
    //Instruction 42372
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 42373
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 42374
    //MOVC
    t50 = (tb51) ? t4.x : t50;
    //Instruction 42375
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42376
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42377
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 42378
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 42379
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42380
    //MUL
    t36.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 42381
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42382
    //MAD
    t4.xy = t36.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 42383
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 42384
    //MAD
    t51 = t4.y * t4.y + t4.x;
    //Instruction 42385
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42386
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t4.x;
    //Instruction 42387
    //MUL
    t50 = t50 * t51;
    //Instruction 42388
    //MAD
    t4.xz = t2.xz * vec2(t50) + t3.xz;
    //Instruction 42389
    //MOV
    t4.y = t3.y;
    //Instruction 42390
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 42391
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 42392
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 42393
    //MUL
    t2.xyz = t18.xxx * t2.xzw;
    //Instruction 42394
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 42395
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 42396
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 42397
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 42398
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 42399
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 42400
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 42401
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 42402
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 42403
    //MUL
    t2.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 42404
    //MUL
    t1.x = t0.y * _ProjectionParams.x;
    //Instruction 42405
    //MUL
    t2.w = t1.x * 0.500000;
    //Instruction 42406
    //ADD
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    //Instruction 42407
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 42408
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 42409
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 42410
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 42411
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 42412
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 42413
    //MUL
    t3.xyz = t17.yyy * t3.xyz;
    //Instruction 42414
    //MAD
    t1.xyz = t2.xyz * t17.xxx + t3.xyz;
    //Instruction 42415
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 42416
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 42417
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 42418
    //MAD
    t1.xyz = t2.xyz * t17.zzz + t1.xyz;
    //Instruction 42419
    //DP3
    t49 = dot(t1.xyz, t1.xyz);
    //Instruction 42420
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 42421
    //MUL
    t1.xyz = vec3(t49) * t1.xyz;
    //Instruction 42422
    //MOV
    t1.w = 1.0;
    //Instruction 42423
    //DP4
    t16_14.x = dot(unity_SHAr, t1);
    //Instruction 42424
    //DP4
    t16_14.y = dot(unity_SHAg, t1);
    //Instruction 42425
    //DP4
    t16_14.z = dot(unity_SHAb, t1);
    //Instruction 42426
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 42427
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 42428
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 42429
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 42430
    //MUL
    t16_62 = t1.y * t1.y;
    //Instruction 42431
    //MAD
    t16_62 = t1.x * t1.x + (-t16_62);
    //Instruction 42432
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_62) + t16_15.xyz;
    //Instruction 42433
    //ADD
    t16_14.xyz = t16_14.xyz + t16_15.xyz;
    //Instruction 42434
    //MOV
    gl_Position = t0;
    //Instruction 42435
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42436
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 42437
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 42438
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 42439
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42440
    //MOV
    vs_TEXCOORD5.xyz = t16_14.xyz;
    //Instruction 42441
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 42104
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 42105
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 42106
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42107
    //LT
    tb0 = t10_1<0.0;
    //Instruction 42108
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 42109
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 42110
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 42111
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42112
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 42113
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 42114
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 42115
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 42116
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42117
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_96;
  highp vec4 tmpvar_97;
  tmpvar_97 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_98;
  tmpvar_98.x = tmpvar_97.x;
  tmpvar_98.y = (tmpvar_97.y * _ProjectionParams.x);
  o_96.xy = (tmpvar_98 + tmpvar_97.w);
  o_96.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = normalize(((
    (v_99.xyz * tmpvar_11.x)
   + 
    (v_100.xyz * tmpvar_11.y)
  ) + (v_101.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_103;
  mediump vec4 normal_104;
  normal_104 = tmpvar_102;
  mediump vec3 x2_105;
  mediump vec3 x1_106;
  x1_106.x = dot (unity_SHAr, normal_104);
  x1_106.y = dot (unity_SHAg, normal_104);
  x1_106.z = dot (unity_SHAb, normal_104);
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_104.xyzz * normal_104.yzzx);
  x2_105.x = dot (unity_SHBr, tmpvar_107);
  x2_105.y = dot (unity_SHBg, tmpvar_107);
  x2_105.z = dot (unity_SHBb, tmpvar_107);
  tmpvar_103 = ((x2_105 + (unity_SHC.xyz * 
    ((normal_104.x * normal_104.x) - (normal_104.y * normal_104.y))
  )) + x1_106);
  tmpvar_7 = tmpvar_103;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_96;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bvec2 tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
mediump vec3 t16_15;
highp vec3 t17;
highp int ti17;
highp vec3 t18;
bool tb18;
highp vec3 t23;
highp float t33;
bool tb33;
highp vec2 t36;
highp float t37;
highp vec2 t38;
highp float t49;
bool tb49;
highp float t50;
bool tb50;
highp float t51;
bool tb51;
highp float t52;
mediump float t16_62;
void main()
{
    //Instruction 43074
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43075
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 43076
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 43077
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43078
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 43079
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 43080
    //DP3
    t33 = dot(t2.xyz, t2.xyz);
    //Instruction 43081
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 43082
    //MUL
    t2.xyz = vec3(t33) * t2.xyz;
    //Instruction 43083
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 43084
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 43085
    //LT
    tb33 = t16_0<5.000000;
    //Instruction 43086
    //AND
    ti17 = int(uint(tb33) & uint(tb1.y));
    //Instruction 43087
    //IF
    if((uint(ti17))!=uint(0u)){
        //Instruction 43088
        //ADD
        t17.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 43089
        //EQ
        tb33 = t16_0==4.000000;
        //Instruction 43090
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 43091
        //MOVC
        t4.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 43092
        //ADD
        t17.x = t17.x + t4.x;
        //Instruction 43093
        //ADD
        t17.x = t17.x + 0.500000;
        //Instruction 43094
        //FRC
        t17.x = fract(t17.x);
        //Instruction 43095
        //MAD
        t17.x = t17.x * 2.000000 + -1.0;
        //Instruction 43096
        //MUL
        t50 = abs(t17.x) * abs(t17.x);
        //Instruction 43097
        //MAD
        t17.x = -abs(t17.x) * 2.000000 + 3.000000;
        //Instruction 43098
        //MAD
        t17.x = t50 * t17.x + -0.500000;
        //Instruction 43099
        //DP2
        t17.x = dot(t17.xx, t4.yy);
        //Instruction 43100
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 43101
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 43102
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 43103
        //MUL
        t4.xyz = t17.xxx * t4.xyz;
        //Instruction 43104
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 43105
        //IF
        if(tb33){
            //Instruction 43106
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 43107
            //FRC
            t4 = fract(t4);
            //Instruction 43108
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43109
            //MOVC
            t5 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 43110
            //MOVC
            t17.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 43111
            //MUL
            t50 = t4.w * 3.000000;
            //Instruction 43112
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 43113
            //MAD
            t6.x = t5.x * 0.750000 + (-t50);
            //Instruction 43114
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 43115
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 43116
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43117
            //MUL
            t38.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 43118
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43119
            //MAD
            t6.xy = t38.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 43120
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 43121
            //DP3
            t50 = dot(t3.xyz, t3.xyz);
            //Instruction 43122
            //SQRT
            t50 = sqrt(t50);
            //Instruction 43123
            //MAD
            t51 = t6.x * t6.x + t6.y;
            //Instruction 43124
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 43125
            //MUL
            t51 = t51 * t5.x;
            //Instruction 43126
            //SINCOS
            t5.x = sin(t51);
            t7.x = cos(t51);
            //Instruction 43127
            //ADD
            t51 = (-t7.x) + 1.0;
            //Instruction 43128
            //MUL
            t8 = t4.xxxy * vec4(t51);
            //Instruction 43129
            //MUL
            t23.xyz = t4.zxy * t5.xxx;
            //Instruction 43130
            //MAD
            t9.xy = t8.zy * t4.zy + t23.zx;
            //Instruction 43131
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 43132
            //MAD
            t9.z = t8.w * t4.z + (-t23.y);
            //Instruction 43133
            //MAD
            t11.xy = t8.yz * t4.yz + (-t23.xz);
            //Instruction 43134
            //MAD
            t11.z = t8.w * t4.z + t23.y;
            //Instruction 43135
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 43136
            //MAD
            t11.w = t5.x * t51 + t7.x;
            //Instruction 43137
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 43138
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 43139
            //DP3
            t18.x = dot(t2.xyz, t4.xyz);
            //Instruction 43140
            //MAX
            t18.x = max(t18.x, -1.0);
            //Instruction 43141
            //MIN
            t18.x = min(t18.x, 1.0);
            //Instruction 43142
            //ADD
            t7.w = t18.x + t7.y;
            //Instruction 43143
            //DP3
            t51 = dot(t7.xzw, t7.xzw);
            //Instruction 43144
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 43145
            //MUL
            t4.xyz = vec3(t51) * t7.zxw;
            //Instruction 43146
            //ADD
            t51 = -abs(t18.x) + 1.0;
            //Instruction 43147
            //SQRT
            t51 = sqrt(t51);
            //Instruction 43148
            //MAD
            t5.x = abs(t18.x) * -0.018729 + 0.074261;
            //Instruction 43149
            //MAD
            t5.x = t5.x * abs(t18.x) + -0.212114;
            //Instruction 43150
            //MAD
            t5.x = t5.x * abs(t18.x) + 1.570729;
            //Instruction 43151
            //MUL
            t37 = t51 * t5.x;
            //Instruction 43152
            //MAD
            t37 = t37 * -2.000000 + 3.141593;
            //Instruction 43153
            //LT
            tb18 = t18.x<(-t18.x);
            //Instruction 43154
            //AND
            t18.x = tb18 ? t37 : float(0.0);
            //Instruction 43155
            //MAD
            t18.x = t5.x * t51 + t18.x;
            //Instruction 43156
            //MAD
            t51 = (-t6.y) * t6.y + t6.x;
            //Instruction 43157
            //MAD
            t6.x = t4.w * 3.000000 + t17.z;
            //Instruction 43158
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 43159
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 43160
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 43161
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43162
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 43163
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43164
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 43165
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 43166
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 43167
            //MAD
            t49 = t49 * t5.x + 1.0;
            //Instruction 43168
            //MUL
            t49 = t49 * 0.500000;
            t49 = clamp(t49, 0.0, 1.0);
            //Instruction 43169
            //LOG
            t49 = log2(t49);
            //Instruction 43170
            //MUL
            t33 = t49 * t17.y;
            //Instruction 43171
            //EXP
            t33 = exp2(t33);
            //Instruction 43172
            //MUL
            t49 = t5.y * t51;
            //Instruction 43173
            //MAD
            t49 = t18.x * t5.w + t49;
            //Instruction 43174
            //MAD
            t17.x = t17.x * t33 + t49;
            //Instruction 43175
            //MUL
            t17.x = t17.x * in_TEXCOORD2.x;
            //Instruction 43176
            //SINCOS
            t5.x = sin(t17.x);
            t6.x = cos(t17.x);
            //Instruction 43177
            //ADD
            t17.x = (-t6.x) + 1.0;
            //Instruction 43178
            //MUL
            t7 = vec4(t4.y * t17.x, t4.y * t17.x, t4.y * t17.x, t4.z * t17.x);
            //Instruction 43179
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 43180
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 43181
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 43182
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 43183
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 43184
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 43185
            //MUL
            t33 = t4.x * t4.x;
            //Instruction 43186
            //MAD
            t8.w = t33 * t17.x + t6.x;
            //Instruction 43187
            //MOV
            t10.z = t11.x;
            //Instruction 43188
            //MOV
            t10.w = t9.x;
            //Instruction 43189
            //MOV
            t12.z = t8.y;
            //Instruction 43190
            //MOV
            t12.w = t13.y;
            //Instruction 43191
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 43192
            //MOV
            t13.w = t12.y;
            //Instruction 43193
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 43194
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 43195
            //MOV
            t9.w = t10.y;
            //Instruction 43196
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 43197
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 43198
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 43199
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 43200
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 43201
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 43202
            //DP3
            t17.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 43203
            //DP3
            t17.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 43204
            //DP3
            t17.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 43205
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 43206
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 43207
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 43208
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 43209
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 43210
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 43211
            //MUL
            t3.xyz = vec3(t50) * t4.xyz;
            //Instruction 43212
        //ELSE
        } else {
            //Instruction 43213
            //MOV
            t17.xyz = in_NORMAL0.xyz;
            //Instruction 43214
        //ENDIF
        }
        //Instruction 43215
    //ELSE
    } else {
        //Instruction 43216
        //MOV
        t17.xyz = in_NORMAL0.xyz;
        //Instruction 43217
    //ENDIF
    }
    //Instruction 43218
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 43219
    //GE
    tb18 = t16_0>=3.000000;
    //Instruction 43220
    //IF
    if(tb18){
        //Instruction 43221
        //EQ
        tb18 = t16_0==5.000000;
        //Instruction 43222
        //IF
        if(tb18){
            //Instruction 43223
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43224
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 43225
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 43226
            //DP3
            t18.x = dot(t4.xyz, t4.xyz);
            //Instruction 43227
            //RSQ
            t18.x = inversesqrt(t18.x);
            //Instruction 43228
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 43229
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43230
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43231
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43232
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 43233
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 43234
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 43235
            //ADD
            t0.x = t18.x + in_TEXCOORD0.w;
            //Instruction 43236
            //MAD
            t0.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43237
            //MUL
            t50 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 43238
            //MUL
            t0.z = t50 * 0.500000;
            //Instruction 43239
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 43240
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43241
            //FRC
            t0 = fract(t0);
            //Instruction 43242
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43243
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 43244
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43245
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43246
            //ADD
            t0 = t0 + t0;
            //Instruction 43247
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 43248
            //LT
            tb50 = t6.w<0.0;
            //Instruction 43249
            //MOV
            t6.y = (-t6.w);
            //Instruction 43250
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 43251
            //MOVC
            t6.xy = (bool(tb50)) ? t6.xy : t6.zw;
            //Instruction 43252
            //MAD
            t50 = (-t0.y) * t0.z + t6.x;
            //Instruction 43253
            //MAD
            t50 = t6.y * t50 + t6.w;
            //Instruction 43254
            //ADD
            t51 = (-t50) + t6.x;
            //Instruction 43255
            //MAD
            t50 = t6.y * t51 + t50;
            //Instruction 43256
            //MUL
            t50 = t50 * _ST_WindBranchTwitch.x;
            //Instruction 43257
            //ADD
            t51 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43258
            //ADD
            t52 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43259
            //MUL
            t52 = t0.x * t52;
            //Instruction 43260
            //MAD
            t50 = t50 * t51 + t52;
            //Instruction 43261
            //MAD
            t51 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43262
            //MUL
            t50 = t50 * t51;
            //Instruction 43263
            //MUL
            t5.xyz = vec3(t50) * t5.xyz;
            //Instruction 43264
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43265
            //MAD
            t6.x = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43266
            //MUL
            t18.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43267
            //MAD
            t6.y = t18.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43268
            //ADD
            t18.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 43269
            //FRC
            t18.xz = fract(t18.xz);
            //Instruction 43270
            //MAD
            t18.xz = t18.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43271
            //MUL
            t6.xy = abs(t18.xz) * abs(t18.xz);
            //Instruction 43272
            //MAD
            t18.xz = -abs(t18.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43273
            //MAD
            t18.xz = t6.xy * t18.xz + vec2(-0.500000, -0.500000);
            //Instruction 43274
            //ADD
            t18.xz = t18.xz + t18.xz;
            //Instruction 43275
            //MUL
            t18.xz = t18.xz * t18.xz;
            //Instruction 43276
            //MUL
            t18.x = t18.x * t18.z;
            //Instruction 43277
            //MAD
            t18.x = (-t18.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43278
            //MUL
            t50 = t0.w * _ST_WindVector.w;
            //Instruction 43279
            //MAD
            t18.x = t50 * _ST_WindBranchWhip.x + t18.x;
            //Instruction 43280
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 43281
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43282
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 43283
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 43284
        //ELSE
        } else {
            //Instruction 43285
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43286
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43287
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43288
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43289
            //ADD
            t18.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 43290
            //ADD
            t18.x = t18.x + _ST_WindBranch.x;
            //Instruction 43291
            //ADD
            t5.x = t18.x + in_TEXCOORD0.w;
            //Instruction 43292
            //MAD
            t5.y = t18.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43293
            //MUL
            t18.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 43294
            //MUL
            t5.z = t18.x * 0.500000;
            //Instruction 43295
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43296
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43297
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43298
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 43299
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43300
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43301
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 43302
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 43303
            //LT
            tb18 = t0.w<0.0;
            //Instruction 43304
            //MOV
            t0.y = (-t0.w);
            //Instruction 43305
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 43306
            //MOVC
            t18.xz = (bool(tb18)) ? t0.xy : t0.zw;
            //Instruction 43307
            //MAD
            t51 = (-t5.y) * t5.z + t18.x;
            //Instruction 43308
            //MAD
            t51 = t18.z * t51 + t0.w;
            //Instruction 43309
            //ADD
            t18.x = t18.x + (-t51);
            //Instruction 43310
            //MAD
            t18.x = t18.z * t18.x + t51;
            //Instruction 43311
            //MUL
            t18.x = t18.x * _ST_WindBranchTwitch.x;
            //Instruction 43312
            //ADD
            t50 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43313
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43314
            //MUL
            t51 = t51 * t5.x;
            //Instruction 43315
            //MAD
            t18.x = t18.x * t50 + t51;
            //Instruction 43316
            //MUL
            t4.xyz = t18.xxx * t4.xyz;
            //Instruction 43317
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43318
        //ENDIF
        }
        //Instruction 43319
    //ENDIF
    }
    //Instruction 43320
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 43321
    //SQRT
    t18.x = sqrt(t18.x);
    //Instruction 43322
    //DIV
    t50 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43323
    //MAD
    t50 = (-t50) * 0.250000 + t3.y;
    //Instruction 43324
    //MAX
    t50 = max(t50, 0.0);
    //Instruction 43325
    //MUL
    t50 = t50 * _ST_WindGlobal.z;
    //Instruction 43326
    //NE
    tb51 = t50!=0.0;
    //Instruction 43327
    //LOG
    t4.x = log2(t50);
    //Instruction 43328
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 43329
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 43330
    //MOVC
    t50 = (tb51) ? t4.x : t50;
    //Instruction 43331
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43332
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43333
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 43334
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 43335
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43336
    //MUL
    t36.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 43337
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43338
    //MAD
    t4.xy = t36.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 43339
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 43340
    //MAD
    t51 = t4.y * t4.y + t4.x;
    //Instruction 43341
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43342
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t4.x;
    //Instruction 43343
    //MUL
    t50 = t50 * t51;
    //Instruction 43344
    //MAD
    t4.xz = t2.xz * vec2(t50) + t3.xz;
    //Instruction 43345
    //MOV
    t4.y = t3.y;
    //Instruction 43346
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 43347
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 43348
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 43349
    //MUL
    t2.xyz = t18.xxx * t2.xzw;
    //Instruction 43350
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 43351
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 43352
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 43353
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 43354
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 43355
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 43356
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 43357
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 43358
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 43359
    //MUL
    t2.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 43360
    //MUL
    t1.x = t0.y * _ProjectionParams.x;
    //Instruction 43361
    //MUL
    t2.w = t1.x * 0.500000;
    //Instruction 43362
    //ADD
    vs_TEXCOORD3.xy = t2.zz + t2.xw;
    //Instruction 43363
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 43364
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 43365
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 43366
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 43367
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 43368
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 43369
    //MUL
    t3.xyz = t17.yyy * t3.xyz;
    //Instruction 43370
    //MAD
    t1.xyz = t2.xyz * t17.xxx + t3.xyz;
    //Instruction 43371
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 43372
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 43373
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 43374
    //MAD
    t1.xyz = t2.xyz * t17.zzz + t1.xyz;
    //Instruction 43375
    //DP3
    t49 = dot(t1.xyz, t1.xyz);
    //Instruction 43376
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 43377
    //MUL
    t1.xyz = vec3(t49) * t1.xyz;
    //Instruction 43378
    //MOV
    t1.w = 1.0;
    //Instruction 43379
    //DP4
    t16_14.x = dot(unity_SHAr, t1);
    //Instruction 43380
    //DP4
    t16_14.y = dot(unity_SHAg, t1);
    //Instruction 43381
    //DP4
    t16_14.z = dot(unity_SHAb, t1);
    //Instruction 43382
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 43383
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 43384
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 43385
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 43386
    //MUL
    t16_62 = t1.y * t1.y;
    //Instruction 43387
    //MAD
    t16_62 = t1.x * t1.x + (-t16_62);
    //Instruction 43388
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_62) + t16_15.xyz;
    //Instruction 43389
    //ADD
    t16_14.xyz = t16_14.xyz + t16_15.xyz;
    //Instruction 43390
    //MOV
    gl_Position = t0;
    //Instruction 43391
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43392
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 43393
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 43394
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 43395
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43396
    //MOV
    vs_TEXCOORD5.xyz = t16_14.xyz;
    //Instruction 43397
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 43061
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 43062
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 43063
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43064
    //LT
    tb0 = t10_1<0.0;
    //Instruction 43065
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 43066
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43067
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43068
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43069
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 43070
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 43071
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 43072
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43073
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = normalize(((
    (v_101.xyz * tmpvar_14.x)
   + 
    (v_102.xyz * tmpvar_14.y)
  ) + (v_103.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec3 x1_108;
  x1_108.x = dot (unity_SHAr, normal_106);
  x1_108.y = dot (unity_SHAg, normal_106);
  x1_108.z = dot (unity_SHAb, normal_106);
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_109);
  x2_107.y = dot (unity_SHBg, tmpvar_109);
  x2_107.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_105 = ((x2_107 + (unity_SHC.xyz * 
    ((normal_106.x * normal_106.x) - (normal_106.y * normal_106.y))
  )) + x1_108);
  tmpvar_7 = tmpvar_105;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_98;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 42363
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42364
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 42365
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 42366
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 42367
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 42368
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 42369
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 42370
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 42371
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 42372
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 42373
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 42374
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42375
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 42376
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 42377
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 42378
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 42379
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 42380
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 42381
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 42382
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 42383
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 42384
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 42385
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 42386
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 42387
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 42388
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 42389
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 42390
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 42391
        //FRC
        t34.x = fract(t34.x);
        //Instruction 42392
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 42393
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 42394
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 42395
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 42396
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 42397
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 42398
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 42399
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 42400
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 42401
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 42402
        //IF
        if(tb51){
            //Instruction 42403
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 42404
            //FRC
            t5 = fract(t5);
            //Instruction 42405
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42406
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 42407
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 42408
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 42409
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 42410
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 42411
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 42412
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 42413
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42414
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 42415
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42416
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 42417
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 42418
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 42419
            //SQRT
            t52 = sqrt(t52);
            //Instruction 42420
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 42421
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 42422
            //MUL
            t54 = t54 * t55;
            //Instruction 42423
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 42424
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 42425
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 42426
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 42427
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 42428
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 42429
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 42430
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 42431
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 42432
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 42433
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 42434
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 42435
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 42436
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 42437
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 42438
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 42439
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 42440
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 42441
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 42442
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 42443
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 42444
            //SQRT
            t54 = sqrt(t54);
            //Instruction 42445
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 42446
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 42447
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 42448
            //MUL
            t6.x = t54 * t55;
            //Instruction 42449
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 42450
            //LT
            tb20 = t20<(-t20);
            //Instruction 42451
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 42452
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 42453
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 42454
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 42455
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 42456
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 42457
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 42458
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42459
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 42460
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42461
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 42462
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 42463
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 42464
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 42465
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 42466
            //LOG
            t51 = log2(t51);
            //Instruction 42467
            //MUL
            t51 = t51 * t7.y;
            //Instruction 42468
            //EXP
            t51 = exp2(t51);
            //Instruction 42469
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 42470
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 42471
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 42472
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 42473
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 42474
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 42475
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 42476
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 42477
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 42478
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 42479
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 42480
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 42481
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 42482
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 42483
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 42484
            //MOV
            t11.z = t12.x;
            //Instruction 42485
            //MOV
            t11.w = t10.x;
            //Instruction 42486
            //MOV
            t13.z = t9.y;
            //Instruction 42487
            //MOV
            t13.w = t14.y;
            //Instruction 42488
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 42489
            //MOV
            t14.w = t13.y;
            //Instruction 42490
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 42491
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 42492
            //MOV
            t10.w = t11.y;
            //Instruction 42493
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 42494
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 42495
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 42496
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 42497
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 42498
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 42499
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 42500
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 42501
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 42502
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 42503
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 42504
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 42505
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 42506
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 42507
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 42508
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 42509
        //ELSE
        } else {
            //Instruction 42510
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 42511
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 42512
        //ENDIF
        }
        //Instruction 42513
    //ELSE
    } else {
        //Instruction 42514
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 42515
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 42516
    //ENDIF
    }
    //Instruction 42517
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 42518
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 42519
    //IF
    if(tb52){
        //Instruction 42520
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 42521
        //IF
        if(tb52){
            //Instruction 42522
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42523
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 42524
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 42525
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 42526
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 42527
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 42528
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42529
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 42530
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42531
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 42532
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 42533
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 42534
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42535
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 42536
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 42537
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 42538
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42539
            //FRC
            t2 = fract(t2);
            //Instruction 42540
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42541
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 42542
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42543
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42544
            //ADD
            t2 = t2 + t2;
            //Instruction 42545
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 42546
            //LT
            tb54 = t7.w<0.0;
            //Instruction 42547
            //MOV
            t7.y = (-t7.w);
            //Instruction 42548
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 42549
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 42550
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 42551
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 42552
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 42553
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 42554
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 42555
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42556
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42557
            //MUL
            t56 = t2.x * t56;
            //Instruction 42558
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 42559
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42560
            //MUL
            t54 = t54 * t55;
            //Instruction 42561
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 42562
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 42563
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42564
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42565
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42566
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 42567
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 42568
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42569
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 42570
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42571
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 42572
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 42573
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 42574
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 42575
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42576
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 42577
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 42578
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 42579
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42580
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 42581
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 42582
        //ELSE
        } else {
            //Instruction 42583
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42584
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42585
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42586
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 42587
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 42588
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 42589
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42590
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 42591
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 42592
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42593
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 42594
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42595
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 42596
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42597
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42598
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 42599
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 42600
            //LT
            tb0 = t2.w<0.0;
            //Instruction 42601
            //MOV
            t2.y = (-t2.w);
            //Instruction 42602
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 42603
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 42604
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 42605
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 42606
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 42607
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 42608
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 42609
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42610
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42611
            //MUL
            t54 = t54 * t6.x;
            //Instruction 42612
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 42613
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 42614
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 42615
        //ENDIF
        }
        //Instruction 42616
    //ENDIF
    }
    //Instruction 42617
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 42618
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 42619
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42620
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 42621
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 42622
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 42623
    //NE
    tb54 = t52!=0.0;
    //Instruction 42624
    //LOG
    t55 = log2(t52);
    //Instruction 42625
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 42626
    //EXP
    t55 = exp2(t55);
    //Instruction 42627
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 42628
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42629
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42630
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 42631
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 42632
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42633
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 42634
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42635
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 42636
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 42637
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 42638
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42639
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 42640
    //MUL
    t52 = t52 * t54;
    //Instruction 42641
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 42642
    //MOV
    t5.y = t4.y;
    //Instruction 42643
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 42644
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 42645
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 42646
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 42647
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 42648
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 42649
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 42650
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 42651
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 42652
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 42653
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 42654
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 42655
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 42656
    //MUL
    t3.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 42657
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 42658
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 42659
    //ADD
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    //Instruction 42660
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 42661
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 42662
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 42663
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 42664
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 42665
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 42666
    //MUL
    t0.xyw = t34.yyy * t5.xyz;
    //Instruction 42667
    //MAD
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    //Instruction 42668
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 42669
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 42670
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 42671
    //MAD
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    //Instruction 42672
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 42673
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 42674
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 42675
    //MOV
    t0.w = 1.0;
    //Instruction 42676
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 42677
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 42678
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 42679
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 42680
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 42681
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 42682
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 42683
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 42684
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 42685
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 42686
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 42687
    //MOV
    gl_Position = t2;
    //Instruction 42688
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42689
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 42690
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 42691
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 42692
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42693
    //MOV
    vs_TEXCOORD5.xyz = t16_15.xyz;
    //Instruction 42694
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 42340
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 42341
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 42342
    //LT
    tb12 = t10_1<0.0;
    //Instruction 42343
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 42344
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 42345
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 42346
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 42347
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 42348
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 42349
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 42350
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 42351
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 42352
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 42353
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42354
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 42355
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 42356
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42357
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 42358
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 42359
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 42360
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 42361
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42362
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = normalize(((
    (v_101.xyz * tmpvar_14.x)
   + 
    (v_102.xyz * tmpvar_14.y)
  ) + (v_103.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec3 x1_108;
  x1_108.x = dot (unity_SHAr, normal_106);
  x1_108.y = dot (unity_SHAg, normal_106);
  x1_108.z = dot (unity_SHAb, normal_106);
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_109);
  x2_107.y = dot (unity_SHBg, tmpvar_109);
  x2_107.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_105 = ((x2_107 + (unity_SHC.xyz * 
    ((normal_106.x * normal_106.x) - (normal_106.y * normal_106.y))
  )) + x1_108);
  tmpvar_7 = tmpvar_105;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_98;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 42464
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42465
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 42466
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 42467
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 42468
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 42469
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 42470
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 42471
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 42472
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 42473
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 42474
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 42475
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42476
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 42477
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 42478
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 42479
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 42480
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 42481
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 42482
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 42483
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 42484
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 42485
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 42486
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 42487
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 42488
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 42489
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 42490
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 42491
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 42492
        //FRC
        t34.x = fract(t34.x);
        //Instruction 42493
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 42494
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 42495
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 42496
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 42497
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 42498
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 42499
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 42500
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 42501
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 42502
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 42503
        //IF
        if(tb51){
            //Instruction 42504
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 42505
            //FRC
            t5 = fract(t5);
            //Instruction 42506
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42507
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 42508
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 42509
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 42510
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 42511
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 42512
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 42513
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 42514
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42515
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 42516
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42517
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 42518
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 42519
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 42520
            //SQRT
            t52 = sqrt(t52);
            //Instruction 42521
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 42522
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 42523
            //MUL
            t54 = t54 * t55;
            //Instruction 42524
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 42525
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 42526
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 42527
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 42528
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 42529
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 42530
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 42531
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 42532
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 42533
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 42534
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 42535
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 42536
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 42537
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 42538
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 42539
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 42540
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 42541
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 42542
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 42543
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 42544
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 42545
            //SQRT
            t54 = sqrt(t54);
            //Instruction 42546
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 42547
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 42548
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 42549
            //MUL
            t6.x = t54 * t55;
            //Instruction 42550
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 42551
            //LT
            tb20 = t20<(-t20);
            //Instruction 42552
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 42553
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 42554
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 42555
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 42556
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 42557
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 42558
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 42559
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42560
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 42561
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42562
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 42563
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 42564
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 42565
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 42566
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 42567
            //LOG
            t51 = log2(t51);
            //Instruction 42568
            //MUL
            t51 = t51 * t7.y;
            //Instruction 42569
            //EXP
            t51 = exp2(t51);
            //Instruction 42570
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 42571
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 42572
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 42573
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 42574
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 42575
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 42576
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 42577
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 42578
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 42579
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 42580
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 42581
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 42582
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 42583
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 42584
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 42585
            //MOV
            t11.z = t12.x;
            //Instruction 42586
            //MOV
            t11.w = t10.x;
            //Instruction 42587
            //MOV
            t13.z = t9.y;
            //Instruction 42588
            //MOV
            t13.w = t14.y;
            //Instruction 42589
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 42590
            //MOV
            t14.w = t13.y;
            //Instruction 42591
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 42592
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 42593
            //MOV
            t10.w = t11.y;
            //Instruction 42594
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 42595
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 42596
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 42597
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 42598
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 42599
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 42600
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 42601
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 42602
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 42603
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 42604
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 42605
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 42606
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 42607
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 42608
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 42609
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 42610
        //ELSE
        } else {
            //Instruction 42611
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 42612
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 42613
        //ENDIF
        }
        //Instruction 42614
    //ELSE
    } else {
        //Instruction 42615
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 42616
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 42617
    //ENDIF
    }
    //Instruction 42618
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 42619
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 42620
    //IF
    if(tb52){
        //Instruction 42621
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 42622
        //IF
        if(tb52){
            //Instruction 42623
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42624
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 42625
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 42626
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 42627
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 42628
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 42629
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42630
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 42631
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42632
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 42633
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 42634
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 42635
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42636
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 42637
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 42638
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 42639
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42640
            //FRC
            t2 = fract(t2);
            //Instruction 42641
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42642
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 42643
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42644
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42645
            //ADD
            t2 = t2 + t2;
            //Instruction 42646
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 42647
            //LT
            tb54 = t7.w<0.0;
            //Instruction 42648
            //MOV
            t7.y = (-t7.w);
            //Instruction 42649
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 42650
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 42651
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 42652
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 42653
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 42654
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 42655
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 42656
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42657
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42658
            //MUL
            t56 = t2.x * t56;
            //Instruction 42659
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 42660
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42661
            //MUL
            t54 = t54 * t55;
            //Instruction 42662
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 42663
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 42664
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42665
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42666
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42667
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 42668
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 42669
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42670
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 42671
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42672
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 42673
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 42674
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 42675
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 42676
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42677
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 42678
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 42679
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 42680
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42681
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 42682
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 42683
        //ELSE
        } else {
            //Instruction 42684
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42685
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42686
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42687
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 42688
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 42689
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 42690
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42691
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 42692
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 42693
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42694
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 42695
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42696
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 42697
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42698
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42699
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 42700
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 42701
            //LT
            tb0 = t2.w<0.0;
            //Instruction 42702
            //MOV
            t2.y = (-t2.w);
            //Instruction 42703
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 42704
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 42705
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 42706
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 42707
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 42708
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 42709
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 42710
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42711
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42712
            //MUL
            t54 = t54 * t6.x;
            //Instruction 42713
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 42714
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 42715
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 42716
        //ENDIF
        }
        //Instruction 42717
    //ENDIF
    }
    //Instruction 42718
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 42719
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 42720
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42721
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 42722
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 42723
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 42724
    //NE
    tb54 = t52!=0.0;
    //Instruction 42725
    //LOG
    t55 = log2(t52);
    //Instruction 42726
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 42727
    //EXP
    t55 = exp2(t55);
    //Instruction 42728
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 42729
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42730
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42731
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 42732
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 42733
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42734
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 42735
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42736
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 42737
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 42738
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 42739
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42740
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 42741
    //MUL
    t52 = t52 * t54;
    //Instruction 42742
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 42743
    //MOV
    t5.y = t4.y;
    //Instruction 42744
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 42745
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 42746
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 42747
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 42748
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 42749
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 42750
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 42751
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 42752
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 42753
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 42754
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 42755
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 42756
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 42757
    //MUL
    t3.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 42758
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 42759
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 42760
    //ADD
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    //Instruction 42761
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 42762
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 42763
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 42764
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 42765
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 42766
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 42767
    //MUL
    t0.xyw = t34.yyy * t5.xyz;
    //Instruction 42768
    //MAD
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    //Instruction 42769
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 42770
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 42771
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 42772
    //MAD
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    //Instruction 42773
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 42774
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 42775
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 42776
    //MOV
    t0.w = 1.0;
    //Instruction 42777
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 42778
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 42779
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 42780
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 42781
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 42782
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 42783
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 42784
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 42785
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 42786
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 42787
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 42788
    //MOV
    gl_Position = t2;
    //Instruction 42789
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 42790
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 42791
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 42792
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 42793
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 42794
    //MOV
    vs_TEXCOORD5.xyz = t16_15.xyz;
    //Instruction 42795
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 42442
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 42443
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 42444
    //LT
    tb12 = t10_1<0.0;
    //Instruction 42445
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 42446
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 42447
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 42448
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 42449
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 42450
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 42451
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 42452
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 42453
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 42454
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 42455
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42456
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 42457
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 42458
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42459
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 42460
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 42461
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 42462
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42463
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = normalize(((
    (v_101.xyz * tmpvar_14.x)
   + 
    (v_102.xyz * tmpvar_14.y)
  ) + (v_103.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec3 x1_108;
  x1_108.x = dot (unity_SHAr, normal_106);
  x1_108.y = dot (unity_SHAg, normal_106);
  x1_108.z = dot (unity_SHAb, normal_106);
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_109);
  x2_107.y = dot (unity_SHBg, tmpvar_109);
  x2_107.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_105 = ((x2_107 + (unity_SHC.xyz * 
    ((normal_106.x * normal_106.x) - (normal_106.y * normal_106.y))
  )) + x1_108);
  tmpvar_7 = tmpvar_105;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_98;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 43421
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43422
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 43423
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 43424
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 43425
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 43426
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 43427
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 43428
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 43429
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 43430
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 43431
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 43432
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43433
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 43434
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 43435
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 43436
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 43437
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 43438
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 43439
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 43440
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 43441
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 43442
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 43443
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 43444
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 43445
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 43446
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 43447
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 43448
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 43449
        //FRC
        t34.x = fract(t34.x);
        //Instruction 43450
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 43451
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 43452
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 43453
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 43454
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 43455
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 43456
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 43457
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 43458
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 43459
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 43460
        //IF
        if(tb51){
            //Instruction 43461
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 43462
            //FRC
            t5 = fract(t5);
            //Instruction 43463
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43464
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 43465
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 43466
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 43467
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 43468
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 43469
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 43470
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 43471
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43472
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 43473
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43474
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 43475
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 43476
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 43477
            //SQRT
            t52 = sqrt(t52);
            //Instruction 43478
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 43479
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 43480
            //MUL
            t54 = t54 * t55;
            //Instruction 43481
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 43482
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 43483
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 43484
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 43485
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 43486
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 43487
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 43488
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 43489
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 43490
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 43491
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 43492
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 43493
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 43494
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 43495
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 43496
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 43497
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 43498
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 43499
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 43500
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 43501
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 43502
            //SQRT
            t54 = sqrt(t54);
            //Instruction 43503
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 43504
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 43505
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 43506
            //MUL
            t6.x = t54 * t55;
            //Instruction 43507
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 43508
            //LT
            tb20 = t20<(-t20);
            //Instruction 43509
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 43510
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 43511
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 43512
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 43513
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 43514
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 43515
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 43516
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43517
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 43518
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43519
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 43520
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 43521
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 43522
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 43523
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 43524
            //LOG
            t51 = log2(t51);
            //Instruction 43525
            //MUL
            t51 = t51 * t7.y;
            //Instruction 43526
            //EXP
            t51 = exp2(t51);
            //Instruction 43527
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 43528
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 43529
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 43530
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 43531
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 43532
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 43533
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 43534
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 43535
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 43536
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 43537
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 43538
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 43539
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 43540
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 43541
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 43542
            //MOV
            t11.z = t12.x;
            //Instruction 43543
            //MOV
            t11.w = t10.x;
            //Instruction 43544
            //MOV
            t13.z = t9.y;
            //Instruction 43545
            //MOV
            t13.w = t14.y;
            //Instruction 43546
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 43547
            //MOV
            t14.w = t13.y;
            //Instruction 43548
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 43549
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 43550
            //MOV
            t10.w = t11.y;
            //Instruction 43551
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 43552
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 43553
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 43554
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 43555
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 43556
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 43557
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 43558
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 43559
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 43560
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 43561
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 43562
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 43563
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 43564
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 43565
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 43566
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 43567
        //ELSE
        } else {
            //Instruction 43568
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 43569
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 43570
        //ENDIF
        }
        //Instruction 43571
    //ELSE
    } else {
        //Instruction 43572
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 43573
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 43574
    //ENDIF
    }
    //Instruction 43575
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 43576
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 43577
    //IF
    if(tb52){
        //Instruction 43578
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 43579
        //IF
        if(tb52){
            //Instruction 43580
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43581
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 43582
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 43583
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 43584
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 43585
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 43586
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43587
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 43588
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43589
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 43590
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 43591
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 43592
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43593
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 43594
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 43595
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 43596
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43597
            //FRC
            t2 = fract(t2);
            //Instruction 43598
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43599
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 43600
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43601
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43602
            //ADD
            t2 = t2 + t2;
            //Instruction 43603
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 43604
            //LT
            tb54 = t7.w<0.0;
            //Instruction 43605
            //MOV
            t7.y = (-t7.w);
            //Instruction 43606
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 43607
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 43608
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 43609
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 43610
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 43611
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 43612
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 43613
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43614
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43615
            //MUL
            t56 = t2.x * t56;
            //Instruction 43616
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 43617
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43618
            //MUL
            t54 = t54 * t55;
            //Instruction 43619
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 43620
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 43621
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43622
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43623
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43624
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 43625
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 43626
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43627
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 43628
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43629
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 43630
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 43631
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 43632
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 43633
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43634
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 43635
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 43636
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 43637
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43638
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 43639
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 43640
        //ELSE
        } else {
            //Instruction 43641
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43642
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43643
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43644
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 43645
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 43646
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 43647
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43648
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 43649
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 43650
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43651
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 43652
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43653
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 43654
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43655
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43656
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 43657
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 43658
            //LT
            tb0 = t2.w<0.0;
            //Instruction 43659
            //MOV
            t2.y = (-t2.w);
            //Instruction 43660
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 43661
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 43662
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 43663
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 43664
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 43665
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 43666
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 43667
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43668
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43669
            //MUL
            t54 = t54 * t6.x;
            //Instruction 43670
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 43671
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 43672
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 43673
        //ENDIF
        }
        //Instruction 43674
    //ENDIF
    }
    //Instruction 43675
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 43676
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 43677
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43678
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 43679
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 43680
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 43681
    //NE
    tb54 = t52!=0.0;
    //Instruction 43682
    //LOG
    t55 = log2(t52);
    //Instruction 43683
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 43684
    //EXP
    t55 = exp2(t55);
    //Instruction 43685
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 43686
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43687
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43688
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 43689
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 43690
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43691
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 43692
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43693
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 43694
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 43695
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 43696
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43697
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 43698
    //MUL
    t52 = t52 * t54;
    //Instruction 43699
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 43700
    //MOV
    t5.y = t4.y;
    //Instruction 43701
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 43702
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 43703
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 43704
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 43705
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 43706
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 43707
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 43708
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 43709
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 43710
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 43711
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 43712
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 43713
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 43714
    //MUL
    t3.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 43715
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 43716
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 43717
    //ADD
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    //Instruction 43718
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 43719
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 43720
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 43721
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 43722
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 43723
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 43724
    //MUL
    t0.xyw = t34.yyy * t5.xyz;
    //Instruction 43725
    //MAD
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    //Instruction 43726
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 43727
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 43728
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 43729
    //MAD
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    //Instruction 43730
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 43731
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 43732
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 43733
    //MOV
    t0.w = 1.0;
    //Instruction 43734
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 43735
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 43736
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 43737
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 43738
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 43739
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 43740
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 43741
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 43742
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 43743
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 43744
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 43745
    //MOV
    gl_Position = t2;
    //Instruction 43746
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43747
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43748
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43749
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 43750
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43751
    //MOV
    vs_TEXCOORD5.xyz = t16_15.xyz;
    //Instruction 43752
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 43398
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 43399
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 43400
    //LT
    tb12 = t10_1<0.0;
    //Instruction 43401
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 43402
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 43403
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 43404
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 43405
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 43406
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 43407
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 43408
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 43409
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 43410
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 43411
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43412
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43413
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43414
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43415
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 43416
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 43417
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 43418
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 43419
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43420
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = normalize(((
    (v_101.xyz * tmpvar_14.x)
   + 
    (v_102.xyz * tmpvar_14.y)
  ) + (v_103.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_105;
  mediump vec4 normal_106;
  normal_106 = tmpvar_104;
  mediump vec3 x2_107;
  mediump vec3 x1_108;
  x1_108.x = dot (unity_SHAr, normal_106);
  x1_108.y = dot (unity_SHAg, normal_106);
  x1_108.z = dot (unity_SHAb, normal_106);
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_109);
  x2_107.y = dot (unity_SHBg, tmpvar_109);
  x2_107.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_105 = ((x2_107 + (unity_SHC.xyz * 
    ((normal_106.x * normal_106.x) - (normal_106.y * normal_106.y))
  )) + x1_108);
  tmpvar_7 = tmpvar_105;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_98;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_66;
void main()
{
    //Instruction 42717
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42718
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 42719
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 42720
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 42721
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 42722
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 42723
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 42724
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 42725
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 42726
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 42727
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 42728
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42729
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 42730
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 42731
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 42732
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 42733
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 42734
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 42735
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 42736
    //LT
    tb51 = t16_2<5.000000;
    //Instruction 42737
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 42738
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 42739
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 42740
        //EQ
        tb51 = t16_2==4.000000;
        //Instruction 42741
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 42742
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 42743
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 42744
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 42745
        //FRC
        t34.x = fract(t34.x);
        //Instruction 42746
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 42747
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 42748
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 42749
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 42750
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 42751
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 42752
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 42753
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 42754
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 42755
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 42756
        //IF
        if(tb51){
            //Instruction 42757
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 42758
            //FRC
            t5 = fract(t5);
            //Instruction 42759
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42760
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 42761
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 42762
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 42763
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 42764
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 42765
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 42766
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 42767
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42768
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 42769
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42770
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 42771
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 42772
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 42773
            //SQRT
            t52 = sqrt(t52);
            //Instruction 42774
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 42775
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 42776
            //MUL
            t54 = t54 * t55;
            //Instruction 42777
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 42778
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 42779
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 42780
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 42781
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 42782
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 42783
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 42784
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 42785
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 42786
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 42787
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 42788
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 42789
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 42790
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 42791
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 42792
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 42793
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 42794
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 42795
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 42796
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 42797
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 42798
            //SQRT
            t54 = sqrt(t54);
            //Instruction 42799
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 42800
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 42801
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 42802
            //MUL
            t6.x = t54 * t55;
            //Instruction 42803
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 42804
            //LT
            tb20 = t20<(-t20);
            //Instruction 42805
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 42806
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 42807
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 42808
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 42809
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 42810
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 42811
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 42812
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42813
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 42814
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42815
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 42816
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 42817
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 42818
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 42819
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 42820
            //LOG
            t51 = log2(t51);
            //Instruction 42821
            //MUL
            t51 = t51 * t7.y;
            //Instruction 42822
            //EXP
            t51 = exp2(t51);
            //Instruction 42823
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 42824
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 42825
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 42826
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 42827
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 42828
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 42829
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 42830
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 42831
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 42832
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 42833
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 42834
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 42835
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 42836
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 42837
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 42838
            //MOV
            t11.z = t12.x;
            //Instruction 42839
            //MOV
            t11.w = t10.x;
            //Instruction 42840
            //MOV
            t13.z = t9.y;
            //Instruction 42841
            //MOV
            t13.w = t14.y;
            //Instruction 42842
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 42843
            //MOV
            t14.w = t13.y;
            //Instruction 42844
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 42845
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 42846
            //MOV
            t10.w = t11.y;
            //Instruction 42847
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 42848
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 42849
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 42850
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 42851
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 42852
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 42853
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 42854
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 42855
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 42856
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 42857
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 42858
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 42859
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 42860
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 42861
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 42862
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 42863
        //ELSE
        } else {
            //Instruction 42864
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 42865
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 42866
        //ENDIF
        }
        //Instruction 42867
    //ELSE
    } else {
        //Instruction 42868
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 42869
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 42870
    //ENDIF
    }
    //Instruction 42871
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 42872
    //GE
    tb52 = t16_2>=3.000000;
    //Instruction 42873
    //IF
    if(tb52){
        //Instruction 42874
        //EQ
        tb52 = t16_2==5.000000;
        //Instruction 42875
        //IF
        if(tb52){
            //Instruction 42876
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42877
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 42878
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 42879
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 42880
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 42881
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 42882
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42883
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 42884
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42885
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 42886
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 42887
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 42888
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42889
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 42890
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 42891
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 42892
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42893
            //FRC
            t2 = fract(t2);
            //Instruction 42894
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42895
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 42896
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42897
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42898
            //ADD
            t2 = t2 + t2;
            //Instruction 42899
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 42900
            //LT
            tb54 = t7.w<0.0;
            //Instruction 42901
            //MOV
            t7.y = (-t7.w);
            //Instruction 42902
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 42903
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 42904
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 42905
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 42906
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 42907
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 42908
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 42909
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42910
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42911
            //MUL
            t56 = t2.x * t56;
            //Instruction 42912
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 42913
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42914
            //MUL
            t54 = t54 * t55;
            //Instruction 42915
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 42916
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 42917
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42918
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42919
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42920
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 42921
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 42922
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42923
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 42924
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42925
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 42926
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 42927
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 42928
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 42929
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42930
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 42931
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 42932
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 42933
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42934
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 42935
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 42936
        //ELSE
        } else {
            //Instruction 42937
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42938
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42939
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42940
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 42941
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 42942
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 42943
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42944
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 42945
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 42946
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42947
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 42948
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42949
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 42950
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42951
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42952
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 42953
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 42954
            //LT
            tb0 = t2.w<0.0;
            //Instruction 42955
            //MOV
            t2.y = (-t2.w);
            //Instruction 42956
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 42957
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 42958
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 42959
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 42960
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 42961
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 42962
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 42963
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42964
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42965
            //MUL
            t54 = t54 * t6.x;
            //Instruction 42966
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 42967
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 42968
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 42969
        //ENDIF
        }
        //Instruction 42970
    //ENDIF
    }
    //Instruction 42971
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 42972
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 42973
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42974
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 42975
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 42976
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 42977
    //NE
    tb54 = t52!=0.0;
    //Instruction 42978
    //LOG
    t55 = log2(t52);
    //Instruction 42979
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 42980
    //EXP
    t55 = exp2(t55);
    //Instruction 42981
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 42982
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42983
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42984
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 42985
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 42986
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42987
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 42988
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42989
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 42990
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 42991
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 42992
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42993
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 42994
    //MUL
    t52 = t52 * t54;
    //Instruction 42995
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 42996
    //MOV
    t5.y = t4.y;
    //Instruction 42997
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 42998
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 42999
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 43000
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 43001
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 43002
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 43003
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 43004
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 43005
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 43006
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 43007
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 43008
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 43009
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 43010
    //MUL
    t3.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 43011
    //MUL
    t0.x = t2.y * _ProjectionParams.x;
    //Instruction 43012
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 43013
    //ADD
    vs_TEXCOORD3.xy = t3.zz + t3.xw;
    //Instruction 43014
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 43015
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 43016
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 43017
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 43018
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 43019
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 43020
    //MUL
    t0.xyw = t34.yyy * t5.xyz;
    //Instruction 43021
    //MAD
    t0.xyz = t4.xyz * t34.xxx + t0.xyw;
    //Instruction 43022
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 43023
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 43024
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 43025
    //MAD
    t0.xyz = t4.xyz * vec3(t20) + t0.xyz;
    //Instruction 43026
    //DP3
    t51 = dot(t0.xyz, t0.xyz);
    //Instruction 43027
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 43028
    //MUL
    t0.xyz = vec3(t51) * t0.xyz;
    //Instruction 43029
    //MOV
    t0.w = 1.0;
    //Instruction 43030
    //DP4
    t16_15.x = dot(unity_SHAr, t0);
    //Instruction 43031
    //DP4
    t16_15.y = dot(unity_SHAg, t0);
    //Instruction 43032
    //DP4
    t16_15.z = dot(unity_SHAb, t0);
    //Instruction 43033
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 43034
    //DP4
    t16_16.x = dot(unity_SHBr, t16_3);
    //Instruction 43035
    //DP4
    t16_16.y = dot(unity_SHBg, t16_3);
    //Instruction 43036
    //DP4
    t16_16.z = dot(unity_SHBb, t16_3);
    //Instruction 43037
    //MUL
    t16_66 = t0.y * t0.y;
    //Instruction 43038
    //MAD
    t16_66 = t0.x * t0.x + (-t16_66);
    //Instruction 43039
    //MAD
    t16_16.xyz = unity_SHC.xyz * vec3(t16_66) + t16_16.xyz;
    //Instruction 43040
    //ADD
    t16_15.xyz = t16_15.xyz + t16_16.xyz;
    //Instruction 43041
    //MOV
    gl_Position = t2;
    //Instruction 43042
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43043
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43044
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43045
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 43046
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43047
    //MOV
    vs_TEXCOORD5.xyz = t16_15.xyz;
    //Instruction 43048
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 42695
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 42696
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 42697
    //LT
    tb12 = t10_1<0.0;
    //Instruction 42698
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 42699
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 42700
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 42701
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 42702
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 42703
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 42704
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 42705
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 42706
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 42707
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 42708
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42709
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 42710
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 42711
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42712
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 42713
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 42714
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 42715
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42716
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_58;
  mediump vec4 normal_59;
  normal_59 = tmpvar_57;
  mediump vec3 x2_60;
  mediump vec3 x1_61;
  x1_61.x = dot (unity_SHAr, normal_59);
  x1_61.y = dot (unity_SHAg, normal_59);
  x1_61.z = dot (unity_SHAb, normal_59);
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_62);
  x2_60.y = dot (unity_SHBg, tmpvar_62);
  x2_60.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_58 = ((x2_60 + (unity_SHC.xyz * 
    ((normal_59.x * normal_59.x) - (normal_59.y * normal_59.y))
  )) + x1_61);
  tmpvar_6 = tmpvar_58;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_51;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_9;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_10;
  c_10.xyz = (tmpvar_5 * light_3.xyz);
  c_10.w = tmpvar_6;
  c_2.xyz = c_10.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 43060
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43061
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 43062
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 43063
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43064
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 43065
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 43066
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 43067
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 43068
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 43069
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 43070
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43071
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 43072
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 43073
    //IF
    if(tb25){
        //Instruction 43074
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 43075
        //IF
        if(tb25){
            //Instruction 43076
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43077
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 43078
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 43079
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 43080
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 43081
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43082
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43083
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43084
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43085
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43086
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 43087
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 43088
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 43089
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43090
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 43091
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 43092
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 43093
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43094
            //FRC
            t0 = fract(t0);
            //Instruction 43095
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43096
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 43097
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43098
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43099
            //ADD
            t0 = t0 + t0;
            //Instruction 43100
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 43101
            //LT
            tb26 = t5.w<0.0;
            //Instruction 43102
            //MOV
            t5.y = (-t5.w);
            //Instruction 43103
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 43104
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 43105
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 43106
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 43107
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 43108
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 43109
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 43110
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43111
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43112
            //MUL
            t28 = t0.x * t28;
            //Instruction 43113
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 43114
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43115
            //MUL
            t26 = t26 * t27;
            //Instruction 43116
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 43117
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 43118
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43119
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43120
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43121
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 43122
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 43123
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43124
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 43125
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43126
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 43127
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 43128
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 43129
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 43130
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43131
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 43132
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 43133
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 43134
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43135
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43136
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 43137
        //ELSE
        } else {
            //Instruction 43138
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43139
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 43140
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43141
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 43142
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 43143
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 43144
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 43145
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43146
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 43147
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 43148
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43149
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43150
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43151
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 43152
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43153
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43154
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 43155
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 43156
            //LT
            tb25 = t0.w<0.0;
            //Instruction 43157
            //MOV
            t0.y = (-t0.w);
            //Instruction 43158
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 43159
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 43160
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 43161
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 43162
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 43163
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 43164
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 43165
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43166
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43167
            //MUL
            t27 = t27 * t4.x;
            //Instruction 43168
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 43169
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43170
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 43171
        //ENDIF
        }
        //Instruction 43172
    //ENDIF
    }
    //Instruction 43173
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 43174
    //SQRT
    t25 = sqrt(t25);
    //Instruction 43175
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43176
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 43177
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 43178
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 43179
    //NE
    tb3 = t26!=0.0;
    //Instruction 43180
    //LOG
    t11 = log2(t26);
    //Instruction 43181
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 43182
    //EXP
    t11 = exp2(t11);
    //Instruction 43183
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 43184
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43185
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43186
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 43187
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 43188
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43189
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 43190
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43191
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 43192
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 43193
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 43194
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43195
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 43196
    //MUL
    t26 = t26 * t3.x;
    //Instruction 43197
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 43198
    //MOV
    t3.y = t2.y;
    //Instruction 43199
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 43200
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 43201
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 43202
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 43203
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 43204
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 43205
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 43206
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 43207
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 43208
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 43209
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 43210
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 43211
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 43212
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 43213
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 43214
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 43215
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 43216
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 43217
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 43218
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 43219
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 43220
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 43221
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 43222
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 43223
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 43224
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 43225
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 43226
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 43227
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 43228
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 43229
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 43230
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 43231
    //MOV
    t1.w = 1.0;
    //Instruction 43232
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 43233
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 43234
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 43235
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 43236
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 43237
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 43238
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 43239
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 43240
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 43241
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 43242
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 43243
    //MOV
    gl_Position = t0;
    //Instruction 43244
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43245
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 43246
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 43247
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 43248
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43249
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 43250
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
void main()
{
    //Instruction 43049
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43050
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43051
    //MAX
    t16_1.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43052
    //LOG
    t16_1.xyz = log2(t16_1.xyz);
    //Instruction 43053
    //ADD
    t0.xyz = (-t16_1.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 43054
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 43055
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43056
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 43057
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 43058
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43059
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_9);
  highp vec4 o_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_58;
  mediump vec4 normal_59;
  normal_59 = tmpvar_57;
  mediump vec3 x2_60;
  mediump vec3 x1_61;
  x1_61.x = dot (unity_SHAr, normal_59);
  x1_61.y = dot (unity_SHAg, normal_59);
  x1_61.z = dot (unity_SHAb, normal_59);
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_62);
  x2_60.y = dot (unity_SHBg, tmpvar_62);
  x2_60.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_58 = ((x2_60 + (unity_SHC.xyz * 
    ((normal_59.x * normal_59.x) - (normal_59.y * normal_59.y))
  )) + x1_61);
  tmpvar_6 = tmpvar_58;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_51;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_10.w;
  light_3.xyz = (tmpvar_10.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 43763
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43764
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 43765
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 43766
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43767
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 43768
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 43769
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 43770
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 43771
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 43772
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 43773
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43774
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 43775
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 43776
    //IF
    if(tb25){
        //Instruction 43777
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 43778
        //IF
        if(tb25){
            //Instruction 43779
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43780
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 43781
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 43782
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 43783
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 43784
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43785
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43786
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43787
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43788
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43789
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 43790
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 43791
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 43792
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43793
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 43794
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 43795
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 43796
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43797
            //FRC
            t0 = fract(t0);
            //Instruction 43798
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43799
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 43800
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43801
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43802
            //ADD
            t0 = t0 + t0;
            //Instruction 43803
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 43804
            //LT
            tb26 = t5.w<0.0;
            //Instruction 43805
            //MOV
            t5.y = (-t5.w);
            //Instruction 43806
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 43807
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 43808
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 43809
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 43810
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 43811
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 43812
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 43813
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43814
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43815
            //MUL
            t28 = t0.x * t28;
            //Instruction 43816
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 43817
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43818
            //MUL
            t26 = t26 * t27;
            //Instruction 43819
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 43820
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 43821
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43822
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43823
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43824
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 43825
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 43826
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43827
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 43828
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43829
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 43830
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 43831
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 43832
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 43833
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43834
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 43835
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 43836
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 43837
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43838
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43839
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 43840
        //ELSE
        } else {
            //Instruction 43841
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43842
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 43843
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43844
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 43845
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 43846
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 43847
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 43848
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43849
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 43850
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 43851
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43852
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43853
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43854
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 43855
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43856
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43857
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 43858
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 43859
            //LT
            tb25 = t0.w<0.0;
            //Instruction 43860
            //MOV
            t0.y = (-t0.w);
            //Instruction 43861
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 43862
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 43863
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 43864
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 43865
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 43866
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 43867
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 43868
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43869
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43870
            //MUL
            t27 = t27 * t4.x;
            //Instruction 43871
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 43872
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43873
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 43874
        //ENDIF
        }
        //Instruction 43875
    //ENDIF
    }
    //Instruction 43876
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 43877
    //SQRT
    t25 = sqrt(t25);
    //Instruction 43878
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43879
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 43880
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 43881
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 43882
    //NE
    tb3 = t26!=0.0;
    //Instruction 43883
    //LOG
    t11 = log2(t26);
    //Instruction 43884
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 43885
    //EXP
    t11 = exp2(t11);
    //Instruction 43886
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 43887
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43888
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43889
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 43890
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 43891
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43892
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 43893
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43894
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 43895
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 43896
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 43897
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43898
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 43899
    //MUL
    t26 = t26 * t3.x;
    //Instruction 43900
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 43901
    //MOV
    t3.y = t2.y;
    //Instruction 43902
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 43903
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 43904
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 43905
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 43906
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 43907
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 43908
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 43909
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 43910
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 43911
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 43912
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 43913
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 43914
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 43915
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 43916
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 43917
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 43918
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 43919
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 43920
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 43921
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 43922
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 43923
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 43924
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 43925
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 43926
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 43927
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 43928
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 43929
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 43930
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 43931
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 43932
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 43933
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 43934
    //MOV
    t1.w = 1.0;
    //Instruction 43935
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 43936
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 43937
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 43938
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 43939
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 43940
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 43941
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 43942
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 43943
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 43944
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 43945
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 43946
    //MOV
    gl_Position = t0;
    //Instruction 43947
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43948
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 43949
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 43950
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 43951
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43952
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 43953
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
void main()
{
    //Instruction 43753
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43754
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43755
    //MAX
    t16_1.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43756
    //ADD
    t0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    //Instruction 43757
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 43758
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43759
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 43760
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 43761
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43762
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_53;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 42816
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 42817
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 42818
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 42819
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 42820
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 42821
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 42822
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 42823
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 42824
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 42825
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 42826
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 42827
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 42828
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 42829
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 42830
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 42831
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 42832
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 42833
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 42834
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 42835
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 42836
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 42837
    //IF
    if(tb28){
        //Instruction 42838
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 42839
        //IF
        if(tb28){
            //Instruction 42840
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 42841
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 42842
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 42843
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 42844
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 42845
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 42846
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42847
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42848
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42849
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 42850
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 42851
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 42852
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42853
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 42854
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 42855
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 42856
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 42857
            //FRC
            t2 = fract(t2);
            //Instruction 42858
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 42859
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 42860
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 42861
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 42862
            //ADD
            t2 = t2 + t2;
            //Instruction 42863
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 42864
            //LT
            tb30 = t6.w<0.0;
            //Instruction 42865
            //MOV
            t6.y = (-t6.w);
            //Instruction 42866
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 42867
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 42868
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 42869
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 42870
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 42871
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 42872
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 42873
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42874
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42875
            //MUL
            t32 = t2.x * t32;
            //Instruction 42876
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 42877
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 42878
            //MUL
            t30 = t30 * t31;
            //Instruction 42879
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 42880
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42881
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42882
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 42883
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 42884
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 42885
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 42886
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 42887
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 42888
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 42889
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 42890
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 42891
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 42892
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 42893
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 42894
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 42895
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 42896
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 42897
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 42898
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 42899
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 42900
        //ELSE
        } else {
            //Instruction 42901
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 42902
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 42903
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42904
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 42905
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 42906
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 42907
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 42908
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 42909
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 42910
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 42911
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 42912
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 42913
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 42914
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 42915
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 42916
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 42917
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 42918
            //LT
            tb0 = t2.w<0.0;
            //Instruction 42919
            //MOV
            t2.y = (-t2.w);
            //Instruction 42920
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 42921
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 42922
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 42923
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 42924
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 42925
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 42926
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 42927
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 42928
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 42929
            //MUL
            t30 = t30 * t5.x;
            //Instruction 42930
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 42931
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 42932
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 42933
        //ENDIF
        }
        //Instruction 42934
    //ENDIF
    }
    //Instruction 42935
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 42936
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 42937
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 42938
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 42939
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 42940
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 42941
    //NE
    tb30 = t28!=0.0;
    //Instruction 42942
    //LOG
    t4.x = log2(t28);
    //Instruction 42943
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 42944
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 42945
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 42946
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 42947
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 42948
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 42949
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 42950
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 42951
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 42952
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 42953
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 42954
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 42955
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 42956
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 42957
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 42958
    //MUL
    t28 = t28 * t30;
    //Instruction 42959
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 42960
    //MOV
    t4.y = t3.y;
    //Instruction 42961
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 42962
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 42963
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 42964
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 42965
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 42966
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 42967
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 42968
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 42969
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 42970
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 42971
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 42972
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 42973
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 42974
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 42975
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 42976
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 42977
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 42978
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 42979
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 42980
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 42981
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 42982
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 42983
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 42984
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 42985
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 42986
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 42987
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 42988
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 42989
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 42990
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 42991
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 42992
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 42993
    //MOV
    t0.w = 1.0;
    //Instruction 42994
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 42995
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 42996
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 42997
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 42998
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 42999
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 43000
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 43001
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 43002
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 43003
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 43004
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 43005
    //MOV
    gl_Position = t2;
    //Instruction 43006
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43007
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43008
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43009
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 43010
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43011
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 43012
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 42796
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 42797
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 42798
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 42799
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 42800
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 42801
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 42802
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 42803
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 42804
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 42805
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 42806
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 42807
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 42808
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 42809
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 42810
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 42811
    //ADD
    t0.xyz = (-t16_2.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 42812
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 42813
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 42814
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 42815
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_53;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_12.w;
  light_3.xyz = (tmpvar_12.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 43032
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43033
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 43034
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 43035
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 43036
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 43037
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 43038
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 43039
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 43040
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 43041
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 43042
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 43043
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43044
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 43045
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 43046
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 43047
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43048
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 43049
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 43050
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43051
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 43052
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 43053
    //IF
    if(tb28){
        //Instruction 43054
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 43055
        //IF
        if(tb28){
            //Instruction 43056
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43057
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 43058
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 43059
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 43060
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 43061
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43062
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43063
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43064
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43065
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 43066
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 43067
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 43068
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43069
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 43070
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 43071
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 43072
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43073
            //FRC
            t2 = fract(t2);
            //Instruction 43074
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43075
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 43076
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43077
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43078
            //ADD
            t2 = t2 + t2;
            //Instruction 43079
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 43080
            //LT
            tb30 = t6.w<0.0;
            //Instruction 43081
            //MOV
            t6.y = (-t6.w);
            //Instruction 43082
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 43083
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 43084
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 43085
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 43086
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 43087
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 43088
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 43089
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43090
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43091
            //MUL
            t32 = t2.x * t32;
            //Instruction 43092
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 43093
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43094
            //MUL
            t30 = t30 * t31;
            //Instruction 43095
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 43096
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43097
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43098
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43099
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43100
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 43101
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 43102
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43103
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 43104
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43105
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 43106
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 43107
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 43108
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 43109
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43110
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 43111
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 43112
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 43113
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43114
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43115
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 43116
        //ELSE
        } else {
            //Instruction 43117
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43118
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43119
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43120
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43121
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 43122
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 43123
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43124
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 43125
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 43126
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43127
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43128
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43129
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 43130
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43131
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43132
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 43133
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 43134
            //LT
            tb0 = t2.w<0.0;
            //Instruction 43135
            //MOV
            t2.y = (-t2.w);
            //Instruction 43136
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 43137
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 43138
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 43139
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 43140
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 43141
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 43142
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 43143
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43144
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43145
            //MUL
            t30 = t30 * t5.x;
            //Instruction 43146
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 43147
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 43148
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43149
        //ENDIF
        }
        //Instruction 43150
    //ENDIF
    }
    //Instruction 43151
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 43152
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 43153
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43154
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 43155
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 43156
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 43157
    //NE
    tb30 = t28!=0.0;
    //Instruction 43158
    //LOG
    t4.x = log2(t28);
    //Instruction 43159
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 43160
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 43161
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 43162
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43163
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43164
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 43165
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 43166
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43167
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 43168
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43169
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 43170
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 43171
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 43172
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43173
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 43174
    //MUL
    t28 = t28 * t30;
    //Instruction 43175
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 43176
    //MOV
    t4.y = t3.y;
    //Instruction 43177
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 43178
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43179
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 43180
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 43181
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 43182
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 43183
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 43184
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 43185
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 43186
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 43187
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 43188
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 43189
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 43190
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 43191
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 43192
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 43193
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 43194
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 43195
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 43196
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 43197
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 43198
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 43199
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 43200
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 43201
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 43202
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 43203
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 43204
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 43205
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 43206
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 43207
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 43208
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 43209
    //MOV
    t0.w = 1.0;
    //Instruction 43210
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 43211
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 43212
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 43213
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 43214
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 43215
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 43216
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 43217
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 43218
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 43219
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 43220
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 43221
    //MOV
    gl_Position = t2;
    //Instruction 43222
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43223
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43224
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43225
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 43226
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43227
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 43228
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 43013
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 43014
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 43015
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 43016
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 43017
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 43018
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 43019
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 43020
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 43021
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 43022
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 43023
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43024
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43025
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43026
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43027
    //ADD
    t0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 43028
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 43029
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 43030
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43031
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_53;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 43974
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43975
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 43976
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 43977
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 43978
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 43979
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 43980
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 43981
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 43982
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 43983
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 43984
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 43985
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43986
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 43987
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 43988
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 43989
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43990
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 43991
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 43992
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43993
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 43994
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 43995
    //IF
    if(tb28){
        //Instruction 43996
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 43997
        //IF
        if(tb28){
            //Instruction 43998
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43999
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 44000
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 44001
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 44002
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 44003
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 44004
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44005
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44006
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44007
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 44008
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 44009
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 44010
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44011
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 44012
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 44013
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 44014
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44015
            //FRC
            t2 = fract(t2);
            //Instruction 44016
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44017
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 44018
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44019
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44020
            //ADD
            t2 = t2 + t2;
            //Instruction 44021
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 44022
            //LT
            tb30 = t6.w<0.0;
            //Instruction 44023
            //MOV
            t6.y = (-t6.w);
            //Instruction 44024
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 44025
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 44026
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 44027
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 44028
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 44029
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 44030
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 44031
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44032
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44033
            //MUL
            t32 = t2.x * t32;
            //Instruction 44034
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 44035
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44036
            //MUL
            t30 = t30 * t31;
            //Instruction 44037
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 44038
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44039
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44040
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44041
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44042
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 44043
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 44044
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44045
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 44046
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44047
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 44048
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 44049
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 44050
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 44051
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44052
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 44053
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 44054
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 44055
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44056
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 44057
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 44058
        //ELSE
        } else {
            //Instruction 44059
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44060
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44061
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44062
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 44063
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 44064
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 44065
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44066
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 44067
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 44068
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44069
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44070
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44071
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 44072
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44073
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44074
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 44075
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 44076
            //LT
            tb0 = t2.w<0.0;
            //Instruction 44077
            //MOV
            t2.y = (-t2.w);
            //Instruction 44078
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 44079
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 44080
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 44081
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 44082
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 44083
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 44084
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 44085
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44086
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44087
            //MUL
            t30 = t30 * t5.x;
            //Instruction 44088
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 44089
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 44090
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44091
        //ENDIF
        }
        //Instruction 44092
    //ENDIF
    }
    //Instruction 44093
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 44094
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 44095
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44096
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 44097
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 44098
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 44099
    //NE
    tb30 = t28!=0.0;
    //Instruction 44100
    //LOG
    t4.x = log2(t28);
    //Instruction 44101
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 44102
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 44103
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 44104
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44105
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44106
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 44107
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 44108
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44109
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 44110
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44111
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 44112
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 44113
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 44114
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44115
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 44116
    //MUL
    t28 = t28 * t30;
    //Instruction 44117
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 44118
    //MOV
    t4.y = t3.y;
    //Instruction 44119
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 44120
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 44121
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 44122
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 44123
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 44124
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 44125
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 44126
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 44127
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 44128
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 44129
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 44130
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 44131
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 44132
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 44133
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 44134
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 44135
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 44136
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 44137
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 44138
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 44139
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 44140
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 44141
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 44142
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 44143
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 44144
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 44145
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 44146
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 44147
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 44148
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 44149
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 44150
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 44151
    //MOV
    t0.w = 1.0;
    //Instruction 44152
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 44153
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 44154
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 44155
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 44156
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 44157
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 44158
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 44159
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 44160
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 44161
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 44162
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 44163
    //MOV
    gl_Position = t2;
    //Instruction 44164
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44165
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 44166
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 44167
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 44168
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44169
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 44170
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 43954
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 43955
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 43956
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 43957
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 43958
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 43959
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 43960
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 43961
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 43962
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 43963
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 43964
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43965
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43966
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43967
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43968
    //LOG
    t16_2.xyz = log2(t16_2.xyz);
    //Instruction 43969
    //ADD
    t0.xyz = (-t16_2.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 43970
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 43971
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 43972
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43973
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_12);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = o_53;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_10 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_12.w;
  light_3.xyz = (tmpvar_12.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 43270
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43271
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 43272
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 43273
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 43274
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 43275
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 43276
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 43277
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 43278
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 43279
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 43280
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 43281
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43282
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 43283
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 43284
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 43285
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43286
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 43287
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 43288
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43289
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 43290
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 43291
    //IF
    if(tb28){
        //Instruction 43292
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 43293
        //IF
        if(tb28){
            //Instruction 43294
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43295
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 43296
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 43297
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 43298
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 43299
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43300
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43301
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43302
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43303
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 43304
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 43305
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 43306
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43307
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 43308
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 43309
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 43310
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43311
            //FRC
            t2 = fract(t2);
            //Instruction 43312
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43313
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 43314
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43315
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43316
            //ADD
            t2 = t2 + t2;
            //Instruction 43317
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 43318
            //LT
            tb30 = t6.w<0.0;
            //Instruction 43319
            //MOV
            t6.y = (-t6.w);
            //Instruction 43320
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 43321
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 43322
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 43323
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 43324
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 43325
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 43326
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 43327
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43328
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43329
            //MUL
            t32 = t2.x * t32;
            //Instruction 43330
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 43331
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43332
            //MUL
            t30 = t30 * t31;
            //Instruction 43333
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 43334
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43335
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43336
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43337
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43338
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 43339
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 43340
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43341
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 43342
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43343
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 43344
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 43345
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 43346
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 43347
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43348
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 43349
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 43350
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 43351
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43352
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43353
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 43354
        //ELSE
        } else {
            //Instruction 43355
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43356
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43357
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43358
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43359
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 43360
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 43361
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43362
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 43363
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 43364
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43365
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43366
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43367
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 43368
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43369
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43370
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 43371
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 43372
            //LT
            tb0 = t2.w<0.0;
            //Instruction 43373
            //MOV
            t2.y = (-t2.w);
            //Instruction 43374
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 43375
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 43376
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 43377
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 43378
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 43379
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 43380
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 43381
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43382
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43383
            //MUL
            t30 = t30 * t5.x;
            //Instruction 43384
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 43385
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 43386
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43387
        //ENDIF
        }
        //Instruction 43388
    //ENDIF
    }
    //Instruction 43389
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 43390
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 43391
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43392
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 43393
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 43394
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 43395
    //NE
    tb30 = t28!=0.0;
    //Instruction 43396
    //LOG
    t4.x = log2(t28);
    //Instruction 43397
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 43398
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 43399
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 43400
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43401
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43402
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 43403
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 43404
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43405
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 43406
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43407
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 43408
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 43409
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 43410
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43411
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 43412
    //MUL
    t28 = t28 * t30;
    //Instruction 43413
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 43414
    //MOV
    t4.y = t3.y;
    //Instruction 43415
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 43416
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43417
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 43418
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 43419
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 43420
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 43421
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 43422
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 43423
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 43424
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 43425
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 43426
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 43427
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 43428
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 43429
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 43430
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 43431
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 43432
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 43433
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 43434
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 43435
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 43436
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 43437
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 43438
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 43439
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 43440
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 43441
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 43442
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 43443
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 43444
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 43445
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 43446
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 43447
    //MOV
    t0.w = 1.0;
    //Instruction 43448
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 43449
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 43450
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 43451
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 43452
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 43453
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 43454
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 43455
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 43456
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 43457
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 43458
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 43459
    //MOV
    gl_Position = t2;
    //Instruction 43460
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43461
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43462
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43463
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 43464
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43465
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 43466
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
mediump float t16_10;
void main()
{
    //Instruction 43251
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 43252
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 43253
    //MAD
    t16_1.xyz = vs_TEXCOORD2.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 43254
    //MAX
    t16_10 = max(t16_1.z, t16_1.y);
    //Instruction 43255
    //MAX
    t16_10 = max(t16_10, t16_1.x);
    //Instruction 43256
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 43257
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 43258
    //DIV
    t16_10 = t16_2.x / t16_10;
    //Instruction 43259
    //MAD
    t16_0 = t16_10 * 0.500000 + 0.500000;
    //Instruction 43260
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 43261
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43262
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43263
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43264
    //MAX
    t16_2.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43265
    //ADD
    t0.xyz = t16_2.xyz + vs_TEXCOORD5.xyz;
    //Instruction 43266
    //MUL
    t16_1.xyz = t0.xyz * t16_1.xyz;
    //Instruction 43267
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 43268
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43269
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_53;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_7 = tmpvar_10;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_11;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 43482
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43483
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 43484
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 43485
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43486
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 43487
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 43488
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 43489
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 43490
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 43491
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 43492
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43493
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 43494
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 43495
    //IF
    if(tb25){
        //Instruction 43496
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 43497
        //IF
        if(tb25){
            //Instruction 43498
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43499
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 43500
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 43501
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 43502
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 43503
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43504
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43505
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43506
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43507
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43508
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 43509
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 43510
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 43511
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43512
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 43513
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 43514
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 43515
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43516
            //FRC
            t0 = fract(t0);
            //Instruction 43517
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43518
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 43519
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43520
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43521
            //ADD
            t0 = t0 + t0;
            //Instruction 43522
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 43523
            //LT
            tb26 = t5.w<0.0;
            //Instruction 43524
            //MOV
            t5.y = (-t5.w);
            //Instruction 43525
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 43526
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 43527
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 43528
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 43529
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 43530
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 43531
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 43532
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43533
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43534
            //MUL
            t28 = t0.x * t28;
            //Instruction 43535
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 43536
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43537
            //MUL
            t26 = t26 * t27;
            //Instruction 43538
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 43539
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 43540
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43541
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43542
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43543
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 43544
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 43545
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43546
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 43547
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43548
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 43549
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 43550
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 43551
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 43552
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43553
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 43554
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 43555
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 43556
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43557
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43558
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 43559
        //ELSE
        } else {
            //Instruction 43560
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43561
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 43562
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43563
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 43564
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 43565
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 43566
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 43567
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43568
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 43569
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 43570
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43571
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43572
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43573
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 43574
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43575
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43576
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 43577
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 43578
            //LT
            tb25 = t0.w<0.0;
            //Instruction 43579
            //MOV
            t0.y = (-t0.w);
            //Instruction 43580
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 43581
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 43582
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 43583
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 43584
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 43585
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 43586
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 43587
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43588
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43589
            //MUL
            t27 = t27 * t4.x;
            //Instruction 43590
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 43591
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43592
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 43593
        //ENDIF
        }
        //Instruction 43594
    //ENDIF
    }
    //Instruction 43595
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 43596
    //SQRT
    t25 = sqrt(t25);
    //Instruction 43597
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43598
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 43599
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 43600
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 43601
    //NE
    tb3 = t26!=0.0;
    //Instruction 43602
    //LOG
    t11 = log2(t26);
    //Instruction 43603
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 43604
    //EXP
    t11 = exp2(t11);
    //Instruction 43605
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 43606
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43607
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43608
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 43609
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 43610
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43611
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 43612
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43613
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 43614
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 43615
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 43616
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43617
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 43618
    //MUL
    t26 = t26 * t3.x;
    //Instruction 43619
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 43620
    //MOV
    t3.y = t2.y;
    //Instruction 43621
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 43622
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 43623
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 43624
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 43625
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 43626
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 43627
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 43628
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 43629
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 43630
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 43631
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 43632
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 43633
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 43634
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 43635
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 43636
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 43637
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 43638
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 43639
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 43640
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 43641
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 43642
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 43643
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 43644
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 43645
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 43646
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 43647
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 43648
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 43649
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 43650
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 43651
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 43652
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 43653
    //MOV
    t1.w = 1.0;
    //Instruction 43654
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 43655
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 43656
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 43657
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 43658
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 43659
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 43660
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 43661
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 43662
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 43663
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 43664
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 43665
    //MOV
    gl_Position = t0;
    //Instruction 43666
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43667
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 43668
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 43669
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 43670
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 43671
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 43672
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 43673
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43674
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 43675
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
void main()
{
    //Instruction 43467
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 43468
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 43469
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 43470
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 43471
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 43472
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43473
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 43474
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 43475
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43476
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 43477
    //ADD
    t1.xyz = (-t16_3.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 43478
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 43479
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 43480
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43481
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_11);
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_60;
  mediump vec4 normal_61;
  normal_61 = tmpvar_59;
  mediump vec3 x2_62;
  mediump vec3 x1_63;
  x1_63.x = dot (unity_SHAr, normal_61);
  x1_63.y = dot (unity_SHAg, normal_61);
  x1_63.z = dot (unity_SHAb, normal_61);
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_64);
  x2_62.y = dot (unity_SHBg, tmpvar_64);
  x2_62.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_60 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + x1_63);
  tmpvar_6 = tmpvar_60;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_53;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_7 = tmpvar_10;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_12.w;
  light_3.xyz = (tmpvar_12.xyz + xlv_TEXCOORD6);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 44185
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44186
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 44187
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 44188
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44189
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 44190
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 44191
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 44192
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 44193
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 44194
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 44195
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 44196
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 44197
    //GE
    tb25 = t16_0>=3.000000;
    //Instruction 44198
    //IF
    if(tb25){
        //Instruction 44199
        //EQ
        tb25 = t16_0==5.000000;
        //Instruction 44200
        //IF
        if(tb25){
            //Instruction 44201
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44202
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 44203
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 44204
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 44205
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 44206
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 44207
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44208
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44209
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44210
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 44211
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 44212
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 44213
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 44214
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44215
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 44216
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 44217
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 44218
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44219
            //FRC
            t0 = fract(t0);
            //Instruction 44220
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44221
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 44222
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44223
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44224
            //ADD
            t0 = t0 + t0;
            //Instruction 44225
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 44226
            //LT
            tb26 = t5.w<0.0;
            //Instruction 44227
            //MOV
            t5.y = (-t5.w);
            //Instruction 44228
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 44229
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 44230
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 44231
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 44232
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 44233
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 44234
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 44235
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44236
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44237
            //MUL
            t28 = t0.x * t28;
            //Instruction 44238
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 44239
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44240
            //MUL
            t26 = t26 * t27;
            //Instruction 44241
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 44242
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 44243
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44244
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44245
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44246
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 44247
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 44248
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44249
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 44250
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44251
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 44252
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 44253
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 44254
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 44255
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44256
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 44257
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 44258
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 44259
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44260
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 44261
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 44262
        //ELSE
        } else {
            //Instruction 44263
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44264
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 44265
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44266
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 44267
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 44268
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 44269
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 44270
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44271
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 44272
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 44273
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44274
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44275
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44276
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 44277
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44278
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44279
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 44280
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 44281
            //LT
            tb25 = t0.w<0.0;
            //Instruction 44282
            //MOV
            t0.y = (-t0.w);
            //Instruction 44283
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 44284
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 44285
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 44286
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 44287
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 44288
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 44289
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 44290
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44291
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44292
            //MUL
            t27 = t27 * t4.x;
            //Instruction 44293
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 44294
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 44295
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 44296
        //ENDIF
        }
        //Instruction 44297
    //ENDIF
    }
    //Instruction 44298
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 44299
    //SQRT
    t25 = sqrt(t25);
    //Instruction 44300
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44301
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 44302
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 44303
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 44304
    //NE
    tb3 = t26!=0.0;
    //Instruction 44305
    //LOG
    t11 = log2(t26);
    //Instruction 44306
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 44307
    //EXP
    t11 = exp2(t11);
    //Instruction 44308
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 44309
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44310
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44311
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 44312
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 44313
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44314
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 44315
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44316
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 44317
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 44318
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 44319
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44320
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 44321
    //MUL
    t26 = t26 * t3.x;
    //Instruction 44322
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 44323
    //MOV
    t3.y = t2.y;
    //Instruction 44324
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 44325
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 44326
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 44327
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 44328
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 44329
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 44330
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 44331
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 44332
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 44333
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 44334
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 44335
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 44336
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 44337
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 44338
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 44339
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 44340
    //ADD
    vs_TEXCOORD4.xy = t1.zz + t1.xw;
    //Instruction 44341
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 44342
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 44343
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 44344
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 44345
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 44346
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 44347
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 44348
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 44349
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 44350
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 44351
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 44352
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 44353
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 44354
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 44355
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 44356
    //MOV
    t1.w = 1.0;
    //Instruction 44357
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 44358
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 44359
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 44360
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 44361
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 44362
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 44363
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 44364
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 44365
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 44366
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 44367
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 44368
    //MOV
    gl_Position = t0;
    //Instruction 44369
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44370
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 44371
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 44372
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 44373
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 44374
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 44375
    //MOV
    vs_TEXCOORD4.zw = t0.zw;
    //Instruction 44376
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44377
    //MOV
    vs_TEXCOORD6.xyz = t16_6.xyz;
    //Instruction 44378
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
void main()
{
    //Instruction 44171
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 44172
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 44173
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 44174
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 44175
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 44176
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44177
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 44178
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 44179
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44180
    //ADD
    t1.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 44181
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 44182
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 44183
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44184
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_62;
  mediump vec4 normal_63;
  normal_63 = tmpvar_61;
  mediump vec3 x2_64;
  mediump vec3 x1_65;
  x1_65.x = dot (unity_SHAr, normal_63);
  x1_65.y = dot (unity_SHAg, normal_63);
  x1_65.z = dot (unity_SHAb, normal_63);
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_66);
  x2_64.y = dot (unity_SHBg, tmpvar_66);
  x2_64.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_62 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + x1_65);
  tmpvar_6 = tmpvar_62;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_55;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_10;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_11;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_12 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 43253
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43254
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 43255
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 43256
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 43257
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 43258
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 43259
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 43260
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 43261
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 43262
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 43263
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 43264
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43265
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 43266
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 43267
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 43268
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43269
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 43270
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 43271
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43272
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 43273
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 43274
    //IF
    if(tb28){
        //Instruction 43275
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 43276
        //IF
        if(tb28){
            //Instruction 43277
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43278
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 43279
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 43280
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 43281
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 43282
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43283
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43284
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43285
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43286
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 43287
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 43288
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 43289
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43290
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 43291
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 43292
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 43293
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43294
            //FRC
            t2 = fract(t2);
            //Instruction 43295
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43296
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 43297
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43298
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43299
            //ADD
            t2 = t2 + t2;
            //Instruction 43300
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 43301
            //LT
            tb30 = t6.w<0.0;
            //Instruction 43302
            //MOV
            t6.y = (-t6.w);
            //Instruction 43303
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 43304
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 43305
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 43306
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 43307
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 43308
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 43309
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 43310
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43311
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43312
            //MUL
            t32 = t2.x * t32;
            //Instruction 43313
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 43314
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43315
            //MUL
            t30 = t30 * t31;
            //Instruction 43316
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 43317
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43318
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43319
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43320
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43321
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 43322
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 43323
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43324
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 43325
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43326
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 43327
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 43328
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 43329
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 43330
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43331
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 43332
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 43333
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 43334
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43335
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43336
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 43337
        //ELSE
        } else {
            //Instruction 43338
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43339
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43340
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43341
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43342
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 43343
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 43344
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43345
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 43346
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 43347
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43348
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43349
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43350
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 43351
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43352
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43353
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 43354
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 43355
            //LT
            tb0 = t2.w<0.0;
            //Instruction 43356
            //MOV
            t2.y = (-t2.w);
            //Instruction 43357
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 43358
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 43359
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 43360
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 43361
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 43362
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 43363
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 43364
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43365
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43366
            //MUL
            t30 = t30 * t5.x;
            //Instruction 43367
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 43368
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 43369
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43370
        //ENDIF
        }
        //Instruction 43371
    //ENDIF
    }
    //Instruction 43372
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 43373
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 43374
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43375
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 43376
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 43377
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 43378
    //NE
    tb30 = t28!=0.0;
    //Instruction 43379
    //LOG
    t4.x = log2(t28);
    //Instruction 43380
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 43381
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 43382
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 43383
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43384
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43385
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 43386
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 43387
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43388
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 43389
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43390
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 43391
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 43392
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 43393
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43394
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 43395
    //MUL
    t28 = t28 * t30;
    //Instruction 43396
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 43397
    //MOV
    t4.y = t3.y;
    //Instruction 43398
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 43399
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43400
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 43401
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 43402
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 43403
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 43404
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 43405
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 43406
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 43407
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 43408
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 43409
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 43410
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 43411
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 43412
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 43413
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 43414
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 43415
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 43416
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 43417
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 43418
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 43419
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 43420
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 43421
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 43422
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 43423
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 43424
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 43425
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 43426
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 43427
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 43428
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 43429
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 43430
    //MOV
    t0.w = 1.0;
    //Instruction 43431
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 43432
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 43433
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 43434
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 43435
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 43436
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 43437
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 43438
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 43439
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 43440
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 43441
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 43442
    //MOV
    gl_Position = t2;
    //Instruction 43443
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43444
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43445
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43446
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 43447
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 43448
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 43449
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 43450
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43451
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 43452
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 43229
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 43230
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 43231
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 43232
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 43233
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 43234
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 43235
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 43236
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 43237
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 43238
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 43239
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 43240
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 43241
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 43242
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 43243
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43244
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 43245
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 43246
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43247
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 43248
    //ADD
    t1.xyz = (-t16_3.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 43249
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 43250
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 43251
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43252
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_62;
  mediump vec4 normal_63;
  normal_63 = tmpvar_61;
  mediump vec3 x2_64;
  mediump vec3 x1_65;
  x1_65.x = dot (unity_SHAr, normal_63);
  x1_65.y = dot (unity_SHAg, normal_63);
  x1_65.z = dot (unity_SHAb, normal_63);
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_66);
  x2_64.y = dot (unity_SHBg, tmpvar_66);
  x2_64.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_62 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + x1_65);
  tmpvar_6 = tmpvar_62;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_55;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_10;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_11;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_12 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 43699
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43700
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 43701
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 43702
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 43703
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 43704
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 43705
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 43706
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 43707
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 43708
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 43709
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 43710
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43711
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 43712
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 43713
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 43714
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43715
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 43716
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 43717
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43718
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 43719
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 43720
    //IF
    if(tb28){
        //Instruction 43721
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 43722
        //IF
        if(tb28){
            //Instruction 43723
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43724
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 43725
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 43726
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 43727
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 43728
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43729
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43730
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43731
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43732
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 43733
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 43734
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 43735
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43736
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 43737
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 43738
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 43739
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43740
            //FRC
            t2 = fract(t2);
            //Instruction 43741
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43742
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 43743
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43744
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43745
            //ADD
            t2 = t2 + t2;
            //Instruction 43746
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 43747
            //LT
            tb30 = t6.w<0.0;
            //Instruction 43748
            //MOV
            t6.y = (-t6.w);
            //Instruction 43749
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 43750
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 43751
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 43752
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 43753
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 43754
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 43755
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 43756
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43757
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43758
            //MUL
            t32 = t2.x * t32;
            //Instruction 43759
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 43760
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43761
            //MUL
            t30 = t30 * t31;
            //Instruction 43762
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 43763
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43764
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43765
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43766
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43767
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 43768
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 43769
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43770
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 43771
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43772
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 43773
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 43774
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 43775
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 43776
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43777
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 43778
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 43779
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 43780
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43781
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43782
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 43783
        //ELSE
        } else {
            //Instruction 43784
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43785
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43786
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43787
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43788
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 43789
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 43790
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43791
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 43792
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 43793
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43794
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43795
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43796
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 43797
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43798
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43799
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 43800
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 43801
            //LT
            tb0 = t2.w<0.0;
            //Instruction 43802
            //MOV
            t2.y = (-t2.w);
            //Instruction 43803
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 43804
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 43805
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 43806
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 43807
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 43808
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 43809
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 43810
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43811
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43812
            //MUL
            t30 = t30 * t5.x;
            //Instruction 43813
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 43814
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 43815
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43816
        //ENDIF
        }
        //Instruction 43817
    //ENDIF
    }
    //Instruction 43818
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 43819
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 43820
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43821
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 43822
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 43823
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 43824
    //NE
    tb30 = t28!=0.0;
    //Instruction 43825
    //LOG
    t4.x = log2(t28);
    //Instruction 43826
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 43827
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 43828
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 43829
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43830
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43831
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 43832
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 43833
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43834
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 43835
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43836
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 43837
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 43838
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 43839
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43840
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 43841
    //MUL
    t28 = t28 * t30;
    //Instruction 43842
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 43843
    //MOV
    t4.y = t3.y;
    //Instruction 43844
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 43845
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43846
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 43847
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 43848
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 43849
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 43850
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 43851
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 43852
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 43853
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 43854
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 43855
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 43856
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 43857
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 43858
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 43859
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 43860
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 43861
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 43862
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 43863
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 43864
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 43865
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 43866
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 43867
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 43868
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 43869
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 43870
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 43871
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 43872
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 43873
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 43874
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 43875
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 43876
    //MOV
    t0.w = 1.0;
    //Instruction 43877
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 43878
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 43879
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 43880
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 43881
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 43882
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 43883
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 43884
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 43885
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 43886
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 43887
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 43888
    //MOV
    gl_Position = t2;
    //Instruction 43889
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43890
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43891
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43892
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 43893
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 43894
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 43895
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 43896
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43897
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 43898
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 43676
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 43677
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 43678
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 43679
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 43680
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 43681
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 43682
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 43683
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 43684
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 43685
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 43686
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 43687
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 43688
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 43689
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 43690
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43691
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 43692
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 43693
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43694
    //ADD
    t1.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 43695
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 43696
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 43697
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43698
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_62;
  mediump vec4 normal_63;
  normal_63 = tmpvar_61;
  mediump vec3 x2_64;
  mediump vec3 x1_65;
  x1_65.x = dot (unity_SHAr, normal_63);
  x1_65.y = dot (unity_SHAg, normal_63);
  x1_65.z = dot (unity_SHAb, normal_63);
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_66);
  x2_64.y = dot (unity_SHBg, tmpvar_66);
  x2_64.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_62 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + x1_65);
  tmpvar_6 = tmpvar_62;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_55;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_10;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_11;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_12 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD6);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 44403
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44404
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 44405
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 44406
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 44407
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 44408
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 44409
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 44410
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 44411
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 44412
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 44413
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 44414
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44415
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 44416
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 44417
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 44418
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 44419
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 44420
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 44421
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 44422
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 44423
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 44424
    //IF
    if(tb28){
        //Instruction 44425
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 44426
        //IF
        if(tb28){
            //Instruction 44427
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44428
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 44429
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 44430
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 44431
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 44432
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 44433
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44434
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44435
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44436
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 44437
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 44438
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 44439
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44440
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 44441
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 44442
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 44443
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44444
            //FRC
            t2 = fract(t2);
            //Instruction 44445
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44446
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 44447
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44448
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44449
            //ADD
            t2 = t2 + t2;
            //Instruction 44450
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 44451
            //LT
            tb30 = t6.w<0.0;
            //Instruction 44452
            //MOV
            t6.y = (-t6.w);
            //Instruction 44453
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 44454
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 44455
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 44456
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 44457
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 44458
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 44459
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 44460
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44461
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44462
            //MUL
            t32 = t2.x * t32;
            //Instruction 44463
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 44464
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44465
            //MUL
            t30 = t30 * t31;
            //Instruction 44466
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 44467
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44468
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44469
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44470
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44471
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 44472
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 44473
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44474
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 44475
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44476
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 44477
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 44478
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 44479
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 44480
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44481
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 44482
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 44483
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 44484
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44485
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 44486
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 44487
        //ELSE
        } else {
            //Instruction 44488
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44489
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44490
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44491
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 44492
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 44493
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 44494
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44495
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 44496
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 44497
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44498
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44499
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44500
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 44501
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44502
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44503
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 44504
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 44505
            //LT
            tb0 = t2.w<0.0;
            //Instruction 44506
            //MOV
            t2.y = (-t2.w);
            //Instruction 44507
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 44508
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 44509
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 44510
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 44511
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 44512
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 44513
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 44514
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44515
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44516
            //MUL
            t30 = t30 * t5.x;
            //Instruction 44517
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 44518
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 44519
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44520
        //ENDIF
        }
        //Instruction 44521
    //ENDIF
    }
    //Instruction 44522
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 44523
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 44524
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44525
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 44526
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 44527
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 44528
    //NE
    tb30 = t28!=0.0;
    //Instruction 44529
    //LOG
    t4.x = log2(t28);
    //Instruction 44530
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 44531
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 44532
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 44533
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44534
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44535
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 44536
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 44537
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44538
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 44539
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44540
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 44541
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 44542
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 44543
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44544
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 44545
    //MUL
    t28 = t28 * t30;
    //Instruction 44546
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 44547
    //MOV
    t4.y = t3.y;
    //Instruction 44548
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 44549
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 44550
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 44551
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 44552
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 44553
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 44554
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 44555
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 44556
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 44557
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 44558
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 44559
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 44560
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 44561
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 44562
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 44563
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 44564
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 44565
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 44566
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 44567
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 44568
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 44569
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 44570
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 44571
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 44572
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 44573
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 44574
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 44575
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 44576
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 44577
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 44578
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 44579
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 44580
    //MOV
    t0.w = 1.0;
    //Instruction 44581
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 44582
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 44583
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 44584
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 44585
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 44586
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 44587
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 44588
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 44589
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 44590
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 44591
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 44592
    //MOV
    gl_Position = t2;
    //Instruction 44593
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44594
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 44595
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 44596
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 44597
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 44598
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 44599
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 44600
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44601
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 44602
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 44379
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 44380
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 44381
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 44382
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 44383
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 44384
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 44385
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 44386
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 44387
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 44388
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 44389
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 44390
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 44391
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 44392
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 44393
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44394
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 44395
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 44396
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44397
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 44398
    //ADD
    t1.xyz = (-t16_3.xyz) + vs_TEXCOORD6.xyz;
    //Instruction 44399
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 44400
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 44401
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44402
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_4 = tmpvar_7;
  tmpvar_3 = (glstate_matrix_mvp * tmpvar_14);
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = tmpvar_3.zw;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  mediump vec3 tmpvar_62;
  mediump vec4 normal_63;
  normal_63 = tmpvar_61;
  mediump vec3 x2_64;
  mediump vec3 x1_65;
  x1_65.x = dot (unity_SHAr, normal_63);
  x1_65.y = dot (unity_SHAg, normal_63);
  x1_65.z = dot (unity_SHAb, normal_63);
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_66);
  x2_64.y = dot (unity_SHBg, tmpvar_66);
  x2_64.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_62 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + x1_65);
  tmpvar_6 = tmpvar_62;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = o_55;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 blendColor_8;
  mediump vec4 diffuseColor_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_9 = tmpvar_10;
  tmpvar_6 = (diffuseColor_9.w * _Color.w);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  blendColor_8 = tmpvar_11;
  diffuseColor_9.xyz = mix (blendColor_8.xyz, diffuseColor_9.xyz, vec3(clamp (xlv_TEXCOORD3.z, 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_9.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_9.x, max (diffuseColor_9.y, diffuseColor_9.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_9.xyz = clamp ((tmpvar_12 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_9.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DProj (_LightBuffer, xlv_TEXCOORD4);
  light_3 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_14.w;
  light_3.xyz = (tmpvar_14.xyz + xlv_TEXCOORD6);
  lowp vec4 c_15;
  c_15.xyz = (tmpvar_5 * light_3.xyz);
  c_15.w = tmpvar_6;
  c_2.xyz = c_15.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 43476
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43477
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 43478
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 43479
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 43480
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 43481
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 43482
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 43483
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 43484
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 43485
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 43486
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 43487
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43488
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 43489
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 43490
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 43491
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43492
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 43493
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 43494
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43495
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 43496
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 43497
    //IF
    if(tb28){
        //Instruction 43498
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 43499
        //IF
        if(tb28){
            //Instruction 43500
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43501
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 43502
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 43503
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 43504
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 43505
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43506
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43507
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43508
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43509
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 43510
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 43511
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 43512
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43513
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 43514
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 43515
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 43516
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43517
            //FRC
            t2 = fract(t2);
            //Instruction 43518
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43519
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 43520
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43521
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43522
            //ADD
            t2 = t2 + t2;
            //Instruction 43523
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 43524
            //LT
            tb30 = t6.w<0.0;
            //Instruction 43525
            //MOV
            t6.y = (-t6.w);
            //Instruction 43526
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 43527
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 43528
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 43529
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 43530
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 43531
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 43532
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 43533
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43534
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43535
            //MUL
            t32 = t2.x * t32;
            //Instruction 43536
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 43537
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43538
            //MUL
            t30 = t30 * t31;
            //Instruction 43539
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 43540
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43541
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43542
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43543
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43544
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 43545
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 43546
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43547
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 43548
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43549
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 43550
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 43551
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 43552
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 43553
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43554
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 43555
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 43556
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 43557
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43558
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43559
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 43560
        //ELSE
        } else {
            //Instruction 43561
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43562
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43563
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43564
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43565
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 43566
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 43567
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43568
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 43569
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 43570
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43571
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43572
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43573
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 43574
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43575
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43576
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 43577
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 43578
            //LT
            tb0 = t2.w<0.0;
            //Instruction 43579
            //MOV
            t2.y = (-t2.w);
            //Instruction 43580
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 43581
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 43582
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 43583
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 43584
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 43585
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 43586
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 43587
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43588
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43589
            //MUL
            t30 = t30 * t5.x;
            //Instruction 43590
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 43591
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 43592
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43593
        //ENDIF
        }
        //Instruction 43594
    //ENDIF
    }
    //Instruction 43595
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 43596
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 43597
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43598
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 43599
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 43600
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 43601
    //NE
    tb30 = t28!=0.0;
    //Instruction 43602
    //LOG
    t4.x = log2(t28);
    //Instruction 43603
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 43604
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 43605
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 43606
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43607
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43608
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 43609
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 43610
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43611
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 43612
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43613
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 43614
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 43615
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 43616
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43617
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 43618
    //MUL
    t28 = t28 * t30;
    //Instruction 43619
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 43620
    //MOV
    t4.y = t3.y;
    //Instruction 43621
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 43622
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43623
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 43624
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 43625
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 43626
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 43627
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 43628
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 43629
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 43630
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 43631
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 43632
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 43633
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 43634
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 43635
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 43636
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 43637
    //ADD
    vs_TEXCOORD4.xy = t0.zz + t0.xw;
    //Instruction 43638
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 43639
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 43640
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 43641
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 43642
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 43643
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 43644
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 43645
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 43646
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 43647
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 43648
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 43649
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 43650
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 43651
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 43652
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 43653
    //MOV
    t0.w = 1.0;
    //Instruction 43654
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 43655
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 43656
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 43657
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 43658
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 43659
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 43660
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 43661
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 43662
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 43663
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 43664
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 43665
    //MOV
    gl_Position = t2;
    //Instruction 43666
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43667
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43668
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43669
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 43670
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 43671
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 43672
    //MOV
    vs_TEXCOORD4.zw = t2.zw;
    //Instruction 43673
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43674
    //MOV
    vs_TEXCOORD6.xyz = t16_7.xyz;
    //Instruction 43675
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 43453
    //MOV
    t16_0.x = vs_TEXCOORD3.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 43454
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;
    //Instruction 43455
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 43456
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 43457
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 43458
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 43459
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 43460
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 43461
    //MAD
    t16_0.xyz = vs_TEXCOORD2.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 43462
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 43463
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 43464
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 43465
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 43466
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 43467
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43468
    //DIV
    t1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    //Instruction 43469
    //SAMPLE
    t10_1.xyz = texture(_LightBuffer, t1.xy).xyz;
    //Instruction 43470
    //MAX
    t16_3.xyz = max(t10_1.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43471
    //ADD
    t1.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 43472
    //MUL
    t16_0.xyz = t16_0.xyz * t1.xyz;
    //Instruction 43473
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 43474
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43475
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * tmpvar_11.x)
   + 
    (v_61.xyz * tmpvar_11.y)
  ) + (v_62.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_7 = tmpvar_64;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_57;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_11;
  c_11.xyz = (tmpvar_5 * light_3.xyz);
  c_11.w = tmpvar_6;
  c_2.xyz = c_11.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 43913
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43914
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 43915
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 43916
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43917
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 43918
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 43919
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 43920
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 43921
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 43922
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 43923
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43924
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 43925
    //EQ
    tb25 = t16_0==5.000000;
    //Instruction 43926
    //LT
    tb26 = in_TEXCOORD0.x<0.500000;
    //Instruction 43927
    //AND
    t26 = tb26 ? 0.750000 : float(0.0);
    //Instruction 43928
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 43929
    //MAD
    t26 = t3.x * _ST_WindFrondRipple.z + t26;
    //Instruction 43930
    //ADD
    t26 = t26 + 0.500000;
    //Instruction 43931
    //FRC
    t26 = fract(t26);
    //Instruction 43932
    //MAD
    t26 = t26 * 2.000000 + -1.0;
    //Instruction 43933
    //MUL
    t3.x = abs(t26) * abs(t26);
    //Instruction 43934
    //MAD
    t26 = -abs(t26) * 2.000000 + 3.000000;
    //Instruction 43935
    //MAD
    t26 = t3.x * t26 + -0.500000;
    //Instruction 43936
    //MUL
    t26 = t26 * in_TEXCOORD2.y;
    //Instruction 43937
    //DP2
    t26 = dot(_ST_WindFrondRipple.yy, vec2(t26));
    //Instruction 43938
    //MAD
    t3.xyz = vec3(t26) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 43939
    //MOVC
    t2.xyz = (bool(tb25)) ? t3.xyz : t2.xyz;
    //Instruction 43940
    //GE
    tb26 = t16_0>=3.000000;
    //Instruction 43941
    //IF
    if(tb26){
        //Instruction 43942
        //IF
        if(tb25){
            //Instruction 43943
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43944
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 43945
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 43946
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 43947
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 43948
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 43949
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43950
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43951
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43952
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43953
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 43954
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 43955
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 43956
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43957
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 43958
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 43959
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 43960
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43961
            //FRC
            t0 = fract(t0);
            //Instruction 43962
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43963
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 43964
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43965
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43966
            //ADD
            t0 = t0 + t0;
            //Instruction 43967
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 43968
            //LT
            tb26 = t5.w<0.0;
            //Instruction 43969
            //MOV
            t5.y = (-t5.w);
            //Instruction 43970
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 43971
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 43972
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 43973
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 43974
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 43975
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 43976
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 43977
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43978
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43979
            //MUL
            t28 = t0.x * t28;
            //Instruction 43980
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 43981
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43982
            //MUL
            t26 = t26 * t27;
            //Instruction 43983
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 43984
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 43985
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43986
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43987
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43988
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 43989
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 43990
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43991
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 43992
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43993
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 43994
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 43995
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 43996
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 43997
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43998
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 43999
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 44000
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 44001
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44002
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 44003
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 44004
        //ELSE
        } else {
            //Instruction 44005
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44006
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 44007
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44008
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 44009
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 44010
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 44011
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 44012
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44013
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 44014
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 44015
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44016
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44017
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44018
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 44019
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44020
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44021
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 44022
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 44023
            //LT
            tb25 = t0.w<0.0;
            //Instruction 44024
            //MOV
            t0.y = (-t0.w);
            //Instruction 44025
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 44026
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 44027
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 44028
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 44029
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 44030
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 44031
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 44032
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44033
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44034
            //MUL
            t27 = t27 * t4.x;
            //Instruction 44035
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 44036
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 44037
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 44038
        //ENDIF
        }
        //Instruction 44039
    //ENDIF
    }
    //Instruction 44040
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 44041
    //SQRT
    t25 = sqrt(t25);
    //Instruction 44042
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44043
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 44044
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 44045
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 44046
    //NE
    tb3 = t26!=0.0;
    //Instruction 44047
    //LOG
    t11 = log2(t26);
    //Instruction 44048
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 44049
    //EXP
    t11 = exp2(t11);
    //Instruction 44050
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 44051
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44052
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44053
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 44054
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 44055
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44056
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 44057
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44058
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 44059
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 44060
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 44061
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44062
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 44063
    //MUL
    t26 = t26 * t3.x;
    //Instruction 44064
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 44065
    //MOV
    t3.y = t2.y;
    //Instruction 44066
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 44067
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 44068
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 44069
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 44070
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 44071
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 44072
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 44073
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 44074
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 44075
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 44076
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 44077
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 44078
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 44079
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 44080
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 44081
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 44082
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 44083
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 44084
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 44085
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 44086
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 44087
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 44088
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 44089
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 44090
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 44091
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 44092
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 44093
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 44094
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 44095
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 44096
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 44097
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 44098
    //MOV
    t1.w = 1.0;
    //Instruction 44099
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 44100
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 44101
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 44102
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 44103
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 44104
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 44105
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 44106
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 44107
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 44108
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 44109
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 44110
    //MOV
    gl_Position = t0;
    //Instruction 44111
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44112
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 44113
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 44114
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 44115
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44116
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 44117
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 43899
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 43900
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 43901
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43902
    //LT
    tb0 = t10_1<0.0;
    //Instruction 43903
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 43904
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43905
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43906
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43907
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 43908
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 43909
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 43910
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 43911
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43912
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_10);
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = normalize(((
    (v_60.xyz * tmpvar_11.x)
   + 
    (v_61.xyz * tmpvar_11.y)
  ) + (v_62.xyz * tmpvar_11.z)));
  mediump vec3 tmpvar_64;
  mediump vec4 normal_65;
  normal_65 = tmpvar_63;
  mediump vec3 x2_66;
  mediump vec3 x1_67;
  x1_67.x = dot (unity_SHAr, normal_65);
  x1_67.y = dot (unity_SHAg, normal_65);
  x1_67.z = dot (unity_SHAb, normal_65);
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_68);
  x2_66.y = dot (unity_SHBg, tmpvar_68);
  x2_66.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_64 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + x1_67);
  tmpvar_7 = tmpvar_64;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_57;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_11.w;
  light_3.xyz = (tmpvar_11.xyz + xlv_TEXCOORD5);
  lowp vec4 c_12;
  c_12.xyz = (tmpvar_5 * light_3.xyz);
  c_12.w = tmpvar_6;
  c_2.xyz = c_12.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 44616
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44617
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 44618
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 44619
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44620
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 44621
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 44622
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 44623
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 44624
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 44625
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 44626
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 44627
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 44628
    //EQ
    tb25 = t16_0==5.000000;
    //Instruction 44629
    //LT
    tb26 = in_TEXCOORD0.x<0.500000;
    //Instruction 44630
    //AND
    t26 = tb26 ? 0.750000 : float(0.0);
    //Instruction 44631
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 44632
    //MAD
    t26 = t3.x * _ST_WindFrondRipple.z + t26;
    //Instruction 44633
    //ADD
    t26 = t26 + 0.500000;
    //Instruction 44634
    //FRC
    t26 = fract(t26);
    //Instruction 44635
    //MAD
    t26 = t26 * 2.000000 + -1.0;
    //Instruction 44636
    //MUL
    t3.x = abs(t26) * abs(t26);
    //Instruction 44637
    //MAD
    t26 = -abs(t26) * 2.000000 + 3.000000;
    //Instruction 44638
    //MAD
    t26 = t3.x * t26 + -0.500000;
    //Instruction 44639
    //MUL
    t26 = t26 * in_TEXCOORD2.y;
    //Instruction 44640
    //DP2
    t26 = dot(_ST_WindFrondRipple.yy, vec2(t26));
    //Instruction 44641
    //MAD
    t3.xyz = vec3(t26) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 44642
    //MOVC
    t2.xyz = (bool(tb25)) ? t3.xyz : t2.xyz;
    //Instruction 44643
    //GE
    tb26 = t16_0>=3.000000;
    //Instruction 44644
    //IF
    if(tb26){
        //Instruction 44645
        //IF
        if(tb25){
            //Instruction 44646
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44647
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 44648
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 44649
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 44650
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 44651
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 44652
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44653
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44654
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44655
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 44656
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 44657
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 44658
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 44659
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44660
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 44661
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 44662
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 44663
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44664
            //FRC
            t0 = fract(t0);
            //Instruction 44665
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44666
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 44667
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44668
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44669
            //ADD
            t0 = t0 + t0;
            //Instruction 44670
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 44671
            //LT
            tb26 = t5.w<0.0;
            //Instruction 44672
            //MOV
            t5.y = (-t5.w);
            //Instruction 44673
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 44674
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 44675
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 44676
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 44677
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 44678
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 44679
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 44680
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44681
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44682
            //MUL
            t28 = t0.x * t28;
            //Instruction 44683
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 44684
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44685
            //MUL
            t26 = t26 * t27;
            //Instruction 44686
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 44687
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 44688
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44689
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44690
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44691
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 44692
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 44693
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44694
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 44695
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44696
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 44697
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 44698
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 44699
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 44700
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44701
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 44702
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 44703
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 44704
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44705
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 44706
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 44707
        //ELSE
        } else {
            //Instruction 44708
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44709
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 44710
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44711
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 44712
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 44713
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 44714
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 44715
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44716
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 44717
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 44718
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44719
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44720
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44721
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 44722
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44723
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44724
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 44725
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 44726
            //LT
            tb25 = t0.w<0.0;
            //Instruction 44727
            //MOV
            t0.y = (-t0.w);
            //Instruction 44728
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 44729
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 44730
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 44731
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 44732
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 44733
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 44734
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 44735
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44736
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44737
            //MUL
            t27 = t27 * t4.x;
            //Instruction 44738
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 44739
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 44740
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 44741
        //ENDIF
        }
        //Instruction 44742
    //ENDIF
    }
    //Instruction 44743
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 44744
    //SQRT
    t25 = sqrt(t25);
    //Instruction 44745
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44746
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 44747
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 44748
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 44749
    //NE
    tb3 = t26!=0.0;
    //Instruction 44750
    //LOG
    t11 = log2(t26);
    //Instruction 44751
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 44752
    //EXP
    t11 = exp2(t11);
    //Instruction 44753
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 44754
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44755
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44756
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 44757
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 44758
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44759
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 44760
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44761
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 44762
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 44763
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 44764
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44765
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 44766
    //MUL
    t26 = t26 * t3.x;
    //Instruction 44767
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 44768
    //MOV
    t3.y = t2.y;
    //Instruction 44769
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 44770
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 44771
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 44772
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 44773
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 44774
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 44775
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 44776
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 44777
    //MAD
    t0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 44778
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 44779
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 44780
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 44781
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 44782
    //MUL
    t1.xz = t0.xw * vec2(0.500000, 0.500000);
    //Instruction 44783
    //MUL
    t9.x = t0.y * _ProjectionParams.x;
    //Instruction 44784
    //MUL
    t1.w = t9.x * 0.500000;
    //Instruction 44785
    //ADD
    vs_TEXCOORD3.xy = t1.zz + t1.xw;
    //Instruction 44786
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 44787
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 44788
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 44789
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 44790
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 44791
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 44792
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 44793
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 44794
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 44795
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 44796
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 44797
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 44798
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 44799
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 44800
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 44801
    //MOV
    t1.w = 1.0;
    //Instruction 44802
    //DP4
    t16_6.x = dot(unity_SHAr, t1);
    //Instruction 44803
    //DP4
    t16_6.y = dot(unity_SHAg, t1);
    //Instruction 44804
    //DP4
    t16_6.z = dot(unity_SHAb, t1);
    //Instruction 44805
    //MUL
    t16_2 = t1.yzzx * t1.xyzz;
    //Instruction 44806
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 44807
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 44808
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 44809
    //MUL
    t16_30 = t1.y * t1.y;
    //Instruction 44810
    //MAD
    t16_30 = t1.x * t1.x + (-t16_30);
    //Instruction 44811
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_30) + t16_7.xyz;
    //Instruction 44812
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 44813
    //MOV
    gl_Position = t0;
    //Instruction 44814
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44815
    //MOV
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy;
    //Instruction 44816
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 44817
    //MOV
    vs_TEXCOORD3.zw = t0.zw;
    //Instruction 44818
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44819
    //MOV
    vs_TEXCOORD5.xyz = t16_6.xyz;
    //Instruction 44820
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 44603
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 44604
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 44605
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44606
    //LT
    tb0 = t10_1<0.0;
    //Instruction 44607
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 44608
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 44609
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 44610
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44611
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 44612
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 44613
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 44614
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44615
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * tmpvar_14.x)
   + 
    (v_63.xyz * tmpvar_14.y)
  ) + (v_64.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_7 = tmpvar_66;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_59;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  light_3 = -(log2(max (light_3, vec4(0.001, 0.001, 0.001, 0.001))));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD5);
  lowp vec4 c_13;
  c_13.xyz = (tmpvar_5 * light_3.xyz);
  c_13.w = tmpvar_6;
  c_2.xyz = c_13.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 43699
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 43700
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 43701
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 43702
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 43703
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 43704
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 43705
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 43706
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 43707
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 43708
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 43709
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 43710
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 43711
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 43712
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 43713
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 43714
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43715
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 43716
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 43717
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 43718
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 43719
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 43720
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 43721
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 43722
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 43723
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 43724
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 43725
    //FRC
    t30 = fract(t30);
    //Instruction 43726
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 43727
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 43728
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 43729
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 43730
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 43731
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 43732
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 43733
    //MOVC
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    //Instruction 43734
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 43735
    //IF
    if(tb30){
        //Instruction 43736
        //IF
        if(tb28){
            //Instruction 43737
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 43738
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 43739
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 43740
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 43741
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 43742
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43743
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43744
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43745
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43746
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 43747
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 43748
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 43749
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43750
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 43751
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 43752
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 43753
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 43754
            //FRC
            t2 = fract(t2);
            //Instruction 43755
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 43756
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 43757
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 43758
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 43759
            //ADD
            t2 = t2 + t2;
            //Instruction 43760
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 43761
            //LT
            tb30 = t6.w<0.0;
            //Instruction 43762
            //MOV
            t6.y = (-t6.w);
            //Instruction 43763
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 43764
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 43765
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 43766
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 43767
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 43768
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 43769
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 43770
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43771
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43772
            //MUL
            t32 = t2.x * t32;
            //Instruction 43773
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 43774
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 43775
            //MUL
            t30 = t30 * t31;
            //Instruction 43776
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 43777
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43778
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43779
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 43780
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 43781
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 43782
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 43783
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 43784
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 43785
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 43786
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 43787
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 43788
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 43789
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 43790
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 43791
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 43792
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 43793
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 43794
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 43795
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 43796
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 43797
        //ELSE
        } else {
            //Instruction 43798
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 43799
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 43800
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43801
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 43802
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 43803
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 43804
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 43805
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 43806
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 43807
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 43808
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 43809
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 43810
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 43811
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 43812
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 43813
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 43814
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 43815
            //LT
            tb0 = t2.w<0.0;
            //Instruction 43816
            //MOV
            t2.y = (-t2.w);
            //Instruction 43817
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 43818
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 43819
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 43820
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 43821
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 43822
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 43823
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 43824
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 43825
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 43826
            //MUL
            t30 = t30 * t5.x;
            //Instruction 43827
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 43828
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 43829
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 43830
        //ENDIF
        }
        //Instruction 43831
    //ENDIF
    }
    //Instruction 43832
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 43833
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 43834
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 43835
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 43836
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 43837
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 43838
    //NE
    tb30 = t28!=0.0;
    //Instruction 43839
    //LOG
    t4.x = log2(t28);
    //Instruction 43840
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 43841
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 43842
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 43843
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 43844
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 43845
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 43846
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 43847
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 43848
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 43849
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 43850
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 43851
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 43852
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 43853
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 43854
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 43855
    //MUL
    t28 = t28 * t30;
    //Instruction 43856
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 43857
    //MOV
    t4.y = t3.y;
    //Instruction 43858
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 43859
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 43860
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 43861
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 43862
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 43863
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 43864
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 43865
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 43866
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 43867
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 43868
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 43869
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 43870
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 43871
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 43872
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 43873
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 43874
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 43875
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 43876
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 43877
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 43878
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 43879
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 43880
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 43881
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 43882
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 43883
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 43884
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 43885
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 43886
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 43887
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 43888
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 43889
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 43890
    //MOV
    t0.w = 1.0;
    //Instruction 43891
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 43892
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 43893
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 43894
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 43895
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 43896
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 43897
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 43898
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 43899
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 43900
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 43901
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 43902
    //MOV
    gl_Position = t2;
    //Instruction 43903
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 43904
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 43905
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 43906
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 43907
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 43908
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 43909
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 43676
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 43677
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 43678
    //LT
    tb12 = t10_1<0.0;
    //Instruction 43679
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 43680
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 43681
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 43682
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 43683
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 43684
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 43685
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 43686
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 43687
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 43688
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 43689
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 43690
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 43691
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 43692
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 43693
    //LOG
    t16_3.xyz = log2(t16_3.xyz);
    //Instruction 43694
    //ADD
    t0.xyz = (-t16_3.xyz) + vs_TEXCOORD5.xyz;
    //Instruction 43695
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 43696
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 43697
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 43698
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_8;
  tmpvar_4 = (glstate_matrix_mvp * tmpvar_13);
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = tmpvar_4.zw;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = normalize(((
    (v_62.xyz * tmpvar_14.x)
   + 
    (v_63.xyz * tmpvar_14.y)
  ) + (v_64.xyz * tmpvar_14.z)));
  mediump vec3 tmpvar_66;
  mediump vec4 normal_67;
  normal_67 = tmpvar_65;
  mediump vec3 x2_68;
  mediump vec3 x1_69;
  x1_69.x = dot (unity_SHAr, normal_67);
  x1_69.y = dot (unity_SHAg, normal_67);
  x1_69.z = dot (unity_SHAb, normal_67);
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_70);
  x2_68.y = dot (unity_SHBg, tmpvar_70);
  x2_68.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_66 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + x1_69);
  tmpvar_7 = tmpvar_66;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD1 = tmpvar_5;
  xlv_TEXCOORD2 = tmpvar_9;
  xlv_TEXCOORD3 = o_59;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD2.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD2.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2DProj (_LightBuffer, xlv_TEXCOORD3);
  light_3 = tmpvar_12;
  mediump vec4 tmpvar_13;
  tmpvar_13 = max (light_3, vec4(0.001, 0.001, 0.001, 0.001));
  light_3.w = tmpvar_13.w;
  light_3.xyz = (tmpvar_13.xyz + xlv_TEXCOORD5);
  lowp vec4 c_14;
  c_14.xyz = (tmpvar_5 * light_3.xyz);
  c_14.w = tmpvar_6;
  c_2.xyz = c_14.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec3 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
mediump vec4 t16_3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 44140
    //MUL
    vs_TEXCOORD1.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 44141
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 44142
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 44143
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 44144
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 44145
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 44146
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 44147
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 44148
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 44149
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 44150
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 44151
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 44152
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 44153
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 44154
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 44155
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 44156
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 44157
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 44158
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 44159
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 44160
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 44161
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 44162
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 44163
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 44164
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 44165
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 44166
    //FRC
    t30 = fract(t30);
    //Instruction 44167
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 44168
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 44169
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 44170
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 44171
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 44172
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 44173
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 44174
    //MOVC
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    //Instruction 44175
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 44176
    //IF
    if(tb30){
        //Instruction 44177
        //IF
        if(tb28){
            //Instruction 44178
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 44179
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 44180
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 44181
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 44182
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 44183
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 44184
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44185
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44186
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44187
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 44188
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 44189
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 44190
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44191
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 44192
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 44193
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 44194
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 44195
            //FRC
            t2 = fract(t2);
            //Instruction 44196
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 44197
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 44198
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 44199
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 44200
            //ADD
            t2 = t2 + t2;
            //Instruction 44201
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 44202
            //LT
            tb30 = t6.w<0.0;
            //Instruction 44203
            //MOV
            t6.y = (-t6.w);
            //Instruction 44204
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 44205
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 44206
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 44207
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 44208
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 44209
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 44210
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 44211
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44212
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44213
            //MUL
            t32 = t2.x * t32;
            //Instruction 44214
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 44215
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 44216
            //MUL
            t30 = t30 * t31;
            //Instruction 44217
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 44218
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44219
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44220
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 44221
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 44222
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 44223
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 44224
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 44225
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 44226
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 44227
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 44228
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 44229
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 44230
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 44231
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 44232
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 44233
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 44234
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 44235
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 44236
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 44237
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 44238
        //ELSE
        } else {
            //Instruction 44239
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 44240
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 44241
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44242
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 44243
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 44244
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 44245
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 44246
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 44247
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 44248
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 44249
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 44250
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 44251
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 44252
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 44253
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 44254
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 44255
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 44256
            //LT
            tb0 = t2.w<0.0;
            //Instruction 44257
            //MOV
            t2.y = (-t2.w);
            //Instruction 44258
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 44259
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 44260
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 44261
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 44262
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 44263
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 44264
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 44265
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 44266
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 44267
            //MUL
            t30 = t30 * t5.x;
            //Instruction 44268
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 44269
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 44270
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 44271
        //ENDIF
        }
        //Instruction 44272
    //ENDIF
    }
    //Instruction 44273
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 44274
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 44275
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 44276
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 44277
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 44278
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 44279
    //NE
    tb30 = t28!=0.0;
    //Instruction 44280
    //LOG
    t4.x = log2(t28);
    //Instruction 44281
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 44282
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 44283
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 44284
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 44285
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 44286
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 44287
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 44288
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 44289
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 44290
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 44291
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 44292
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 44293
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 44294
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 44295
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 44296
    //MUL
    t28 = t28 * t30;
    //Instruction 44297
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 44298
    //MOV
    t4.y = t3.y;
    //Instruction 44299
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 44300
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 44301
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 44302
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 44303
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 44304
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 44305
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 44306
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 44307
    //MAD
    t2 = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 44308
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 44309
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 44310
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 44311
    //MAD
    vs_TEXCOORD0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 44312
    //MUL
    t0.xz = t2.xw * vec2(0.500000, 0.500000);
    //Instruction 44313
    //MUL
    t9.x = t2.y * _ProjectionParams.x;
    //Instruction 44314
    //MUL
    t0.w = t9.x * 0.500000;
    //Instruction 44315
    //ADD
    vs_TEXCOORD3.xy = t0.zz + t0.xw;
    //Instruction 44316
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 44317
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 44318
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 44319
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 44320
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 44321
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 44322
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 44323
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 44324
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 44325
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 44326
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 44327
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 44328
    //DP3
    t27 = dot(t0.xyz, t0.xyz);
    //Instruction 44329
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 44330
    //MUL
    t0.xyz = vec3(t27) * t0.xyz;
    //Instruction 44331
    //MOV
    t0.w = 1.0;
    //Instruction 44332
    //DP4
    t16_7.x = dot(unity_SHAr, t0);
    //Instruction 44333
    //DP4
    t16_7.y = dot(unity_SHAg, t0);
    //Instruction 44334
    //DP4
    t16_7.z = dot(unity_SHAb, t0);
    //Instruction 44335
    //MUL
    t16_3 = t0.yzzx * t0.xyzz;
    //Instruction 44336
    //DP4
    t16_8.x = dot(unity_SHBr, t16_3);
    //Instruction 44337
    //DP4
    t16_8.y = dot(unity_SHBg, t16_3);
    //Instruction 44338
    //DP4
    t16_8.z = dot(unity_SHBb, t16_3);
    //Instruction 44339
    //MUL
    t16_34 = t0.y * t0.y;
    //Instruction 44340
    //MAD
    t16_34 = t0.x * t0.x + (-t16_34);
    //Instruction 44341
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_34) + t16_8.xyz;
    //Instruction 44342
    //ADD
    t16_7.xyz = t16_7.xyz + t16_8.xyz;
    //Instruction 44343
    //MOV
    gl_Position = t2;
    //Instruction 44344
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 44345
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 44346
    //MOV
    vs_TEXCOORD2.xyz = t1.xyz;
    //Instruction 44347
    //MOV
    vs_TEXCOORD3.zw = t2.zw;
    //Instruction 44348
    //MOV
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 44349
    //MOV
    vs_TEXCOORD5.xyz = t16_7.xyz;
    //Instruction 44350
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in mediump vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 44118
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 44119
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 44120
    //LT
    tb12 = t10_1<0.0;
    //Instruction 44121
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 44122
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 44123
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 44124
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 44125
    //MAD
    t16_6.xyz = vs_TEXCOORD2.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 44126
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 44127
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 44128
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 44129
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 44130
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 44131
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD1.xyz;
    //Instruction 44132
    //DIV
    t0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    //Instruction 44133
    //SAMPLE
    t10_0.xyz = texture(_LightBuffer, t0.xy).xyz;
    //Instruction 44134
    //MAX
    t16_3.xyz = max(t10_0.xyz, vec3(0.001000, 0.001000, 0.001000));
    //Instruction 44135
    //ADD
    t0.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 44136
    //MUL
    t16_2.xyz = t0.xyz * t16_2.xyz;
    //Instruction 44137
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 44138
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 44139
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMul