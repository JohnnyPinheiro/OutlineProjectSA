.0, 1.0, 1.0, 1.0);
    //Instruction 10470
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 10471
    //MUL
    t0 = t0 * t3;
    //Instruction 10472
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 10473
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 10474
    //MAD
    t3.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 10475
    //MAD
    t3.xyz = unity_LightColor[3].xyz * t0.www + t3.xyz;
    //Instruction 10476
    //ADD
    t3.xyz = t3.xyz + t16_6.xyz;
    //Instruction 10477
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 10478
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 10479
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 10480
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 10481
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 10482
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 10483
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 10484
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 10485
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 10486
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump float t16_12;
void main()
{
    //Instruction 10263
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 10264
    //MOV
    t16_0.w = 1.0;
    //Instruction 10265
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 10266
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 10267
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 10268
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    //Instruction 10269
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 10270
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 10271
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 10272
    //ADD
    t16_1.xyz = t10_2.xyz + (-t10_3.xyz);
    //Instruction 10273
    //MAD
    t16_1.xyz = vec3(t16_12) * t16_1.xyz + t10_3.xyz;
    //Instruction 10274
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 10275
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 10276
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 10277
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 10278
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 10279
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 10280
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 10281
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 10282
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_15;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_15 = vPos_46;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  highp vec3 lightColor0_63;
  lightColor0_63 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_64;
  lightColor1_64 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_65;
  lightColor2_65 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_66;
  lightColor3_66 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_67;
  lightAttenSq_67 = unity_4LightAtten0;
  highp vec3 normal_68;
  normal_68 = worldNormal_3;
  highp vec3 col_69;
  highp vec4 ndotl_70;
  highp vec4 lengthSq_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosX0 - tmpvar_54.x);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosY0 - tmpvar_54.y);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosZ0 - tmpvar_54.z);
  lengthSq_71 = (tmpvar_72 * tmpvar_72);
  lengthSq_71 = (lengthSq_71 + (tmpvar_73 * tmpvar_73));
  lengthSq_71 = (lengthSq_71 + (tmpvar_74 * tmpvar_74));
  ndotl_70 = (tmpvar_72 * normal_68.x);
  ndotl_70 = (ndotl_70 + (tmpvar_73 * normal_68.y));
  ndotl_70 = (ndotl_70 + (tmpvar_74 * normal_68.z));
  highp vec4 tmpvar_75;
  tmpvar_75 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_70 * inversesqrt(lengthSq_71)));
  ndotl_70 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (tmpvar_75 * (1.0/((1.0 + 
    (lengthSq_71 * lightAttenSq_67)
  ))));
  col_69 = (lightColor0_63 * tmpvar_76.x);
  col_69 = (col_69 + (lightColor1_64 * tmpvar_76.y));
  col_69 = (col_69 + (lightColor2_65 * tmpvar_76.z));
  col_69 = (col_69 + (lightColor3_66 * tmpvar_76.w));
  tmpvar_6 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + col_69);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_54;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 10511
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 10512
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 10513
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 10514
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 10515
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 10516
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 10517
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 10518
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 10519
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 10520
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 10521
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 10522
    //IF
    if(tb22){
        //Instruction 10523
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 10524
        //IF
        if(tb22){
            //Instruction 10525
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 10526
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 10527
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 10528
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 10529
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 10530
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 10531
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 10532
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 10533
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10534
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 10535
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 10536
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 10537
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 10538
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 10539
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 10540
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 10541
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 10542
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 10543
            //FRC
            t0 = fract(t0);
            //Instruction 10544
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 10545
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 10546
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 10547
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 10548
            //ADD
            t0 = t0 + t0;
            //Instruction 10549
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 10550
            //LT
            tb23 = t4.w<0.0;
            //Instruction 10551
            //MOV
            t4.y = (-t4.w);
            //Instruction 10552
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 10553
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 10554
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 10555
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 10556
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 10557
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 10558
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 10559
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 10560
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 10561
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 10562
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 10563
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 10564
            //MUL
            t23 = t23 * t24;
            //Instruction 10565
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 10566
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 10567
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 10568
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 10569
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 10570
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 10571
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 10572
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 10573
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 10574
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 10575
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 10576
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 10577
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 10578
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 10579
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 10580
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 10581
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 10582
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 10583
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 10584
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 10585
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 10586
        //ELSE
        } else {
            //Instruction 10587
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 10588
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 10589
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10590
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 10591
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 10592
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 10593
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 10594
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 10595
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 10596
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 10597
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 10598
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 10599
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10600
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 10601
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 10602
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 10603
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 10604
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 10605
            //LT
            tb22 = t0.w<0.0;
            //Instruction 10606
            //MOV
            t0.y = (-t0.w);
            //Instruction 10607
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 10608
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 10609
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 10610
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 10611
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 10612
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 10613
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 10614
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 10615
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 10616
            //MUL
            t24 = t24 * t4.x;
            //Instruction 10617
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 10618
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 10619
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 10620
        //ENDIF
        }
        //Instruction 10621
    //ELSE
    } else {
        //Instruction 10622
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 10623
    //ENDIF
    }
    //Instruction 10624
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 10625
    //SQRT
    t22 = sqrt(t22);
    //Instruction 10626
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 10627
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 10628
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 10629
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 10630
    //NE
    tb3 = t23!=0.0;
    //Instruction 10631
    //LOG
    t10 = log2(t23);
    //Instruction 10632
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 10633
    //EXP
    t10 = exp2(t10);
    //Instruction 10634
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 10635
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 10636
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 10637
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 10638
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 10639
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 10640
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 10641
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 10642
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 10643
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 10644
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 10645
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 10646
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 10647
    //MUL
    t23 = t23 * t3.x;
    //Instruction 10648
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 10649
    //MOV
    t3.y = t2.y;
    //Instruction 10650
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 10651
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 10652
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 10653
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 10654
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 10655
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 10656
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 10657
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 10658
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 10659
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 10660
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 10661
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 10662
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 10663
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 10664
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 10665
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 10666
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 10667
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 10668
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 10669
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 10670
    //MAD
    t2.xyz = t2.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 10671
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 10672
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 10673
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 10674
    //MAD
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    //Instruction 10675
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 10676
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 10677
    //MUL
    t2.xyz = vec3(t22) * t2.xyz;
    //Instruction 10678
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 10679
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 10680
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 10681
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 10682
    //MUL
    t16_27 = t2.y * t2.y;
    //Instruction 10683
    //MAD
    t16_27 = t2.x * t2.x + (-t16_27);
    //Instruction 10684
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 10685
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 10686
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 10687
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 10688
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 10689
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 10690
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 10691
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 10692
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 10693
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 10694
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 10695
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 10696
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 10697
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 10698
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 10699
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 10700
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 10701
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 10487
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 10488
    //MOV
    t16_0.w = 1.0;
    //Instruction 10489
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 10490
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 10491
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 10492
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    //Instruction 10493
    //MOV
    t16_15 = vs_TEXCOORD4.z;
    t16_15 = clamp(t16_15, 0.0, 1.0);
    //Instruction 10494
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 10495
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 10496
    //ADD
    t16_1.xyz = t10_2.xyz + (-t10_3.xyz);
    //Instruction 10497
    //MAD
    t16_1.xyz = vec3(t16_15) * t16_1.xyz + t10_3.xyz;
    //Instruction 10498
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 10499
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 10500
    //SAMPLE_C_LZ
    vec3 txVec29 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec29, 0.0);
    //Instruction 10501
    //ADD
    t16_16 = (-_LightShadowData.x) + 1.0;
    //Instruction 10502
    //MAD
    t16_15 = t16_15 * t16_16 + _LightShadowData.x;
    //Instruction 10503
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 10504
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 10505
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 10506
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 10507
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 10508
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 10509
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 10510
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_15;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_15 = vPos_46;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  highp vec3 lightColor0_63;
  lightColor0_63 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_64;
  lightColor1_64 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_65;
  lightColor2_65 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_66;
  lightColor3_66 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_67;
  lightAttenSq_67 = unity_4LightAtten0;
  highp vec3 normal_68;
  normal_68 = worldNormal_3;
  highp vec3 col_69;
  highp vec4 ndotl_70;
  highp vec4 lengthSq_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosX0 - tmpvar_54.x);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosY0 - tmpvar_54.y);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosZ0 - tmpvar_54.z);
  lengthSq_71 = (tmpvar_72 * tmpvar_72);
  lengthSq_71 = (lengthSq_71 + (tmpvar_73 * tmpvar_73));
  lengthSq_71 = (lengthSq_71 + (tmpvar_74 * tmpvar_74));
  ndotl_70 = (tmpvar_72 * normal_68.x);
  ndotl_70 = (ndotl_70 + (tmpvar_73 * normal_68.y));
  ndotl_70 = (ndotl_70 + (tmpvar_74 * normal_68.z));
  highp vec4 tmpvar_75;
  tmpvar_75 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_70 * inversesqrt(lengthSq_71)));
  ndotl_70 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (tmpvar_75 * (1.0/((1.0 + 
    (lengthSq_71 * lightAttenSq_67)
  ))));
  col_69 = (lightColor0_63 * tmpvar_76.x);
  col_69 = (col_69 + (lightColor1_64 * tmpvar_76.y));
  col_69 = (col_69 + (lightColor2_65 * tmpvar_76.z));
  col_69 = (col_69 + (lightColor3_66 * tmpvar_76.w));
  tmpvar_6 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + col_69);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_54;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 10878
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 10879
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 10880
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 10881
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 10882
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 10883
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 10884
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 10885
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 10886
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 10887
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 10888
    //GE
    tb25 = t16_0.x>=3.000000;
    //Instruction 10889
    //IF
    if(tb25){
        //Instruction 10890
        //EQ
        tb25 = t16_0.x==5.000000;
        //Instruction 10891
        //IF
        if(tb25){
            //Instruction 10892
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 10893
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 10894
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 10895
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 10896
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 10897
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 10898
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 10899
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 10900
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10901
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 10902
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 10903
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 10904
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 10905
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 10906
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 10907
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 10908
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 10909
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 10910
            //FRC
            t0 = fract(t0);
            //Instruction 10911
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 10912
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 10913
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 10914
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 10915
            //ADD
            t0 = t0 + t0;
            //Instruction 10916
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 10917
            //LT
            tb26 = t4.w<0.0;
            //Instruction 10918
            //MOV
            t4.y = (-t4.w);
            //Instruction 10919
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 10920
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 10921
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 10922
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 10923
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 10924
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 10925
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 10926
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 10927
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 10928
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 10929
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 10930
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 10931
            //MUL
            t26 = t26 * t27;
            //Instruction 10932
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 10933
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 10934
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 10935
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 10936
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 10937
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 10938
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 10939
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 10940
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 10941
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 10942
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 10943
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 10944
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 10945
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 10946
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 10947
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 10948
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 10949
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 10950
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 10951
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 10952
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 10953
        //ELSE
        } else {
            //Instruction 10954
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 10955
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 10956
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10957
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 10958
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 10959
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 10960
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 10961
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 10962
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 10963
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 10964
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 10965
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 10966
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10967
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 10968
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 10969
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 10970
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 10971
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 10972
            //LT
            tb25 = t0.w<0.0;
            //Instruction 10973
            //MOV
            t0.y = (-t0.w);
            //Instruction 10974
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 10975
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 10976
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 10977
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 10978
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 10979
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 10980
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 10981
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 10982
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 10983
            //MUL
            t27 = t27 * t4.x;
            //Instruction 10984
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 10985
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 10986
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 10987
        //ENDIF
        }
        //Instruction 10988
    //ELSE
    } else {
        //Instruction 10989
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 10990
    //ENDIF
    }
    //Instruction 10991
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 10992
    //SQRT
    t25 = sqrt(t25);
    //Instruction 10993
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 10994
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 10995
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 10996
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 10997
    //NE
    tb3 = t26!=0.0;
    //Instruction 10998
    //LOG
    t11 = log2(t26);
    //Instruction 10999
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 11000
    //EXP
    t11 = exp2(t11);
    //Instruction 11001
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 11002
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11003
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11004
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 11005
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 11006
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11007
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 11008
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11009
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 11010
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 11011
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 11012
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11013
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 11014
    //MUL
    t26 = t26 * t3.x;
    //Instruction 11015
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 11016
    //MOV
    t3.y = t2.y;
    //Instruction 11017
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 11018
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 11019
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 11020
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 11021
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 11022
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 11023
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 11024
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 11025
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 11026
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 11027
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 11028
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 11029
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 11030
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 11031
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 11032
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 11033
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 11034
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 11035
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 11036
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 11037
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 11038
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 11039
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 11040
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 11041
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 11042
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 11043
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 11044
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 11045
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 11046
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 11047
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 11048
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 11049
    //MUL
    t16_30 = t3.y * t3.y;
    //Instruction 11050
    //MAD
    t16_30 = t3.x * t3.x + (-t16_30);
    //Instruction 11051
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    //Instruction 11052
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 11053
    //ADD
    t4 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 11054
    //ADD
    t5 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 11055
    //MUL
    t7 = t4 * t4;
    //Instruction 11056
    //MAD
    t7 = t0 * t0 + t7;
    //Instruction 11057
    //MAD
    t7 = t5 * t5 + t7;
    //Instruction 11058
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 11059
    //MAD
    t0 = t0 * t3.xxxx + t4;
    //Instruction 11060
    //MAD
    t0 = t5 * t3.zzzz + t0;
    //Instruction 11061
    //RSQ
    t4 = inversesqrt(t7);
    //Instruction 11062
    //MUL
    t0 = t0 * t4;
    //Instruction 11063
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 11064
    //MAD
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 11065
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 11066
    //MUL
    t0 = t0 * t4;
    //Instruction 11067
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 11068
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 11069
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 11070
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 11071
    //ADD
    t4.xyz = t4.xyz + t16_6.xyz;
    //Instruction 11072
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 11073
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 11074
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 11075
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 11076
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 11077
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 11078
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 11079
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 11080
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 11081
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 11082
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 11083
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 11084
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 11085
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 11086
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 11087
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 11088
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 11089
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 11090
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 10854
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 10855
    //MOV
    t16_0.w = 1.0;
    //Instruction 10856
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 10857
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 10858
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 10859
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    //Instruction 10860
    //MOV
    t16_15 = vs_TEXCOORD4.z;
    t16_15 = clamp(t16_15, 0.0, 1.0);
    //Instruction 10861
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 10862
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 10863
    //ADD
    t16_1.xyz = t10_2.xyz + (-t10_3.xyz);
    //Instruction 10864
    //MAD
    t16_1.xyz = vec3(t16_15) * t16_1.xyz + t10_3.xyz;
    //Instruction 10865
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 10866
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 10867
    //SAMPLE_C_LZ
    vec3 txVec25 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec25, 0.0);
    //Instruction 10868
    //ADD
    t16_16 = (-_LightShadowData.x) + 1.0;
    //Instruction 10869
    //MAD
    t16_15 = t16_15 * t16_16 + _LightShadowData.x;
    //Instruction 10870
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 10871
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 10872
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 10873
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 10874
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 10875
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 10876
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 10877
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = worldNormal_3;
  mediump vec4 normal_59;
  normal_59 = tmpvar_58;
  mediump vec3 x2_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_61);
  x2_60.y = dot (unity_SHBg, tmpvar_61);
  x2_60.z = dot (unity_SHBb, tmpvar_61);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_60 + (unity_SHC.xyz * (
    (normal_59.x * normal_59.x)
   - 
    (normal_59.y * normal_59.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 11202
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11203
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 11204
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 11205
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 11206
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 11207
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 11208
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 11209
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 11210
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 11211
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 11212
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 11213
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11214
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 11215
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 11216
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 11217
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 11218
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 11219
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 11220
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 11221
    //IF
    if(tb25){
        //Instruction 11222
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 11223
        //IF
        if(tb25){
            //Instruction 11224
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11225
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11226
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11227
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 11228
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 11229
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 11230
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11231
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11232
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11233
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11234
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 11235
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 11236
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11237
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 11238
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 11239
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 11240
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11241
            //FRC
            t2 = fract(t2);
            //Instruction 11242
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11243
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 11244
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11245
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11246
            //ADD
            t2 = t2 + t2;
            //Instruction 11247
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 11248
            //LT
            tb27 = t5.w<0.0;
            //Instruction 11249
            //MOV
            t5.y = (-t5.w);
            //Instruction 11250
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11251
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 11252
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 11253
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 11254
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 11255
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 11256
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 11257
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11258
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11259
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 11260
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 11261
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11262
            //MUL
            t27 = t27 * t28;
            //Instruction 11263
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 11264
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11265
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11266
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11267
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11268
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11269
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11270
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11271
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11272
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11273
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11274
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11275
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11276
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 11277
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11278
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 11279
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 11280
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11281
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11282
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 11283
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11284
        //ELSE
        } else {
            //Instruction 11285
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11286
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11287
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11288
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11289
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 11290
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 11291
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11292
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 11293
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 11294
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11295
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 11296
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11297
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 11298
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11299
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11300
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 11301
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 11302
            //LT
            tb0 = t2.w<0.0;
            //Instruction 11303
            //MOV
            t2.y = (-t2.w);
            //Instruction 11304
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 11305
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 11306
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 11307
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 11308
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 11309
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 11310
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 11311
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11312
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11313
            //MUL
            t27 = t27 * t5.x;
            //Instruction 11314
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 11315
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 11316
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11317
        //ENDIF
        }
        //Instruction 11318
    //ELSE
    } else {
        //Instruction 11319
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 11320
    //ENDIF
    }
    //Instruction 11321
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 11322
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 11323
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11324
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 11325
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 11326
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 11327
    //NE
    tb27 = t25!=0.0;
    //Instruction 11328
    //LOG
    t4.x = log2(t25);
    //Instruction 11329
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 11330
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 11331
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 11332
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11333
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11334
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 11335
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 11336
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11337
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 11338
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11339
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 11340
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 11341
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 11342
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11343
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 11344
    //MUL
    t25 = t25 * t27;
    //Instruction 11345
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 11346
    //MOV
    t4.y = t3.y;
    //Instruction 11347
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 11348
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 11349
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 11350
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 11351
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 11352
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 11353
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 11354
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 11355
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 11356
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 11357
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 11358
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 11359
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 11360
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 11361
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 11362
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 11363
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 11364
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 11365
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 11366
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 11367
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 11368
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 11369
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 11370
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 11371
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 11372
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 11373
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 11374
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 11375
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 11376
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 11377
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 11378
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 11379
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 11380
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 11381
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 11382
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 11383
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 11384
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 11385
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 11386
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 11387
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 11388
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 11389
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 11173
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 11174
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 11175
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 11176
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 11177
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 11178
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 11179
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 11180
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 11181
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 11182
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 11183
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 11184
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 11185
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 11186
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 11187
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 11188
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 11189
    //MOV
    t16_1.w = 1.0;
    //Instruction 11190
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 11191
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 11192
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 11193
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 11194
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 11195
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 11196
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11197
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 11198
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_12) + t16_3.xyz;
    //Instruction 11199
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 11200
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11201
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_55;
  tmpvar_55 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_3;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  highp vec3 lightColor0_64;
  lightColor0_64 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_65;
  lightColor1_65 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_66;
  lightColor2_66 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_67;
  lightColor3_67 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_68;
  lightAttenSq_68 = unity_4LightAtten0;
  highp vec3 normal_69;
  normal_69 = worldNormal_3;
  highp vec3 col_70;
  highp vec4 ndotl_71;
  highp vec4 lengthSq_72;
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosX0 - tmpvar_55.x);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosY0 - tmpvar_55.y);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosZ0 - tmpvar_55.z);
  lengthSq_72 = (tmpvar_73 * tmpvar_73);
  lengthSq_72 = (lengthSq_72 + (tmpvar_74 * tmpvar_74));
  lengthSq_72 = (lengthSq_72 + (tmpvar_75 * tmpvar_75));
  ndotl_71 = (tmpvar_73 * normal_69.x);
  ndotl_71 = (ndotl_71 + (tmpvar_74 * normal_69.y));
  ndotl_71 = (ndotl_71 + (tmpvar_75 * normal_69.z));
  highp vec4 tmpvar_76;
  tmpvar_76 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_71 * inversesqrt(lengthSq_72)));
  ndotl_71 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (tmpvar_76 * (1.0/((1.0 + 
    (lengthSq_72 * lightAttenSq_68)
  ))));
  col_70 = (lightColor0_64 * tmpvar_77.x);
  col_70 = (col_70 + (lightColor1_65 * tmpvar_77.y));
  col_70 = (col_70 + (lightColor2_66 * tmpvar_77.z));
  col_70 = (col_70 + (lightColor3_67 * tmpvar_77.w));
  tmpvar_6 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + col_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_55;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 11419
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11420
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 11421
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 11422
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 11423
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 11424
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 11425
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 11426
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 11427
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 11428
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 11429
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 11430
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11431
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 11432
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 11433
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 11434
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 11435
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 11436
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 11437
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 11438
    //IF
    if(tb25){
        //Instruction 11439
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 11440
        //IF
        if(tb25){
            //Instruction 11441
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11442
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11443
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11444
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 11445
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 11446
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 11447
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11448
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11449
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11450
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11451
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 11452
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 11453
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11454
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 11455
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 11456
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 11457
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11458
            //FRC
            t2 = fract(t2);
            //Instruction 11459
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11460
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 11461
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11462
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11463
            //ADD
            t2 = t2 + t2;
            //Instruction 11464
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 11465
            //LT
            tb27 = t5.w<0.0;
            //Instruction 11466
            //MOV
            t5.y = (-t5.w);
            //Instruction 11467
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11468
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 11469
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 11470
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 11471
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 11472
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 11473
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 11474
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11475
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11476
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 11477
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 11478
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11479
            //MUL
            t27 = t27 * t28;
            //Instruction 11480
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 11481
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11482
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11483
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11484
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11485
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11486
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11487
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11488
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11489
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11490
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11491
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11492
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11493
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 11494
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11495
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 11496
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 11497
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11498
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11499
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 11500
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11501
        //ELSE
        } else {
            //Instruction 11502
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11503
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11504
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11505
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11506
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 11507
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 11508
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11509
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 11510
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 11511
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11512
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 11513
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11514
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 11515
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11516
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11517
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 11518
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 11519
            //LT
            tb0 = t2.w<0.0;
            //Instruction 11520
            //MOV
            t2.y = (-t2.w);
            //Instruction 11521
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 11522
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 11523
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 11524
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 11525
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 11526
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 11527
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 11528
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11529
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11530
            //MUL
            t27 = t27 * t5.x;
            //Instruction 11531
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 11532
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 11533
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11534
        //ENDIF
        }
        //Instruction 11535
    //ELSE
    } else {
        //Instruction 11536
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 11537
    //ENDIF
    }
    //Instruction 11538
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 11539
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 11540
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11541
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 11542
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 11543
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 11544
    //NE
    tb27 = t25!=0.0;
    //Instruction 11545
    //LOG
    t4.x = log2(t25);
    //Instruction 11546
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 11547
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 11548
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 11549
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11550
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11551
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 11552
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 11553
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11554
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 11555
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11556
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 11557
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 11558
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 11559
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11560
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 11561
    //MUL
    t25 = t25 * t27;
    //Instruction 11562
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 11563
    //MOV
    t4.y = t3.y;
    //Instruction 11564
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 11565
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 11566
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 11567
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 11568
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 11569
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 11570
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 11571
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 11572
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 11573
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 11574
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 11575
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 11576
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 11577
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 11578
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 11579
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 11580
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 11581
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 11582
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 11583
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 11584
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 11585
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 11586
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 11587
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 11588
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 11589
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 11590
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 11591
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 11592
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 11593
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 11594
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 11595
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 11596
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 11597
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 11598
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 11599
    //ADD
    t2 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 11600
    //ADD
    t4 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 11601
    //ADD
    t5 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 11602
    //MUL
    t6 = t4 * t4;
    //Instruction 11603
    //MAD
    t6 = t2 * t2 + t6;
    //Instruction 11604
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 11605
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 11606
    //MAD
    t2 = t2 * t3.xxxx + t4;
    //Instruction 11607
    //MAD
    t2 = t5 * t3.zzzz + t2;
    //Instruction 11608
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 11609
    //MUL
    t2 = t2 * t4;
    //Instruction 11610
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 11611
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 11612
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 11613
    //MUL
    t2 = t2 * t4;
    //Instruction 11614
    //MUL
    t4.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 11615
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t2.xxx + t4.xyz;
    //Instruction 11616
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t2.zzz + t4.xyz;
    //Instruction 11617
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t2.www + t4.xyz;
    //Instruction 11618
    //ADD
    t4.xyz = t4.xyz + t16_7.xyz;
    //Instruction 11619
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 11620
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 11621
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 11622
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 11623
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 11624
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 11625
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 11626
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 11627
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 11628
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 11390
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 11391
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 11392
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 11393
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 11394
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 11395
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 11396
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 11397
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 11398
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 11399
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 11400
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 11401
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 11402
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 11403
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 11404
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 11405
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 11406
    //MOV
    t16_1.w = 1.0;
    //Instruction 11407
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 11408
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 11409
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 11410
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 11411
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 11412
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 11413
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11414
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 11415
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_12) + t16_3.xyz;
    //Instruction 11416
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 11417
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11418
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  highp vec3 lightColor0_65;
  lightColor0_65 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_66;
  lightColor1_66 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_67;
  lightColor2_67 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_68;
  lightColor3_68 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_69;
  lightAttenSq_69 = unity_4LightAtten0;
  highp vec3 normal_70;
  normal_70 = worldNormal_3;
  highp vec3 col_71;
  highp vec4 ndotl_72;
  highp vec4 lengthSq_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosX0 - tmpvar_56.x);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosY0 - tmpvar_56.y);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosZ0 - tmpvar_56.z);
  lengthSq_73 = (tmpvar_74 * tmpvar_74);
  lengthSq_73 = (lengthSq_73 + (tmpvar_75 * tmpvar_75));
  lengthSq_73 = (lengthSq_73 + (tmpvar_76 * tmpvar_76));
  ndotl_72 = (tmpvar_74 * normal_70.x);
  ndotl_72 = (ndotl_72 + (tmpvar_75 * normal_70.y));
  ndotl_72 = (ndotl_72 + (tmpvar_76 * normal_70.z));
  highp vec4 tmpvar_77;
  tmpvar_77 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_72 * inversesqrt(lengthSq_73)));
  ndotl_72 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (tmpvar_77 * (1.0/((1.0 + 
    (lengthSq_73 * lightAttenSq_69)
  ))));
  col_71 = (lightColor0_65 * tmpvar_78.x);
  col_71 = (col_71 + (lightColor1_66 * tmpvar_78.y));
  col_71 = (col_71 + (lightColor2_67 * tmpvar_78.z));
  col_71 = (col_71 + (lightColor3_68 * tmpvar_78.w));
  tmpvar_6 = ((x2_63 + (unity_SHC.xyz * 
    ((normal_62.x * normal_62.x) - (normal_62.y * normal_62.y))
  )) + col_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 10735
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 10736
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 10737
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 10738
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 10739
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 10740
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 10741
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 10742
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 10743
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 10744
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 10745
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 10746
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 10747
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 10748
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 10749
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 10750
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 10751
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 10752
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 10753
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 10754
    //IF
    if(tb25){
        //Instruction 10755
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 10756
        //IF
        if(tb25){
            //Instruction 10757
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 10758
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 10759
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 10760
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 10761
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 10762
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 10763
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 10764
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 10765
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10766
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 10767
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 10768
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 10769
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 10770
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 10771
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 10772
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 10773
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 10774
            //FRC
            t2 = fract(t2);
            //Instruction 10775
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 10776
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 10777
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 10778
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 10779
            //ADD
            t2 = t2 + t2;
            //Instruction 10780
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 10781
            //LT
            tb27 = t5.w<0.0;
            //Instruction 10782
            //MOV
            t5.y = (-t5.w);
            //Instruction 10783
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 10784
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 10785
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 10786
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 10787
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 10788
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 10789
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 10790
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 10791
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 10792
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 10793
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 10794
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 10795
            //MUL
            t27 = t27 * t28;
            //Instruction 10796
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 10797
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 10798
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 10799
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 10800
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 10801
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 10802
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 10803
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 10804
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 10805
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 10806
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 10807
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 10808
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 10809
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 10810
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 10811
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 10812
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 10813
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 10814
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 10815
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 10816
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 10817
        //ELSE
        } else {
            //Instruction 10818
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 10819
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 10820
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10821
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 10822
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 10823
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 10824
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 10825
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 10826
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 10827
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 10828
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 10829
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10830
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 10831
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 10832
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 10833
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 10834
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 10835
            //LT
            tb0 = t2.w<0.0;
            //Instruction 10836
            //MOV
            t2.y = (-t2.w);
            //Instruction 10837
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 10838
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 10839
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 10840
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 10841
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 10842
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 10843
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 10844
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 10845
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 10846
            //MUL
            t27 = t27 * t5.x;
            //Instruction 10847
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 10848
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 10849
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 10850
        //ENDIF
        }
        //Instruction 10851
    //ELSE
    } else {
        //Instruction 10852
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 10853
    //ENDIF
    }
    //Instruction 10854
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 10855
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 10856
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 10857
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 10858
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 10859
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 10860
    //NE
    tb27 = t25!=0.0;
    //Instruction 10861
    //LOG
    t4.x = log2(t25);
    //Instruction 10862
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 10863
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 10864
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 10865
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 10866
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 10867
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 10868
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 10869
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 10870
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 10871
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 10872
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 10873
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 10874
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 10875
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 10876
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 10877
    //MUL
    t25 = t25 * t27;
    //Instruction 10878
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 10879
    //MOV
    t4.y = t3.y;
    //Instruction 10880
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 10881
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 10882
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 10883
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 10884
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 10885
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 10886
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 10887
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 10888
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 10889
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 10890
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 10891
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 10892
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 10893
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 10894
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 10895
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 10896
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 10897
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 10898
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 10899
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 10900
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 10901
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 10902
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 10903
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 10904
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 10905
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 10906
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 10907
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 10908
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 10909
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 10910
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 10911
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 10912
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 10913
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 10914
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 10915
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 10916
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 10917
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 10918
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 10919
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 10920
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 10921
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 10922
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 10923
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 10924
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 10925
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 10926
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 10927
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 10928
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 10929
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 10930
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 10931
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_15;
mediump float t16_18;
void main()
{
    //Instruction 10702
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 10703
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 10704
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 10705
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 10706
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 10707
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 10708
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 10709
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 10710
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 10711
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 10712
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 10713
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 10714
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 10715
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 10716
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 10717
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 10718
    //MOV
    t16_1.w = 1.0;
    //Instruction 10719
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 10720
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 10721
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 10722
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 10723
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 10724
    //SAMPLE_C_LZ
    vec3 txVec30 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec30, 0.0);
    //Instruction 10725
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 10726
    //MAD
    t16_15 = t16_15 * t16_18 + _LightShadowData.x;
    //Instruction 10727
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 10728
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 10729
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 10730
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 10731
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_15) + t16_3.xyz;
    //Instruction 10732
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 10733
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 10734
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  highp vec3 lightColor0_65;
  lightColor0_65 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_66;
  lightColor1_66 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_67;
  lightColor2_67 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_68;
  lightColor3_68 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_69;
  lightAttenSq_69 = unity_4LightAtten0;
  highp vec3 normal_70;
  normal_70 = worldNormal_3;
  highp vec3 col_71;
  highp vec4 ndotl_72;
  highp vec4 lengthSq_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosX0 - tmpvar_56.x);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosY0 - tmpvar_56.y);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosZ0 - tmpvar_56.z);
  lengthSq_73 = (tmpvar_74 * tmpvar_74);
  lengthSq_73 = (lengthSq_73 + (tmpvar_75 * tmpvar_75));
  lengthSq_73 = (lengthSq_73 + (tmpvar_76 * tmpvar_76));
  ndotl_72 = (tmpvar_74 * normal_70.x);
  ndotl_72 = (ndotl_72 + (tmpvar_75 * normal_70.y));
  ndotl_72 = (ndotl_72 + (tmpvar_76 * normal_70.z));
  highp vec4 tmpvar_77;
  tmpvar_77 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_72 * inversesqrt(lengthSq_73)));
  ndotl_72 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (tmpvar_77 * (1.0/((1.0 + 
    (lengthSq_73 * lightAttenSq_69)
  ))));
  col_71 = (lightColor0_65 * tmpvar_78.x);
  col_71 = (col_71 + (lightColor1_66 * tmpvar_78.y));
  col_71 = (col_71 + (lightColor2_67 * tmpvar_78.z));
  col_71 = (col_71 + (lightColor3_68 * tmpvar_78.w));
  tmpvar_6 = ((x2_63 + (unity_SHC.xyz * 
    ((normal_62.x * normal_62.x) - (normal_62.y * normal_62.y))
  )) + col_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 11124
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11125
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 11126
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 11127
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 11128
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 11129
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 11130
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 11131
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 11132
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 11133
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 11134
    //LT
    tb9 = 0.0<t16_2.x;
    //Instruction 11135
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11136
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 11137
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 11138
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 11139
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 11140
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 11141
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 11142
    //GE
    tb28 = t16_2.x>=3.000000;
    //Instruction 11143
    //IF
    if(tb28){
        //Instruction 11144
        //EQ
        tb28 = t16_2.x==5.000000;
        //Instruction 11145
        //IF
        if(tb28){
            //Instruction 11146
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11147
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11148
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11149
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 11150
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 11151
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 11152
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11153
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11154
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11155
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11156
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 11157
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 11158
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11159
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 11160
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 11161
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 11162
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11163
            //FRC
            t2 = fract(t2);
            //Instruction 11164
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11165
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 11166
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11167
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11168
            //ADD
            t2 = t2 + t2;
            //Instruction 11169
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 11170
            //LT
            tb30 = t5.w<0.0;
            //Instruction 11171
            //MOV
            t5.y = (-t5.w);
            //Instruction 11172
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11173
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 11174
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 11175
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 11176
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 11177
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 11178
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 11179
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11180
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11181
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 11182
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 11183
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11184
            //MUL
            t30 = t30 * t31;
            //Instruction 11185
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 11186
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11187
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11188
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11189
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11190
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11191
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11192
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11193
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11194
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11195
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11196
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11197
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11198
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 11199
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11200
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 11201
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 11202
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11203
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11204
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 11205
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11206
        //ELSE
        } else {
            //Instruction 11207
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11208
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11209
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11210
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11211
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 11212
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 11213
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11214
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 11215
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 11216
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11217
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 11218
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11219
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 11220
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11221
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11222
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 11223
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 11224
            //LT
            tb0 = t2.w<0.0;
            //Instruction 11225
            //MOV
            t2.y = (-t2.w);
            //Instruction 11226
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 11227
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 11228
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 11229
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 11230
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 11231
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 11232
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 11233
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11234
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11235
            //MUL
            t30 = t30 * t5.x;
            //Instruction 11236
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 11237
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 11238
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11239
        //ENDIF
        }
        //Instruction 11240
    //ELSE
    } else {
        //Instruction 11241
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 11242
    //ENDIF
    }
    //Instruction 11243
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 11244
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 11245
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11246
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 11247
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 11248
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 11249
    //NE
    tb30 = t28!=0.0;
    //Instruction 11250
    //LOG
    t4.x = log2(t28);
    //Instruction 11251
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 11252
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 11253
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 11254
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11255
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11256
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 11257
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 11258
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11259
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 11260
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11261
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 11262
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 11263
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 11264
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11265
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 11266
    //MUL
    t28 = t28 * t30;
    //Instruction 11267
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 11268
    //MOV
    t4.y = t3.y;
    //Instruction 11269
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 11270
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 11271
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 11272
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 11273
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 11274
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 11275
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 11276
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 11277
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 11278
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 11279
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 11280
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 11281
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 11282
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 11283
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 11284
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 11285
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 11286
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 11287
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 11288
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 11289
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 11290
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 11291
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 11292
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 11293
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 11294
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 11295
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 11296
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 11297
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 11298
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 11299
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 11300
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 11301
    //MUL
    t16_34 = t4.y * t4.y;
    //Instruction 11302
    //MAD
    t16_34 = t4.x * t4.x + (-t16_34);
    //Instruction 11303
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_34) + t16_7.xyz;
    //Instruction 11304
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 11305
    //ADD
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 11306
    //ADD
    t6 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 11307
    //MUL
    t8 = t5 * t5;
    //Instruction 11308
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 11309
    //MAD
    t8 = t6 * t6 + t8;
    //Instruction 11310
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 11311
    //MAD
    t2 = t2 * t4.xxxx + t5;
    //Instruction 11312
    //MAD
    t2 = t6 * t4.zzzz + t2;
    //Instruction 11313
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 11314
    //MUL
    t2 = t2 * t5;
    //Instruction 11315
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 11316
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 11317
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 11318
    //MUL
    t2 = t2 * t5;
    //Instruction 11319
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 11320
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 11321
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 11322
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 11323
    //ADD
    t5.xyz = t5.xyz + t16_7.xyz;
    //Instruction 11324
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 11325
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 11326
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 11327
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 11328
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 11329
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 11330
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 11331
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 11332
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 11333
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 11334
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 11335
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 11336
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 11337
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 11338
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 11339
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 11340
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 11341
    //MOV
    vs_TEXCOORD5.xyz = t5.xyz;
    //Instruction 11342
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_15;
mediump float t16_18;
void main()
{
    //Instruction 11091
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 11092
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 11093
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 11094
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 11095
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 11096
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 11097
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 11098
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 11099
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 11100
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 11101
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 11102
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 11103
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 11104
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 11105
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 11106
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 11107
    //MOV
    t16_1.w = 1.0;
    //Instruction 11108
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 11109
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 11110
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 11111
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 11112
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 11113
    //SAMPLE_C_LZ
    vec3 txVec26 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec26, 0.0);
    //Instruction 11114
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 11115
    //MAD
    t16_15 = t16_15 * t16_18 + _LightShadowData.x;
    //Instruction 11116
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 11117
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 11118
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11119
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 11120
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_15) + t16_3.xyz;
    //Instruction 11121
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 11122
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11123
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_55;
  tmpvar_55 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_59;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = _Object2World[0].xyz;
  tmpvar_60[1] = _Object2World[1].xyz;
  tmpvar_60[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.x;
  tmpvar_64.y = worldBinormal_3.x;
  tmpvar_64.z = worldNormal_5.x;
  tmpvar_64.w = tmpvar_55.x;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.y;
  tmpvar_65.y = worldBinormal_3.y;
  tmpvar_65.z = worldNormal_5.y;
  tmpvar_65.w = tmpvar_55.y;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.z;
  tmpvar_66.y = worldBinormal_3.z;
  tmpvar_66.z = worldNormal_5.z;
  tmpvar_66.w = tmpvar_55.z;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_5;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_64;
  xlv_TEXCOORD1 = tmpvar_65;
  xlv_TEXCOORD2 = tmpvar_66;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec3 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 10965
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 10966
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 10967
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 10968
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 10969
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 10970
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 10971
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 10972
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 10973
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 10974
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 10975
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 10976
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 10977
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 10978
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 10979
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 10980
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 10981
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 10982
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 10983
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 10984
    //IF
    if(tb28){
        //Instruction 10985
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 10986
        //IF
        if(tb28){
            //Instruction 10987
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 10988
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 10989
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 10990
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 10991
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 10992
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 10993
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 10994
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 10995
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 10996
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 10997
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 10998
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 10999
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11000
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 11001
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 11002
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 11003
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11004
            //FRC
            t2 = fract(t2);
            //Instruction 11005
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11006
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 11007
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11008
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11009
            //ADD
            t2 = t2 + t2;
            //Instruction 11010
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 11011
            //LT
            tb30 = t5.w<0.0;
            //Instruction 11012
            //MOV
            t5.y = (-t5.w);
            //Instruction 11013
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11014
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 11015
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 11016
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 11017
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 11018
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 11019
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 11020
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11021
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11022
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 11023
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 11024
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11025
            //MUL
            t30 = t30 * t31;
            //Instruction 11026
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 11027
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11028
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11029
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11030
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11031
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11032
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11033
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11034
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11035
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11036
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11037
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11038
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11039
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 11040
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11041
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 11042
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 11043
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11044
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11045
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 11046
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11047
        //ELSE
        } else {
            //Instruction 11048
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11049
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11050
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11051
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11052
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 11053
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 11054
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11055
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 11056
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 11057
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11058
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 11059
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11060
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 11061
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11062
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11063
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 11064
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 11065
            //LT
            tb0 = t2.w<0.0;
            //Instruction 11066
            //MOV
            t2.y = (-t2.w);
            //Instruction 11067
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 11068
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 11069
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 11070
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 11071
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 11072
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 11073
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 11074
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11075
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11076
            //MUL
            t30 = t30 * t5.x;
            //Instruction 11077
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 11078
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 11079
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11080
        //ENDIF
        }
        //Instruction 11081
    //ELSE
    } else {
        //Instruction 11082
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 11083
    //ENDIF
    }
    //Instruction 11084
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 11085
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 11086
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11087
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 11088
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 11089
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 11090
    //NE
    tb30 = t28!=0.0;
    //Instruction 11091
    //LOG
    t4.x = log2(t28);
    //Instruction 11092
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 11093
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 11094
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 11095
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11096
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11097
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 11098
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 11099
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11100
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 11101
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11102
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 11103
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 11104
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 11105
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11106
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 11107
    //MUL
    t28 = t28 * t30;
    //Instruction 11108
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 11109
    //MOV
    t4.y = t3.y;
    //Instruction 11110
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 11111
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 11112
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 11113
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 11114
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 11115
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 11116
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 11117
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 11118
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 11119
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 11120
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 11121
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 11122
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 11123
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 11124
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 11125
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 11126
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 11127
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 11128
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 11129
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 11130
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 11131
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 11132
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 11133
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 11134
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 11135
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 11136
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 11137
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 11138
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 11139
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 11140
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 11141
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 11142
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 11143
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 11144
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 11145
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 11146
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 11147
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 11148
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 11149
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 11150
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 11151
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 11152
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 11153
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 11154
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 11155
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 11156
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 11157
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 11158
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 11159
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 11160
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 11161
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 11162
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 11163
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 11164
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 11165
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 11166
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 11167
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 11168
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 11169
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 11170
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 11171
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 11172
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 10932
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 10933
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 10934
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 10935
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 10936
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 10937
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 10938
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 10939
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 10940
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 10941
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 10942
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 10943
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 10944
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 10945
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 10946
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 10947
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 10948
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 10949
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 10950
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 10951
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 10952
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 10953
    //MOV
    t1.w = 1.0;
    //Instruction 10954
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 10955
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 10956
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 10957
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 10958
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 10959
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 10960
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 10961
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 10962
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 10963
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 10964
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_5;
  highp vec3 col_78;
  highp vec4 ndotl_79;
  highp vec4 lengthSq_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosX0 - tmpvar_56.x);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosY0 - tmpvar_56.y);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosZ0 - tmpvar_56.z);
  lengthSq_80 = (tmpvar_81 * tmpvar_81);
  lengthSq_80 = (lengthSq_80 + (tmpvar_82 * tmpvar_82));
  lengthSq_80 = (lengthSq_80 + (tmpvar_83 * tmpvar_83));
  ndotl_79 = (tmpvar_81 * normal_77.x);
  ndotl_79 = (ndotl_79 + (tmpvar_82 * normal_77.y));
  ndotl_79 = (ndotl_79 + (tmpvar_83 * normal_77.z));
  highp vec4 tmpvar_84;
  tmpvar_84 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_79 * inversesqrt(lengthSq_80)));
  ndotl_79 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (tmpvar_84 * (1.0/((1.0 + 
    (lengthSq_80 * lightAttenSq_76)
  ))));
  col_78 = (lightColor0_72 * tmpvar_85.x);
  col_78 = (col_78 + (lightColor1_73 * tmpvar_85.y));
  col_78 = (col_78 + (lightColor2_74 * tmpvar_85.z));
  col_78 = (col_78 + (lightColor3_75 * tmpvar_85.w));
  tmpvar_7 = ((x2_70 + (unity_SHC.xyz * 
    ((normal_69.x * normal_69.x) - (normal_69.y * normal_69.y))
  )) + col_78);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp vec2 t20;
highp vec2 t24;
highp vec2 t25;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
mediump float t16_38;
void main()
{
    //Instruction 11206
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11207
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 11208
    //ADD
    t10.x = t0.x + _Object2World[3].z;
    //Instruction 11209
    //ADD
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 11210
    //ADD
    t10.y = t20.x + in_NORMAL0.x;
    //Instruction 11211
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 11212
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 11213
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 11214
    //MUL
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 11215
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 11216
    //LT
    tb10 = 0.0<t16_2;
    //Instruction 11217
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11218
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 11219
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 11220
    //DP3
    t20.x = dot(t3.xyz, t3.xyz);
    //Instruction 11221
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 11222
    //MUL
    t20.xy = t20.xx * t3.xz;
    //Instruction 11223
    //AND
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, bvec2(tb10));
    //Instruction 11224
    //GE
    tb31 = t16_2>=3.000000;
    //Instruction 11225
    //IF
    if(tb31){
        //Instruction 11226
        //EQ
        tb31 = t16_2==5.000000;
        //Instruction 11227
        //IF
        if(tb31){
            //Instruction 11228
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11229
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11230
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11231
            //DP3
            t31 = dot(t3.xyz, t3.xyz);
            //Instruction 11232
            //RSQ
            t31 = inversesqrt(t31);
            //Instruction 11233
            //MUL
            t3.xyz = vec3(t31) * t3.xyz;
            //Instruction 11234
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11235
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11236
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11237
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11238
            //ADD
            t31 = t0.x + _ST_WindBranch.x;
            //Instruction 11239
            //ADD
            t2.x = t31 + in_TEXCOORD0.w;
            //Instruction 11240
            //MAD
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11241
            //MUL
            t33 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 11242
            //MUL
            t2.z = t33 * 0.500000;
            //Instruction 11243
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 11244
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11245
            //FRC
            t2 = fract(t2);
            //Instruction 11246
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11247
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 11248
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11249
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11250
            //ADD
            t2 = t2 + t2;
            //Instruction 11251
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 11252
            //LT
            tb33 = t5.w<0.0;
            //Instruction 11253
            //MOV
            t5.y = (-t5.w);
            //Instruction 11254
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11255
            //MOVC
            t5.xy = (bool(tb33)) ? t5.xy : t5.zw;
            //Instruction 11256
            //MAD
            t33 = (-t2.y) * t2.z + t5.x;
            //Instruction 11257
            //MAD
            t33 = t5.y * t33 + t5.w;
            //Instruction 11258
            //ADD
            t34 = (-t33) + t5.x;
            //Instruction 11259
            //MAD
            t33 = t5.y * t34 + t33;
            //Instruction 11260
            //MUL
            t33 = t33 * _ST_WindBranchTwitch.x;
            //Instruction 11261
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11262
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11263
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 11264
            //MAD
            t33 = t33 * t34 + t5.x;
            //Instruction 11265
            //MAD
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11266
            //MUL
            t33 = t33 * t34;
            //Instruction 11267
            //MUL
            t4.xyz = vec3(t33) * t4.xyz;
            //Instruction 11268
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11269
            //MAD
            t5.x = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11270
            //MUL
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11271
            //MAD
            t5.y = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11272
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11273
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11274
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11275
            //MUL
            t25.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11276
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11277
            //MAD
            t5.xy = t25.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11278
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11279
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11280
            //MUL
            t31 = t5.x * t5.y;
            //Instruction 11281
            //MAD
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11282
            //MUL
            t33 = t2.w * _ST_WindVector.w;
            //Instruction 11283
            //MAD
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            //Instruction 11284
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11285
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11286
            //MUL
            t3.xyz = vec3(t31) * t3.xyz;
            //Instruction 11287
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11288
        //ELSE
        } else {
            //Instruction 11289
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11290
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11291
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11292
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11293
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 11294
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 11295
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11296
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 11297
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 11298
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11299
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 11300
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11301
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 11302
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11303
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11304
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 11305
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 11306
            //LT
            tb0 = t2.w<0.0;
            //Instruction 11307
            //MOV
            t2.y = (-t2.w);
            //Instruction 11308
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 11309
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 11310
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 11311
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 11312
            //ADD
            t31 = (-t0.x) + t6.x;
            //Instruction 11313
            //MAD
            t0.x = t6.y * t31 + t0.x;
            //Instruction 11314
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 11315
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11316
            //ADD
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11317
            //MUL
            t33 = t33 * t5.x;
            //Instruction 11318
            //MAD
            t0.x = t0.x * t31 + t33;
            //Instruction 11319
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 11320
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11321
        //ENDIF
        }
        //Instruction 11322
    //ELSE
    } else {
        //Instruction 11323
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 11324
    //ENDIF
    }
    //Instruction 11325
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 11326
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 11327
    //DIV
    t31 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11328
    //MAD
    t31 = (-t31) * 0.250000 + t3.y;
    //Instruction 11329
    //MAX
    t31 = max(t31, 0.0);
    //Instruction 11330
    //MUL
    t31 = t31 * _ST_WindGlobal.z;
    //Instruction 11331
    //NE
    tb33 = t31!=0.0;
    //Instruction 11332
    //LOG
    t4.x = log2(t31);
    //Instruction 11333
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 11334
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 11335
    //MOVC
    t31 = (tb33) ? t4.x : t31;
    //Instruction 11336
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11337
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11338
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 11339
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 11340
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11341
    //MUL
    t24.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 11342
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11343
    //MAD
    t4.xy = t24.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 11344
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 11345
    //MAD
    t33 = t4.y * t4.y + t4.x;
    //Instruction 11346
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11347
    //MAD
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    //Instruction 11348
    //MUL
    t31 = t31 * t33;
    //Instruction 11349
    //MAD
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    //Instruction 11350
    //MOV
    t4.y = t3.y;
    //Instruction 11351
    //DP3
    t20.x = dot(t4.xyz, t4.xyz);
    //Instruction 11352
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 11353
    //MUL
    t4.xyz = t20.xxx * t4.xyz;
    //Instruction 11354
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 11355
    //MOVC
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    //Instruction 11356
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 11357
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 11358
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 11359
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 11360
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 11361
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 11362
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 11363
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 11364
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 11365
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 11366
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 11367
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 11368
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 11369
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 11370
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 11371
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 11372
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 11373
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 11374
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 11375
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 11376
    //DP3
    t30 = dot(t2.xyw, t2.xyw);
    //Instruction 11377
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 11378
    //MUL
    t2 = vec4(t30) * t2;
    //Instruction 11379
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 11380
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 11381
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 11382
    //DP3
    t30 = dot(t3.xyz, t3.xyz);
    //Instruction 11383
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 11384
    //MUL
    t3.xyz = vec3(t30) * t3.xyz;
    //Instruction 11385
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 11386
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 11387
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 11388
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 11389
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 11390
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 11391
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 11392
    //MUL
    t16_38 = t2.y * t2.y;
    //Instruction 11393
    //MAD
    t16_38 = t2.x * t2.x + (-t16_38);
    //Instruction 11394
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_38) + t16_8.xyz;
    //Instruction 11395
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 11396
    //ADD
    t6 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 11397
    //ADD
    t7 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 11398
    //MUL
    t9 = t6 * t6;
    //Instruction 11399
    //MAD
    t9 = t5 * t5 + t9;
    //Instruction 11400
    //MAD
    t9 = t7 * t7 + t9;
    //Instruction 11401
    //MUL
    t6 = t2.yyyy * t6;
    //Instruction 11402
    //MAD
    t5 = t5 * t2.xxxx + t6;
    //Instruction 11403
    //MAD
    t5 = t7 * t2.wwww + t5;
    //Instruction 11404
    //RSQ
    t6 = inversesqrt(t9);
    //Instruction 11405
    //MUL
    t5 = t5 * t6;
    //Instruction 11406
    //MAX
    t5 = max(t5, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 11407
    //MAD
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 11408
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 11409
    //MUL
    t5 = t5 * t6;
    //Instruction 11410
    //MUL
    t6.xyz = t5.yyy * unity_LightColor[1].xyz;
    //Instruction 11411
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t5.xxx + t6.xyz;
    //Instruction 11412
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t5.zzz + t6.xyz;
    //Instruction 11413
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t5.www + t6.xyz;
    //Instruction 11414
    //ADD
    t6.xyz = t6.xyz + t16_8.xyz;
    //Instruction 11415
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 11416
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 11417
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 11418
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 11419
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 11420
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 11421
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 11422
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 11423
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 11424
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 11425
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 11426
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 11427
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 11428
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 11429
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 11430
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 11431
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 11432
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 11433
    //MOV
    vs_TEXCOORD6.xyz = t6.xyz;
    //Instruction 11434
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 11173
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 11174
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 11175
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 11176
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 11177
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 11178
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 11179
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 11180
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 11181
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 11182
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 11183
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 11184
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 11185
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 11186
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 11187
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 11188
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 11189
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 11190
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 11191
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 11192
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 11193
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 11194
    //MOV
    t1.w = 1.0;
    //Instruction 11195
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 11196
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 11197
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 11198
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11199
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 11200
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 11201
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 11202
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 11203
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 11204
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11205
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_12;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_11 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_19;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_19 = vPos_49;
  };
  tmpvar_16.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  tmpvar_66.w = tmpvar_57.x;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  tmpvar_67.w = tmpvar_57.y;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  tmpvar_68.w = tmpvar_57.z;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_5;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_5;
  highp vec3 col_79;
  highp vec4 ndotl_80;
  highp vec4 lengthSq_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_57.z);
  lengthSq_81 = (tmpvar_82 * tmpvar_82);
  lengthSq_81 = (lengthSq_81 + (tmpvar_83 * tmpvar_83));
  lengthSq_81 = (lengthSq_81 + (tmpvar_84 * tmpvar_84));
  ndotl_80 = (tmpvar_82 * normal_78.x);
  ndotl_80 = (ndotl_80 + (tmpvar_83 * normal_78.y));
  ndotl_80 = (ndotl_80 + (tmpvar_84 * normal_78.z));
  highp vec4 tmpvar_85;
  tmpvar_85 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_80 * inversesqrt(lengthSq_81)));
  ndotl_80 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (tmpvar_85 * (1.0/((1.0 + 
    (lengthSq_81 * lightAttenSq_77)
  ))));
  col_79 = (lightColor0_73 * tmpvar_86.x);
  col_79 = (col_79 + (lightColor1_74 * tmpvar_86.y));
  col_79 = (col_79 + (lightColor2_75 * tmpvar_86.z));
  col_79 = (col_79 + (lightColor3_76 * tmpvar_86.w));
  tmpvar_7 = ((x2_71 + (unity_SHC.xyz * 
    ((normal_70.x * normal_70.x) - (normal_70.y * normal_70.y))
  )) + col_79);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 11472
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11473
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 11474
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 11475
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 11476
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 11477
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 11478
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 11479
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 11480
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 11481
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 11482
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 11483
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11484
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 11485
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 11486
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 11487
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 11488
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 11489
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 11490
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 11491
    //IF
    if(tb28){
        //Instruction 11492
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 11493
        //IF
        if(tb28){
            //Instruction 11494
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11495
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11496
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11497
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 11498
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 11499
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 11500
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11501
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11502
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11503
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11504
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 11505
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 11506
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11507
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 11508
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 11509
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 11510
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11511
            //FRC
            t2 = fract(t2);
            //Instruction 11512
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11513
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 11514
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11515
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11516
            //ADD
            t2 = t2 + t2;
            //Instruction 11517
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 11518
            //LT
            tb30 = t5.w<0.0;
            //Instruction 11519
            //MOV
            t5.y = (-t5.w);
            //Instruction 11520
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11521
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 11522
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 11523
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 11524
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 11525
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 11526
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 11527
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11528
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11529
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 11530
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 11531
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11532
            //MUL
            t30 = t30 * t31;
            //Instruction 11533
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 11534
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11535
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11536
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11537
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11538
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11539
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11540
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11541
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11542
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11543
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11544
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11545
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11546
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 11547
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11548
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 11549
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 11550
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11551
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11552
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 11553
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11554
        //ELSE
        } else {
            //Instruction 11555
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11556
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11557
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11558
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11559
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 11560
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 11561
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11562
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 11563
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 11564
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11565
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 11566
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11567
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 11568
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11569
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11570
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 11571
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 11572
            //LT
            tb0 = t2.w<0.0;
            //Instruction 11573
            //MOV
            t2.y = (-t2.w);
            //Instruction 11574
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 11575
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 11576
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 11577
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 11578
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 11579
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 11580
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 11581
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11582
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11583
            //MUL
            t30 = t30 * t5.x;
            //Instruction 11584
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 11585
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 11586
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11587
        //ENDIF
        }
        //Instruction 11588
    //ELSE
    } else {
        //Instruction 11589
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 11590
    //ENDIF
    }
    //Instruction 11591
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 11592
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 11593
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11594
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 11595
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 11596
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 11597
    //NE
    tb30 = t28!=0.0;
    //Instruction 11598
    //LOG
    t4.x = log2(t28);
    //Instruction 11599
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 11600
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 11601
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 11602
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11603
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11604
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 11605
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 11606
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11607
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 11608
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11609
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 11610
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 11611
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 11612
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11613
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 11614
    //MUL
    t28 = t28 * t30;
    //Instruction 11615
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 11616
    //MOV
    t4.y = t3.y;
    //Instruction 11617
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 11618
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 11619
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 11620
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 11621
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 11622
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 11623
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 11624
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 11625
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 11626
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 11627
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 11628
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 11629
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 11630
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 11631
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 11632
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 11633
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 11634
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 11635
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 11636
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 11637
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 11638
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 11639
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 11640
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 11641
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 11642
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 11643
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 11644
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 11645
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 11646
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 11647
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 11648
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 11649
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 11650
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 11651
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 11652
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 11653
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 11654
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 11655
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 11656
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 11657
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 11658
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 11659
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 11660
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 11661
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 11662
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 11663
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 11664
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 11665
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 11666
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 11667
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 11668
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 11669
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 11670
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 11671
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 11672
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 11673
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 11674
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 11675
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 11676
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 11677
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 11678
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 11679
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 11680
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 11681
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 11682
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 11683
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 11684
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 11685
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 11686
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 11687
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 11688
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 11435
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 11436
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 11437
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 11438
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 11439
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 11440
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 11441
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 11442
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 11443
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 11444
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 11445
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 11446
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 11447
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 11448
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 11449
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 11450
    //SAMPLE_C_LZ
    vec3 txVec31 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_18 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec31, 0.0);
    //Instruction 11451
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 11452
    //MAD
    t16_18 = t16_18 * t16_3.x + _LightShadowData.x;
    //Instruction 11453
    //MUL
    t16_3.xyz = vec3(t16_18) * _LightColor0.xyz;
    //Instruction 11454
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 11455
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 11456
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 11457
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 11458
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 11459
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 11460
    //MOV
    t1.w = 1.0;
    //Instruction 11461
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 11462
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 11463
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 11464
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11465
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 11466
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 11467
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 11468
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 11469
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 11470
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11471
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_12;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_11 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_19;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_19 = vPos_49;
  };
  tmpvar_16.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  tmpvar_66.w = tmpvar_57.x;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  tmpvar_67.w = tmpvar_57.y;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  tmpvar_68.w = tmpvar_57.z;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_5;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_5;
  highp vec3 col_79;
  highp vec4 ndotl_80;
  highp vec4 lengthSq_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_57.z);
  lengthSq_81 = (tmpvar_82 * tmpvar_82);
  lengthSq_81 = (lengthSq_81 + (tmpvar_83 * tmpvar_83));
  lengthSq_81 = (lengthSq_81 + (tmpvar_84 * tmpvar_84));
  ndotl_80 = (tmpvar_82 * normal_78.x);
  ndotl_80 = (ndotl_80 + (tmpvar_83 * normal_78.y));
  ndotl_80 = (ndotl_80 + (tmpvar_84 * normal_78.z));
  highp vec4 tmpvar_85;
  tmpvar_85 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_80 * inversesqrt(lengthSq_81)));
  ndotl_80 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (tmpvar_85 * (1.0/((1.0 + 
    (lengthSq_81 * lightAttenSq_77)
  ))));
  col_79 = (lightColor0_73 * tmpvar_86.x);
  col_79 = (col_79 + (lightColor1_74 * tmpvar_86.y));
  col_79 = (col_79 + (lightColor2_75 * tmpvar_86.z));
  col_79 = (col_79 + (lightColor3_76 * tmpvar_86.w));
  tmpvar_7 = ((x2_71 + (unity_SHC.xyz * 
    ((normal_70.x * normal_70.x) - (normal_70.y * normal_70.y))
  )) + col_79);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec4 t16_6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp vec2 t22;
highp vec2 t26;
highp vec2 t27;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
mediump float t16_41;
void main()
{
    //Instruction 11666
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11667
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 11668
    //ADD
    t11.x = t0.x + _Object2World[3].z;
    //Instruction 11669
    //ADD
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 11670
    //ADD
    t11.y = t22.x + in_NORMAL0.x;
    //Instruction 11671
    //FRC
    t11.xy = fract(t11.xy);
    //Instruction 11672
    //MAD
    t11.x = t11.y * 0.500000 + t11.x;
    //Instruction 11673
    //ADD
    t11.x = t11.x + -0.300000;
    //Instruction 11674
    //MUL
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 11675
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 11676
    //LT
    tb11 = 0.0<t16_2;
    //Instruction 11677
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11678
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 11679
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 11680
    //DP3
    t22.x = dot(t3.xyz, t3.xyz);
    //Instruction 11681
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 11682
    //MUL
    t22.xy = t22.xx * t3.xz;
    //Instruction 11683
    //AND
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, bvec2(tb11));
    //Instruction 11684
    //GE
    tb34 = t16_2>=3.000000;
    //Instruction 11685
    //IF
    if(tb34){
        //Instruction 11686
        //EQ
        tb34 = t16_2==5.000000;
        //Instruction 11687
        //IF
        if(tb34){
            //Instruction 11688
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11689
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11690
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11691
            //DP3
            t34 = dot(t3.xyz, t3.xyz);
            //Instruction 11692
            //RSQ
            t34 = inversesqrt(t34);
            //Instruction 11693
            //MUL
            t3.xyz = vec3(t34) * t3.xyz;
            //Instruction 11694
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11695
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11696
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11697
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11698
            //ADD
            t34 = t0.x + _ST_WindBranch.x;
            //Instruction 11699
            //ADD
            t2.x = t34 + in_TEXCOORD0.w;
            //Instruction 11700
            //MAD
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11701
            //MUL
            t36 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 11702
            //MUL
            t2.z = t36 * 0.500000;
            //Instruction 11703
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 11704
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11705
            //FRC
            t2 = fract(t2);
            //Instruction 11706
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11707
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 11708
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11709
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11710
            //ADD
            t2 = t2 + t2;
            //Instruction 11711
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 11712
            //LT
            tb36 = t5.w<0.0;
            //Instruction 11713
            //MOV
            t5.y = (-t5.w);
            //Instruction 11714
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11715
            //MOVC
            t5.xy = (bool(tb36)) ? t5.xy : t5.zw;
            //Instruction 11716
            //MAD
            t36 = (-t2.y) * t2.z + t5.x;
            //Instruction 11717
            //MAD
            t36 = t5.y * t36 + t5.w;
            //Instruction 11718
            //ADD
            t37 = (-t36) + t5.x;
            //Instruction 11719
            //MAD
            t36 = t5.y * t37 + t36;
            //Instruction 11720
            //MUL
            t36 = t36 * _ST_WindBranchTwitch.x;
            //Instruction 11721
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11722
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11723
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 11724
            //MAD
            t36 = t36 * t37 + t5.x;
            //Instruction 11725
            //MAD
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11726
            //MUL
            t36 = t36 * t37;
            //Instruction 11727
            //MUL
            t4.xyz = vec3(t36) * t4.xyz;
            //Instruction 11728
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11729
            //MAD
            t5.x = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11730
            //MUL
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11731
            //MAD
            t5.y = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11732
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11733
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11734
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11735
            //MUL
            t27.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11736
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11737
            //MAD
            t5.xy = t27.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11738
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11739
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11740
            //MUL
            t34 = t5.x * t5.y;
            //Instruction 11741
            //MAD
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11742
            //MUL
            t36 = t2.w * _ST_WindVector.w;
            //Instruction 11743
            //MAD
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            //Instruction 11744
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11745
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11746
            //MUL
            t3.xyz = vec3(t34) * t3.xyz;
            //Instruction 11747
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11748
        //ELSE
        } else {
            //Instruction 11749
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11750
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11751
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11752
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11753
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 11754
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 11755
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11756
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 11757
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 11758
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11759
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 11760
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11761
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 11762
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11763
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11764
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 11765
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 11766
            //LT
            tb0 = t2.w<0.0;
            //Instruction 11767
            //MOV
            t2.y = (-t2.w);
            //Instruction 11768
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 11769
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 11770
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 11771
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 11772
            //ADD
            t34 = (-t0.x) + t6.x;
            //Instruction 11773
            //MAD
            t0.x = t6.y * t34 + t0.x;
            //Instruction 11774
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 11775
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11776
            //ADD
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11777
            //MUL
            t36 = t36 * t5.x;
            //Instruction 11778
            //MAD
            t0.x = t0.x * t34 + t36;
            //Instruction 11779
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 11780
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 11781
        //ENDIF
        }
        //Instruction 11782
    //ELSE
    } else {
        //Instruction 11783
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 11784
    //ENDIF
    }
    //Instruction 11785
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 11786
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 11787
    //DIV
    t34 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11788
    //MAD
    t34 = (-t34) * 0.250000 + t3.y;
    //Instruction 11789
    //MAX
    t34 = max(t34, 0.0);
    //Instruction 11790
    //MUL
    t34 = t34 * _ST_WindGlobal.z;
    //Instruction 11791
    //NE
    tb36 = t34!=0.0;
    //Instruction 11792
    //LOG
    t4.x = log2(t34);
    //Instruction 11793
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 11794
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 11795
    //MOVC
    t34 = (tb36) ? t4.x : t34;
    //Instruction 11796
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11797
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11798
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 11799
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 11800
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11801
    //MUL
    t26.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 11802
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11803
    //MAD
    t4.xy = t26.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 11804
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 11805
    //MAD
    t36 = t4.y * t4.y + t4.x;
    //Instruction 11806
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11807
    //MAD
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    //Instruction 11808
    //MUL
    t34 = t34 * t36;
    //Instruction 11809
    //MAD
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    //Instruction 11810
    //MOV
    t4.y = t3.y;
    //Instruction 11811
    //DP3
    t22.x = dot(t4.xyz, t4.xyz);
    //Instruction 11812
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 11813
    //MUL
    t4.xyz = t22.xxx * t4.xyz;
    //Instruction 11814
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 11815
    //MOVC
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    //Instruction 11816
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 11817
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 11818
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 11819
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 11820
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 11821
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 11822
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 11823
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 11824
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 11825
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 11826
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 11827
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 11828
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 11829
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 11830
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 11831
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 11832
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 11833
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 11834
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 11835
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 11836
    //DP3
    t33 = dot(t2.xyw, t2.xyw);
    //Instruction 11837
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 11838
    //MUL
    t2 = vec4(t33) * t2;
    //Instruction 11839
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 11840
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 11841
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 11842
    //DP3
    t33 = dot(t4.xyz, t4.xyz);
    //Instruction 11843
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 11844
    //MUL
    t4.xyz = vec3(t33) * t4.xyz;
    //Instruction 11845
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 11846
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 11847
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 11848
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 11849
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 11850
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 11851
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 11852
    //MUL
    t16_41 = t2.y * t2.y;
    //Instruction 11853
    //MAD
    t16_41 = t2.x * t2.x + (-t16_41);
    //Instruction 11854
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    //Instruction 11855
    //ADD
    t6 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 11856
    //ADD
    t7 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 11857
    //ADD
    t9 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 11858
    //MUL
    t10 = t7 * t7;
    //Instruction 11859
    //MAD
    t10 = t6 * t6 + t10;
    //Instruction 11860
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 11861
    //MUL
    t7 = t2.yyyy * t7;
    //Instruction 11862
    //MAD
    t6 = t6 * t2.xxxx + t7;
    //Instruction 11863
    //MAD
    t6 = t9 * t2.wwww + t6;
    //Instruction 11864
    //RSQ
    t7 = inversesqrt(t10);
    //Instruction 11865
    //MUL
    t6 = t6 * t7;
    //Instruction 11866
    //MAX
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 11867
    //MAD
    t7 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 11868
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 11869
    //MUL
    t6 = t6 * t7;
    //Instruction 11870
    //MUL
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    //Instruction 11871
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    //Instruction 11872
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    //Instruction 11873
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    //Instruction 11874
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 11875
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 11876
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 11877
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 11878
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 11879
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 11880
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 11881
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 11882
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 11883
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 11884
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 11885
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 11886
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 11887
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 11888
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 11889
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 11890
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 11891
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 11892
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 11893
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 11894
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 11895
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 11896
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 11897
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 11898
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 11899
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 11900
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 11901
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 11902
    //MOV
    vs_TEXCOORD6.xyz = t9.xyz;
    //Instruction 11903
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 11629
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 11630
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 11631
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 11632
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 11633
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 11634
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 11635
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 11636
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 11637
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 11638
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 11639
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 11640
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 11641
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 11642
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 11643
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 11644
    //SAMPLE_C_LZ
    vec3 txVec43 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_18 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec43, 0.0);
    //Instruction 11645
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 11646
    //MAD
    t16_18 = t16_18 * t16_3.x + _LightShadowData.x;
    //Instruction 11647
    //MUL
    t16_3.xyz = vec3(t16_18) * _LightColor0.xyz;
    //Instruction 11648
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 11649
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 11650
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 11651
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 11652
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 11653
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 11654
    //MOV
    t1.w = 1.0;
    //Instruction 11655
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 11656
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 11657
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 11658
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11659
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 11660
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 11661
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 11662
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 11663
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 11664
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11665
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_4;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 11362
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11363
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 11364
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 11365
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11366
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 11367
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 11368
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 11369
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 11370
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 11371
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 11372
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 11373
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 11374
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 11375
    //ADD
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 11376
    //MAD
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 11377
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 11378
    //FRC
    t2.x = fract(t2.x);
    //Instruction 11379
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 11380
    //MUL
    t9 = abs(t2.x) * abs(t2.x);
    //Instruction 11381
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 11382
    //MAD
    t2.x = t9 * t2.x + -0.500000;
    //Instruction 11383
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 11384
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 11385
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 11386
    //MOVC
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 11387
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 11388
    //IF
    if(tb23){
        //Instruction 11389
        //IF
        if(tb22){
            //Instruction 11390
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11391
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11392
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11393
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 11394
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 11395
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 11396
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11397
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11398
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11399
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11400
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 11401
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 11402
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 11403
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11404
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 11405
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 11406
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 11407
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11408
            //FRC
            t0 = fract(t0);
            //Instruction 11409
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11410
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 11411
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11412
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11413
            //ADD
            t0 = t0 + t0;
            //Instruction 11414
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 11415
            //LT
            tb23 = t5.w<0.0;
            //Instruction 11416
            //MOV
            t5.y = (-t5.w);
            //Instruction 11417
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11418
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 11419
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 11420
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 11421
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 11422
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 11423
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 11424
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11425
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11426
            //MUL
            t25 = t0.x * t25;
            //Instruction 11427
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 11428
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11429
            //MUL
            t23 = t23 * t24;
            //Instruction 11430
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 11431
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 11432
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11433
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11434
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11435
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11436
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11437
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11438
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11439
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11440
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11441
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11442
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11443
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 11444
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11445
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 11446
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 11447
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11448
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11449
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 11450
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11451
        //ELSE
        } else {
            //Instruction 11452
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11453
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 11454
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11455
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 11456
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 11457
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 11458
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 11459
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11460
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 11461
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 11462
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11463
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11464
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11465
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 11466
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11467
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11468
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 11469
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 11470
            //LT
            tb22 = t0.w<0.0;
            //Instruction 11471
            //MOV
            t0.y = (-t0.w);
            //Instruction 11472
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 11473
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 11474
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 11475
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 11476
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 11477
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 11478
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 11479
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11480
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11481
            //MUL
            t24 = t24 * t4.x;
            //Instruction 11482
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 11483
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 11484
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 11485
        //ENDIF
        }
        //Instruction 11486
    //ENDIF
    }
    //Instruction 11487
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 11488
    //SQRT
    t22 = sqrt(t22);
    //Instruction 11489
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11490
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 11491
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 11492
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 11493
    //NE
    tb3 = t23!=0.0;
    //Instruction 11494
    //LOG
    t10 = log2(t23);
    //Instruction 11495
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 11496
    //EXP
    t10 = exp2(t10);
    //Instruction 11497
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 11498
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11499
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11500
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 11501
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 11502
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11503
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 11504
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11505
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 11506
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 11507
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 11508
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11509
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 11510
    //MUL
    t23 = t23 * t3.x;
    //Instruction 11511
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 11512
    //MOV
    t3.y = t2.y;
    //Instruction 11513
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 11514
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 11515
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 11516
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 11517
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 11518
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 11519
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 11520
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 11521
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 11522
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 11523
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 11524
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 11525
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 11526
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 11527
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 11528
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 11529
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 11530
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 11531
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 11532
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 11533
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 11534
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 11535
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 11536
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 11537
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 11538
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 11539
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 11540
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 11541
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 11542
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 11543
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 11544
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 11545
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 11546
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 11547
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 11548
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 11549
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 11550
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 11551
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 11552
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 11343
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 11344
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 11345
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 11346
    //LT
    tb0 = t10_1<0.0;
    //Instruction 11347
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 11348
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 11349
    //MOV
    t16_0.w = 1.0;
    //Instruction 11350
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 11351
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 11352
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 11353
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 11354
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 11355
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 11356
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11357
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 11358
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 11359
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 11360
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11361
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_11.x)
   + 
    (v_59.xyz * tmpvar_11.y)
  ) + (v_60.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_4;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  highp vec3 lightColor0_66;
  lightColor0_66 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_67;
  lightColor1_67 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_68;
  lightColor2_68 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_69;
  lightColor3_69 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_70;
  lightAttenSq_70 = unity_4LightAtten0;
  highp vec3 normal_71;
  normal_71 = worldNormal_4;
  highp vec3 col_72;
  highp vec4 ndotl_73;
  highp vec4 lengthSq_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_57.z);
  lengthSq_74 = (tmpvar_75 * tmpvar_75);
  lengthSq_74 = (lengthSq_74 + (tmpvar_76 * tmpvar_76));
  lengthSq_74 = (lengthSq_74 + (tmpvar_77 * tmpvar_77));
  ndotl_73 = (tmpvar_75 * normal_71.x);
  ndotl_73 = (ndotl_73 + (tmpvar_76 * normal_71.y));
  ndotl_73 = (ndotl_73 + (tmpvar_77 * normal_71.z));
  highp vec4 tmpvar_78;
  tmpvar_78 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_73 * inversesqrt(lengthSq_74)));
  ndotl_73 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (tmpvar_78 * (1.0/((1.0 + 
    (lengthSq_74 * lightAttenSq_70)
  ))));
  col_72 = (lightColor0_66 * tmpvar_79.x);
  col_72 = (col_72 + (lightColor1_67 * tmpvar_79.y));
  col_72 = (col_72 + (lightColor2_68 * tmpvar_79.z));
  col_72 = (col_72 + (lightColor3_69 * tmpvar_79.w));
  tmpvar_7 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + col_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 11572
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11573
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 11574
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 11575
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11576
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 11577
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 11578
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 11579
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 11580
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 11581
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 11582
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 11583
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 11584
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 11585
    //ADD
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 11586
    //MAD
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 11587
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 11588
    //FRC
    t2.x = fract(t2.x);
    //Instruction 11589
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 11590
    //MUL
    t9 = abs(t2.x) * abs(t2.x);
    //Instruction 11591
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 11592
    //MAD
    t2.x = t9 * t2.x + -0.500000;
    //Instruction 11593
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 11594
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 11595
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 11596
    //MOVC
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 11597
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 11598
    //IF
    if(tb23){
        //Instruction 11599
        //IF
        if(tb22){
            //Instruction 11600
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11601
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11602
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11603
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 11604
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 11605
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 11606
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11607
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11608
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11609
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11610
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 11611
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 11612
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 11613
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11614
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 11615
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 11616
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 11617
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11618
            //FRC
            t0 = fract(t0);
            //Instruction 11619
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11620
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 11621
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11622
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11623
            //ADD
            t0 = t0 + t0;
            //Instruction 11624
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 11625
            //LT
            tb23 = t5.w<0.0;
            //Instruction 11626
            //MOV
            t5.y = (-t5.w);
            //Instruction 11627
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11628
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 11629
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 11630
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 11631
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 11632
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 11633
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 11634
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11635
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11636
            //MUL
            t25 = t0.x * t25;
            //Instruction 11637
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 11638
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11639
            //MUL
            t23 = t23 * t24;
            //Instruction 11640
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 11641
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 11642
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11643
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11644
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11645
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11646
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11647
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11648
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11649
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11650
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11651
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11652
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11653
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 11654
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11655
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 11656
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 11657
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11658
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11659
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 11660
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11661
        //ELSE
        } else {
            //Instruction 11662
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11663
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 11664
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11665
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 11666
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 11667
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 11668
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 11669
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11670
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 11671
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 11672
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11673
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11674
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11675
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 11676
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11677
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11678
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 11679
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 11680
            //LT
            tb22 = t0.w<0.0;
            //Instruction 11681
            //MOV
            t0.y = (-t0.w);
            //Instruction 11682
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 11683
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 11684
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 11685
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 11686
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 11687
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 11688
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 11689
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11690
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11691
            //MUL
            t24 = t24 * t4.x;
            //Instruction 11692
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 11693
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 11694
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 11695
        //ENDIF
        }
        //Instruction 11696
    //ENDIF
    }
    //Instruction 11697
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 11698
    //SQRT
    t22 = sqrt(t22);
    //Instruction 11699
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11700
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 11701
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 11702
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 11703
    //NE
    tb3 = t23!=0.0;
    //Instruction 11704
    //LOG
    t10 = log2(t23);
    //Instruction 11705
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 11706
    //EXP
    t10 = exp2(t10);
    //Instruction 11707
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 11708
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11709
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11710
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 11711
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 11712
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11713
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 11714
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11715
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 11716
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 11717
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 11718
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11719
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 11720
    //MUL
    t23 = t23 * t3.x;
    //Instruction 11721
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 11722
    //MOV
    t3.y = t2.y;
    //Instruction 11723
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 11724
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 11725
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 11726
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 11727
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 11728
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 11729
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 11730
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 11731
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 11732
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 11733
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 11734
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 11735
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 11736
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 11737
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 11738
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 11739
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 11740
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 11741
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 11742
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 11743
    //MAD
    t2.xyz = t2.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 11744
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 11745
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 11746
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 11747
    //MAD
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    //Instruction 11748
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 11749
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 11750
    //MUL
    t2.xyz = vec3(t22) * t2.xyz;
    //Instruction 11751
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 11752
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 11753
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 11754
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 11755
    //MUL
    t16_27 = t2.y * t2.y;
    //Instruction 11756
    //MAD
    t16_27 = t2.x * t2.x + (-t16_27);
    //Instruction 11757
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 11758
    //ADD
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 11759
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 11760
    //ADD
    t4 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 11761
    //MUL
    t5 = t3 * t3;
    //Instruction 11762
    //MAD
    t5 = t0 * t0 + t5;
    //Instruction 11763
    //MAD
    t5 = t4 * t4 + t5;
    //Instruction 11764
    //MUL
    t3 = t2.yyyy * t3;
    //Instruction 11765
    //MAD
    t0 = t0 * t2.xxxx + t3;
    //Instruction 11766
    //MAD
    t0 = t4 * t2.zzzz + t0;
    //Instruction 11767
    //RSQ
    t3 = inversesqrt(t5);
    //Instruction 11768
    //MUL
    t0 = t0 * t3;
    //Instruction 11769
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 11770
    //MAD
    t3 = t5 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 11771
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 11772
    //MUL
    t0 = t0 * t3;
    //Instruction 11773
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 11774
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 11775
    //MAD
    t3.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 11776
    //MAD
    t3.xyz = unity_LightColor[3].xyz * t0.www + t3.xyz;
    //Instruction 11777
    //ADD
    t3.xyz = t3.xyz + t16_6.xyz;
    //Instruction 11778
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 11779
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 11780
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 11781
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 11782
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 11783
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 11784
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 11553
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 11554
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 11555
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 11556
    //LT
    tb0 = t10_1<0.0;
    //Instruction 11557
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 11558
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 11559
    //MOV
    t16_0.w = 1.0;
    //Instruction 11560
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 11561
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 11562
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 11563
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 11564
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 11565
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 11566
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11567
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 11568
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 11569
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 11570
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11571
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_15;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_15 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_12.x)
   + 
    (v_60.xyz * tmpvar_12.y)
  ) + (v_61.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_4;
  highp vec3 col_73;
  highp vec4 ndotl_74;
  highp vec4 lengthSq_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_58.z);
  lengthSq_75 = (tmpvar_76 * tmpvar_76);
  lengthSq_75 = (lengthSq_75 + (tmpvar_77 * tmpvar_77));
  lengthSq_75 = (lengthSq_75 + (tmpvar_78 * tmpvar_78));
  ndotl_74 = (tmpvar_76 * normal_72.x);
  ndotl_74 = (ndotl_74 + (tmpvar_77 * normal_72.y));
  ndotl_74 = (ndotl_74 + (tmpvar_78 * normal_72.z));
  highp vec4 tmpvar_79;
  tmpvar_79 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_74 * inversesqrt(lengthSq_75)));
  ndotl_74 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (tmpvar_79 * (1.0/((1.0 + 
    (lengthSq_75 * lightAttenSq_71)
  ))));
  col_73 = (lightColor0_67 * tmpvar_80.x);
  col_73 = (col_73 + (lightColor1_68 * tmpvar_80.y));
  col_73 = (col_73 + (lightColor2_69 * tmpvar_80.z));
  col_73 = (col_73 + (lightColor3_70 * tmpvar_80.w));
  tmpvar_7 = ((x2_65 + (unity_SHC.xyz * 
    ((normal_64.x * normal_64.x) - (normal_64.y * normal_64.y))
  )) + col_73);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 11808
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11809
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 11810
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 11811
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11812
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 11813
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 11814
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 11815
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 11816
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 11817
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 11818
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 11819
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 11820
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 11821
    //ADD
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 11822
    //MAD
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 11823
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 11824
    //FRC
    t2.x = fract(t2.x);
    //Instruction 11825
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 11826
    //MUL
    t9 = abs(t2.x) * abs(t2.x);
    //Instruction 11827
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 11828
    //MAD
    t2.x = t9 * t2.x + -0.500000;
    //Instruction 11829
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 11830
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 11831
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 11832
    //MOVC
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 11833
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 11834
    //IF
    if(tb23){
        //Instruction 11835
        //IF
        if(tb22){
            //Instruction 11836
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11837
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11838
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11839
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 11840
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 11841
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 11842
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11843
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11844
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11845
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11846
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 11847
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 11848
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 11849
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11850
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 11851
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 11852
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 11853
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11854
            //FRC
            t0 = fract(t0);
            //Instruction 11855
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11856
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 11857
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11858
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11859
            //ADD
            t0 = t0 + t0;
            //Instruction 11860
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 11861
            //LT
            tb23 = t5.w<0.0;
            //Instruction 11862
            //MOV
            t5.y = (-t5.w);
            //Instruction 11863
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11864
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 11865
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 11866
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 11867
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 11868
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 11869
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 11870
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11871
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11872
            //MUL
            t25 = t0.x * t25;
            //Instruction 11873
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 11874
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11875
            //MUL
            t23 = t23 * t24;
            //Instruction 11876
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 11877
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 11878
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11879
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11880
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11881
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11882
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11883
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11884
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11885
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11886
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11887
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11888
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11889
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 11890
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11891
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 11892
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 11893
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11894
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11895
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 11896
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11897
        //ELSE
        } else {
            //Instruction 11898
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11899
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 11900
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11901
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 11902
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 11903
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 11904
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 11905
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11906
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 11907
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 11908
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11909
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11910
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11911
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 11912
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11913
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11914
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 11915
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 11916
            //LT
            tb22 = t0.w<0.0;
            //Instruction 11917
            //MOV
            t0.y = (-t0.w);
            //Instruction 11918
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 11919
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 11920
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 11921
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 11922
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 11923
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 11924
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 11925
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11926
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11927
            //MUL
            t24 = t24 * t4.x;
            //Instruction 11928
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 11929
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 11930
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 11931
        //ENDIF
        }
        //Instruction 11932
    //ENDIF
    }
    //Instruction 11933
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 11934
    //SQRT
    t22 = sqrt(t22);
    //Instruction 11935
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11936
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 11937
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 11938
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 11939
    //NE
    tb3 = t23!=0.0;
    //Instruction 11940
    //LOG
    t10 = log2(t23);
    //Instruction 11941
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 11942
    //EXP
    t10 = exp2(t10);
    //Instruction 11943
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 11944
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11945
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11946
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 11947
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 11948
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11949
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 11950
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11951
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 11952
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 11953
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 11954
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11955
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 11956
    //MUL
    t23 = t23 * t3.x;
    //Instruction 11957
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 11958
    //MOV
    t3.y = t2.y;
    //Instruction 11959
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 11960
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 11961
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 11962
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 11963
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 11964
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 11965
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 11966
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 11967
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 11968
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 11969
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 11970
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 11971
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 11972
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 11973
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 11974
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 11975
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 11976
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 11977
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 11978
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 11979
    //MAD
    t2.xyz = t2.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 11980
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 11981
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 11982
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 11983
    //MAD
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    //Instruction 11984
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 11985
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 11986
    //MUL
    t2.xyz = vec3(t22) * t2.xyz;
    //Instruction 11987
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 11988
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 11989
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 11990
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 11991
    //MUL
    t16_27 = t2.y * t2.y;
    //Instruction 11992
    //MAD
    t16_27 = t2.x * t2.x + (-t16_27);
    //Instruction 11993
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 11994
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 11995
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 11996
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 11997
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 11998
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 11999
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 12000
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 12001
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 12002
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 12003
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 12004
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 12005
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 12006
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 12007
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 11785
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 11786
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 11787
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 11788
    //LT
    tb0 = t10_1<0.0;
    //Instruction 11789
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 11790
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 11791
    //MOV
    t16_0.w = 1.0;
    //Instruction 11792
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 11793
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 11794
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 11795
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 11796
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 11797
    //SAMPLE_C_LZ
    vec3 txVec27 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec27, 0.0);
    //Instruction 11798
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 11799
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 11800
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 11801
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 11802
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11803
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 11804
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 11805
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 11806
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11807
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_15;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_15 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_12.x)
   + 
    (v_60.xyz * tmpvar_12.y)
  ) + (v_61.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_4;
  highp vec3 col_73;
  highp vec4 ndotl_74;
  highp vec4 lengthSq_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_58.z);
  lengthSq_75 = (tmpvar_76 * tmpvar_76);
  lengthSq_75 = (lengthSq_75 + (tmpvar_77 * tmpvar_77));
  lengthSq_75 = (lengthSq_75 + (tmpvar_78 * tmpvar_78));
  ndotl_74 = (tmpvar_76 * normal_72.x);
  ndotl_74 = (ndotl_74 + (tmpvar_77 * normal_72.y));
  ndotl_74 = (ndotl_74 + (tmpvar_78 * normal_72.z));
  highp vec4 tmpvar_79;
  tmpvar_79 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_74 * inversesqrt(lengthSq_75)));
  ndotl_74 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (tmpvar_79 * (1.0/((1.0 + 
    (lengthSq_75 * lightAttenSq_71)
  ))));
  col_73 = (lightColor0_67 * tmpvar_80.x);
  col_73 = (col_73 + (lightColor1_68 * tmpvar_80.y));
  col_73 = (col_73 + (lightColor2_69 * tmpvar_80.z));
  col_73 = (col_73 + (lightColor3_70 * tmpvar_80.w));
  tmpvar_7 = ((x2_65 + (unity_SHC.xyz * 
    ((normal_64.x * normal_64.x) - (normal_64.y * normal_64.y))
  )) + col_73);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 11712
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11713
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 11714
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 11715
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11716
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 11717
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 11718
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 11719
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 11720
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 11721
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 11722
    //EQ
    tb25 = t16_0.x==5.000000;
    //Instruction 11723
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 11724
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 11725
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 11726
    //MAD
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 11727
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 11728
    //FRC
    t2.x = fract(t2.x);
    //Instruction 11729
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 11730
    //MUL
    t10 = abs(t2.x) * abs(t2.x);
    //Instruction 11731
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 11732
    //MAD
    t2.x = t10 * t2.x + -0.500000;
    //Instruction 11733
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 11734
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 11735
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 11736
    //MOVC
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 11737
    //GE
    tb26 = t16_0.x>=3.000000;
    //Instruction 11738
    //IF
    if(tb26){
        //Instruction 11739
        //IF
        if(tb25){
            //Instruction 11740
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11741
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 11742
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 11743
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 11744
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 11745
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 11746
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11747
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11748
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11749
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 11750
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 11751
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 11752
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 11753
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11754
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 11755
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 11756
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 11757
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11758
            //FRC
            t0 = fract(t0);
            //Instruction 11759
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11760
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 11761
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11762
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11763
            //ADD
            t0 = t0 + t0;
            //Instruction 11764
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 11765
            //LT
            tb26 = t5.w<0.0;
            //Instruction 11766
            //MOV
            t5.y = (-t5.w);
            //Instruction 11767
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 11768
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 11769
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 11770
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 11771
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 11772
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 11773
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 11774
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11775
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11776
            //MUL
            t28 = t0.x * t28;
            //Instruction 11777
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 11778
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 11779
            //MUL
            t26 = t26 * t27;
            //Instruction 11780
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 11781
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 11782
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11783
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 11784
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 11785
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 11786
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 11787
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 11788
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 11789
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 11790
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 11791
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 11792
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 11793
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 11794
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 11795
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 11796
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 11797
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 11798
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 11799
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 11800
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 11801
        //ELSE
        } else {
            //Instruction 11802
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11803
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 11804
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11805
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 11806
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 11807
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 11808
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 11809
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11810
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 11811
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 11812
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 11813
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 11814
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11815
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 11816
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 11817
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 11818
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 11819
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 11820
            //LT
            tb25 = t0.w<0.0;
            //Instruction 11821
            //MOV
            t0.y = (-t0.w);
            //Instruction 11822
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 11823
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 11824
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 11825
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 11826
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 11827
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 11828
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 11829
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 11830
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 11831
            //MUL
            t27 = t27 * t4.x;
            //Instruction 11832
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 11833
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 11834
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 11835
        //ENDIF
        }
        //Instruction 11836
    //ENDIF
    }
    //Instruction 11837
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 11838
    //SQRT
    t25 = sqrt(t25);
    //Instruction 11839
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 11840
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 11841
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 11842
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 11843
    //NE
    tb3 = t26!=0.0;
    //Instruction 11844
    //LOG
    t11 = log2(t26);
    //Instruction 11845
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 11846
    //EXP
    t11 = exp2(t11);
    //Instruction 11847
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 11848
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 11849
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 11850
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 11851
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 11852
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 11853
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 11854
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 11855
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 11856
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 11857
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 11858
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 11859
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 11860
    //MUL
    t26 = t26 * t3.x;
    //Instruction 11861
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 11862
    //MOV
    t3.y = t2.y;
    //Instruction 11863
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 11864
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 11865
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 11866
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 11867
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 11868
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 11869
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 11870
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 11871
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 11872
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 11873
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 11874
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 11875
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 11876
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 11877
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 11878
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 11879
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 11880
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 11881
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 11882
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 11883
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 11884
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 11885
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 11886
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 11887
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 11888
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 11889
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 11890
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 11891
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 11892
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 11893
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 11894
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 11895
    //MUL
    t16_30 = t3.y * t3.y;
    //Instruction 11896
    //MAD
    t16_30 = t3.x * t3.x + (-t16_30);
    //Instruction 11897
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    //Instruction 11898
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 11899
    //ADD
    t4 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 11900
    //ADD
    t5 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 11901
    //MUL
    t7 = t4 * t4;
    //Instruction 11902
    //MAD
    t7 = t0 * t0 + t7;
    //Instruction 11903
    //MAD
    t7 = t5 * t5 + t7;
    //Instruction 11904
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 11905
    //MAD
    t0 = t0 * t3.xxxx + t4;
    //Instruction 11906
    //MAD
    t0 = t5 * t3.zzzz + t0;
    //Instruction 11907
    //RSQ
    t4 = inversesqrt(t7);
    //Instruction 11908
    //MUL
    t0 = t0 * t4;
    //Instruction 11909
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 11910
    //MAD
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 11911
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 11912
    //MUL
    t0 = t0 * t4;
    //Instruction 11913
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 11914
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 11915
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 11916
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 11917
    //ADD
    t4.xyz = t4.xyz + t16_6.xyz;
    //Instruction 11918
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 11919
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 11920
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 11921
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 11922
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 11923
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 11924
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 11925
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 11926
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 11927
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 11928
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 11929
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 11930
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 11931
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 11932
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 11933
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 11689
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 11690
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 11691
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 11692
    //LT
    tb0 = t10_1<0.0;
    //Instruction 11693
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 11694
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 11695
    //MOV
    t16_0.w = 1.0;
    //Instruction 11696
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 11697
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 11698
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 11699
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 11700
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 11701
    //SAMPLE_C_LZ
    vec3 txVec32 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec32, 0.0);
    //Instruction 11702
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 11703
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 11704
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 11705
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 11706
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11707
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 11708
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 11709
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 11710
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11711
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_4;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 11932
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11933
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 11934
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 11935
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 11936
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 11937
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 11938
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 11939
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 11940
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 11941
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 11942
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 11943
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11944
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 11945
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 11946
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 11947
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 11948
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 11949
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 11950
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 11951
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 11952
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 11953
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 11954
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 11955
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 11956
    //FRC
    t3.x = fract(t3.x);
    //Instruction 11957
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 11958
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 11959
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 11960
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 11961
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 11962
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 11963
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 11964
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 11965
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 11966
    //IF
    if(tb27){
        //Instruction 11967
        //IF
        if(tb25){
            //Instruction 11968
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 11969
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 11970
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 11971
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 11972
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 11973
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 11974
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 11975
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 11976
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 11977
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 11978
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 11979
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 11980
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 11981
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 11982
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 11983
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 11984
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 11985
            //FRC
            t2 = fract(t2);
            //Instruction 11986
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 11987
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 11988
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 11989
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 11990
            //ADD
            t2 = t2 + t2;
            //Instruction 11991
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 11992
            //LT
            tb27 = t6.w<0.0;
            //Instruction 11993
            //MOV
            t6.y = (-t6.w);
            //Instruction 11994
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 11995
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 11996
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 11997
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 11998
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 11999
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 12000
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 12001
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12002
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12003
            //MUL
            t29 = t2.x * t29;
            //Instruction 12004
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 12005
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12006
            //MUL
            t27 = t27 * t28;
            //Instruction 12007
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 12008
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12009
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12010
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12011
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12012
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12013
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12014
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12015
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12016
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12017
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12018
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12019
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 12020
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 12021
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12022
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 12023
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 12024
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12025
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12026
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 12027
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12028
        //ELSE
        } else {
            //Instruction 12029
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12030
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12031
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12032
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12033
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 12034
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 12035
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12036
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12037
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 12038
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12039
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12040
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12041
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12042
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12043
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12044
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12045
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 12046
            //LT
            tb0 = t2.w<0.0;
            //Instruction 12047
            //MOV
            t2.y = (-t2.w);
            //Instruction 12048
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 12049
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 12050
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 12051
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 12052
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 12053
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 12054
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 12055
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12056
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12057
            //MUL
            t27 = t27 * t5.x;
            //Instruction 12058
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 12059
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 12060
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12061
        //ENDIF
        }
        //Instruction 12062
    //ENDIF
    }
    //Instruction 12063
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 12064
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 12065
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12066
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 12067
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 12068
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 12069
    //NE
    tb27 = t25!=0.0;
    //Instruction 12070
    //LOG
    t4.x = log2(t25);
    //Instruction 12071
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12072
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12073
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 12074
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12075
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12076
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12077
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12078
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12079
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12080
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12081
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12082
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12083
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 12084
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12085
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 12086
    //MUL
    t25 = t25 * t27;
    //Instruction 12087
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 12088
    //MOV
    t4.y = t3.y;
    //Instruction 12089
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 12090
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 12091
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 12092
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 12093
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 12094
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 12095
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 12096
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 12097
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 12098
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 12099
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 12100
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 12101
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 12102
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 12103
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 12104
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 12105
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 12106
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 12107
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 12108
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 12109
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 12110
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 12111
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 12112
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 12113
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 12114
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 12115
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 12116
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 12117
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 12118
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 12119
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 12120
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 12121
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 12122
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 12123
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 12124
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 12125
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 12126
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 12127
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 12128
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 11904
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 11905
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 11906
    //LT
    tb15 = t10_1<0.0;
    //Instruction 11907
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 11908
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 11909
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 11910
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 11911
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 11912
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 11913
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 11914
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 11915
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 11916
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 11917
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 11918
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 11919
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 11920
    //MOV
    t16_0.w = 1.0;
    //Instruction 11921
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 11922
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 11923
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 11924
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 11925
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 11926
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11927
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 11928
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 11929
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 11930
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11931
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * tmpvar_14.x)
   + 
    (v_61.xyz * tmpvar_14.y)
  ) + (v_62.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_63;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_4;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  highp vec3 lightColor0_68;
  lightColor0_68 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_69;
  lightColor1_69 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_70;
  lightColor2_70 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_71;
  lightColor3_71 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_72;
  lightAttenSq_72 = unity_4LightAtten0;
  highp vec3 normal_73;
  normal_73 = worldNormal_4;
  highp vec3 col_74;
  highp vec4 ndotl_75;
  highp vec4 lengthSq_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_59.z);
  lengthSq_76 = (tmpvar_77 * tmpvar_77);
  lengthSq_76 = (lengthSq_76 + (tmpvar_78 * tmpvar_78));
  lengthSq_76 = (lengthSq_76 + (tmpvar_79 * tmpvar_79));
  ndotl_75 = (tmpvar_77 * normal_73.x);
  ndotl_75 = (ndotl_75 + (tmpvar_78 * normal_73.y));
  ndotl_75 = (ndotl_75 + (tmpvar_79 * normal_73.z));
  highp vec4 tmpvar_80;
  tmpvar_80 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_75 * inversesqrt(lengthSq_76)));
  ndotl_75 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (tmpvar_80 * (1.0/((1.0 + 
    (lengthSq_76 * lightAttenSq_72)
  ))));
  col_74 = (lightColor0_68 * tmpvar_81.x);
  col_74 = (col_74 + (lightColor1_69 * tmpvar_81.y));
  col_74 = (col_74 + (lightColor2_70 * tmpvar_81.z));
  col_74 = (col_74 + (lightColor3_71 * tmpvar_81.w));
  tmpvar_7 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + col_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 12157
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12158
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 12159
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 12160
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 12161
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 12162
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 12163
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 12164
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 12165
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 12166
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 12167
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 12168
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12169
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 12170
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 12171
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 12172
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 12173
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 12174
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 12175
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 12176
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 12177
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 12178
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 12179
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 12180
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 12181
    //FRC
    t3.x = fract(t3.x);
    //Instruction 12182
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 12183
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 12184
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 12185
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 12186
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 12187
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 12188
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 12189
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 12190
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 12191
    //IF
    if(tb27){
        //Instruction 12192
        //IF
        if(tb25){
            //Instruction 12193
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12194
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12195
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12196
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 12197
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 12198
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 12199
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12200
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12201
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12202
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12203
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 12204
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 12205
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12206
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 12207
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 12208
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 12209
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12210
            //FRC
            t2 = fract(t2);
            //Instruction 12211
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12212
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 12213
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12214
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12215
            //ADD
            t2 = t2 + t2;
            //Instruction 12216
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 12217
            //LT
            tb27 = t6.w<0.0;
            //Instruction 12218
            //MOV
            t6.y = (-t6.w);
            //Instruction 12219
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12220
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 12221
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 12222
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 12223
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 12224
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 12225
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 12226
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12227
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12228
            //MUL
            t29 = t2.x * t29;
            //Instruction 12229
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 12230
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12231
            //MUL
            t27 = t27 * t28;
            //Instruction 12232
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 12233
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12234
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12235
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12236
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12237
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12238
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12239
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12240
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12241
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12242
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12243
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12244
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 12245
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 12246
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12247
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 12248
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 12249
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12250
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12251
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 12252
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12253
        //ELSE
        } else {
            //Instruction 12254
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12255
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12256
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12257
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12258
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 12259
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 12260
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12261
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12262
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 12263
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12264
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12265
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12266
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12267
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12268
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12269
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12270
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 12271
            //LT
            tb0 = t2.w<0.0;
            //Instruction 12272
            //MOV
            t2.y = (-t2.w);
            //Instruction 12273
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 12274
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 12275
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 12276
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 12277
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 12278
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 12279
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 12280
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12281
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12282
            //MUL
            t27 = t27 * t5.x;
            //Instruction 12283
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 12284
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 12285
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12286
        //ENDIF
        }
        //Instruction 12287
    //ENDIF
    }
    //Instruction 12288
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 12289
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 12290
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12291
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 12292
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 12293
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 12294
    //NE
    tb27 = t25!=0.0;
    //Instruction 12295
    //LOG
    t4.x = log2(t25);
    //Instruction 12296
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12297
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12298
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 12299
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12300
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12301
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12302
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12303
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12304
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12305
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12306
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12307
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12308
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 12309
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12310
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 12311
    //MUL
    t25 = t25 * t27;
    //Instruction 12312
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 12313
    //MOV
    t4.y = t3.y;
    //Instruction 12314
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 12315
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 12316
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 12317
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 12318
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 12319
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 12320
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 12321
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 12322
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 12323
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 12324
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 12325
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 12326
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 12327
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 12328
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 12329
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 12330
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 12331
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 12332
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 12333
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 12334
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 12335
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 12336
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 12337
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 12338
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 12339
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 12340
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 12341
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 12342
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 12343
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 12344
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 12345
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 12346
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 12347
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 12348
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 12349
    //ADD
    t2 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 12350
    //ADD
    t4 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 12351
    //ADD
    t5 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 12352
    //MUL
    t6 = t4 * t4;
    //Instruction 12353
    //MAD
    t6 = t2 * t2 + t6;
    //Instruction 12354
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 12355
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 12356
    //MAD
    t2 = t2 * t3.xxxx + t4;
    //Instruction 12357
    //MAD
    t2 = t5 * t3.zzzz + t2;
    //Instruction 12358
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 12359
    //MUL
    t2 = t2 * t4;
    //Instruction 12360
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 12361
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 12362
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 12363
    //MUL
    t2 = t2 * t4;
    //Instruction 12364
    //MUL
    t4.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 12365
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t2.xxx + t4.xyz;
    //Instruction 12366
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t2.zzz + t4.xyz;
    //Instruction 12367
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t2.www + t4.xyz;
    //Instruction 12368
    //ADD
    t4.xyz = t4.xyz + t16_7.xyz;
    //Instruction 12369
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 12370
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 12371
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 12372
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 12373
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 12374
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 12375
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 12129
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 12130
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12131
    //LT
    tb15 = t10_1<0.0;
    //Instruction 12132
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 12133
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 12134
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 12135
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 12136
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 12137
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 12138
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 12139
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 12140
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 12141
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 12142
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 12143
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 12144
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 12145
    //MOV
    t16_0.w = 1.0;
    //Instruction 12146
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 12147
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 12148
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 12149
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 12150
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 12151
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12152
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 12153
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 12154
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12155
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12156
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_64;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_4;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_4;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_7 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 12408
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12409
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 12410
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 12411
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 12412
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 12413
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 12414
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 12415
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 12416
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 12417
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 12418
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 12419
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12420
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 12421
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 12422
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 12423
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 12424
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 12425
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 12426
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 12427
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 12428
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 12429
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 12430
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 12431
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 12432
    //FRC
    t3.x = fract(t3.x);
    //Instruction 12433
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 12434
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 12435
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 12436
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 12437
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 12438
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 12439
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 12440
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 12441
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 12442
    //IF
    if(tb27){
        //Instruction 12443
        //IF
        if(tb25){
            //Instruction 12444
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12445
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12446
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12447
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 12448
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 12449
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 12450
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12451
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12452
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12453
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12454
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 12455
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 12456
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12457
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 12458
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 12459
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 12460
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12461
            //FRC
            t2 = fract(t2);
            //Instruction 12462
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12463
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 12464
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12465
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12466
            //ADD
            t2 = t2 + t2;
            //Instruction 12467
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 12468
            //LT
            tb27 = t6.w<0.0;
            //Instruction 12469
            //MOV
            t6.y = (-t6.w);
            //Instruction 12470
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12471
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 12472
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 12473
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 12474
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 12475
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 12476
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 12477
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12478
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12479
            //MUL
            t29 = t2.x * t29;
            //Instruction 12480
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 12481
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12482
            //MUL
            t27 = t27 * t28;
            //Instruction 12483
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 12484
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12485
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12486
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12487
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12488
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12489
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12490
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12491
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12492
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12493
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12494
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12495
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 12496
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 12497
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12498
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 12499
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 12500
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12501
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12502
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 12503
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12504
        //ELSE
        } else {
            //Instruction 12505
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12506
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12507
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12508
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12509
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 12510
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 12511
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12512
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12513
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 12514
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12515
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12516
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12517
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12518
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12519
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12520
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12521
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 12522
            //LT
            tb0 = t2.w<0.0;
            //Instruction 12523
            //MOV
            t2.y = (-t2.w);
            //Instruction 12524
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 12525
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 12526
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 12527
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 12528
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 12529
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 12530
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 12531
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12532
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12533
            //MUL
            t27 = t27 * t5.x;
            //Instruction 12534
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 12535
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 12536
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12537
        //ENDIF
        }
        //Instruction 12538
    //ENDIF
    }
    //Instruction 12539
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 12540
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 12541
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12542
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 12543
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 12544
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 12545
    //NE
    tb27 = t25!=0.0;
    //Instruction 12546
    //LOG
    t4.x = log2(t25);
    //Instruction 12547
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12548
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12549
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 12550
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12551
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12552
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12553
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12554
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12555
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12556
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12557
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12558
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12559
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 12560
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12561
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 12562
    //MUL
    t25 = t25 * t27;
    //Instruction 12563
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 12564
    //MOV
    t4.y = t3.y;
    //Instruction 12565
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 12566
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 12567
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 12568
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 12569
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 12570
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 12571
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 12572
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 12573
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 12574
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 12575
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 12576
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 12577
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 12578
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 12579
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 12580
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 12581
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 12582
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 12583
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 12584
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 12585
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 12586
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 12587
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 12588
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 12589
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 12590
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 12591
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 12592
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 12593
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 12594
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 12595
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 12596
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 12597
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 12598
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 12599
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 12600
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 12601
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 12602
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 12603
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 12604
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 12605
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 12606
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 12607
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 12608
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 12609
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 12610
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 12611
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 12612
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 12613
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 12376
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 12377
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12378
    //LT
    tb15 = t10_1<0.0;
    //Instruction 12379
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 12380
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 12381
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 12382
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 12383
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 12384
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 12385
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 12386
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 12387
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 12388
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 12389
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 12390
    //SAMPLE_C_LZ
    vec3 txVec44 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec44, 0.0);
    //Instruction 12391
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 12392
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 12393
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 12394
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 12395
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 12396
    //MOV
    t16_0.w = 1.0;
    //Instruction 12397
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 12398
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 12399
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 12400
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 12401
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 12402
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12403
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 12404
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 12405
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12406
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12407
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_64;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_4;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_4;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_7 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 12040
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12041
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 12042
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 12043
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 12044
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 12045
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 12046
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 12047
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 12048
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 12049
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 12050
    //LT
    tb9 = 0.0<t16_2.x;
    //Instruction 12051
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12052
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 12053
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 12054
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 12055
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 12056
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 12057
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 12058
    //EQ
    tb28 = t16_2.x==5.000000;
    //Instruction 12059
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 12060
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 12061
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 12062
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 12063
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 12064
    //FRC
    t3.x = fract(t3.x);
    //Instruction 12065
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 12066
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 12067
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 12068
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 12069
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 12070
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 12071
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 12072
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 12073
    //GE
    tb30 = t16_2.x>=3.000000;
    //Instruction 12074
    //IF
    if(tb30){
        //Instruction 12075
        //IF
        if(tb28){
            //Instruction 12076
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12077
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12078
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12079
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 12080
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 12081
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 12082
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12083
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12084
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12085
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12086
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 12087
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 12088
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12089
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 12090
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 12091
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 12092
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12093
            //FRC
            t2 = fract(t2);
            //Instruction 12094
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12095
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 12096
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12097
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12098
            //ADD
            t2 = t2 + t2;
            //Instruction 12099
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 12100
            //LT
            tb30 = t6.w<0.0;
            //Instruction 12101
            //MOV
            t6.y = (-t6.w);
            //Instruction 12102
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12103
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 12104
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 12105
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 12106
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 12107
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 12108
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 12109
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12110
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12111
            //MUL
            t32 = t2.x * t32;
            //Instruction 12112
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 12113
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12114
            //MUL
            t30 = t30 * t31;
            //Instruction 12115
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 12116
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12117
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12118
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12119
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12120
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12121
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12122
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12123
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12124
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12125
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12126
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12127
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 12128
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 12129
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12130
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 12131
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 12132
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12133
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12134
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 12135
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12136
        //ELSE
        } else {
            //Instruction 12137
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12138
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12139
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12140
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12141
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 12142
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 12143
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12144
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12145
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 12146
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12147
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12148
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12149
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12150
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12151
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12152
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12153
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 12154
            //LT
            tb0 = t2.w<0.0;
            //Instruction 12155
            //MOV
            t2.y = (-t2.w);
            //Instruction 12156
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 12157
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 12158
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 12159
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 12160
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 12161
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 12162
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 12163
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12164
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12165
            //MUL
            t30 = t30 * t5.x;
            //Instruction 12166
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 12167
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 12168
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12169
        //ENDIF
        }
        //Instruction 12170
    //ENDIF
    }
    //Instruction 12171
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 12172
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 12173
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12174
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 12175
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 12176
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 12177
    //NE
    tb30 = t28!=0.0;
    //Instruction 12178
    //LOG
    t4.x = log2(t28);
    //Instruction 12179
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12180
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12181
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 12182
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12183
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12184
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12185
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12186
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12187
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12188
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12189
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12190
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12191
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 12192
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12193
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 12194
    //MUL
    t28 = t28 * t30;
    //Instruction 12195
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 12196
    //MOV
    t4.y = t3.y;
    //Instruction 12197
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 12198
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 12199
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 12200
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 12201
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 12202
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 12203
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 12204
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 12205
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 12206
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 12207
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 12208
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 12209
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 12210
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 12211
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 12212
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 12213
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 12214
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 12215
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 12216
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 12217
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 12218
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 12219
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 12220
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 12221
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 12222
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 12223
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 12224
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 12225
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 12226
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 12227
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 12228
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 12229
    //MUL
    t16_34 = t4.y * t4.y;
    //Instruction 12230
    //MAD
    t16_34 = t4.x * t4.x + (-t16_34);
    //Instruction 12231
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_34) + t16_7.xyz;
    //Instruction 12232
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 12233
    //ADD
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 12234
    //ADD
    t6 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 12235
    //MUL
    t8 = t5 * t5;
    //Instruction 12236
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 12237
    //MAD
    t8 = t6 * t6 + t8;
    //Instruction 12238
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 12239
    //MAD
    t2 = t2 * t4.xxxx + t5;
    //Instruction 12240
    //MAD
    t2 = t6 * t4.zzzz + t2;
    //Instruction 12241
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 12242
    //MUL
    t2 = t2 * t5;
    //Instruction 12243
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 12244
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 12245
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 12246
    //MUL
    t2 = t2 * t5;
    //Instruction 12247
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 12248
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 12249
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 12250
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 12251
    //ADD
    t5.xyz = t5.xyz + t16_7.xyz;
    //Instruction 12252
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 12253
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 12254
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 12255
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 12256
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 12257
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 12258
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 12259
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 12260
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 12261
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 12262
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 12263
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 12264
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 12265
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 12266
    //MOV
    vs_TEXCOORD4.xyz = t5.xyz;
    //Instruction 12267
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 12008
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 12009
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12010
    //LT
    tb15 = t10_1<0.0;
    //Instruction 12011
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 12012
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 12013
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 12014
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 12015
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 12016
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 12017
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 12018
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 12019
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 12020
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 12021
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 12022
    //SAMPLE_C_LZ
    vec3 txVec28 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec28, 0.0);
    //Instruction 12023
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 12024
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 12025
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 12026
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 12027
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 12028
    //MOV
    t16_0.w = 1.0;
    //Instruction 12029
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 12030
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 12031
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 12032
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 12033
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 12034
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12035
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 12036
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 12037
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12038
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12039
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * tmpvar_14.x)
   + 
    (v_61.xyz * tmpvar_14.y)
  ) + (v_62.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_5.x;
  tmpvar_68.y = worldBinormal_4.x;
  tmpvar_68.z = worldNormal_6.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.y;
  tmpvar_69.y = worldBinormal_4.y;
  tmpvar_69.z = worldNormal_6.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.z;
  tmpvar_70.y = worldBinormal_4.z;
  tmpvar_70.z = worldNormal_6.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_6;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 11966
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 11967
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 11968
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 11969
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 11970
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 11971
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 11972
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 11973
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 11974
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 11975
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 11976
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 11977
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 11978
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 11979
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 11980
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 11981
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 11982
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 11983
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 11984
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 11985
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 11986
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 11987
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 11988
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 11989
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 11990
    //FRC
    t3.x = fract(t3.x);
    //Instruction 11991
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 11992
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 11993
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 11994
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 11995
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 11996
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 11997
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 11998
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 11999
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 12000
    //IF
    if(tb30){
        //Instruction 12001
        //IF
        if(tb28){
            //Instruction 12002
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12003
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12004
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12005
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 12006
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 12007
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 12008
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12009
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12010
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12011
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12012
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 12013
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 12014
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12015
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 12016
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 12017
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 12018
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12019
            //FRC
            t2 = fract(t2);
            //Instruction 12020
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12021
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 12022
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12023
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12024
            //ADD
            t2 = t2 + t2;
            //Instruction 12025
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 12026
            //LT
            tb30 = t6.w<0.0;
            //Instruction 12027
            //MOV
            t6.y = (-t6.w);
            //Instruction 12028
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12029
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 12030
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 12031
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 12032
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 12033
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 12034
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 12035
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12036
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12037
            //MUL
            t32 = t2.x * t32;
            //Instruction 12038
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 12039
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12040
            //MUL
            t30 = t30 * t31;
            //Instruction 12041
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 12042
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12043
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12044
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12045
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12046
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12047
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12048
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12049
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12050
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12051
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12052
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12053
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 12054
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 12055
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12056
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 12057
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 12058
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12059
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12060
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 12061
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12062
        //ELSE
        } else {
            //Instruction 12063
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12064
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12065
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12066
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12067
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 12068
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 12069
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12070
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12071
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 12072
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12073
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12074
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12075
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12076
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12077
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12078
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12079
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 12080
            //LT
            tb0 = t2.w<0.0;
            //Instruction 12081
            //MOV
            t2.y = (-t2.w);
            //Instruction 12082
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 12083
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 12084
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 12085
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 12086
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 12087
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 12088
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 12089
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12090
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12091
            //MUL
            t30 = t30 * t5.x;
            //Instruction 12092
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 12093
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 12094
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12095
        //ENDIF
        }
        //Instruction 12096
    //ENDIF
    }
    //Instruction 12097
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 12098
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 12099
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12100
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 12101
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 12102
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 12103
    //NE
    tb30 = t28!=0.0;
    //Instruction 12104
    //LOG
    t4.x = log2(t28);
    //Instruction 12105
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12106
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12107
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 12108
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12109
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12110
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12111
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12112
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12113
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12114
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12115
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12116
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12117
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 12118
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12119
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 12120
    //MUL
    t28 = t28 * t30;
    //Instruction 12121
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 12122
    //MOV
    t4.y = t3.y;
    //Instruction 12123
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 12124
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 12125
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 12126
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 12127
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 12128
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 12129
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 12130
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 12131
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 12132
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 12133
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 12134
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 12135
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 12136
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 12137
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 12138
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 12139
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 12140
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 12141
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 12142
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 12143
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 12144
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 12145
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 12146
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 12147
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 12148
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 12149
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 12150
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 12151
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 12152
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 12153
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 12154
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 12155
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 12156
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 12157
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 12158
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 12159
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 12160
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 12161
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 12162
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 12163
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 12164
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 12165
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 12166
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 12167
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 12168
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 12169
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 12170
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 12171
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 12172
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 12173
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 12174
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 12175
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 12176
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 12177
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 12178
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 12179
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 12180
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 12181
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 12182
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 11934
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 11935
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 11936
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 11937
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 11938
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 11939
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 11940
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 11941
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 11942
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 11943
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 11944
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 11945
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 11946
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 11947
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 11948
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 11949
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 11950
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 11951
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 11952
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 11953
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 11954
    //MOV
    t0.w = 1.0;
    //Instruction 11955
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 11956
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 11957
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 11958
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 11959
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 11960
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 11961
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 11962
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 11963
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 11964
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 11965
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  highp vec3 lightColor0_76;
  lightColor0_76 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_77;
  lightColor1_77 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_78;
  lightColor2_78 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_79;
  lightColor3_79 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_80;
  lightAttenSq_80 = unity_4LightAtten0;
  highp vec3 normal_81;
  normal_81 = worldNormal_6;
  highp vec3 col_82;
  highp vec4 ndotl_83;
  highp vec4 lengthSq_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_84 = (tmpvar_85 * tmpvar_85);
  lengthSq_84 = (lengthSq_84 + (tmpvar_86 * tmpvar_86));
  lengthSq_84 = (lengthSq_84 + (tmpvar_87 * tmpvar_87));
  ndotl_83 = (tmpvar_85 * normal_81.x);
  ndotl_83 = (ndotl_83 + (tmpvar_86 * normal_81.y));
  ndotl_83 = (ndotl_83 + (tmpvar_87 * normal_81.z));
  highp vec4 tmpvar_88;
  tmpvar_88 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_83 * inversesqrt(lengthSq_84)));
  ndotl_83 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (tmpvar_88 * (1.0/((1.0 + 
    (lengthSq_84 * lightAttenSq_80)
  ))));
  col_82 = (lightColor0_76 * tmpvar_89.x);
  col_82 = (col_82 + (lightColor1_77 * tmpvar_89.y));
  col_82 = (col_82 + (lightColor2_78 * tmpvar_89.z));
  col_82 = (col_82 + (lightColor3_79 * tmpvar_89.w));
  tmpvar_8 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + col_82);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp float t13;
highp vec2 t20;
highp vec2 t24;
highp vec2 t26;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
highp float t35;
mediump float t16_38;
void main()
{
    //Instruction 12215
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 12216
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 12217
    //ADD
    t10.x = t0.x + _Object2World[3].z;
    //Instruction 12218
    //ADD
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 12219
    //ADD
    t10.y = t20.x + in_NORMAL0.x;
    //Instruction 12220
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 12221
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 12222
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 12223
    //MUL
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 12224
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 12225
    //LT
    tb10 = 0.0<t16_2;
    //Instruction 12226
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 12227
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 12228
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 12229
    //DP3
    t20.x = dot(t3.xyz, t3.xyz);
    //Instruction 12230
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 12231
    //MUL
    t20.xy = t20.xx * t3.xz;
    //Instruction 12232
    //AND
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, bvec2(tb10));
    //Instruction 12233
    //EQ
    tb31 = t16_2==5.000000;
    //Instruction 12234
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 12235
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 12236
    //ADD
    t13 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 12237
    //MAD
    t3.x = t13 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 12238
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 12239
    //FRC
    t3.x = fract(t3.x);
    //Instruction 12240
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 12241
    //MUL
    t13 = abs(t3.x) * abs(t3.x);
    //Instruction 12242
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 12243
    //MAD
    t3.x = t13 * t3.x + -0.500000;
    //Instruction 12244
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 12245
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 12246
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 12247
    //MOVC
    t3.xyz = (bool(tb31)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 12248
    //GE
    tb33 = t16_2>=3.000000;
    //Instruction 12249
    //IF
    if(tb33){
        //Instruction 12250
        //IF
        if(tb31){
            //Instruction 12251
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 12252
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 12253
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 12254
            //DP3
            t31 = dot(t4.xyz, t4.xyz);
            //Instruction 12255
            //RSQ
            t31 = inversesqrt(t31);
            //Instruction 12256
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 12257
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12258
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12259
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12260
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 12261
            //ADD
            t31 = t0.x + _ST_WindBranch.x;
            //Instruction 12262
            //ADD
            t2.x = t31 + in_TEXCOORD0.w;
            //Instruction 12263
            //MAD
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12264
            //MUL
            t33 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 12265
            //MUL
            t2.z = t33 * 0.500000;
            //Instruction 12266
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 12267
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 12268
            //FRC
            t2 = fract(t2);
            //Instruction 12269
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 12270
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 12271
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 12272
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 12273
            //ADD
            t2 = t2 + t2;
            //Instruction 12274
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 12275
            //LT
            tb33 = t6.w<0.0;
            //Instruction 12276
            //MOV
            t6.y = (-t6.w);
            //Instruction 12277
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 12278
            //MOVC
            t6.xy = (bool(tb33)) ? t6.xy : t6.zw;
            //Instruction 12279
            //MAD
            t33 = (-t2.y) * t2.z + t6.x;
            //Instruction 12280
            //MAD
            t33 = t6.y * t33 + t6.w;
            //Instruction 12281
            //ADD
            t34 = (-t33) + t6.x;
            //Instruction 12282
            //MAD
            t33 = t6.y * t34 + t33;
            //Instruction 12283
            //MUL
            t33 = t33 * _ST_WindBranchTwitch.x;
            //Instruction 12284
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12285
            //ADD
            t35 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12286
            //MUL
            t35 = t2.x * t35;
            //Instruction 12287
            //MAD
            t33 = t33 * t34 + t35;
            //Instruction 12288
            //MAD
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 12289
            //MUL
            t33 = t33 * t34;
            //Instruction 12290
            //MUL
            t5.xyz = vec3(t33) * t5.xyz;
            //Instruction 12291
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12292
            //MAD
            t6.x = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12293
            //MUL
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 12294
            //MAD
            t6.y = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 12295
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 12296
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 12297
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 12298
            //MUL
            t26.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 12299
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 12300
            //MAD
            t6.xy = t26.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 12301
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 12302
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 12303
            //MUL
            t31 = t6.x * t6.y;
            //Instruction 12304
            //MAD
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            //Instruction 12305
            //MUL
            t33 = t2.w * _ST_WindVector.w;
            //Instruction 12306
            //MAD
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            //Instruction 12307
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 12308
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 12309
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 12310
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 12311
        //ELSE
        } else {
            //Instruction 12312
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 12313
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 12314
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12315
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 12316
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 12317
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 12318
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 12319
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 12320
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 12321
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 12322
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 12323
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 12324
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 12325
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 12326
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 12327
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 12328
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 12329
            //LT
            tb0 = t2.w<0.0;
            //Instruction 12330
            //MOV
            t2.y = (-t2.w);
            //Instruction 12331
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 12332
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 12333
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 12334
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 12335
            //ADD
            t31 = (-t0.x) + t6.x;
            //Instruction 12336
            //MAD
            t0.x = t6.y * t31 + t0.x;
            //Instruction 12337
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 12338
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 12339
            //ADD
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 12340
            //MUL
            t33 = t33 * t5.x;
            //Instruction 12341
            //MAD
            t0.x = t0.x * t31 + t33;
            //Instruction 12342
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 12343
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 12344
        //ENDIF
        }
        //Instruction 12345
    //ENDIF
    }
    //Instruction 12346
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 12347
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 12348
    //DIV
    t31 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 12349
    //MAD
    t31 = (-t31) * 0.250000 + t3.y;
    //Instruction 12350
    //MAX
    t31 = max(t31, 0.0);
    //Instruction 12351
    //MUL
    t31 = t31 * _ST_WindGlobal.z;
    //Instruction 12352
    //NE
    tb33 = t31!=0.0;
    //Instruction 12353
    //LOG
    t4.x = log2(t31);
    //Instruction 12354
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 12355
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 12356
    //MOVC
    t31 = (tb33) ? t4.x : t31;
    //Instruction 12357
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 12358
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 12359
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 12360
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 12361
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 12362
    //MUL
    t24.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 12363
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 12364
    //MAD
    t4.xy = t24.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 12365
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 12366
    //MAD
    t33 = t4.y * t4.y + t4.x;
    //Instruction 12367
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 12368
    //MAD
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    //Instruction 12369
    //MUL
    t31 = t31 * t33;
    //Instruction 12370
    //MAD
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    //Instruction 12371
    //MOV
    t4.y = t3.y;
    //Instruction 12372
    //DP3
    t20.x = dot(t4.xyz, t4.xyz);
    //Instruction 12373
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 12374
    //MUL
    t4.xyz = t20.xxx * t4.xyz;
    //Instruction 12375
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 12376
    //MOVC
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    //Instruction 12377
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 12378
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 12379
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 12380
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 12381
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 12382
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 12383
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 12384
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 12385
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 12386
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 12387
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 12388
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 12389
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 12390
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 12391
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 12392
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 12393
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 12394
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 12395
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 12396
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 12397
    //DP3
    t30 = dot(t2.xyw, t2.xyw);
    //Instruction 12398
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 12399
    //MUL
    t2 = vec4(t30) * t2;
    //Instruction 12400
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 12401
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 12402
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 12403
    //DP3
    t30 = dot(t3.xyz, t3.xyz);
    //Instruction 12404
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 12405
    //MUL
    t3.xyz = vec3(t30) * t3.xyz;
    //Instruction 12406
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 12407
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 12408
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 12409
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 12410
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 12411
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 12412
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 12413
    //MUL
    t16_38 = t2.y * t2.y;
    //Instruction 12414
    //MAD
    t16_38 = t2.x * t2.x + (-t16_38);
    //Instruction 12415
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_38) + t16_8.xyz;
    //Instruction 12416
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 12417
    //ADD
    t6 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 12418
    //ADD
    t7 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 12419
    //MUL
    t9 = t6 * t6;
    //Instruction 12420
    //MAD
    t9 = t5 * t5 + t9;
    //Instruction 12421
    //MAD
    t9 = t7 * t7 + t9;
    //Instruction 12422
    //MUL
    t6 = t2.yyyy * t6;
    //Instruction 12423
    //MAD
    t5 = t5 * t2.xxxx + t6;
    //Instruction 12424
    //MAD
    t5 = t7 * t2.wwww + t5;
    //Instruction 12425
    //RSQ
    t6 = inversesqrt(t9);
    //Instruction 12426
    //MUL
    t5 = t5 * t6;
    //Instruction 12427
    //MAX
    t5 = max(t5, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 12428
    //MAD
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 12429
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 12430
    //MUL
    t5 = t5 * t6;
    //Instruction 12431
    //MUL
    t6.xyz = t5.yyy * unity_LightColor[1].xyz;
    //Instruction 12432
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t5.xxx + t6.xyz;
    //Instruction 12433
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t5.zzz + t6.xyz;
    //Instruction 12434
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t5.www + t6.xyz;
    //Instruction 12435
    //ADD
    t6.xyz = t6.xyz + t16_8.xyz;
    //Instruction 12436
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 12437
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 12438
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 12439
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 12440
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 12441
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 12442
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 12443
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 12444
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 12445
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 12446
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 12447
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 12448
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 12449
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 12450
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 12451
    //MOV
    vs_TEXCOORD5.xyz = t6.xyz;
    //Instruction 12452
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 12183
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 12184
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 12185
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 12186
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 12187
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 12188
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 12189
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 12190
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 12191
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 12192
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 12193
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 12194
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 12195
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 12196
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 12197
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 12198
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 12199
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 12200
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 12201
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 12202
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 12203
    //MOV
    t0.w = 1.0;
    //Instruction 12204
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 12205
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 12206
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 12207
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 12208
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 12209
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 12210
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 12211
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 12212
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 12213
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 12214
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fTime_30;
      highp float fAdherenceScale_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_30 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (fTime_30 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_30 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((fTime_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_34 = (fOscillation_34 * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((fTime_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((tmpvar_41.x * tmpvar_41.y) * (
        (tmpvar_41.x * tmpvar_41.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp float fTime_44;
      highp vec3 vWindVector_45;
      vWindVector_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_44 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_46;
      highp float fOscillation_47;
      fOscillation_47 = 1.0;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (fTime_44 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((fTime_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      fOscillation_47 = (((
        mix (mix (tmpvar_52, fTarget_49, fAmount_48), fTarget_49, fAmount_48)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_43 = (vPos_28 + ((vWindVector_45 * fOscillation_47) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_19;
    highp float fMoveAmount_54;
    highp float fAdjust_55;
    highp float fLength_56;
    fLength_56 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_57;
    tmpvar_57 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_55 = tmpvar_57;
    if ((tmpvar_57 != 0.0)) {
      fAdjust_55 = pow (tmpvar_57, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_58.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_59;
    highp vec4 tmpvar_60;
    tmpvar_60 = abs(((
      fract((tmpvar_58 + 0.5))
     * 2.0) - 1.0));
    tmpvar_59 = (((
      (tmpvar_60 * tmpvar_60)
     * 
      (3.0 - (2.0 * tmpvar_60))
    ) - 0.5) * 2.0);
    fMoveAmount_54 = ((_ST_WindGlobal.y * (tmpvar_59.x + 
      (tmpvar_59.y * tmpvar_59.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_54 = (fMoveAmount_54 * fAdjust_55);
    vPos_53.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_54));
    vPos_53 = (normalize(vPos_53) * fLength_56);
    FinalPosition_19 = vPos_53;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_16.x)
   + 
    (v_63.xyz * tmpvar_16.y)
  ) + (v_64.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.x;
  tmpvar_70.y = worldBinormal_4.x;
  tmpvar_70.z = worldNormal_6.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.y;
  tmpvar_71.y = worldBinormal_4.y;
  tmpvar_71.z = worldNormal_6.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_5.z;
  tmpvar_72.y = worldBinormal_4.z;
  tmpvar_72.z = worldNormal_6.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_6;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_6;
  highp vec3 col_83;
  highp vec4 ndotl_84;
  highp vec4 lengthSq_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_61.z);
  lengthSq_85 = (tmpvar_86 * tmpvar_86);
  lengthSq_85 = (lengthSq_85 + (tmpvar_87 * tmpvar_87));
  lengthSq_85 = (lengthSq_85 + (tmpvar_88 * tmpvar_88));
  ndotl_84 = (tmpvar_86 * normal_82.x);
  ndotl_84 = (ndotl_84 + (tmpvar_87 * normal_82.y));
  ndotl_84 = (ndotl_84 + (tmpvar_88 * normal_82.z));
  highp vec4 tmpvar_89;
  tmpvar_89 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_84 * inversesqrt(lengthSq_85)));
  ndotl_84 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (tmpvar_89 * (1.0/((1.0 + 
    (lengthSq_85 * lightAttenSq_81)
  ))));
  col_83 = (lightColor0_77 * tmpvar_90.x);
  col_83 = (col_83 + (lightColor1_78 * tmpvar_90.y));
  col_83 = (col_83 + (lightColor2_79 * tmpvar_90.z));
  col_83 = (col_83 + (lightColor3_80 * tmpvar_90.w));
  tmpvar_8 = ((x2_75 + (unity_SHC.xyz * 
    ((normal_74.x * normal_74.x) - (normal_74.y * normal_74.y))
  )) + col_83);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_7